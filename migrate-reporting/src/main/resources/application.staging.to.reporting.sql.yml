sql:
  migrate:
    entities:
      # ------------ grade  -------------------------------------------------------------------
      grade:
        sql:
          update:  >-
              UPDATE grade rg
                JOIN staging_grade sg ON sg.id = rg.id
              SET
                rg.sequence = sg.sequence,
                rg.code = sg.code;

          insert: >-
              INSERT INTO grade ( id, code, sequence)
                SELECT
                  sg.id,
                  sg.code,
                  sg.sequence
                FROM staging_grade sg
                  LEFT JOIN grade rg ON rg.id = sg.id
                WHERE rg.id IS NULL;
          delete: >-
              DELETE rg FROM grade rg
                WHERE NOT EXISTS(SELECT sg.id FROM staging_grade sg WHERE sg.id = rg.id);

      # ------------ ELAS  -------------------------------------------------------------------
      elas:
        sql:
          update:  >-
              UPDATE elas re
                 JOIN staging_elas se ON se.id = re.id
              SET
               re.code = se.code;

          insert:  >-
              INSERT INTO elas (id, code)
                SELECT
                  se.id,
                  se.code
                FROM staging_elas se
                LEFT JOIN elas re ON re.id = se.id
                WHERE re.id IS NULL;

          delete: >-
             DELETE re FROM elas re
              WHERE NOT EXISTS(SELECT se.id FROM staging_elas se WHERE se.id = re.id);

      # ------------ language  -------------------------------------------------------------------
      language:
        sql:
          update:  >-
            UPDATE language rl JOIN staging_language sl ON sl.id = rl.id
            SET
              rl.code = sl.code,
              rl.altcode = sl.altcode,
              rl.display_order = sl.display_order,
              rl.name = sl.name;

          insert:  >-
            INSERT INTO language (id, code, altcode, display_order, name)
              SELECT sl.id, sl.code, sl.altcode, sl.display_order, sl.name
              FROM staging_language sl LEFT JOIN language rl ON rl.id = sl.id
              WHERE rl.id IS NULL;

          delete: >-
            DELETE rl FROM language rl
              WHERE NOT EXISTS(SELECT sl.id FROM staging_language sl WHERE sl.id = rl.id);

      # ------------ completeness  -------------------------------------------------------------------
      completeness:
        sql:
          update:  >-
              UPDATE completeness rc
                 JOIN staging_completeness sc ON sc.id = rc.id
              SET
               rc.code = sc.code;

          insert:  >-
              INSERT INTO completeness (id, code)
                SELECT
                  sc.id,
                  sc.code
                FROM staging_completeness sc
                LEFT JOIN completeness rc ON rc.id = sc.id
                WHERE rc.id IS NULL;

          delete: >-
             DELETE rc FROM completeness rc
              WHERE NOT EXISTS(SELECT sc.id FROM staging_completeness sc WHERE sc.id = rc.id);

      # ------------ Administration Condition ---------------------------------------------------------
      administration_condition:
        sql:
          update:  >-
            UPDATE administration_condition rac
              JOIN staging_administration_condition sac ON sac.id = rac.id
            SET
              rac.code = sac.code;

          insert:  >-
            INSERT INTO administration_condition (id, code)
              SELECT
                sac.id,
                sac.code
              FROM staging_administration_condition sac
                LEFT JOIN administration_condition rac ON rac.id = sac.id
              WHERE rac.id IS NULL;

          delete: >-
            DELETE rac FROM administration_condition rac
              WHERE NOT EXISTS(SELECT sac.id FROM staging_administration_condition sac WHERE sac.id = rac.id);

      # ------------ Ethnicity ------------------------------------------------------------------------
      ethnicity:
        sql:
          update:  >-
            UPDATE ethnicity re
              JOIN staging_ethnicity se ON se.id = re.id
            SET
              re.code = se.code;

          insert:  >-
            INSERT INTO ethnicity (id, code)
              SELECT
                se.id,
                se.code
              FROM staging_ethnicity se
                LEFT JOIN ethnicity re ON re.id = se.id
              WHERE re.id IS NULL;
          delete: >-
              DELETE re FROM ethnicity re
                WHERE NOT EXISTS(SELECT se.id FROM staging_ethnicity se WHERE se.id = re.id);

      # ------------ Gender ------------------------------------------------------------------------
      gender:
        sql:
          update:  >-
            UPDATE gender rg
              JOIN staging_gender sg ON sg.id = rg.id
            SET
              rg.code = sg.code;

          insert:  >-
            INSERT INTO gender (id, code)
              SELECT
                sg.id,
                sg.code
              FROM staging_gender sg
                LEFT JOIN gender rg ON rg.id = sg.id
              WHERE rg.id IS NULL;

          delete: >-
             DELETE rg FROM gender rg
              WHERE NOT EXISTS(SELECT sg.id FROM staging_gender sg WHERE sg.id = rg.id);

      # ------------ Accommodation ------------------------------------------------------------------------
      accommodation:
        sql:
          update:  >-
            UPDATE accommodation ra
              JOIN staging_accommodation sa ON sa.id = ra.id
            SET
              ra.code = sa.code;

          insert:  >-
            INSERT INTO accommodation (id, code)
              SELECT
                sa.id,
                sa.code
              FROM staging_accommodation sa
                LEFT JOIN accommodation ra ON ra.id = sa.id
              WHERE ra.id IS NULL;

          delete: >-
             DELETE ra FROM accommodation ra
              WHERE NOT EXISTS(SELECT sa.id FROM staging_accommodation sa WHERE sa.id = ra.id);

      # ------------ Military Connected ---------------------------------------------------------
      military_connected:
        sql:
          update:  >-
            UPDATE military_connected rmc
              JOIN staging_military_connected smc ON smc.id = rmc.id
            SET
              rmc.code = smc.code;

          insert:  >-
            INSERT INTO military_connected (id, code)
              SELECT
                smc.id,
                smc.code
              FROM staging_military_connected smc
                LEFT JOIN military_connected rmc ON rmc.id = smc.id
              WHERE rmc.id IS NULL;

          delete: >-
            DELETE rmc FROM military_connected rmc
              WHERE NOT EXISTS(SELECT smc.id FROM staging_military_connected smc WHERE smc.id = rmc.id);

      # ------------ School Year ------------------------------------------------------------------------
      school_year:
        sql:
          update:  >-
            SELECT 1;

          insert:  >-
            INSERT INTO school_year (year)
              SELECT
                sy.year
              FROM staging_school_year sy
                LEFT JOIN school_year ry ON ry.year = sy.year
              WHERE ry.year IS NULL;

          delete: >-
             DELETE ry FROM school_year ry
              WHERE NOT EXISTS(SELECT sy.year FROM staging_school_year sy WHERE sy.year = ry.year);

      # ------------ Subject ------------------------------------------------------------------------
      # we do not support subject delete
      subject:
        sql:
          insert: >-
            INSERT INTO subject (id, code, updated, update_import_id, migrate_id)
              SELECT
                ss.id,
                ss.code,
                ss.updated,
                ss.update_import_id,
                ss.migrate_id
              FROM staging_subject ss
                LEFT JOIN subject rs ON rs.id = ss.id
               WHERE rs.id IS NULL;

          update: >-
            UPDATE subject rs
              JOIN staging_subject ss ON ss.id = rs.id
            SET
              rs.updated = ss.updated,
              rs.update_import_id = ss.update_import_id,
              rs.migrate_id = ss.migrate_id

      # ------------ subject_asmt_type ------------------------------------------------------------------------
      subject_asmt_type:
        sql:
          insert: >-
            INSERT INTO subject_asmt_type (asmt_type_id, subject_id, performance_level_count, performance_level_standard_cutoff, claim_score_performance_level_count, alt_score_performance_level_count, target_report, printed_report, trait_report)
              SELECT
                ssat.asmt_type_id,
                ssat.subject_id,
                ssas1.performance_level_count,
                ssas1.performance_level_standard_cutoff,
                ssas2.performance_level_count AS alt_score_performance_level_count,
                ssas3.performance_level_count AS claim_score_performance_level_count,
                ssat.target_report,
                ssat.printed_report,
                ssat.trait_report
              FROM staging_subject_asmt_type ssat
                LEFT JOIN subject_asmt_type rsat ON (rsat.subject_id = ssat.subject_id AND rsat.asmt_type_id = ssat.asmt_type_id)
                LEFT JOIN staging_subject_asmt_scoring ssas1 ON ssas1.subject_id = ssat.subject_id AND ssas1.asmt_type_id = ssat.asmt_type_id AND ssas1.score_type_id=1
                LEFT JOIN staging_subject_asmt_scoring ssas2 ON ssas2.subject_id = ssat.subject_id AND ssas2.asmt_type_id = ssat.asmt_type_id AND ssas2.score_type_id=2
                LEFT JOIN staging_subject_asmt_scoring ssas3 ON ssas3.subject_id = ssat.subject_id AND ssas3.asmt_type_id = ssat.asmt_type_id AND ssas3.score_type_id=3
              WHERE rsat.subject_id IS NULL;

          update: >-
           UPDATE subject_asmt_type rsat
             JOIN staging_subject_asmt_type ssat ON (rsat.subject_id = ssat.subject_id AND rsat.asmt_type_id = ssat.asmt_type_id)
             LEFT JOIN staging_subject_asmt_scoring ssas1 ON ssas1.subject_id = ssat.subject_id AND ssas1.asmt_type_id = ssat.asmt_type_id AND ssas1.score_type_id=1
             LEFT JOIN staging_subject_asmt_scoring ssas2 ON ssas2.subject_id = ssat.subject_id AND ssas2.asmt_type_id = ssat.asmt_type_id AND ssas2.score_type_id=2
             LEFT JOIN staging_subject_asmt_scoring ssas3 ON ssas3.subject_id = ssat.subject_id AND ssas3.asmt_type_id = ssat.asmt_type_id AND ssas3.score_type_id=3
           SET
             rsat.performance_level_count = ssas1.performance_level_count,
             rsat.performance_level_standard_cutoff = ssas1.performance_level_standard_cutoff,
             rsat.alt_score_performance_level_count = ssas2.performance_level_count,
             rsat.claim_score_performance_level_count = ssas3.performance_level_count,
             rsat.target_report = ssat.target_report,
             rsat.printed_report = ssat.printed_report,
             rsat.trait_report = ssat.trait_report

          deleteAsPartOfParentUpdate: >-
            DELETE rsat FROM subject_asmt_type rsat
              JOIN staging_subject ss ON ss.id = rsat.subject_id
              WHERE NOT EXISTS (SELECT 1 FROM staging_subject_asmt_type ssat WHERE ssat.asmt_type_id = rsat.asmt_type_id and ssat.subject_id = rsat.subject_id);

      # ---------------- subject_asmt_scoring  -----------------------------------------------
      # subject_asmt_scoring gets denormalized, extracting just the performance level counts for overall, alt, claim
      # (see subject_asmt_type above)

      # ---------------- subject_score  -----------------------------------------------
      subject_score:
        sql:
          insert: >-
            INSERT INTO subject_score (id, subject_id, asmt_type_id, score_type_id, code, display_order, data_order)
              SELECT
                sscs.id,
                sscs.subject_id,
                sscs.asmt_type_id,
                sscs.score_type_id,
                sscs.code,
                sscs.display_order,
                sscs.data_order
              FROM staging_subject_score sscs
                LEFT JOIN subject_score rscs ON rscs.id = sscs.id
              WHERE rscs.id IS NULL;

          # NOTE: updating data order is only possible when there are no associated assessments or exams loaded
          # It is assumed that ingest manages this rule
          update: >-
            UPDATE subject_score rscs
              JOIN staging_subject_score sscs ON rscs.id = sscs.id
            SET
              rscs.data_order = sscs.data_order,
              rscs.display_order = sscs.display_order

          deleteAsPartOfParentUpdate: >-
            DELETE rscs FROM subject_score rscs
              JOIN staging_subject ss ON ss.id = rscs.subject_id
            WHERE NOT EXISTS (SELECT 1 FROM staging_subject_score sscc WHERE sscc.id = rscs.id);

      # ---------------- subject_trait  -----------------------------------------------
      subject_trait:
        sql:
          insert: >-
            INSERT INTO subject_trait (id, subject_id, purpose, category, max_score)
              SELECT
                sst.id,
                sst.subject_id,
                sst.purpose,
                sst.category,
                sst.max_score
              FROM staging_subject_trait sst
                LEFT JOIN subject_trait rst ON rst.id = sst.id
              WHERE rst.id IS NULL;

          update: >-
            UPDATE subject_trait rst
              JOIN staging_subject_trait sst ON rst.id = sst.id
            SET
              rst.purpose = sst.purpose,
              rst.category = sst.category,
              rst.max_score = sst.max_score

          deleteAsPartOfParentUpdate: >-
            DELETE rst FROM subject_trait rst
              JOIN staging_subject ss ON ss.id = rst.subject_id
            WHERE NOT EXISTS (SELECT 1 FROM staging_subject_trait sst WHERE sst.id = rst.id);

    # ---------------- subject_translation  -----------------------------------------------
      subject_translation:
        sql:
          insert: >-
            INSERT INTO subject_translation (subject_id, label_code, label)
              SELECT
                sst.subject_id,
                sst.label_code,
                sst.label
                FROM staging_subject_translation sst
                LEFT JOIN subject_translation rst
                  ON (rst.subject_id = sst.subject_id AND rst.label_code = sst.label_code)
              WHERE rst.subject_id IS NULL;

          update: >-
            UPDATE subject_translation rst
            JOIN staging_subject_translation sst ON (rst.subject_id = sst.subject_id AND rst.label_code = sst.label_code)
              SET
                rst.label = sst.label

          deleteAsPartOfParentUpdate: >-
            DELETE rst FROM subject_translation rst
              JOIN staging_subject ss ON ss.id = rst.subject_id
            WHERE NOT EXISTS( SELECT 1 FROM staging_subject_translation sst WHERE rst.subject_id = sst.subject_id AND rst.label_code = sst.label_code);

      # ------------ Claim ------------------------------------------------------------------------
      claim:
        sql:
          insert:  >-
            INSERT INTO claim (id, subject_id, code)
              SELECT
                sc.id,
                sc.subject_id,
                sc.code
              FROM staging_claim sc
                LEFT JOIN claim rc ON rc.id = sc.id
              WHERE rc.id IS NULL;

          deleteAsPartOfParentUpdate: >-
              DELETE rc FROM claim rc
              JOIN staging_subject ss ON ss.id = rc.subject_id
                WHERE NOT EXISTS(SELECT 1 FROM staging_claim WHERE id = rc.id);

      # ------------ Target ---------------------------------------------------------------------------
      target:
        sql:
          insert:  >-
            INSERT INTO target (id, natural_id, claim_id)
              SELECT
                st.id,
                st.natural_id,
                st.claim_id
              FROM staging_target st
                LEFT JOIN target rt ON rt.id = st.id
              WHERE rt.id IS NULL;

          deleteAsPartOfParentUpdate:
            DELETE rt FROM target rt
            JOIN claim rc ON rc.id = rt.claim_id
            JOIN staging_subject ss ON ss.id = rc.subject_id
              WHERE NOT EXISTS(SELECT 1 FROM staging_target st WHERE st.id = rt.id);

      # ------------ Common Core Standard  ------------------------------------------------------------------------
      common_core_standard:
        sql:
          insert:  >-
            INSERT INTO common_core_standard (id, subject_id, natural_id)
               SELECT
                 sccs.id,
                 sccs.subject_id,
                 sccs.natural_id
               FROM staging_common_core_standard sccs
                 LEFT JOIN common_core_standard rccs ON rccs.id = sccs.id
               WHERE rccs.id IS NULL;

          deleteAsPartOfParentUpdate:
            DELETE rccs FROM common_core_standard rccs
              JOIN staging_subject ss ON ss.id = rccs.subject_id
               WHERE NOT EXISTS(SELECT 1 FROM staging_common_core_standard sccs WHERE sccs.id = rccs.id);

      # ------------ Depth of knowledge ---------------------------------------------------------------------------
      depth_of_knowledge:
        sql:
          update:  >-
            UPDATE depth_of_knowledge rdok
              JOIN staging_depth_of_knowledge sdok ON sdok.id = rdok.id
            SET
              rdok.reference = sdok.reference;

          insert:  >-
            INSERT INTO depth_of_knowledge (id, level, subject_id, reference)
              SELECT
                sdok.id,
                sdok.level,
                sdok.subject_id,
                sdok.reference
              FROM staging_depth_of_knowledge sdok
                LEFT JOIN depth_of_knowledge rdok ON rdok.id = sdok.id
              WHERE rdok.id IS NULL;

          deleteAsPartOfParentUpdate: >-
             DELETE rdok FROM depth_of_knowledge rdok
                JOIN staging_subject ss ON ss.id = rdok.subject_id
              WHERE NOT EXISTS(SELECT 1 FROM staging_depth_of_knowledge sdok WHERE sdok.id = rdok.id);;

      # ------------ Math Practice ---------------------------------------------------------------------------
      math_practice:
        sql:
          update:  >-
            UPDATE math_practice rmp
              JOIN staging_math_practice smp ON smp.practice = rmp.practice
            SET
              rmp.description = smp.description,
              rmp.code = smp.code;

          insert:  >-
            INSERT INTO math_practice (practice, description, code)
              SELECT
                smp.practice,
                smp.description,
                smp.code
              FROM staging_math_practice smp
                LEFT JOIN math_practice rmp ON rmp.practice = smp.practice
              WHERE rmp.practice IS NULL;

          delete: >-
            DELETE rmp FROM math_practice rmp
                WHERE NOT EXISTS(SELECT smp.practice FROM staging_math_practice smp WHERE smp.practice = rmp.practice);

      # ------------ accommodation_translation ------------------------------------------------------------------------
      accommodation_translation:
        sql:
          update:  >-
            UPDATE accommodation_translation rt
              JOIN staging_accommodation_translation st
                ON st.label_code = rt.label_code AND
                  st.language_code = rt.language_code
            SET
              rt.label = st.label;

          insert:  >-
            INSERT INTO accommodation_translation (label_code, language_code, label)
              SELECT
                st.label_code,
                st.language_code,
                st.label
              FROM staging_accommodation_translation st
                LEFT JOIN accommodation_translation rt
                  ON rt.label_code = st.label_code AND
                     rt.language_code = st.language_code
              WHERE rt.label_code IS NULL;

          delete: >-
             DELETE rt FROM accommodation_translation rt
                WHERE NOT EXISTS(
                  SELECT st.label_code, st.language_code
                    FROM staging_accommodation_translation st
                  WHERE
                    st.label_code = rt.label_code
                    AND st.language_code = rt.language_code);

      # ############################## Exams ####################################################################
      # ------------ exam_available_accommodation -------------------------------------------------------------------
      exam_available_accommodation:
        sql:
          insert: >-
            INSERT INTO exam_available_accommodation (exam_id, accommodation_id)
              SELECT
                s.exam_id,
                s.accommodation_id
              FROM staging_exam_available_accommodation s
                LEFT JOIN exam_available_accommodation r
                  ON (r.exam_id = s.exam_id AND r.accommodation_id = s.accommodation_id)
              WHERE r.exam_id IS NULL;

          deleteAsPartOfParentUpdate: >-
            DELETE r FROM exam_available_accommodation r
              WHERE
                  r.exam_id in (select se.id from staging_exam se where se.deleted = 0)
                  AND NOT EXISTS(
                    SELECT seac.exam_id
                      FROM staging_exam_available_accommodation seac
                    WHERE seac.exam_id = r.exam_id
                      AND seac.accommodation_id = r.accommodation_id);

          delete: >-
            DELETE reaa FROM exam_available_accommodation reaa
              JOIN staging_exam se ON se.id = reaa.exam_id
            WHERE se.deleted = 1;

      # ------------ exam_item -------------------------------------------------------------------
      exam_item:
        sql:
          insert: >-
            INSERT INTO exam_item (id, exam_id, item_id, score, score_status, position, response,
                                             trait_evidence_elaboration_score, trait_evidence_elaboration_score_status,
                                             trait_organization_purpose_score, trait_organization_purpose_score_status,
                                             trait_conventions_score, trait_conventions_score_status)
              SELECT
                si.id,
                si.exam_id,
                si.item_id,
                si.score,
                si.score_status,
                si.position,
                si.response,
                si.trait_evidence_elaboration_score,
                si.trait_evidence_elaboration_score_status,
                si.trait_organization_purpose_score,
                si.trait_organization_purpose_score_status,
                si.trait_conventions_score,
                si.trait_conventions_score_status
              FROM staging_exam_item si
                LEFT JOIN exam_item ri ON ri.id = si.id
              WHERE ri.id IS NULL;

          update: >-
            UPDATE exam_item ri
              JOIN staging_exam_item si ON ri.id = si.id
            SET
              ri.exam_id                             = si.exam_id,
              ri.item_id                                 = si.item_id,
              ri.score                                   = si.score,
              ri.score_status                            = si.score_status,
              ri.position                                = si.position,
              ri.response                                = si.response,
              ri.trait_evidence_elaboration_score        = si.trait_evidence_elaboration_score,
              ri.trait_evidence_elaboration_score_status = si.trait_evidence_elaboration_score_status,
              ri.trait_organization_purpose_score        = si.trait_organization_purpose_score,
              ri.trait_organization_purpose_score_status = si.trait_organization_purpose_score_status,
              ri.trait_conventions_score                 = si.trait_conventions_score,
              ri.trait_conventions_score_status          = si.trait_conventions_score_status,
              ri.trait_evidence_elaboration_score_status = si.trait_evidence_elaboration_score_status;

          deleteAsPartOfParentUpdate: >-
            DELETE ri FROM exam_item ri
              JOIN staging_exam se ON se.id = ri.exam_id
            WHERE
              se.deleted = 0 AND NOT EXISTS(SELECT sei.id FROM staging_exam_item sei WHERE sei.id = ri.id);

          delete: >-
            DELETE ri
              FROM exam_item ri JOIN staging_exam se ON se.id = ri.exam_id
            WHERE se.deleted = 1;

      # ------------ exam_target_score -------------------------------------------------------------------
      exam_target_score:
        sql:
          insert: >-
            INSERT INTO exam_target_score (id, exam_id, target_id, student_relative_residual_score, standard_met_relative_residual_score)
              SELECT
                sets.id,
                sets.exam_id,
                sets.target_id,
                sets.student_relative_residual_score,
                sets.standard_met_relative_residual_score
              FROM staging_exam_target_score sets
                LEFT JOIN exam_target_score rets ON rets.id = sets.id
              WHERE rets.id IS NULL;

          update: >-
            UPDATE exam_target_score rets
              JOIN staging_exam_target_score sets ON rets.id = sets.id
            SET
              rets.exam_id                                 = sets.exam_id,
              rets.target_id                               = sets.target_id,
              rets.student_relative_residual_score         = sets.student_relative_residual_score,
              rets.standard_met_relative_residual_score    = sets.standard_met_relative_residual_score;

          deleteAsPartOfParentUpdate: >-
            DELETE rets FROM exam_target_score rets
              JOIN staging_exam se ON se.id = rets.exam_id
            WHERE
              se.deleted = 0 AND NOT EXISTS(SELECT sets.id FROM staging_exam_target_score sets WHERE sets.id = rets.id);

          delete: >-
            DELETE rets
              FROM exam_target_score rets JOIN staging_exam se ON se.id = rets.exam_id
            WHERE se.deleted = 1;

      # ------------ exam_trait_score -------------------------------------------------------------------
      exam_trait_score:
        sql:
          insert: >-
            INSERT INTO exam_trait_score (id, exam_id, trait_id, score, condition_code)
              SELECT
                sets.id,
                sets.exam_id,
                sets.trait_id,
                sets.score,
                sets.condition_code
              FROM staging_exam_trait_score sets
                LEFT JOIN exam_trait_score rets ON rets.id = sets.id
              WHERE rets.id IS NULL;

          update: >-
            UPDATE exam_trait_score rets
              JOIN staging_exam_trait_score sets ON rets.id = sets.id
            SET
              rets.exam_id        = sets.exam_id,
              rets.trait_id       = sets.trait_id,
              rets.score          = sets.score,
              rets.condition_code = sets.condition_code

          deleteAsPartOfParentUpdate: >-
            DELETE rets FROM exam_trait_score rets
              JOIN staging_exam se ON se.id = rets.exam_id
            WHERE
              se.deleted = 0 AND NOT EXISTS(SELECT sets.id FROM staging_exam_trait_score sets WHERE sets.id = rets.id);

          delete: >-
            DELETE rets
             FROM exam_trait_score rets JOIN staging_exam se ON se.id = rets.exam_id
            WHERE se.deleted = 1;

      # ------------ exam -------------------------------------------------------------------
      exam:
        sql:
          insert: >-
            INSERT INTO exam (id, grade_id, grade_code, student_id, school_id, iep, lep, section504,
                              economic_disadvantage, migrant_status, eng_prof_lvl, t3_program_type,
                              language_code, prim_disability_type, type_id, school_year, asmt_id, asmt_version,
                              opportunity, elas_code, completeness_code,
                              administration_condition_code, military_connected_code,
                              session_id, performance_level, scale_score, scale_score_std_err,
                              update_import_id, completed_at, elas_start_at,
                              claim1_scale_score, claim1_scale_score_std_err, claim1_category,
                              claim2_scale_score, claim2_scale_score_std_err, claim2_category,
                              claim3_scale_score, claim3_scale_score_std_err, claim3_category,
                              claim4_scale_score, claim4_scale_score_std_err, claim4_category,
                              claim5_scale_score, claim5_scale_score_std_err, claim5_category,
                              claim6_scale_score, claim6_scale_score_std_err, claim6_category,
                              alt1_scale_score, alt1_scale_score_std_err, alt1_performance_level,
                              alt2_scale_score, alt2_scale_score_std_err, alt2_performance_level,
                              alt3_scale_score, alt3_scale_score_std_err, alt3_performance_level,
                              alt4_scale_score, alt4_scale_score_std_err, alt4_performance_level,
                              alt5_scale_score, alt5_scale_score_std_err, alt5_performance_level,
                              alt6_scale_score, alt6_scale_score_std_err, alt6_performance_level,
                              available_accommodation_codes, updated, migrate_id)
              SELECT
                se.id,
                se.grade_id,
                rg.code,
                se.student_id,
                se.school_id,
                se.iep,
                se.lep,
                se.section504,
                se.economic_disadvantage,
                se.migrant_status,
                se.eng_prof_lvl,
                se.t3_program_type,
                rl.code,
                se.prim_disability_type,
                se.type_id,
                se.school_year,
                se.asmt_id,
                se.asmt_version,
                se.opportunity,
                rel.code,
                rc.code,
                rac.code,
                rmc.code,
                se.session_id,
                se.performance_level,
                se.scale_score,
                se.scale_score_std_err,
                se.update_import_id,
                se.completed_at,
                se.elas_start_at,
                claim1.scale_score as claim1_scale_score,
                claim1.scale_score_std_err as claim1_scale_score_std_err,
                claim1.performance_level as claim1_category,
                claim2.scale_score as claim2_scale_score,
                claim2.scale_score_std_err as claim2_scale_score_std_err,
                claim2.performance_level as claim2_category,
                claim3.scale_score as claim3_scale_score,
                claim3.scale_score_std_err as claim3_scale_score_std_err,
                claim3.performance_level as claim3_category,
                claim4.scale_score as claim4_scale_score,
                claim4.scale_score_std_err as claim4_scale_score_std_err,
                claim4.performance_level as claim4_category,
                claim5.scale_score as claim5_scale_score,
                claim5.scale_score_std_err as claim5_scale_score_std_err,
                claim5.performance_level as claim5_category,
                claim6.scale_score as claim6_scale_score,
                claim6.scale_score_std_err as claim6_scale_score_std_err,
                claim6.performance_level as claim6_category,
                alt1.scale_score as alt1_scale_score,
                alt1.scale_score_std_err as alt1_scale_score_std_err,
                alt1.performance_level as alt1_performance_level,
                alt2.scale_score as alt2_scale_score,
                alt2.scale_score_std_err as alt2_scale_score_std_err,
                alt2.performance_level as alt2_performance_level,
                alt3.scale_score as alt3_scale_score,
                alt3.scale_score_std_err as alt3_scale_score_std_err,
                alt3.performance_level as alt3_performance_level,
                alt4.scale_score as alt4_scale_score,
                alt4.scale_score_std_err as alt4_scale_score_std_err,
                alt4.performance_level as alt4_performance_level,
                alt5.scale_score as alt5_scale_score,
                alt5.scale_score_std_err as alt5_scale_score_std_err,
                alt5.performance_level as alt5_performance_level,
                alt6.scale_score as alt6_scale_score,
                alt6.scale_score_std_err as alt6_scale_score_std_err,
                alt6.performance_level as alt6_performance_level,
                code.codes,
                se.updated,
                se.migrate_id
              FROM staging_exam se
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=1
                           ) AS claim1 ON claim1.exam_id = se.id
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=2
                           ) AS claim2 ON claim2.exam_id = se.id
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=3
                           ) AS claim3 ON claim3.exam_id = se.id
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=4
                          ) AS claim4 ON claim4.exam_id = se.id
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=5
                          ) AS claim5 ON claim5.exam_id = se.id
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=6
                          ) AS claim6 ON claim6.exam_id = se.id
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=1
                           ) AS alt1 ON alt1.exam_id = se.id
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=2
                           ) AS alt2 ON alt2.exam_id = se.id
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=3
                           ) AS alt3 ON alt3.exam_id = se.id
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=4
                           ) AS alt4 ON alt4.exam_id = se.id
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=5
                           ) AS alt5 ON alt5.exam_id = se.id
                LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                             FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=6
                           ) AS alt6 ON alt6.exam_id = se.id
                LEFT JOIN exam re ON re.id = se.id
                LEFT JOIN language rl ON rl.id = se.language_id
                LEFT JOIN elas rel ON rel.id = se.elas_id
                LEFT JOIN administration_condition rac ON rac.id = se.administration_condition_id
                LEFT JOIN military_connected rmc ON rmc.id = se.military_connected_id
                LEFT JOIN completeness rc ON rc.id = se.completeness_id
                JOIN grade rg ON rg.id = se.grade_id
                LEFT JOIN
                  (SELECT seaa.exam_id as exam_id, GROUP_CONCAT(ra.code ORDER BY ra.id SEPARATOR '|') AS codes
                    FROM staging_exam_available_accommodation seaa
                      JOIN accommodation ra ON ra.id = seaa.accommodation_id
                    GROUP BY seaa.exam_id
                  ) AS code ON code.exam_id = se.id
              WHERE re.id IS NULL AND se.deleted = 0;

          update: >-
            UPDATE exam re
              JOIN staging_exam se ON se.id = re.id
              LEFT JOIN language rl ON rl.id = se.language_id
              LEFT JOIN elas rel ON rel.id = se.elas_id
              LEFT JOIN completeness rc ON rc.id = se.completeness_id
              LEFT JOIN administration_condition rac ON rac.id = se.administration_condition_id
              LEFT JOIN military_connected rmc ON rmc.id = se.military_connected_id
              JOIN grade rg ON rg.id = se.grade_id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=1
                         ) AS claim1 ON claim1.exam_id = se.id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=2
                         ) AS claim2 ON claim2.exam_id = se.id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=3
                         ) AS claim3 ON claim3.exam_id = se.id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=4
                        ) AS claim4 ON claim4.exam_id = se.id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=5
                        ) AS claim5 ON claim5.exam_id = se.id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=3 AND m.data_order=6
                        ) AS claim6 ON claim6.exam_id = se.id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=1
                         ) AS alt1 ON alt1.exam_id = se.id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=2
                         ) AS alt2 ON alt2.exam_id = se.id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=3
                         ) AS alt3 ON alt3.exam_id = se.id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=4
                         ) AS alt4 ON alt4.exam_id = se.id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=5
                         ) AS alt5 ON alt5.exam_id = se.id
              LEFT JOIN (SELECT s.exam_id, s.scale_score, s.scale_score_std_err, s.performance_level
                           FROM staging_exam_score s JOIN subject_score m ON m.id = s.subject_score_id AND m.score_type_id=2 AND m.data_order=6
                         ) AS alt6 ON alt6.exam_id = se.id
              LEFT JOIN (SELECT seaa.exam_id as exam_id, GROUP_CONCAT(ra.code ORDER BY ra.id SEPARATOR '|') AS codes
                           FROM staging_exam_available_accommodation seaa
                             JOIN accommodation ra ON ra.id = seaa.accommodation_id
                           GROUP BY seaa.exam_id
                      ) AS code ON code.exam_id = se.id
            SET
              re.grade_id = se.grade_id,
              re.grade_code = rg.code,
              re.student_id = se.student_id,
              re.school_id = se.school_id,
              re.iep = se.iep,
              re.lep = se.lep,
              re.section504 = se.section504,
              re.economic_disadvantage = se.economic_disadvantage,
              re.migrant_status = se.migrant_status,
              re.eng_prof_lvl = se.eng_prof_lvl,
              re.t3_program_type = se.t3_program_type,
              re.prim_disability_type = se.prim_disability_type,
              re.type_id = se.type_id,
              re.school_year = se.school_year,
              re.asmt_id = se.asmt_id,
              re.asmt_version = se.asmt_version,
              re.opportunity = se.opportunity,
              re.session_id = se.session_id,
              re.performance_level = se.performance_level,
              re.scale_score = se.scale_score,
              re.scale_score_std_err = se.scale_score_std_err,
              re.completed_at = se.completed_at,
              re.elas_start_at = se.elas_start_at,
              re.update_import_id = se.update_import_id,
              re.claim1_scale_score = claim1.scale_score,
              re.claim1_scale_score_std_err = claim1.scale_score_std_err,
              re.claim1_category = claim1.performance_level,
              re.claim2_scale_score  = claim2.scale_score,
              re.claim2_scale_score_std_err = claim2.scale_score_std_err,
              re.claim2_category = claim2.performance_level,
              re.claim3_scale_score = claim3.scale_score,
              re.claim3_scale_score_std_err = claim3.scale_score_std_err,
              re.claim3_category = claim3.performance_level,
              re.claim4_scale_score = claim4.scale_score,
              re.claim4_scale_score_std_err = claim4.scale_score_std_err,
              re.claim4_category = claim4.performance_level,
              re.claim5_scale_score = claim5.scale_score,
              re.claim5_scale_score_std_err = claim5.scale_score_std_err,
              re.claim5_category = claim5.performance_level,
              re.claim6_scale_score = claim6.scale_score,
              re.claim6_scale_score_std_err = claim6.scale_score_std_err,
              re.claim6_category = claim6.performance_level,
              re.alt1_scale_score = alt1.scale_score,
              re.alt1_scale_score_std_err = alt1.scale_score_std_err,
              re.alt1_performance_level = alt1.performance_level,
              re.alt2_scale_score = alt2.scale_score,
              re.alt2_scale_score_std_err = alt2.scale_score_std_err,
              re.alt2_performance_level = alt2.performance_level,
              re.alt3_scale_score = alt3.scale_score,
              re.alt3_scale_score_std_err = alt3.scale_score_std_err,
              re.alt3_performance_level = alt3.performance_level,
              re.alt4_scale_score = alt4.scale_score,
              re.alt4_scale_score_std_err = alt4.scale_score_std_err,
              re.alt4_performance_level = alt4.performance_level,
              re.alt5_scale_score = alt5.scale_score,
              re.alt5_scale_score_std_err = alt5.scale_score_std_err,
              re.alt5_performance_level = alt5.performance_level,
              re.alt6_scale_score = alt6.scale_score,
              re.alt6_scale_score_std_err = alt6.scale_score_std_err,
              re.alt6_performance_level = alt6.performance_level,
              re.language_code = rl.code,
              re.elas_code = rel.code,
              re.completeness_code = rc.code,
              re.administration_condition_code = rac.code,
              re.military_connected_code = rmc.code,
              re.available_accommodation_codes = code.codes,
              re.updated = se.updated,
              re.migrate_id = se.migrate_id
            WHERE se.deleted = 0;

          delete: >-
            DELETE re FROM exam re
              JOIN staging_exam se on se.id = re.id
            WHERE se.deleted = 1;

      # ############## Student Group #######################################################################
      # ------------ student_group_membership --------------------------------------------------
      student_group_membership:
        sql:
          insert: >-
            INSERT INTO student_group_membership (student_group_id, student_id)
              SELECT
                ssgm.student_group_id,
                ssgm.student_id
              FROM staging_student_group_membership ssgm
                LEFT JOIN student_group_membership rsgm ON (rsgm.student_group_id = ssgm.student_group_id AND rsgm.student_id = ssgm.student_id)
              WHERE rsgm.student_group_id IS NULL;

          deleteAsPartOfParentUpdate: >-
            DELETE rsgm FROM student_group_membership rsgm
              JOIN staging_student_group ssg ON ssg.id = student_group_id
            WHERE ssg.deleted = 0
                  AND ssg.active = 1
                  AND NOT EXISTS(
                    SELECT ssgm.student_group_id FROM staging_student_group_membership ssgm
                        WHERE ssgm.student_group_id = rsgm.student_group_id AND ssgm.student_id = rsgm.student_id
                  );

          delete: >-
            DELETE rsgm from student_group_membership rsgm
             JOIN staging_student_group ssg on ssg.id = rsgm.student_group_id
            WHERE ssg.deleted = 1 or ssg.active = 0;

      # ------------ user_student_group --------------------------------------------------
      user_student_group:
        sql:
          insert: >-
            INSERT INTO user_student_group (student_group_id, user_login)
              SELECT
                susg.student_group_id,
                susg.user_login
              FROM staging_user_student_group susg
                LEFT JOIN user_student_group rusg ON (rusg.student_group_id = susg.student_group_id AND rusg.user_login = susg.user_login)
              WHERE rusg.student_group_id IS NULL;

          deleteAsPartOfParentUpdate: >-
            DELETE rsug FROM user_student_group rsug
               JOIN staging_student_group ssg ON ssg.id = rsug.student_group_id
            WHERE ssg.deleted = 0
                  AND ssg.active = 1
                  AND NOT EXISTS(
                    SELECT susg.student_group_id
                      FROM staging_user_student_group susg
                    WHERE
                      susg.student_group_id = rsug.student_group_id
                      AND susg.user_login = rsug.user_login
                  );

          delete: >-
            DELETE rusg from user_student_group rusg
             JOIN staging_student_group ssg ON ssg.id = rusg.student_group_id
            WHERE ssg.deleted = 1 or ssg.active = 0;

      # ------------ student_group --------------------------------------------------
      student_group:
        sql:
          insert: >-
            INSERT INTO student_group (id, name, school_id, school_year, subject_id, creator, created, update_import_id, updated, migrate_id)
              SELECT
                ssg.id,
                ssg.name,
                ssg.school_id,
                ssg.school_year,
                ssg.subject_id,
                ssg.creator,
                ssg.created,
                ssg.update_import_id,
                ssg.updated,
                ssg.migrate_id
              FROM staging_student_group ssg
                LEFT JOIN student_group rsg ON rsg.id = ssg.id
              WHERE rsg.id IS NULL AND ssg.deleted = 0 AND ssg.active = 1;

          update: >-
            UPDATE student_group rsg
              JOIN staging_student_group ssg ON ssg.id = rsg.id
            SET
              rsg.name = ssg.name,
              rsg.school_id = ssg.school_id,
              rsg.school_year = ssg.school_year,
              rsg.subject_id = ssg.subject_id,
              rsg.creator = ssg.creator,
              rsg.created = ssg.created,
              rsg.update_import_id = ssg.update_import_id,
              rsg.updated = ssg.updated,
              rsg.migrate_id = ssg.migrate_id
            WHERE ssg.deleted = 0 AND ssg.active = 1;

          delete: >-
            DELETE rsg FROM student_group rsg
             JOIN staging_student_group ssg ON ssg.id = rsg.id
            WHERE ssg.deleted = 1 or ssg.active = 0;

      # ############## School/District ###################################################################
      # ------------ school ------------------------------------------------------------------------------
      school:
        sql:
          insert: >-
            INSERT INTO school (id, natural_id, name, external_id, district_id, district_group_id, school_group_id, update_import_id, updated, migrate_id)
             SELECT
               ss.id,
               ss.natural_id,
               ss.name,
               ss.external_id,
               ss.district_id,
               ss.district_group_id,
               ss.school_group_id,
               ss.update_import_id,
               ss.updated,
               ss.migrate_id
             FROM staging_school ss
               LEFT JOIN school rs ON rs.id = ss.id
             WHERE rs.id IS NULL AND ss.deleted = 0;

          update: >-
            UPDATE school rs
              JOIN staging_school ss ON ss.id = rs.id
            SET rs.name = ss.name,
              rs.external_id = ss.external_id,
              rs.district_id = ss.district_id,
              rs.district_group_id = ss.district_group_id,
              rs.school_group_id = ss.school_group_id,
              rs.update_import_id = ss.update_import_id,
              rs.updated = ss.updated,
              rs.migrate_id = ss.migrate_id
            WHERE ss.deleted = 0;

          delete: >-
            DELETE rs FROM school rs
              JOIN staging_school ss on ss.id = rs.id
            WHERE ss.deleted = 1;

      # ------------ district ------------------------------------------------------------------------------
      district:
        sql:
          insert: >-
            INSERT INTO district(id, natural_id, name, external_id)
              SELECT sd.id, sd.natural_id, sd.name, sd.external_id
                FROM staging_district sd
                  LEFT JOIN district rd ON rd.id = sd.id
                WHERE rd.id IS NULL;

          update: >-
            UPDATE district rd
              JOIN staging_district sd ON sd.id = rd.id
              SET rd.name = sd.name,
                  rd.external_id = sd.external_id;

          delete: >-
            DELETE rd FROM district rd
              WHERE
                  rd.id in (SELECT ss.district_id from staging_school ss WHERE ss.deleted = 1)
                  AND NOT EXISTS(SELECT rs.id from school rs WHERE rs.district_id = rd.id);

      # ------------ district_group ------------------------------------------------------------------------------
      district_group:
        sql:
          insert: >-
            INSERT INTO district_group(id, natural_id, name, external_id)
              SELECT sdg.id, sdg.natural_id, sdg.name, sdg.external_id
                FROM staging_district_group sdg
                  LEFT JOIN district_group rdg ON rdg.id = sdg.id
                WHERE rdg.id IS NULL;

          update: >-
            UPDATE district_group rdg
              JOIN staging_district_group sdg ON sdg.id = rdg.id
              SET rdg.name = sdg.name, rdg.external_id = sdg.external_id;

          delete: >-
            DELETE rdg FROM district_group rdg
              WHERE
                  rdg.id in (SELECT ss.district_group_id from staging_school ss WHERE ss.deleted = 1)
                  AND NOT EXISTS(SELECT rs.id from school rs WHERE rs.district_group_id = rdg.id);

      # ------------ school_group ------------------------------------------------------------------------------
      school_group:
        sql:
          insert: >-
            INSERT INTO school_group(id, natural_id, name, external_id)
              SELECT ssg.id, ssg.natural_id, ssg.name, ssg.external_id
                FROM staging_school_group ssg
                  LEFT JOIN school_group rsg ON rsg.id = ssg.id
                WHERE rsg.id IS NULL;

          update: >-
            UPDATE school_group rsg
              JOIN staging_school_group ssg ON ssg.id = rsg.id
              SET rsg.name = ssg.name, rsg.external_id = ssg.external_id;

          delete: >-
            DELETE rsg FROM school_group rsg
              WHERE
                  rsg.id in (SELECT ss.school_group_id from staging_school ss WHERE ss.deleted = 1)
                  AND NOT EXISTS(SELECT rs.id from school rs WHERE rs.school_group_id = rsg.id);


      # ############## Embargo  ###################################################################
      # Update individual district embargo records.
      # The warehouse-to-staging step has already copied the effective settings for all districts.
      # So here we can just copy the values into district embargo.
      district_embargo:
        sql:
          insert: >-
            INSERT IGNORE INTO district_embargo (school_year, district_id, subject_id, individual, migrate_id)
              SELECT  school_year, district_id, subject_id, individual, migrate_id FROM staging_district_embargo
          update: >-
            UPDATE district_embargo rd
              JOIN staging_district_embargo sde ON
                sde.school_year = rd.school_year AND
                sde.district_id = rd.district_id AND
                sde.subject_id = rd.subject_id
            SET rd.individual = sde.individual, rd.migrate_id = sde.migrate_id

      # ############## Student  ###################################################################
      # ------------ student_ethnicity -----------------------------------------------------------------------
      student_ethnicity:
        sql:
          insert: >-
            INSERT INTO student_ethnicity (student_id, ethnicity_id, ethnicity_code)
              SELECT
                sue.student_id,
                sue.ethnicity_id,
                re.code
              FROM staging_student_ethnicity sue
                LEFT JOIN student_ethnicity rse
                  ON (rse.student_id = sue.student_id AND rse.ethnicity_id = sue.ethnicity_id)
                  JOIN ethnicity re on re.id = sue.ethnicity_id
              WHERE rse.student_id IS NULL;

          deleteAsPartOfParentUpdate: >-
            DELETE rse FROM student_ethnicity rse
              JOIN staging_student ss on ss.id = rse.student_id
            WHERE ss.deleted = 0
              AND NOT EXISTS(
                SELECT sse.student_id
                  FROM staging_student_ethnicity sse
                WHERE sse.student_id = rse.student_id
                AND sse.ethnicity_id = rse.ethnicity_id
              );

          delete: >-
            DELETE rse FROM student_ethnicity rse
              JOIN staging_student ss on ss.id = rse.student_id
            WHERE ss.deleted = 1;

      # ------------ student -----------------------------------------------------------------------
      student:
        sql:
          insert: >-
            INSERT INTO student (id, ssid, last_or_surname, first_name, middle_name, alias_name, gender_id, gender_code,
                                           first_entry_into_us_school_at, lep_entry_at, lep_exit_at, birthday, inferred_school_id, update_import_id, updated, migrate_id)
              SELECT
                ss.id,
                ss.ssid,
                ss.last_or_surname,
                ss.first_name,
                ss.middle_name,
                ss.alias_name,
                ss.gender_id,
                rg.code,
                ss.first_entry_into_us_school_at,
                ss.lep_entry_at,
                ss.lep_exit_at,
                ss.birthday,
                ss.inferred_school_id,
                ss.update_import_id,
                ss.updated,
                ss.migrate_id
              FROM staging_student ss
                LEFT JOIN student rs ON rs.id = ss.id
                LEFT JOIN gender rg ON ss.gender_id = rg.id
              WHERE rs.id IS NULL and ss.deleted = 0;

          update: >-
            UPDATE student rs
              JOIN staging_student ss ON ss.id = rs.id
              JOIN gender rg ON ss.gender_id = rg.id
            SET
              rs.ssid = ss.ssid,
              rs.last_or_surname = ss.last_or_surname,
              rs.first_name = ss.first_name,
              rs.middle_name = ss.middle_name,
              rs.alias_name = ss.alias_name,
              rs.gender_id = ss.gender_id,
              rs.gender_code = rg.code,
              rs.first_entry_into_us_school_at = ss.first_entry_into_us_school_at,
              rs.lep_entry_at = ss.lep_entry_at,
              rs.lep_exit_at = ss.lep_exit_at,
              rs.birthday = ss.birthday,
              rs.inferred_school_id = ss.inferred_school_id,
              rs.update_import_id = ss.update_import_id,
              rs.updated = ss.updated,
              rs.migrate_id = ss.migrate_id
            WHERE ss.deleted = 0

          delete: >-
            DELETE rs FROM student rs
              JOIN staging_student ss ON ss.id = rs.id
            WHERE ss.deleted = 1;

      # ############## Assessment  ###################################################################
      # ------------ asmt_score -----------------------------------------------------------------------
      # There is no asmt_score table in reporting: the (OVERALL) min/max and cut-points
      # are denormalized in the asmt table. And note the issue with the subject_score_id
      # being coalesced to 0 during the warehouse-to-staging step.

      # ------------ item -----------------------------------------------------------------------
      item:
        sql:
          insert: >-
            INSERT INTO item (id, claim_id, claim_code,  target_id, common_core_standard_ids, natural_id, asmt_id,
                math_practice, math_practice_code, allow_calc, position, dok_id, difficulty_code, max_points, field_test, active, type,
                options_count, answer_key, performance_task_writing_type)
              SELECT
                si.id,
                si.claim_id,
                rc.code,
                si.target_id,
                si.common_core_standard_ids,
                si.natural_id,
                si.asmt_id,
                si.math_practice,
                rmp.code as math_practice_code,
                si.allow_calc,
                si.position,
                si.dok_id,
                si.difficulty_code,
                si.max_points,
                si.field_test,
                si.active,
                si.type,
                si.options_count,
                si.answer_key,
                si.performance_task_writing_type
              FROM staging_item si
                LEFT JOIN item ri ON ri.id = si.id
                 JOIN claim rc on rc.id = si.claim_id
                 LEFT JOIN math_practice rmp on rmp.practice = si.math_practice
              WHERE ri.id IS NULL;

          update: >-
            UPDATE item ri
              JOIN staging_item si ON ri.id = si.id
              JOIN claim rc on rc.id = si.claim_id
              LEFT JOIN math_practice rmp on rmp.practice = si.math_practice
            SET
              ri.claim_id      = si.claim_id,
              ri.claim_code    = rc.code,
              ri.target_id     = si.target_id,
              ri.common_core_standard_ids  = si.common_core_standard_ids,
              ri.asmt_id       = si.asmt_id,
              ri.math_practice = si.math_practice,
              ri.math_practice_code = rmp.code,
              ri.allow_calc    = si.allow_calc,
              ri.position      = si.position,
              ri.dok_id        = si.dok_id,
              ri.difficulty_code  = si.difficulty_code,
              ri.max_points    = si.max_points,
              ri.field_test    = si.field_test,
              ri.active        = si.active,
              ri.type          = si.type,
              ri.options_count = si.options_count,
              ri.answer_key    = si.answer_key,
              ri.performance_task_writing_type    = si.performance_task_writing_type

          deleteAsPartOfParentUpdate: >-
            DELETE ri FROM item ri
              JOIN staging_asmt sa ON sa.id = ri.asmt_id
            WHERE sa.deleted = 0
              AND  NOT EXISTS(SELECT si.id FROM staging_item si WHERE si.id = ri.id);

          delete: >-
            DELETE ri FROM item ri
              JOIN staging_asmt sa ON sa.id = ri.asmt_id
            WHERE sa.deleted = 1;

      # ------------ item_other_target -----------------------------------------------------------------------
      item_other_target:
        sql:
          insert: >-
            INSERT INTO item_other_target (item_id, target_id)
              SELECT
                siot.item_id,
                siot.target_id
              FROM staging_item_other_target siot
                LEFT JOIN item_other_target riot
                  ON (riot.item_id = siot.item_id AND riot.target_id = siot.target_id)
              WHERE riot.item_id IS NULL;

          deleteAsPartOfParentUpdate: >-
            DELETE riot FROM item_other_target riot
              JOIN item ri ON ri.id = riot.item_id
              JOIN staging_asmt sa ON sa.id = ri.asmt_id
            WHERE
              sa.deleted = 0
              AND NOT EXISTS(
                SELECT siot.item_id
                  FROM staging_item_other_target siot
                WHERE siot.item_id = riot.item_id
                AND siot.target_id = riot.target_id
              );

          delete: >-
            DELETE riot FROM item_other_target riot
              JOIN item ri ON ri.id = riot.item_id
              JOIN staging_asmt sa ON sa.id = ri.asmt_id
            WHERE sa.deleted = 1;

      # ------------ item_common_core_standard -----------------------------------------------------------------------
      item_common_core_standard:
        sql:
          insert: >-
            INSERT INTO item_common_core_standard (item_id, common_core_standard_id)
              SELECT
                siccs.item_id,
                siccs.common_core_standard_id
              FROM staging_item_common_core_standard siccs
                LEFT JOIN item_common_core_standard riccs
                  ON (riccs.item_id = siccs.item_id AND riccs.common_core_standard_id = siccs.common_core_standard_id)
              WHERE riccs.item_id IS NULL;

          deleteAsPartOfParentUpdate: >-
            DELETE riccs FROM item_common_core_standard riccs
              JOIN item ri ON ri.id = riccs.item_id
              JOIN staging_asmt sa ON sa.id = ri.asmt_id
            WHERE
              sa.deleted = 0
              AND NOT EXISTS(
                SELECT sics.item_id
                  FROM staging_item_common_core_standard sics
                WHERE sics.item_id = riccs.item_id
                  AND sics.common_core_standard_id = riccs.common_core_standard_id
                );

          delete: >-
            DELETE riccs FROM item_common_core_standard riccs
              JOIN item ri ON ri.id = riccs.item_id
              JOIN staging_asmt sa ON sa.id = ri.asmt_id WHERE sa.deleted = 1;

      # ------------ asmt_target -----------------------------------------------------------------------
      asmt_target:
        sql:
          insert: >-
            INSERT INTO asmt_target (asmt_id, target_id, include_in_report)
              SELECT
                sate.asmt_id,
                sate.target_id,
                0
              FROM staging_asmt_target_exclusion sate
                LEFT JOIN asmt_target rat ON rat.asmt_id = sate.asmt_id AND rat.target_id = sate.target_id
              WHERE rat.asmt_id IS NULL;

          insertIncluded: >-
            INSERT INTO asmt_target (asmt_id, target_id, include_in_report)
              SELECT
                sat.asmt_id,
                sat.target_id,
                1
              FROM staging_asmt_target sat
                LEFT JOIN asmt_target rat ON rat.asmt_id = sat.asmt_id AND rat.target_id = sat.target_id
              WHERE rat.asmt_id IS NULL
                AND NOT EXISTS(SELECT 1 from staging_asmt_target_exclusion sate WHERE sate.asmt_id = sat.asmt_id AND sate.target_id = sat.target_id);

          deleteAsPartOfParentUpdate: >-
            DELETE rat FROM asmt_target rat
              JOIN staging_asmt sa ON sa.id = rat.asmt_id
            WHERE sa.deleted = 0;

          delete: >-
            DELETE rat FROM asmt_target rat
              JOIN staging_asmt sa ON sa.id = rat.asmt_id
            WHERE sa.deleted = 1;

      # ------------ asmt -----------------------------------------------------------------------
      # This table is heavily denormalized.
      #   The OVERALL min/max and cut-points are pulled from the asmt_score table
      #     (the OVERALL record is the one where the subject_score_id is null)
      #   The CLAIM codes are pulled from the subject_score table.
      #   The ALT codes are pulled from the subject_score table.
      asmt:
        sql:
          insert: >-
            INSERT INTO asmt (id, natural_id, grade_id, grade_code, type_id, subject_id, school_year, name,
                              label, version, update_import_id,
                              cut_point_1, cut_point_2, cut_point_3, cut_point_4, cut_point_5, min_score, max_score,
                              alt1_score_code, alt2_score_code, alt3_score_code, alt4_score_code, alt5_score_code, alt6_score_code,
                              claim1_score_code, claim2_score_code, claim3_score_code, claim4_score_code, claim5_score_code, claim6_score_code,
                              updated, migrate_id)
              SELECT
                sa.id,
                sa.natural_id,
                sa.grade_id,
                rg.code,
                sa.type_id,
                sa.subject_id,
                sa.school_year,
                sa.name,
                sa.label,
                sa.version,
                sa.update_import_id,
                sas.cut_point_1,
                sas.cut_point_2,
                sas.cut_point_3,
                sas.cut_point_4,
                sas.cut_point_5,
                sas.min_score,
                sas.max_score,
                ssa1.code,
                ssa2.code,
                ssa3.code,
                ssa4.code,
                ssa5.code,
                ssa6.code,
                ssc1.code,
                ssc2.code,
                ssc3.code,
                ssc4.code,
                ssc5.code,
                ssc6.code,
                sa.updated,
                sa.migrate_id
              FROM staging_asmt sa
                LEFT JOIN asmt ra ON ra.id = sa.id
                LEFT JOIN subject_score ssa1 ON sa.subject_id = ssa1.subject_id AND sa.type_id = ssa1.asmt_type_id AND ssa1.score_type_id = 2 AND ssa1.data_order = 1
                LEFT JOIN subject_score ssa2 ON sa.subject_id = ssa2.subject_id AND sa.type_id = ssa2.asmt_type_id AND ssa2.score_type_id = 2 AND ssa2.data_order = 2
                LEFT JOIN subject_score ssa3 ON sa.subject_id = ssa3.subject_id AND sa.type_id = ssa3.asmt_type_id AND ssa3.score_type_id = 2 AND ssa3.data_order = 3
                LEFT JOIN subject_score ssa4 ON sa.subject_id = ssa4.subject_id AND sa.type_id = ssa4.asmt_type_id AND ssa4.score_type_id = 2 AND ssa4.data_order = 4
                LEFT JOIN subject_score ssa5 ON sa.subject_id = ssa5.subject_id AND sa.type_id = ssa5.asmt_type_id AND ssa5.score_type_id = 2 AND ssa5.data_order = 5
                LEFT JOIN subject_score ssa6 ON sa.subject_id = ssa6.subject_id AND sa.type_id = ssa6.asmt_type_id AND ssa6.score_type_id = 2 AND ssa6.data_order = 6
                LEFT JOIN subject_score ssc1 ON sa.subject_id = ssc1.subject_id AND sa.type_id = ssc1.asmt_type_id AND ssc1.score_type_id = 3 AND ssc1.data_order = 1
                LEFT JOIN subject_score ssc2 ON sa.subject_id = ssc2.subject_id AND sa.type_id = ssc2.asmt_type_id AND ssc2.score_type_id = 3 AND ssc2.data_order = 2
                LEFT JOIN subject_score ssc3 ON sa.subject_id = ssc3.subject_id AND sa.type_id = ssc3.asmt_type_id AND ssc3.score_type_id = 3 AND ssc3.data_order = 3
                LEFT JOIN subject_score ssc4 ON sa.subject_id = ssc4.subject_id AND sa.type_id = ssc4.asmt_type_id AND ssc4.score_type_id = 3 AND ssc4.data_order = 4
                LEFT JOIN subject_score ssc5 ON sa.subject_id = ssc5.subject_id AND sa.type_id = ssc5.asmt_type_id AND ssc5.score_type_id = 3 AND ssc5.data_order = 5
                LEFT JOIN subject_score ssc6 ON sa.subject_id = ssc6.subject_id AND sa.type_id = ssc6.asmt_type_id AND ssc6.score_type_id = 3 AND ssc6.data_order = 6
                JOIN staging_asmt_score sas ON sa.id = sas.asmt_id AND sas.subject_score_id = 0
                JOIN grade rg ON rg.id = sa.grade_id
              WHERE ra.id IS NULL and sa.deleted = 0;

          update: >-
            UPDATE asmt ra
              JOIN staging_asmt sa ON sa.id = ra.id
              LEFT JOIN subject_score ssa1 ON sa.subject_id = ssa1.subject_id AND sa.type_id = ssa1.asmt_type_id AND ssa1.score_type_id = 2 AND ssa1.data_order = 1
              LEFT JOIN subject_score ssa2 ON sa.subject_id = ssa2.subject_id AND sa.type_id = ssa2.asmt_type_id AND ssa2.score_type_id = 2 AND ssa2.data_order = 2
              LEFT JOIN subject_score ssa3 ON sa.subject_id = ssa3.subject_id AND sa.type_id = ssa3.asmt_type_id AND ssa3.score_type_id = 2 AND ssa3.data_order = 3
              LEFT JOIN subject_score ssa4 ON sa.subject_id = ssa4.subject_id AND sa.type_id = ssa4.asmt_type_id AND ssa4.score_type_id = 2 AND ssa4.data_order = 4
              LEFT JOIN subject_score ssa5 ON sa.subject_id = ssa5.subject_id AND sa.type_id = ssa5.asmt_type_id AND ssa5.score_type_id = 2 AND ssa5.data_order = 5
              LEFT JOIN subject_score ssa6 ON sa.subject_id = ssa6.subject_id AND sa.type_id = ssa6.asmt_type_id AND ssa6.score_type_id = 2 AND ssa6.data_order = 6
              LEFT JOIN subject_score ssc1 ON sa.subject_id = ssc1.subject_id AND sa.type_id = ssc1.asmt_type_id AND ssc1.score_type_id = 3 AND ssc1.data_order = 1
              LEFT JOIN subject_score ssc2 ON sa.subject_id = ssc2.subject_id AND sa.type_id = ssc2.asmt_type_id AND ssc2.score_type_id = 3 AND ssc2.data_order = 2
              LEFT JOIN subject_score ssc3 ON sa.subject_id = ssc3.subject_id AND sa.type_id = ssc3.asmt_type_id AND ssc3.score_type_id = 3 AND ssc3.data_order = 3
              LEFT JOIN subject_score ssc4 ON sa.subject_id = ssc4.subject_id AND sa.type_id = ssc4.asmt_type_id AND ssc4.score_type_id = 3 AND ssc4.data_order = 4
              LEFT JOIN subject_score ssc5 ON sa.subject_id = ssc5.subject_id AND sa.type_id = ssc5.asmt_type_id AND ssc5.score_type_id = 3 AND ssc5.data_order = 5
              LEFT JOIN subject_score ssc6 ON sa.subject_id = ssc6.subject_id AND sa.type_id = ssc6.asmt_type_id AND ssc6.score_type_id = 3 AND ssc6.data_order = 6
              JOIN staging_asmt_score sas ON ra.id = sas.asmt_id AND sas.subject_score_id = 0
              JOIN grade rg ON rg.id = sa.grade_id
            SET
              ra.grade_id    = sa.grade_id,
              ra.grade_code  = rg.code,
              ra.type_id     = sa.type_id,
              ra.subject_id  = sa.subject_id,
              ra.school_year = sa.school_year,
              ra.name        = sa.name,
              ra.label       = sa.label,
              ra.version     = sa.version,
              ra.update_import_id  = sa.update_import_id,
              ra.cut_point_1 = sas.cut_point_1,
              ra.cut_point_2 = sas.cut_point_2,
              ra.cut_point_3 = sas.cut_point_3,
              ra.cut_point_4 = sas.cut_point_4,
              ra.cut_point_5 = sas.cut_point_5,
              ra.min_score = sas.min_score,
              ra.max_score = sas.max_score,
              ra.alt1_score_code = ssa1.code,
              ra.alt2_score_code = ssa2.code,
              ra.alt3_score_code = ssa3.code,
              ra.alt4_score_code = ssa4.code,
              ra.alt5_score_code = ssa5.code,
              ra.alt6_score_code = ssa6.code,
              ra.claim1_score_code = ssc1.code,
              ra.claim2_score_code = ssc2.code,
              ra.claim3_score_code = ssc3.code,
              ra.claim4_score_code = ssc4.code,
              ra.claim5_score_code = ssc5.code,
              ra.claim6_score_code = ssc6.code,
              ra.updated = sa.updated,
              ra.migrate_id = sa.migrate_id
            WHERE sa.deleted = 0;

          delete: >-
              DELETE ra FROM asmt ra JOIN staging_asmt sa on sa.id = ra.id WHERE sa.deleted = 1;

      # ############## Norms  #########################################################################
      # ------------ percentile_score -----------------------------------------------------------------------
      percentile_score:
        sql:
          # delete all children where the parent is updated as all children are inserted on update
          deleteAsPartOfParentUpdate: >-
            DELETE rps FROM percentile_score rps
              JOIN staging_percentile sp ON sp.id = rps.percentile_id
            WHERE sp.deleted = 0

          # insert all children on create and update as all children updated are deleted first
          insert: >-
            INSERT INTO percentile_score (percentile_id, percentile_rank, score, min_inclusive, max_exclusive)
              SELECT
                sps.percentile_id,
                sps.percentile_rank,
                sps.score,
                sps.min_inclusive,
                sps.max_exclusive
              FROM staging_percentile_score sps;

          delete: >-
            DELETE rps FROM percentile_score rps
              JOIN staging_percentile sp ON sp.id = rps.percentile_id
            WHERE sp.deleted = 1;

      # ------------ percentile ------------------------------------------------------------------------------
      percentile:
        sql:
          insert: >-
            INSERT INTO percentile (id, asmt_id, start_date, end_date, count, mean, standard_deviation, min_score, max_score, update_import_id, updated, migrate_id)
              SELECT
                sp.id,
                sp.asmt_id,
                sp.start_date,
                sp.end_date,
                sp.count,
                sp.mean,
                sp.standard_deviation,
                sp.min_score,
                sp.max_score,
                sp.update_import_id,
                sp.updated,
                sp.migrate_id
              FROM staging_percentile sp
                LEFT JOIN percentile rp ON rp.id = sp.id
              WHERE rp.id IS NULL and sp.deleted = 0;

          update: >-
            UPDATE percentile rp
              JOIN staging_percentile sp ON sp.id = rp.id
            SET
              rp.count = sp.count,
              rp.mean = sp.mean,
              rp.standard_deviation = sp.standard_deviation,
              rp.min_score = sp.min_score,
              rp.max_score = sp.max_score,
              rp.update_import_id = sp.update_import_id,
              rp.updated = sp.updated,
              rp.migrate_id = sp.migrate_id
            WHERE sp.deleted = 0;

          delete: >-
              DELETE rp FROM percentile rp JOIN staging_percentile sp on sp.id = rp.id WHERE sp.deleted = 1;
