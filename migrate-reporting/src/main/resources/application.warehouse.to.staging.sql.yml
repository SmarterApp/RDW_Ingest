sql:
  # ------------ original format ------------------------------------------------------------------
  # todo: refactor names
  warehouseToStage:
    findMaxExamImportId: >-
      SELECT MAX(i.id)
        FROM warehouse.import i
          JOIN warehouse.import_content ic ON i.content = ic.id
        WHERE ic.name = 'EXAM'
    findWarehouseSubjects: >-
      SELECT ws.id, ws.code FROM warehouse.subject ws ORDER BY ws.id ASC
    findReportingSubjects: >-
      SELECT rs.id, rs.code FROM reporting.subject rs ORDER BY rs.id ASC
    findWarehouseAsmtTypes: >-
      SELECT wat.id, wat.code, wat.name FROM warehouse.asmt_type wat ORDER BY wat.id ASC
    findReportingAsmtTypes: >-
      SELECT rat.id, rat.code, rat.name FROM reporting.asmt_type rat ORDER by rat.id ASC
    findWarehouseSubjectClaimScores: >-
      SELECT wscs.id, wscs.subject_id, wscs.asmt_type_id, wscs.code, wscs.name
        FROM warehouse.subject_claim_score wscs ORDER BY wscs.id ASC
    findReportingSubjectClaimScores: >-
      SELECT rscs.id, rscs.subject_id, rscs.asmt_type_id, rscs.code, rscs.name
        FROM reporting.subject_claim_score rscs ORDER BY rscs.id ASC

    # Will use the complete list as warehouse to stage is completed.
    truncateStageList:
      - TRUNCATE TABLE staging.staging_grade
      - TRUNCATE TABLE staging.staging_completeness
      - TRUNCATE TABLE staging.staging_administration_condition
      - TRUNCATE TABLE staging.staging_ethnicity
      - TRUNCATE TABLE staging.staging_gender
      - TRUNCATE TABLE staging.staging_accommodation
      - TRUNCATE TABLE staging.staging_claim
      - TRUNCATE TABLE staging.staging_target
      - TRUNCATE TABLE staging.staging_common_core_standard
      - TRUNCATE TABLE staging.staging_depth_of_knowledge
      - TRUNCATE TABLE staging.staging_math_practice
      - TRUNCATE TABLE staging.staging_item_trait_score
      - TRUNCATE TABLE staging.staging_item_difficulty_cuts
      - TRUNCATE TABLE staging.staging_language
      - TRUNCATE TABLE staging.staging_accommodation_translation
      - TRUNCATE TABLE staging.staging_school
      - TRUNCATE TABLE staging.staging_district
      - TRUNCATE TABLE staging.staging_student
      - TRUNCATE TABLE staging.staging_student_ethnicity
      - TRUNCATE TABLE staging.staging_student_group
      - TRUNCATE TABLE staging.staging_student_group_membership
      - TRUNCATE TABLE staging.staging_user_student_group

    findDistinctImportContentInRange: >-
      SELECT DISTINCT wi.content
      FROM warehouse.import wi
      WHERE wi.status = 1
            AND wi.id >= :first_import_id
            AND wi.id <= :last_import_id

    entities:
        # ------------ grade  -------------------------------------------------------------------
        grade:
          sql:
            warehouseRead: >-
              SELECT id, code, name from warehouse.grade

            stagingInsert: >-
              INSERT INTO staging.staging_grade (id, code, name) VALUES
                (:id, :code, :name)

        # ------------ completeness  -------------------------------------------------------------
        completeness:
          sql:
            warehouseRead: >-
              SELECT id, code from warehouse.completeness

            stagingInsert: >-
              INSERT INTO staging.staging_completeness (id, code) VALUES
                (:id, :code)

        # ------------ administration_condition  -------------------------------------------------------------
        administration_condition:
          sql:
            warehouseRead: >-
              SELECT id, code from warehouse.administration_condition

            stagingInsert: >-
              INSERT INTO staging.staging_administration_condition (id, code) VALUES
                (:id, :code)

        # ------------ ethnicity  -------------------------------------------------------------
        ethnicity:
          sql:
            warehouseRead: >-
             SELECT id, code from warehouse.ethnicity

            stagingInsert: >-
              INSERT INTO staging.staging_ethnicity (id, code) VALUES
                (:id, :code)

        # ------------ gender  -------------------------------------------------------------
        gender:
          sql:
            warehouseRead: >-
             SELECT id, code from warehouse.gender

            stagingInsert: >-
              INSERT INTO staging.staging_gender (id, code) VALUES
                (:id, :code)

        # ------------ accommodation  -------------------------------------------------------------
        accommodation:
          sql:
            warehouseRead: >-
             SELECT id, code from warehouse.accommodation

            stagingInsert: >-
              INSERT INTO staging.staging_accommodation (id, code) VALUES
                (:id, :code)

        # ------------ claim  -------------------------------------------------------------
        claim:
          sql:
            warehouseRead: >-
             SELECT id, subject_id, code, name, description from warehouse.claim

            stagingInsert: >-
              INSERT INTO staging.staging_claim (id, subject_id, code, name, description) VALUES
                (:id, :subject_id, :code, :name, :description)

        # ------------ target  -------------------------------------------------------------
        target:
          sql:
            warehouseRead: >-
             SELECT id, claim_id, code, description from warehouse.target

            stagingInsert: >-
              INSERT INTO staging.staging_target (id, claim_id, code, description) VALUES
                (:id, :claim_id, :code, :description)


        # ------------ common_core_standard  -------------------------------------------------------------
        common_core_standard:
          sql:
            warehouseRead: >-
             SELECT id, natural_id, subject_id, description from warehouse.common_core_standard

            stagingInsert: >-
              INSERT INTO staging.staging_common_core_standard (id, natural_id, subject_id, description) VALUES
                (:id, :natural_id, :subject_id, :description)


        # ------------ depth_of_knowledge  -------------------------------------------------------------
        depth_of_knowledge:
          sql:
            warehouseRead: >-
             SELECT id, level, subject_id, description, reference from warehouse.depth_of_knowledge

            stagingInsert: >-
              INSERT INTO staging.staging_depth_of_knowledge (id, level, subject_id, description, reference) VALUES
                (:id, :level, :subject_id, :description, :reference)

        # ------------ math_practice  -------------------------------------------------------------
        math_practice:
          sql:
            warehouseRead: >-
              SELECT practice, description from warehouse.math_practice

            stagingInsert: >-
              INSERT INTO staging.staging_math_practice (practice, description) VALUES
                (:practice, :description)

        # ------------ item_trait_score  -------------------------------------------------------------
        item_trait_score:
          sql:
            warehouseRead: >-
              SELECT id, dimension from warehouse.item_trait_score

            stagingInsert: >-
              INSERT INTO staging.staging_item_trait_score (id, dimension) VALUES
                (:id, :dimension)

        # ------------ item_difficulty_cuts  -------------------------------------------------------------
        item_difficulty_cuts:
          sql:
            warehouseRead: >-
              SELECT id, asmt_type_id, subject_id,grade_id, moderate_low_end, difficult_low_end from warehouse.item_difficulty_cuts

            stagingInsert: >-
              INSERT INTO staging.staging_item_difficulty_cuts (id, asmt_type_id, subject_id, grade_id, moderate_low_end, difficult_low_end) VALUES
                (:id, :asmt_type_id, :subject_id, :grade_id, :moderate_low_end, :difficult_low_end)

        # ------------ language  -------------------------------------------------------------
        language:
          sql:
            warehouseRead: >-
              SELECT id, code from warehouse.language

            stagingInsert: >-
              INSERT INTO staging.staging_language (id, code) VALUES
                (:id, :code)

        # ------------ accommodation_translation  -------------------------------------------------------------
        accommodation_translation:
          sql:
            warehouseRead: >-
              SELECT accommodation_id, language_id, label from warehouse.accommodation_translation

            stagingInsert: >-
              INSERT INTO staging.staging_accommodation_translation (accommodation_id, language_id, label) VALUES
                (:accommodation_id, :language_id, :label)

        ##### Entities migrated by import id range ####################################################################
        # todo: move these notes to contributing.md or somewhere else.
        # 1. Entities are 'Root' if their table has import_id and update_import_id
        # 2. When selecting a range of entities only import.id's with a status = 1 are included
        # 3. 'root-entity'.update_import_id always contains the most recent import.id
        # 4. staging and reporting 'root-entities` do not have an update_import_id
        # 5. staging and reporting 'root-entities` have import_id set to the warehouse update_import_id
        # 6. deleted exists on 'root' entities in warehouse and staging to effect the delete in reporting.
        # 7. Children of 'root' entities in warehouse and staging use the parent deleted flag to delete in reporting.
        ###############################################################################################################

        ##### Entities migrated by import id range ####################################################################
        # migrate_id is added by JdbcSqlCopyWarehouseToStagingRepository
        # update_import_id is selected from warehouse as import_id because it always has the most recent import_id
        ###############################################################################################################

        ##### ORGANIZATION ImportContent Type ####
        #
        # ------------ district  -------------------------------------------------------------------
        district:
          sql:
            warehouseRead: >-
              SELECT
                  wd.id,
                  wd.natural_id,
                  wd.name
                FROM warehouse.district wd
                WHERE EXISTS(
                    SELECT id from warehouse.school ws
                    WHERE district_id = wd.id
                          AND ws.deleted = 0
                          AND (
                            ws.import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id) OR
                            ws.update_import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id)
                          )
                )
            stagingInsert: >-
              INSERT INTO staging.staging_district (id, natural_id, name, migrate_id) VALUES
                (:id, :natural_id, :name, :migrate_id)

        # ------------ school  -------------------------------------------------------------------
        school:
          sql:
            warehouseRead: >-
              SELECT
                ws.id,
                ws.natural_id,
                ws.name,
                ws.update_import_id AS import_id,
                ws.deleted,
                ws.district_id
              FROM warehouse.school ws
                JOIN warehouse.district wd ON wd.id = ws.district_id
              WHERE
                ws.import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id) OR
                ws.update_import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id)

            stagingInsert: >-
              INSERT INTO staging.staging_school (id, natural_id, name, import_id, deleted, district_id, migrate_id) VALUES
                (:id, :natural_id, :name, :import_id, :deleted, :district_id, :migrate_id)

        ##### GROUPS ImportContent Type ####
        #
        # ------------ student  -------------------------------------------------------------------
        student:
          sql:
            warehouseRead: >-
              SELECT
                ws.id,
                ws.ssid,
                ws.last_or_surname,
                ws.first_name,
                ws.middle_name,
                ws.gender_id,
                ws.first_entry_into_us_school_at,
                ws.lep_entry_at,
                ws.lep_exit_at,
                ws.birthday,
                ws.update_import_id AS import_id,
                ws.deleted
              FROM warehouse.student ws
              WHERE
                ws.import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id) OR
                ws.update_import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id)
            stagingInsert: >-
              INSERT INTO staging_test.staging_student (id, ssid, last_or_surname, first_name, middle_name, gender_id, first_entry_into_us_school_at,
              lep_entry_at, lep_exit_at, birthday, import_id, deleted, migrate_id) VALUES
                (:id, :ssid, :last_or_surname, :first_name, :middle_name, :gender_id, :first_entry_into_us_school_at,
                              :lep_entry_at, :lep_exit_at, :birthday, :import_id, :deleted, :migrate_id)

        # ------------ student_ethnicity  -------------------------------------------------------------------
        student_ethnicity:
          sql:
            warehouseRead: >-
              SELECT
                wse.ethnicity_id,
                wse.student_id
              FROM warehouse.student_ethnicity wse
                JOIN warehouse.student ws ON ws.id = wse.student_id
              WHERE
                (ws.import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= -2000 AND id <= 2000) OR
                 ws.update_import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= -2000 AND id <= 2000) )
                AND ws.deleted = 0
            stagingInsert: >-
              INSERT INTO staging_test.staging_student_ethnicity (ethnicity_id, student_id) VALUES
                ( :ethnicity_id, :student_id )

        # ------------ student_group  -------------------------------------------------------------------
        student_group:
          sql:
            warehouseRead: >-
              SELECT
                wsg.id,
                wsg.name,
                wsg.school_id,
                wsg.school_year,
                wsg.subject_id,
                wsg.active,
                wsg.creator,
                wsg.created,
                wsg.update_import_id AS import_id,
                wsg.deleted
              FROM warehouse.student_group wsg
              WHERE
                 wsg.import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id) OR
                 wsg.update_import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id)
            stagingInsert: >-
              INSERT INTO staging_test.staging_student_group (id, name, school_id, school_year, subject_id, active, creator, created, import_id, deleted, migrate_id) VALUES
                (:id, :name, :school_id, :school_year, :subject_id, :active, :creator, :created, :import_id, :deleted, :migrate_id)

        # ------------ student_group_membership  -------------------------------------------------------------------
        student_group_membership:
          sql:
            warehouseRead: >-
              SELECT
                wsgm.student_group_id,
                wsgm.student_id
              FROM warehouse.student_group_membership wsgm
                JOIN warehouse.student_group wsg ON wsg.id = wsgm.student_group_id
              WHERE
                ( wsg.import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id) OR
                  wsg.update_import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id) )
                AND (wsg.deleted = 0 and wsg.active = 1)
            stagingInsert: >-
              INSERT INTO staging.staging_student_group_membership (student_group_id, student_id) VALUES
                (:student_group_id, :student_id)

        # ------------ staging_user_student_group  -------------------------------------------------------------------
        user_student_group:
          sql:
            warehouseRead: >-
              SELECT
                wusg.student_group_id,
                wusg.user_login
              FROM warehouse.user_student_group wusg
                JOIN warehouse.student_group wsg ON wsg.id= wusg.student_group_id
              WHERE
                ( wsg.import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id) OR
                  wsg.update_import_id IN (SELECT id FROM warehouse.import WHERE status = 1 AND id >= :start_import_id AND id <= :end_import_id) )
                AND (wsg.deleted = 0 and wsg.active = 1)
            stagingInsert: >-
              INSERT INTO staging.staging_user_student_group (student_group_id, user_login) VALUES
                (:student_group_id, :user_login)
