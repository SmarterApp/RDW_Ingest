package org.opentestsystem.rdw.ingest.migrate.reporting;

import com.google.common.collect.Lists;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlListExecutionRepository;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.SqlListExecutionStep;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.CODES;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.EXAM;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.PACKAGE;

/**
 * Configuration for batch steps responsible for moving the data from staging to reporting
 */
@Configuration
public class StagingToReportingStepsConfig {
    private final StepBuilderFactory stepBuilderFactory;
    private final SqlListExecutionRepository sqlListExecutionRepository;
    private final MigrateStagingToWarehouseSqlConfiguration stagingToWarehouseSqlConfiguration;

    public static final String stepUpsertCodesName = "stepUpsertCodes";
    public static final String stepDeleteCodesName = "stepDeleteCodes";
    public static final String stepDeleteEntities = "stepDeleteEntities";
    public static final String stepUpsertOrganization = "stepUpsertOrganization";

    @Autowired
    public StagingToReportingStepsConfig(final StepBuilderFactory stepBuilderFactory,
                                         final MigrateStagingToWarehouseSqlConfiguration stagingToWarehouseSqlConfiguration,
                                         final SqlListExecutionRepository sqlListExecutionRepository) {

        this.stepBuilderFactory = stepBuilderFactory;
        this.stagingToWarehouseSqlConfiguration = stagingToWarehouseSqlConfiguration;
        this.sqlListExecutionRepository = sqlListExecutionRepository;
    }

    // main entities in the order to be migrated due to the dependencies
    public static final List<String> entities = newArrayList(
            "district",
            "school",

            "asmt",
            "item",
            "asmt_score",

            "student",
            "student_ethnicity",
            "student_group",
            "user_student_group",
            "student_group_membership",

            "exam",
            "exam_item",
            "exam_available_accommodation",
            "iab_exam",
            "iab_exam_item",
            "iab_exam_available_accommodation");

    @Bean
    public Step deleteEntitiesStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        for (final String entity : Lists.reverse(entities)) {
            sqlsBuilder.addNext(entity, "delete");
        }
        return stepBuilderFactory.get(stepDeleteEntities)
                //TODO: add SCHOOL and GROUPS when they are defined
                .tasklet(new SqlListExecutionStep(newArrayList(PACKAGE, EXAM),
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step upsertOrganizationStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        sqlsBuilder.addNext("district", "update")
                .addNext("district", "insert")
                .addNext("school", "update")
                .addNext("school", "insert");

        return stepBuilderFactory.get(stepUpsertOrganization)
                //TODO: add SCHOOL
                .tasklet(new SqlListExecutionStep(newArrayList(EXAM),
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    // Code entities, in the order to be migrated due to the dependencies noted below
    public static final List<String> codesEntities = newArrayList(
            "grade", "completeness", "administration_condition", "ethnicity", "gender", "accommodation",
            "claim", "depth_of_knowledge", "math_practice", "item_trait_score",
            "target", //depends on claim
            "item_difficulty_cuts" //depends on grade
    );

    @Bean
    public Step upsertCodesStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        for (final String entity : codesEntities) {
            sqlsBuilder.addNext(entity, "update").addNext(entity, "insert");
        }
        return stepBuilderFactory.get(stepUpsertCodesName)
                .tasklet(new SqlListExecutionStep(newArrayList(CODES),
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step deleteCodesStep() {
        //delete has to be in the reverse order from the insert
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        for (final String entity : Lists.reverse(codesEntities)) {
            sqlsBuilder.addNext(entity, "delete");
        }
        return stepBuilderFactory.get(stepDeleteCodesName)
                .tasklet(new SqlListExecutionStep(newArrayList(CODES),
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }
}
