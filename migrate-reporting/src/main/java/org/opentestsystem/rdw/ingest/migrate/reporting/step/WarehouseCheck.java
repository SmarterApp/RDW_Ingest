package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateWarehouseToStagingSqlConfiguration;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseToStageRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

@Component
public class WarehouseCheck extends StepTasklet {
    private static final Logger logger = LoggerFactory.getLogger(WarehouseCheck.class);

    private final WarehouseToStageRepository warehouseToStageRepository;
    private final MigrateWarehouseToStagingSqlConfiguration warehouseToStagingSqlConfiguration;

    public WarehouseCheck(WarehouseToStageRepository warehouseToStageRepository,
                          MigrateWarehouseToStagingSqlConfiguration migrateWarehouseToStagingSqlConfiguration) {
        this.warehouseToStageRepository = warehouseToStageRepository;
        this.warehouseToStagingSqlConfiguration = migrateWarehouseToStagingSqlConfiguration;
    }

    /**
     * Check that critical code tables match.  If they do not, manual changes will be needed before migration.
     * Spring Batch will catch the exception, fail the step and the job.
     *
     * @param contribution
     * @param chunkContext
     * @return {@link RepeatStatus}
     * @throws UnsupportedOperationException to signal the step has failed.
     */
    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {
        if (checkSubject() && checkAsmtTypes() && checkSubjectClaimScores()) {
            warehouseToStageRepository.truncateStaging(warehouseToStagingSqlConfiguration.getTruncateStageList());
            return RepeatStatus.FINISHED;
        } else {
            throw new UnsupportedOperationException("Critical code tables do not match.");
        }
    }

    private boolean checkSubject() {
        final List<Map<String, Object>> warehouseSubjects = warehouseToStageRepository.findWarehouseSubjects();
        final List<Map<String, Object>> reportingSubjects = warehouseToStageRepository.findReportingSubjects();

        if (warehouseSubjects.equals(reportingSubjects)) {
            return true;
        } else {
            logger.error("warehous subject table does not match reporting");
            return false;
        }
    }

    private boolean checkAsmtTypes() {
        final List<Map<String, Object>> warehouseAsmtTypes = warehouseToStageRepository.findWarehouseAsmtTypes();
        final List<Map<String, Object>> reportingAsmtTypes = warehouseToStageRepository.findReportingAsmtTypes();

        if (warehouseAsmtTypes.equals(reportingAsmtTypes)) {
            return true;
        } else {
            logger.error("warehous asmt_type table does not match reporting");
            return false;
        }
    }

    private boolean checkSubjectClaimScores() {
        final List<Map<String, Object>> warehouseSubjectClaimScores = warehouseToStageRepository.findWarehouseSubjectClaimScores();
        final List<Map<String, Object>> reportingSubjectClaimScores = warehouseToStageRepository.findReportingSubjectClaimScores();

        if (warehouseSubjectClaimScores.equals(reportingSubjectClaimScores)) {
            return true;
        } else {
            logger.error("warehous subject_claim_score table does not match reporting");
            return false;
        }
    }


}
