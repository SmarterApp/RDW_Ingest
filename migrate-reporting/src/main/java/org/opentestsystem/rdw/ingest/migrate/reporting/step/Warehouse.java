package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.ingest.migrate.reporting.MigrateExitStatus.COMPLETED_WITHOUT_CODES;
import static org.opentestsystem.rdw.ingest.migrate.reporting.MigrateExitStatus.COMPLETED_WITH_CODES;

@Component
public class Warehouse extends StepTasklet {
    private static final Logger logger = LoggerFactory.getLogger(Warehouse.class);

    @Value("${sql.warehouseToStage.findMaxExamImportId}")
    private String findMaxExamImportId;

    @Autowired
    @Qualifier("warehouseJdbcTemplate")
    private NamedParameterJdbcTemplate warehouseJdbcTemplate;

    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {

        final List<ImportContent> contentList = newArrayList();
        contentList.add(ImportContent.EXAM);
        setJobBatch(chunkContext, new MigrateBatch(0, 1000, contentList));
        final Integer max = warehouseJdbcTemplate
                .getJdbcOperations()
                .queryForObject(findMaxExamImportId, Integer.class);

        logger.info("=== query for warehouse ===  Max exam import id: " + max);
        if (max == null) contribution.setExitStatus(COMPLETED_WITHOUT_CODES);
        else contribution.setExitStatus(COMPLETED_WITH_CODES);

        return RepeatStatus.FINISHED;
    }
}
