package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.IncorrectResultSizeDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public class JdbcReportingMigrateRepository implements ReportingMigrateRepository {

    @Value("${sql.reporting.migrate.findLastMigratedImportId}")
    private String findLastMigratedImportId;

    @Value("${sql.reporting.migrate.create}")
    private String create;

    @Value("${sql.reporting.migrate.updateStatusById}")
    private String updateStatusById;

    private NamedParameterJdbcTemplate reportingJdbcTempate;

    @Autowired
    public JdbcReportingMigrateRepository(final NamedParameterJdbcTemplate reportingJdbcTemplate) {
        this.reportingJdbcTempate = reportingJdbcTemplate;
    }

    @Override
    public Optional<Long> findLastMigratedImportId() {
        try {
            return Optional.ofNullable(reportingJdbcTempate.getJdbcOperations().queryForObject(findLastMigratedImportId, Long.class));
        } catch (IncorrectResultSizeDataAccessException ex) {
            return Optional.empty();
        }
    }

    @Override
    public Migrate create(final Migrate migrate) {
        final KeyHolder keyHolder = new GeneratedKeyHolder();

        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("job_id", migrate.getJobId())
                .addValue("status", migrate.getStatus().getValue())
                .addValue("first_import_id", migrate.getFirstImportId())
                .addValue("last_import_id", migrate.getLastImportId());

        reportingJdbcTempate.update(create, parameterSource, keyHolder);
        return Migrate.builder()
                .id(keyHolder.getKey().longValue())
                .jobId(migrate.getJobId())
                .status(migrate.getStatus())
                .firstImportId(migrate.getFirstImportId())
                .lastImportId(migrate.getLastImportId())
                .build();
    }

    @Override
    public void updateStatusById(final long id, final MigrateStatus status) {
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("id", id)
                .addValue("status", status.getValue());

        reportingJdbcTempate.update(updateStatusById, parameterSource);
    }
}
