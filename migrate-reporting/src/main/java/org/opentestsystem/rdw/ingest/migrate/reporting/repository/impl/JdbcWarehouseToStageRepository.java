package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseToStageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;

@Repository
public class JdbcWarehouseToStageRepository implements WarehouseToStageRepository {

    private NamedParameterJdbcTemplate warehouseJdbcTemplate;
    private NamedParameterJdbcTemplate reportingJdbcTemplate;

    @Autowired
    public JdbcWarehouseToStageRepository(final NamedParameterJdbcTemplate warehouseJdbcTemplate,
                                          final NamedParameterJdbcTemplate reportingJdbcTemplate) {

        this.warehouseJdbcTemplate = warehouseJdbcTemplate;
        this.reportingJdbcTemplate = reportingJdbcTemplate;

    }

    @Value("${sql.warehouseToStage.findWarehouseSubjects}")
    private String findWarehouseSubjects;

    @Value("${sql.warehouseToStage.findReportingSubjects}")
    private String findReportingSubjects;

    @Value("${sql.warehouseToStage.findWarehouseAsmtTypes}")
    private String findWarehouseAsmtType;

    @Value("${sql.warehouseToStage.findReportingAsmtTypes}")
    private String findReportingAsmtType;

    @Value("${sql.warehouseToStage.findWarehouseSubjectClaimScores}")
    private String findWarehouseSubjectClaimScore;

    @Value("${sql.warehouseToStage.findReportingSubjectClaimScores}")
    private String findReportingSubjectClaimScore;

    @Value("${sql.warehouseToStage.findDistinctImportContentInRange}")
    private String findDistinctImportContentInRange;

    @Override
    public List<Map<String, Object>> findWarehouseSubjects() {
        return warehouseJdbcTemplate.getJdbcOperations()
                .queryForList(findWarehouseSubjects);
    }

    @Override
    public List<Map<String, Object>> findReportingSubjects() {
        return reportingJdbcTemplate.getJdbcOperations()
                .queryForList(findReportingSubjects);
    }

    @Override
    public List<Map<String, Object>> findWarehouseAsmtTypes() {
        return warehouseJdbcTemplate.getJdbcOperations()
                .queryForList(findWarehouseAsmtType);
    }

    @Override
    public List<Map<String, Object>> findReportingAsmtTypes() {
        return reportingJdbcTemplate.getJdbcOperations()
                .queryForList(findReportingAsmtType);
    }

    @Override
    public List<Map<String, Object>> findWarehouseSubjectClaimScores() {
        return warehouseJdbcTemplate.getJdbcOperations()
                .queryForList(findWarehouseSubjectClaimScore);
    }

    @Override
    public List<Map<String, Object>> findReportingSubjectClaimScores() {
        return reportingJdbcTemplate.getJdbcOperations()
                .queryForList(findReportingSubjectClaimScore);
    }

    @Override
    public void truncateStaging(final Iterable<String> stagingTruncateStatements) {

        for (final String truncate : stagingTruncateStatements) {
            reportingJdbcTemplate.getJdbcOperations().execute(truncate);
        }
    }

    @Override
    public List<ImportContent> findDistinctImportContentInRange(Long fistImportId, Long lastImportId) {

        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("first_import_id", fistImportId)
                .addValue("last_import_id", lastImportId);

        List<Integer> contentValueList = reportingJdbcTemplate.queryForList(findDistinctImportContentInRange, parameterSource, Integer.class);

        // Build a list of enumerated import content in the batch.
        final List<ImportContent> contentList = newArrayList();
        for (final Integer value : contentValueList) {
            contentList.add(ImportContent.fromValue(value));
        }

        return contentList;
    }




}
