package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionException;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Import;
import org.springframework.stereotype.Component;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static java.lang.Thread.sleep;

@Component
@EnableBatchProcessing
@Import({MigrateReportingConfiguration.class})
public class MigrateBatchRunner implements BatchRunner {
    private static final Logger logger = LoggerFactory.getLogger(MigrateReportingApplication.class);

    @Autowired
    private JobLauncher jobLauncher;

    @Value("${migrate_batch_runner.sleep:50000}")
    private long sleepMillis;

    public void setSleepMillis(final long sleepMillis) {
        this.sleepMillis = sleepMillis;
    }

    @Autowired
    @Qualifier("migrateReportingJob")
    private Job job;

    public void run(String[] args) {
        try {
            while (true) {
                final Map<String, JobParameter> jobParametes = newHashMap();
                jobParametes.put("time", new JobParameter(System.currentTimeMillis()));
                final JobExecution jobExecution = jobLauncher.run(job, new JobParameters(jobParametes));

                logger.info("Completed job with id [" + jobExecution.getJobId() + "]");
                sleep(sleepMillis);
            }
        } catch (JobExecutionException ex) {
            logger.error("Job execution exception [" + ex.getMessage() + "]");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

}
