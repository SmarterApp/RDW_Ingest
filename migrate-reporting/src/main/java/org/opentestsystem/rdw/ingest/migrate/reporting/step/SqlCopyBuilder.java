package org.opentestsystem.rdw.ingest.migrate.reporting.step;


import org.opentestsystem.rdw.migrate.common.config.MigrateWarehouseToStagingSqlConfiguration.WarehouseToStageEntitySqls;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;

/**
 * Builder for SQLs from {@link WarehouseToStageEntitySqls}
 */
class SqlCopyBuilder {

    private final Map<String, WarehouseToStageEntitySqls> entities;
    private final List<SqlCopyStatements> sqlCopyStatements = newArrayList();

    /**
     * Constructor
     *
     * @param entities the entities (by name) with the supported {@link WarehouseToStageEntitySqls}
     */
    public SqlCopyBuilder(final Map<String, WarehouseToStageEntitySqls> entities) {
        this.entities = entities;
    }

    public List<SqlCopyStatements> build() {
        return sqlCopyStatements;
    }

    /**
     * Adds a next SQL statement based on the entity name and sql action name
     *
     * @param entityName the entity name
     * @return itself for chaining
     */
    public SqlCopyBuilder addNext(@NotNull final String entityName) {

        if (!entities.containsKey(entityName)) throw new IllegalArgumentException("unknown entity [" + entityName + "], check sql configuration");

        final Map<String, String> entitySqls = entities.get(entityName).getSql();
        final String read = entitySqls.get("warehouseRead");
        final String insert = entitySqls.get("stagingInsert");

        sqlCopyStatements.add(new SqlCopyStatements(read, insert));

        return this;
    }
}
