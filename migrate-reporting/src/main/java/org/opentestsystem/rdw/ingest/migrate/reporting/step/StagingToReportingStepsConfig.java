package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import com.google.common.collect.Lists;
import org.opentestsystem.rdw.ingest.common.util.SqlListBuilder;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStagingToWarehouseSqlConfiguration;
import org.opentestsystem.rdw.ingest.common.repository.SqlListExecutionRepository;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * Configuration for batch steps responsible for moving the data from staging to reporting
 */
@Configuration
public class StagingToReportingStepsConfig {
    private final StepBuilderFactory stepBuilderFactory;
    private final SqlListExecutionRepository sqlListExecutionRepository;
    private final MigrateStagingToWarehouseSqlConfiguration stagingToWarehouseSqlConfiguration;

    public static final String upsertCodesStepName = "upsertCodesStep";
    public static final String deleteCodesStepName = "deleteCodesStep";
    public static final String deleteEntitiesStepName = "deleteEntitiesStep";
    public static final String upsertOrganizationsStepName = "upsertOrganizationsStep";
    public static final String upsertAsmtsStepName = "upsertAsmtsStep";
    public static final String upsertStudentsAndGroupsStepName = "upsertStudentsAndGroupsStep";
    public static final String upsertExamsStepName = "upsertExamsStep";


    @Autowired
    public StagingToReportingStepsConfig(final StepBuilderFactory stepBuilderFactory,
                                         final MigrateStagingToWarehouseSqlConfiguration stagingToWarehouseSqlConfiguration,
                                         final SqlListExecutionRepository sqlListExecutionRepository) {

        this.stepBuilderFactory = stepBuilderFactory;
        this.stagingToWarehouseSqlConfiguration = stagingToWarehouseSqlConfiguration;
        this.sqlListExecutionRepository = sqlListExecutionRepository;
    }

    @Bean
    public Step deleteEntitiesStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        // main entities in the order to be migrated due to the dependencies
        final List<String> entities = newArrayList(
                "district",
                "school",
                "asmt",
                "item",
                "item_other_target",
                "item_common_core_standard",
                "asmt_score",
                "student",
                "student_ethnicity",
                "student_group",
                "user_student_group",
                "student_group_membership",
                "exam",
                "exam_item",
                "exam_available_accommodation");

        for (final String entity : Lists.reverse(entities)) {
            sqlsBuilder.addNext(entity, "delete");
        }
        return stepBuilderFactory.get(deleteEntitiesStepName)
                .tasklet(new SqlListExecutionStep(
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step upsertOrganizationsStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        sqlsBuilder.addNext("district", "update")
                .addNext("district", "insert")
                .addNext("school", "update")
                .addNext("school", "insert");

        return stepBuilderFactory.get(upsertOrganizationsStepName)
                .tasklet(new SqlListExecutionStep(
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step upsertStudentsAndGroupsStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        sqlsBuilder.addNext("student", "update")
                .addNext("student", "insert")
                .addNext("student_ethnicity", "insert")
                .addNext("student_ethnicity", "deleteAsPartOfParentUpdate")
                .addNext("student_group", "update")
                .addNext("student_group", "insert")
                .addNext("user_student_group", "insert")
                .addNext("user_student_group", "deleteAsPartOfParentUpdate")
                .addNext("student_group_membership", "insert")
                .addNext("student_group_membership", "deleteAsPartOfParentUpdate");

        return stepBuilderFactory.get(upsertStudentsAndGroupsStepName)
                .tasklet(new SqlListExecutionStep(
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step upsertAsmtsStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        sqlsBuilder.addNext("asmt", "update")
                .addNext("asmt", "insert")
                .addNext("asmt_score", "update")
                .addNext("asmt_score", "insert")
                .addNext("asmt_score", "deleteAsPartOfParentUpdate")
                .addNext("item", "update")
                .addNext("item", "insert")
                .addNext("item", "deleteAsPartOfParentUpdate")
                .addNext("item_common_core_standard", "insert")
                .addNext("item_common_core_standard", "deleteAsPartOfParentUpdate")
                .addNext("item_other_target", "insert")
                .addNext("item_other_target", "deleteAsPartOfParentUpdate");

        return stepBuilderFactory.get(upsertAsmtsStepName)
                .tasklet(new SqlListExecutionStep(
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step upsertExamsStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        sqlsBuilder.addNext("exam", "update")
                .addNext("exam", "insert")
                .addNext("exam_item", "update")
                .addNext("exam_item", "insert")
                .addNext("exam_item", "deleteAsPartOfParentUpdate")
                .addNext("exam_available_accommodation", "insert")
                .addNext("exam_available_accommodation", "deleteAsPartOfParentUpdate");


        return stepBuilderFactory.get(upsertExamsStepName)
                .tasklet(new SqlListExecutionStep(
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    // Code entities, in the order to be migrated due to the dependencies noted below
    static final List<String> codesEntities = newArrayList("common_core_standard",
            "grade", "completeness", "administration_condition", "ethnicity", "gender",
            "accommodation", "claim", "depth_of_knowledge", "math_practice", "item_trait_score",
            "target", //depends on claim
            "translation"
    );

    @Bean
    public Step upsertCodesStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        for (final String entity : codesEntities) {
            sqlsBuilder.addNext(entity, "update").addNext(entity, "insert");
        }
        return stepBuilderFactory.get(upsertCodesStepName)
                .tasklet(new SqlListCodesExecutionStep(
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step deleteCodesStep() {
        //delete has to be in the reverse order from the insert
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        for (final String entity : Lists.reverse(codesEntities)) {
            sqlsBuilder.addNext(entity, "delete");
        }
        return stepBuilderFactory.get(deleteCodesStepName)
                .tasklet(new SqlListCodesExecutionStep(
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

}
