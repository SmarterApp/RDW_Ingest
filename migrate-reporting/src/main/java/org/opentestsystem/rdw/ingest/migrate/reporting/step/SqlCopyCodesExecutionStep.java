package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlCopyWarehouseToStagingRepository;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.step.StepTasklet;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

import java.util.List;

/**
 * A step for executing {@link SqlCopyCodesExecutionStep#sqlCopyStatements} in the given order if
 * the {@link Migrate#isMigrateCodes()} is true
 * <p>
 * This implementation does not pass any additional parameter into SQLs.
 */
class SqlCopyCodesExecutionStep extends StepTasklet {

    private final SqlCopyWarehouseToStagingRepository repository;
    private final List<SqlCopyStatements> sqlCopyStatements;

    /**
     * Constructor
     *
     * @param repository        the repository
     * @param sqlCopyStatements the sqls to be executed by this step
     */
    public SqlCopyCodesExecutionStep(final SqlCopyWarehouseToStagingRepository repository,
                                     final List<SqlCopyStatements> sqlCopyStatements) {
        this.sqlCopyStatements = sqlCopyStatements;
        this.repository = repository;
    }

    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {
        if (getJobBatch(chunkContext).isMigrateCodes()) {
            repository.execute(sqlCopyStatements);
            return RepeatStatus.FINISHED;
        }
        return RepeatStatus.FINISHED;
    }
}
