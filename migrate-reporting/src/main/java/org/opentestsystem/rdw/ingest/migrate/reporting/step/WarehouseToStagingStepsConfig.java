package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateWarehouseToStagingSqlConfiguration;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlCopyWarehouseToStagingRepository;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.partition.support.Partitioner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.TaskExecutor;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.CODES;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.EXAM;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.GROUPS;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.ORGANIZATION;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.PACKAGE;

/**
 * Configuration for batch steps responsible for moving the data from staging to reporting
 */
@Configuration
public class WarehouseToStagingStepsConfig {
    @Value("${migrate.batch.gridSize}")
    private int gridSize;

    private final StepBuilderFactory stepBuilderFactory;
    private final SqlCopyWarehouseToStagingRepository repository;
    private final MigrateWarehouseToStagingSqlConfiguration warehouseToStagingSqlConfiguration;

    static final String StageCodesStepName = "stageCodesStep";
    static final String StageOrganizationsStepName = "stageOrganizationsStep";
    static final String StageGroupsStepName = "stageGroupsStep";
    static final String StagePackageStepName = "stagePackageStep";
    static final String PartitionedStageExamStep = "partitionedStageExamStep";

    @Autowired
    public WarehouseToStagingStepsConfig(final StepBuilderFactory stepBuilderFactory,
                                         final MigrateWarehouseToStagingSqlConfiguration warehouseToStagingSqlConfiguration,
                                         final SqlCopyWarehouseToStagingRepository repository) {

        this.stepBuilderFactory = stepBuilderFactory;
        this.warehouseToStagingSqlConfiguration = warehouseToStagingSqlConfiguration;
        this.repository = repository;
    }

    // Code entities, in the order to be staged due to the dependencies noted below
    static final List<String> codesEntities = newArrayList("common_core_standard",
            "grade", "completeness", "administration_condition", "ethnicity", "gender", "accommodation",
            "claim", "depth_of_knowledge", "math_practice", "item_trait_score",
            "target", //depends on claim
            "accommodation_translation" // depends on accommodation
    );

    @Bean
    public Step stageCodesStep() {
        final SqlCopyBuilder sqlsBuilder = new SqlCopyBuilder(warehouseToStagingSqlConfiguration.getEntities());

        for (final String entity : codesEntities) {
            sqlsBuilder.addNext(entity);
        }

        return stepBuilderFactory.get(StageCodesStepName)
                .tasklet(new SqlCopyAllExecutionStep(newArrayList(CODES),
                        repository,
                        sqlsBuilder.build())
                ).build();
    }

    @Bean
    public Step stageOrganizationsStep() {
        final SqlCopyBuilder sqlsBuilder = new SqlCopyBuilder(warehouseToStagingSqlConfiguration.getEntities());

        sqlsBuilder.addNext("district")
                .addNext("district_by_update_import_id")
                .addNext("school")
                .addNext("school_by_update_import_id");

        return stepBuilderFactory.get(StageOrganizationsStepName)
                .tasklet(new SqlCopyExecutionStep(newArrayList(ORGANIZATION),
                        repository,
                        sqlsBuilder.build())
                ).build();
    }

    @Bean
    public Step stageGroupsStep() {
        final SqlCopyBuilder sqlsBuilder = new SqlCopyBuilder(warehouseToStagingSqlConfiguration.getEntities());

        sqlsBuilder.addNext("student")
                .addNext("student_by_update_import_id")
                .addNext("student_ethnicity")
                .addNext("student_ethnicity_by_update_import_id")
                .addNext("student_group")
                .addNext("student_group_by_update_import_id")
                .addNext("student_group_membership")
                .addNext("user_student_group")
                .addNext("user_student_group_by_update_import_id");

        return stepBuilderFactory.get(StageGroupsStepName)
                .tasklet(new SqlCopyExecutionStep(newArrayList(EXAM, GROUPS),
                        repository,
                        sqlsBuilder.build())
                ).build();
    }

    @Bean
    public Step stagePackageStep() {
        final SqlCopyBuilder sqlsBuilder = new SqlCopyBuilder(warehouseToStagingSqlConfiguration.getEntities());

        sqlsBuilder.addNext("asmt")
                .addNext("asmt_by_update_import_id")
                .addNext("asmt_score")
                .addNext("asmt_score_by_update_import_id")
                .addNext("item")
                .addNext("item_by_update_import_id")
                .addNext("item_common_core_standard")
                .addNext("item_common_core_standard_by_update_import_id")
                .addNext("item_other_target")
                .addNext("item_other_target_by_update_import_id");

        return stepBuilderFactory.get(StagePackageStepName)
                .tasklet(new SqlCopyExecutionStep(newArrayList(PACKAGE),
                        repository,
                        sqlsBuilder.build())
                ).build();
    }

    @Bean
    public Step partitionedStageExamStep(final Partitioner partitioner) {
        return stepBuilderFactory.get(PartitionedStageExamStep)
                .partitioner(stepBuilderFactory.get("importIdPartitioner")
                        .tasklet(stageExamStep())
                        .build())
                .partitioner("importIdPartitioner", partitioner)
                .gridSize(gridSize)
                .taskExecutor(taskExecutor())
                .build();
    }

    @Bean
    public TaskExecutor taskExecutor() {
        final ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();
        taskExecutor.setMaxPoolSize(gridSize);
        taskExecutor.afterPropertiesSet();
        return taskExecutor;
    }

    private StepTasklet stageExamStep() {
        final SqlCopyBuilder sqlsBuilder = new SqlCopyBuilder(warehouseToStagingSqlConfiguration.getEntities())
                .addNext("exam_student")
                .addNext("exam")
                .addNext("exam_by_update_import_id")
                .addNext("exam_item")
                .addNext("exam_item_by_update_import_id")
                .addNext("exam_available_accommodation")
                .addNext("exam_available_accommodation_by_update_import_id")
                .addNext("exam_claim_score")
                .addNext("exam_claim_score_by_update_import_id");

        return new SqlCopyExecutionStep(newArrayList(EXAM),
                repository,
                sqlsBuilder.build());
    }
}
