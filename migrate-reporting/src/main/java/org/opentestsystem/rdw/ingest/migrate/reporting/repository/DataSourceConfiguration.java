package org.opentestsystem.rdw.ingest.migrate.reporting.repository;

import org.springframework.batch.core.configuration.annotation.BatchConfigurer;
import org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;
import org.opentestsystem.rdw.ingest.migrate.reporting.TenantConfiguration;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsProperties;
import org.opentestsystem.rdw.multitenant.datasource.DataSourceElementsResolver;
import org.opentestsystem.rdw.multitenant.datasource.TenantDynamicRoutingDataSource;

/**
 * Configuration for DataSources.
 * <p>
 * There are two datasources: it pulls data from the warehouse and writes it to reporting.
 * </p>
 */
@Configuration
@EnableTransactionManagement
@ComponentScan("org.opentestsystem.rdw.migrate.common")
@Import(TenantConfiguration.class)
public class DataSourceConfiguration {

    // ************************************************************************
    // reporting datasource
    // ************************************************************************

    @Bean
    @ConfigurationProperties("datasources.reporting_rw")
    @RefreshScope
    public DataSourceElementsProperties reportingDataSourceElementsProperties() {
        return new DataSourceElementsProperties();
    }

    @Bean
    @RefreshScope
    public DataSourceElementsResolver reportingDataSourceElementsResolver(final TenantKeyResolver tenantKeyResolver) {
        return new DataSourceElementsResolver(tenantKeyResolver, reportingDataSourceElementsProperties());
    }

    @Primary
    @Bean
    @RefreshScope
    public DataSource reportingDataSource(final TenantKeyResolver tenantKeyResolver) {
        return new TenantDynamicRoutingDataSource(reportingDataSourceElementsResolver(tenantKeyResolver), tenantKeyResolver);
    }

    /**
     * @return the jdbc template used for reading and writing to the reporting data mart
     */
    @Bean
    public NamedParameterJdbcTemplate reportingJdbcTemplate(@Qualifier("reportingDataSource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    /**
     * @return the jdbc template used for reading and writing to the migrate table
     */
    @Bean
    public NamedParameterJdbcTemplate migrateJdbcTemplate(@Qualifier("reportingDataSource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

    /**
     * @return a classic jdbc template for tests and special operations on the reporting data mart
     */
    @Primary
    @Bean
    public JdbcTemplate reportingClassicJdbcTemplate(@Qualifier("reportingDataSource") final DataSource dataSource) {
        return new JdbcTemplate(dataSource);
    }

    /**
     * Spring Batch needs this if setting the data source.
     * In addition to the primary being set.
     *
     * @return BatchConfigurer
     */
    @Bean
    public BatchConfigurer configurer(@Qualifier("reportingDataSource") final DataSource dataSource) {
        return new DefaultBatchConfigurer(dataSource);
    }

    // ************************************************************************
    // warehouse datasource
    // ************************************************************************

    @Bean
    @ConfigurationProperties("datasources.warehouse_rw")
    @RefreshScope
    public DataSourceElementsProperties warehouseDataSourceElementsProperties() {
        return new DataSourceElementsProperties();
    }

    @Bean
    @RefreshScope
    public DataSourceElementsResolver warehouseDataSourceElementsResolver(final TenantKeyResolver tenantKeyResolver) {
        return new DataSourceElementsResolver(tenantKeyResolver, warehouseDataSourceElementsProperties());
    }

    @Bean
    @RefreshScope
    public DataSource warehouseDataSource(final TenantKeyResolver tenantKeyResolver) {
        return new TenantDynamicRoutingDataSource(warehouseDataSourceElementsResolver(tenantKeyResolver), tenantKeyResolver);
    }

    /**
     * @return the jdbc template used for reading from the data warehouse
     */
    @Bean
    public NamedParameterJdbcTemplate warehouseJdbcTemplate(@Qualifier("warehouseDataSource") final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }
}
