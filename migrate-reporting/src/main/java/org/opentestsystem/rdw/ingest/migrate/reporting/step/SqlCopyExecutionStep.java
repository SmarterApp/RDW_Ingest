package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlCopyWarehouseToStagingRepository;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A generic step for executing {@link SqlCopyExecutionStep#sqlCopyStatements} in the given order if
 * the {@link MigrateBatch} has at least one content from the {@link SqlCopyExecutionStep#supportedContents}
 */
class SqlCopyExecutionStep extends StepTasklet {

    private final SqlCopyWarehouseToStagingRepository repository;
    private final List<SqlCopyStatements> sqlCopyStatements;
    private final Iterable<ImportContent> supportedContents;

    /**
     * Constructor
     *
     * @param supportedContents the list of the {@link ImportContent} supported by this step
     * @param repository        the repository
     * @param sqlCopyStatements the sqls to be executed by this step
     */
    public SqlCopyExecutionStep(final Iterable<ImportContent> supportedContents,
                                final SqlCopyWarehouseToStagingRepository repository,
                                final List<SqlCopyStatements> sqlCopyStatements) {
        this.sqlCopyStatements = sqlCopyStatements;
        this.supportedContents = supportedContents;
        this.repository = repository;
    }

    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {

        // hack for now
        final Migrate migrate = Migrate.builder()
                .firstImportId(1L)
                .lastImportId(5L)
                .jobId(1)
                .status(MigrateStatus.STARTED)
                .build();

        for (final ImportContent supportedContent : supportedContents) {

            if (getJobBatch(chunkContext).getImportContent().contains(supportedContent)) {

                repository.execute(sqlCopyStatements, -1, new MigrateBatch(migrate, newArrayList()));

                return RepeatStatus.FINISHED;
            }
        }
        return RepeatStatus.FINISHED;
    }

    @VisibleForTesting
    List<SqlCopyStatements> getSqlCopyStatements() {
        return sqlCopyStatements;
    }

    @VisibleForTesting
    Iterable<ImportContent> getSupportedContents() {
        return newArrayList(supportedContents);
    }
}
