package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlCopyWarehouseToStagingRepository;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.repeat.RepeatStatus;

import java.util.List;

import static org.opentestsystem.rdw.ingest.migrate.reporting.JobParams.FirstImportId;
import static org.opentestsystem.rdw.ingest.migrate.reporting.JobParams.LastImportId;

/**
 * A generic step for executing {@link SqlCopyExecutionStep#sqlCopyStatements} in the given order if
 * the {@link MigrateBatch} has at least one content from the {@link SqlCopyExecutionStep#supportedContents}
 * <p>
 * When executing SQLs, the {@link MigrateBatch} import ids are passed into the warehouse queries, that the id of
 * the batch is given to the staging query
 */
class SqlCopyExecutionStep extends StepTasklet {

    private final SqlCopyWarehouseToStagingRepository repository;
    private final List<SqlCopyStatements> sqlCopyStatements;
    private final Iterable<ImportContent> supportedContents;

    /**
     * Constructor
     *
     * @param supportedContents the list of the {@link ImportContent} supported by this step
     * @param repository        the repository
     * @param sqlCopyStatements the sqls to be executed by this step
     */
    public SqlCopyExecutionStep(final Iterable<ImportContent> supportedContents,
                                final SqlCopyWarehouseToStagingRepository repository,
                                final List<SqlCopyStatements> sqlCopyStatements) {
        this.sqlCopyStatements = sqlCopyStatements;
        this.supportedContents = supportedContents;
        this.repository = repository;
    }

    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {
        for (final ImportContent supportedContent : supportedContents) {
            if (getJobBatch(chunkContext).getImportContent().contains(supportedContent)) {

                final Migrate migrate = getJobBatch(chunkContext).getMigrate();
                final ExecutionContext ex = chunkContext.getStepContext().getStepExecution().getExecutionContext();

                // step's import ids (when present) take priority over job's to support steps partitioned for parallel execution
                final long firstImportId = ex.containsKey(FirstImportId) ? ex.getLong(FirstImportId) : migrate.getFirstImportId();
                final long lastImportId = ex.containsKey(LastImportId) ? ex.getLong(LastImportId) : migrate.getLastImportId();

                repository.execute(sqlCopyStatements, firstImportId, lastImportId, migrate.getId());
                return RepeatStatus.FINISHED;
            }
        }
        return RepeatStatus.FINISHED;
    }
}
