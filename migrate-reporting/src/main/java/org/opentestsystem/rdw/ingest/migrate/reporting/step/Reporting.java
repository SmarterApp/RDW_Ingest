package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

@Component
public class Reporting extends StepTasklet {
    private static final Logger logger = LoggerFactory.getLogger(Reporting.class);

    @Value("${sql.reporting.findMigrateLastImportId}")
    private String findMigrateLastImportId;

    @Autowired
    @Qualifier("reportingJdbcTemplate")
    private NamedParameterJdbcTemplate reportingJdbcTemplate;

    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {

        final MigrateBatch batch = getJobBatch(chunkContext);
        logger.info("batch max import id" + batch.getStartImportId());

        final Integer max_last_import_id = reportingJdbcTemplate
                .getJdbcOperations()
                .queryForObject(findMigrateLastImportId, Integer.class);

        logger.info("=== query for reporting ===  Max last_import_id: " + max_last_import_id);
        return RepeatStatus.FINISHED;
    }
}
