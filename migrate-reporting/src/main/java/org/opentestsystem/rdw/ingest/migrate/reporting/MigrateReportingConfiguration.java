package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.opentestsystem.rdw.ingest.migrate.reporting.listener.MigrateJobCompletionListener;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlListExecutionRepository;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.Reporting;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.SqlListExecutionStep;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.Warehouse;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.CODES;

/**
 * MigrateReportingConfiguration.
 * Spring Batch configuration for the migrate to reporting {@link Job}.
 */
@Configuration
public class MigrateReportingConfiguration {

    private final JobBuilderFactory jobBuilderFactory;
    private final StepBuilderFactory stepBuilderFactory;
    private final SqlListExecutionRepository sqlListExecutionRepository;
    private final MigrateStagingToWarehouseSqlConfiguration stagingToWarehouseSqlConfiguration;

    public static final String stepReportingName = "stepReporting";
    public static final String stepWarehouseName = "stepWarehouse";
    public static final String stepUpsertCodesName = "stepUpsertCodes";
    public static final String stepDeleteCodesName = "stepDeleteCodes";

    // Code entities in the order to be migrated
    public static final String[] codesEntities = {"grade", "completeness", "administration_condition", "ethnicity", "gender",
            "accommodation", "claim", "subject_claim_score", "item_difficulty_cuts", "administration_condition", "target",
            "depth_of_knowledge", "math_practice", "item_trait_score", "item_difficulty_cuts"};


    @Autowired
    public MigrateReportingConfiguration(final JobBuilderFactory jobBuilderFactory,
                                         final StepBuilderFactory stepBuilderFactory,
                                         final MigrateStagingToWarehouseSqlConfiguration stagingToWarehouseSqlConfiguration,
                                         final SqlListExecutionRepository sqlListExecutionRepository) {

        this.jobBuilderFactory = jobBuilderFactory;
        this.stepBuilderFactory = stepBuilderFactory;
        this.stagingToWarehouseSqlConfiguration = stagingToWarehouseSqlConfiguration;
        this.sqlListExecutionRepository = sqlListExecutionRepository;
    }

    @Bean
    public JobExecutionListener listener() {
        return new MigrateJobCompletionListener();
    }

    @Bean
    public Job migrateReportingJob(@Qualifier("reportingStep") final Step reporting,
                                   @Qualifier("warehouseStep") final Step warehouse,
                                   @Qualifier("upsertCodesStep") final Step upsertCodes,
                                   @Qualifier("deleteCodesStep") final Step deleteCodes) {
        try {

            return jobBuilderFactory.get("Migrate Reporting Job")
                    .incrementer(new RunIdIncrementer())
                    .listener(listener())
                    .start(warehouse)
                    .next(upsertCodes)
                    .next(reporting)
                    .next(deleteCodes)
                    .build();
        } catch (Exception e) {
            return null;
        }
    }

    @Bean
    public Step reportingStep(final Reporting reporting) {
        return stepBuilderFactory.get(stepReportingName)
                .tasklet(reporting).build();
    }

    @Bean
    public Step warehouseStep(final Warehouse warehouse) {
        return stepBuilderFactory.get(stepWarehouseName)
                .tasklet(warehouse).build();
    }

    @Bean
    public Step upsertCodesStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        for (final String entity : codesEntities) {
            sqlsBuilder.addNext(entity, "update").addNext(entity, "insert");
        }

        return stepBuilderFactory.get(stepUpsertCodesName)
                .tasklet(new SqlListExecutionStep(newArrayList(CODES),
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step deleteCodesStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        for (int i = codesEntities.length - 1; i >= 0; i--) {
            sqlsBuilder.addNext(codesEntities[i], "delete");
        }
        return stepBuilderFactory.get(stepDeleteCodesName)
                .tasklet(new SqlListExecutionStep(newArrayList(CODES),
                        sqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }
}
