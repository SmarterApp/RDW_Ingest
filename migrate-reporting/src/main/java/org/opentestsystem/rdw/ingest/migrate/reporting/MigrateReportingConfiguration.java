package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.opentestsystem.rdw.ingest.migrate.reporting.listener.MigrateJobCompletionListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.BatchConfigurer;
import org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.repository.support.JobRepositoryFactoryBean;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.batch.support.transaction.ResourcelessTransactionManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.transaction.PlatformTransactionManager;

import javax.sql.DataSource;

/**
 * MigrateReportingConfiguration.
 * Define the spring batch components to migrate data from the data warehouse to the reporting data mart.
 *
 */
@Configuration
@EnableBatchProcessing
public class MigrateReportingConfiguration {
    private static final Logger logger = LoggerFactory.getLogger(MigrateReportingConfiguration.class);

    @Value("${sql.reporting.findMigrateLastImportId}")
    private String findMigrateLastImportId;

    @Value("${sql.warehouse.findMaxExamImportId}")
    private String findMaxExamImportId;

    //todo: move to constructor after resolving where to put batch tables, data source and transactions.
    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired
    private StepBuilderFactory stepBuilderFactory;

    @Autowired
    @Qualifier("reportingJdbcTemplate")
    private NamedParameterJdbcTemplate reportingJdbcTemplate;

    @Autowired
    @Qualifier("warehouseJdbcTemplate")
    private NamedParameterJdbcTemplate warehouseJdbcTemplate;

    @Bean
    public JobExecutionListener listener() {
        return new MigrateJobCompletionListener();
    }

    @Bean
    public PlatformTransactionManager transactionManager() {
        return new ResourcelessTransactionManager();
    }

    @Primary
    @Bean(name = "batchDataSource")
    @ConfigurationProperties(prefix = "spring.batch_datasource")
    public DataSource batchDataSource() {
        return DataSourceBuilder
                .create()
                .build();
    }

    @Bean
    BatchConfigurer configurer(DataSource dataSource) {
        return new DefaultBatchConfigurer(dataSource);
    }

    @Bean
    public JobRepository jobRepository() throws Exception {
        JobRepositoryFactoryBean factory = new JobRepositoryFactoryBean();
        factory.setDataSource(batchDataSource());
        factory.setDatabaseType("MySQL");
        factory.setTransactionManager(transactionManager());
        factory.setIsolationLevelForCreate("ISOLATION_DEFAULT");
        factory.setValidateTransactionState(false);
        factory.afterPropertiesSet();
        return factory.getObject();
    }

    @Bean
    public Job migrateReportingJob() {
        try {
            return jobBuilderFactory.get("Migrate Reporting Job")
                    .repository(jobRepository())
                    .incrementer(new RunIdIncrementer())
                    .listener(listener())
                    .flow(stepReporting())
                    .next(stepWarehouse())
                    .end()
                    .build();
        } catch (Exception e) {
            return null;
        }
    }

    @Bean
    public Step stepReporting() {
        return stepBuilderFactory.get("stepReporting")
                .tasklet((contribution, chunkContext) -> {

                    final Integer max_last_import_id = reportingJdbcTemplate
                            .getJdbcOperations()
                            .queryForObject(findMigrateLastImportId, Integer.class);

                    logger.info("=== query for reporting ===  Max last_import_id: " + max_last_import_id);
                    return RepeatStatus.FINISHED;
                }).build();
    }

    @Bean
    public Step stepWarehouse() {
        return stepBuilderFactory.get("stepWarehouse")
                .tasklet((contribution, chunkContext) -> {

                    final Integer max = warehouseJdbcTemplate
                            .getJdbcOperations()
                            .queryForObject(findMaxExamImportId, Integer.class);

                    logger.info("=== query for reporting ===  Max exam import id: " + max);
                    return RepeatStatus.FINISHED;
                }).build();
    }

}
