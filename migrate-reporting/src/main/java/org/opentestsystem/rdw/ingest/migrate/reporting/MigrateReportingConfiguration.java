package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.opentestsystem.rdw.ingest.migrate.reporting.listener.MigrateJobCompletionListener;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.DeleteCodes;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.Reporting;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.UpsertCodes;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.Warehouse;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.job.builder.FlowBuilder;
import org.springframework.batch.core.job.flow.Flow;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import static org.opentestsystem.rdw.ingest.migrate.reporting.MigrateExitStatus.COMPLETED_WITH_CODES;

/**
 * MigrateReportingConfiguration.
 * Spring Batch configuration for the migrate to reporting {@link Job}.
 */
@Configuration
public class MigrateReportingConfiguration {

    private final JobBuilderFactory jobBuilderFactory;
    private final StepBuilderFactory stepBuilderFactory;

    public static final String stepReportingName = "stepReporting";
    public static final String stepWarehouseName = "stepWarehouse";
    public static final String stepUpsertCodesName = "stepUpsertCodes";
    public static final String stepDeleteCodesName = "stepDeleteCodes";

    @Autowired
    public MigrateReportingConfiguration(final JobBuilderFactory jobBuilderFactory,
                                         final StepBuilderFactory stepBuilderFactory) {

        this.jobBuilderFactory = jobBuilderFactory;
        this.stepBuilderFactory = stepBuilderFactory;
    }

    @Bean
    public JobExecutionListener listener() {
        return new MigrateJobCompletionListener();
    }

    @Bean
    public Job migrateReportingJob(@Qualifier("stepReporting") final Step reporting,
                                   @Qualifier("stepWarehouse") final Step warehouse,
                                   @Qualifier("stepUpsertCodes") final Step upsertCodes,
                                   @Qualifier("stepDeleteCodes") final Step deleteCodes) {
        try {

            final Flow coreMigrateFlow = new FlowBuilder<Flow>("coreMigrateFlow")
                    .start(reporting).build();

            final Flow migrateFlow = new FlowBuilder<Flow>("migrate")
                    .start(warehouse).on(COMPLETED_WITH_CODES.getExitCode()).to(upsertCodes).next(coreMigrateFlow).next(deleteCodes)
                    .from(warehouse).on("*").to(coreMigrateFlow)
                    .build();

            return jobBuilderFactory.get("Migrate Reporting Job")
                    .incrementer(new RunIdIncrementer())
                    .listener(listener())
                    .start(migrateFlow)
                    .end()
                    .build();
        } catch (Exception e) {
            return null;
        }
    }

    @Bean(name = "stepReporting")
    public Step stepReporting(final Reporting reporting) {
        return stepBuilderFactory.get(stepReportingName)
                .tasklet(reporting).build();
    }

    @Bean(name = "stepWarehouse")
    public Step stepWarehouse(final Warehouse warehouse) {
        return stepBuilderFactory.get(stepWarehouseName)
                .tasklet(warehouse).build();
    }

    @Bean(name = "stepUpsertCodes")
    public Step stepUpsertCodes(final UpsertCodes upsertCodes) {
        return stepBuilderFactory.get(stepUpsertCodesName)
                .tasklet(upsertCodes).build();
    }

    @Bean(name = "stepDeleteCodes")
    public Step stepDeleteCodes(final DeleteCodes deleteCodes) {
        return stepBuilderFactory.get(stepDeleteCodesName)
                .tasklet(deleteCodes).build();
    }
}
