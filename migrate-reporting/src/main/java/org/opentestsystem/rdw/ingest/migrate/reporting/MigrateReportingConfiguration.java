package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.opentestsystem.rdw.ingest.migrate.reporting.listener.MigrateJobCompletionListener;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.Reporting;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.Warehouse;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.job.builder.FlowBuilder;
import org.springframework.batch.core.job.flow.Flow;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * MigrateReportingConfiguration.
 * Spring Batch configuration for the migrate to reporting {@link Job}.
 */
@Configuration
public class MigrateReportingConfiguration {

    private final Reporting reportingStep;
    private final Warehouse warehouseStep;
    private final JobBuilderFactory jobBuilderFactory;
    private final StepBuilderFactory stepBuilderFactory;

    public static final String stepReportingName = "stepReporting";
    public static final String stepWarehouseName = "stepWarehouse";

    @Autowired
    public MigrateReportingConfiguration(final JobBuilderFactory jobBuilderFactory,
                                         final StepBuilderFactory stepBuilderFactory,
                                         final Reporting reportingStep,
                                         final Warehouse warehouseStep) {

        this.jobBuilderFactory = jobBuilderFactory;
        this.stepBuilderFactory = stepBuilderFactory;
        this.reportingStep = reportingStep;
        this.warehouseStep = warehouseStep;
    }

    @Bean
    public JobExecutionListener listener() {
        return new MigrateJobCompletionListener();
    }

    @Bean
    public Job migrateReportingJob() {
        try {
            final Flow migrateFlow = new FlowBuilder<Flow>("migrate")
                    .start(stepWarehouse()).on("withCodes").to(stepReporting())
                    .from(stepWarehouse()).on("*").to(stepReporting()).build();

            return jobBuilderFactory.get("Migrate Reporting Job")
                    .incrementer(new RunIdIncrementer())
                    .listener(listener())
                    .start(migrateFlow)
                    .end()
                    .build();
        } catch (Exception e) {
            return null;
        }
    }

    @Bean
    public Step stepReporting() {
        return stepBuilderFactory.get(stepReportingName)
                .tasklet(reportingStep).build();
    }

    @Bean
    public Step stepWarehouse() {
        return stepBuilderFactory.get(stepWarehouseName)
                .tasklet(warehouseStep).build();
    }

}
