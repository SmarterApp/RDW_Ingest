package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.listener.JobExecutionListenerSupport;
import org.springframework.batch.core.partition.support.Partitioner;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.stereotype.Component;

import java.util.Map;

import static com.google.common.base.Preconditions.checkArgument;
import static java.lang.Math.abs;
import static org.hibernate.validator.internal.util.CollectionHelper.newHashMap;
import static org.opentestsystem.rdw.ingest.migrate.reporting.JobParams.FirstImportId;
import static org.opentestsystem.rdw.ingest.migrate.reporting.JobParams.LastImportId;

/**
 * The {@link JobExecutionListenerSupport} to perform before/after job steps, as well as {@link Partitioner}
 * to partition job's parameter for parallel execution
 */
@Component
public class MigrateJobPartitioner extends JobExecutionListenerSupport implements Partitioner {
    private static final String PARTITION_KEY = "partition";
    private Long firstImportId;
    private Long lastImportId;

    @Override
    public void beforeJob(final JobExecution jobExecution) {
        final JobParameters jobParameters = jobExecution.getJobParameters();
        firstImportId = jobParameters.getLong(FirstImportId);
        lastImportId = jobParameters.getLong(LastImportId);
    }

    @Override
    public Map<String, ExecutionContext> partition(final int gridSize) {
        checkArgument(firstImportId != null, "Partitioner must be initialized with the firstImportId");
        checkArgument(lastImportId != null, "Partitioner must be initialized with the lastImportId");

        final Map<String, ExecutionContext> map = newHashMap(gridSize);
        final long size = (long) Math.ceil((double) (lastImportId - firstImportId + 1) / gridSize);
        final long numOfPartitions = abs(lastImportId - firstImportId + 1) > gridSize ? gridSize : abs(lastImportId - firstImportId + 1);

        long first = firstImportId;
        for (int i = 0; i < numOfPartitions; ++i, first += size) {
            final ExecutionContext ex = new ExecutionContext();
            ex.put(FirstImportId, first);
            ex.put(LastImportId, Math.min(first + size - 1, lastImportId));
            map.put(PARTITION_KEY + i, ex);
        }
        return map;
    }
}
