package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.IncorrectResultSizeDataAccessException;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public class JdbcWarehouseImportRepository implements WarehouseImportRepository {

    @Value("${sql.warehouse.import.findMaxImportId}")
    private String findMaxImportId;

    @Value("${sql.warehouse.import.findMinImportId}")
    private String findMinImportId;

    private NamedParameterJdbcTemplate warehouseJdbcTemplate;

    @Autowired
    public JdbcWarehouseImportRepository(final NamedParameterJdbcTemplate warehouseJdbcTemplate) {
        this.warehouseJdbcTemplate = warehouseJdbcTemplate;
    }

    @Override
    public Optional<Long> findMaxImportId() {
        try {
            return Optional.ofNullable(warehouseJdbcTemplate.getJdbcOperations().queryForObject(findMaxImportId, Long.class));
        } catch (IncorrectResultSizeDataAccessException ex) {
            return Optional.empty();
        }
    }

    @Override
    public Optional<Long> findMinImportId() {
        try {
            return Optional.ofNullable(warehouseJdbcTemplate.getJdbcOperations().queryForObject(findMinImportId, Long.class));
        } catch (IncorrectResultSizeDataAccessException ex) {
            return Optional.empty();
        }
    }

}
