package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateJobState;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class JdbcWarehouseImportRepository implements WarehouseImportRepository {

    @Value("${sql.warehouse.import.findAllImportStatus}")
    private String sqlFindAllImportStatus;

    @Value("${sql.warehouse.import.findImportState}")
    private String sqlFindImportState;

    private final NamedParameterJdbcTemplate warehouseJdbcTemplate;

    @Autowired
    public JdbcWarehouseImportRepository(final NamedParameterJdbcTemplate warehouseJdbcTemplate) {
        this.warehouseJdbcTemplate = warehouseJdbcTemplate;
    }

    @Override
    public MigrateJobState getMigrateJobState(final Long prev, final int batchSize) {
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("prev", prev)
                .addValue("size", batchSize);
        return warehouseJdbcTemplate.queryForObject(sqlFindImportState, parameterSource, new RowMapper<MigrateJobState>() {
            @Override
            public MigrateJobState mapRow(final ResultSet rs, final int rowNum) throws SQLException {
                // The query gives us the raw numbers, which we have to clean up a bit.
                // if start is null there is no work to do so set everything null and return
                // dealing with blocker (if set):
                //   if blocker < start then set start=stop=null, return  <-- fully blocked
                //   if blocker < stop then set stop=blocker-1, return    <-- partially blocked
                //   otherwise set blocker=null (since it isn't affecting this block), return
                final Long start = getLongNullable(rs, "start");
                final Long stop = getLongNullable(rs, "stop");
                final Long blocker = getLongNullable(rs, "blocker");
                if (start == null) {
                    return new MigrateJobState(null, null, null);
                }
                if (blocker != null && blocker < start) {
                    return new MigrateJobState(null, null, blocker);
                }
                if (blocker != null && blocker < stop) {
                    return new MigrateJobState(start, blocker - 1, blocker);
                }
                return new MigrateJobState(start, stop, null);
            }

            private Long getLongNullable(final ResultSet rs, final String column) throws SQLException {
                final Long value = rs.getLong(column);
                return rs.wasNull() ? null : value;
            }
        });
    }

    @Override
    public List<ImportStatus> findAllImportStatus() {
        return warehouseJdbcTemplate.query(sqlFindAllImportStatus, (rs, rowNum) -> ImportStatus.valueOf(rs.getString("name")));
    }
}
