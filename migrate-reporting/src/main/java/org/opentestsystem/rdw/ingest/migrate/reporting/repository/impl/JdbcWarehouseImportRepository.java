package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.IncorrectResultSizeDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public class JdbcWarehouseImportRepository implements WarehouseImportRepository {

    private static final Logger logger = LoggerFactory.getLogger(JdbcWarehouseImportRepository.class);

    @Value("${sql.warehouse.import.findMinImportId}")
    private String findMinImportId;

    @Value("${sql.warehouse.import.findMaxImportIdNotMigrated}")
    private String findMaxImportIdNotMigrated;

    private NamedParameterJdbcTemplate warehouseJdbcTemplate;

    @Autowired
    public JdbcWarehouseImportRepository(final NamedParameterJdbcTemplate warehouseJdbcTemplate) {
        this.warehouseJdbcTemplate = warehouseJdbcTemplate;
    }

    @Override
    public Optional<Long> findMinImportId() {
        try {
            return Optional.ofNullable(warehouseJdbcTemplate.getJdbcOperations().queryForObject(findMinImportId, Long.class));
        } catch (IncorrectResultSizeDataAccessException ex) {
            return Optional.empty();
        }
    }

    @Override
    public Optional<Long> findMaxImportIdNotMigrated(Long lastImportId, Integer batchSize) {

        try {
            final SqlParameterSource parameterSource = new MapSqlParameterSource()
                    .addValue("last_import_id", lastImportId)
                    .addValue("batch_size", batchSize);
            return Optional.ofNullable(warehouseJdbcTemplate.queryForObject(findMaxImportIdNotMigrated, parameterSource, Long.class));

        } catch (final IncorrectResultSizeDataAccessException ignore) {
            logger.warn("Incorrect number of results found with lastImportId [" + lastImportId + "] and batchSize [" + batchSize + "] ");
            return Optional.empty();
        }
    }

}
