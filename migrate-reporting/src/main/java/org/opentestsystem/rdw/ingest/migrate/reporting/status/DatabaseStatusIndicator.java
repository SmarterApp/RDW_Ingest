package org.opentestsystem.rdw.ingest.migrate.reporting.status;

import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A {@link StatusIndicator} for database status.
 * <p>
 * Slightly different than web diagnostic spec this adds "databaseOperations",
 * each being a Status with "schema", "type" (READ/WRITE), and "responseTime".
 * </p>
 * TODO - there are other schemas: staging, spring-batch
 */
@Component
public class DatabaseStatusIndicator extends AbstractStatusIndicator {

    private final WarehouseImportRepository warehouseRepository;
    private final ReportingMigrateRepository reportingRepository;

    public DatabaseStatusIndicator(final WarehouseImportRepository warehouseRepository,
                                   final ReportingMigrateRepository reportingRepository) {
        this.warehouseRepository = warehouseRepository;
        this.reportingRepository = reportingRepository;
    }

    @Override
    public String name() {
        return "database";
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ReadDatabase.isLessThanOrEqualTo(level);
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        final List<Status> databaseOperations = newArrayList();
        databaseOperations.addAll(doWarehouseStatusCheck(level));
        databaseOperations.addAll(doReportingStatusCheck(level));
        builder.detail("databaseOperations", databaseOperations);
        builder.worstRating(databaseOperations);
    }

    private List<Status> doWarehouseStatusCheck(final int level) {
        // the system only ever reads from warehouse so just one check here
        final Status.Builder opBuilder = Status.builder().detail("schema", "warehouse").detail("type", "READ");
        responseTime(opBuilder, 50, warehouseRepository::findAllImportStatus);
        return newArrayList(opBuilder.build());
    }

    private List<Status> doReportingStatusCheck(final int level) {
        final List<Status> ops = newArrayList();

        // READ
        if (DiagnosticLevel.ReadDatabase.isLessThanOrEqualTo(level)) {
            final Status.Builder opBuilder = Status.builder().detail("schema", "reporting").detail("type", "READ");
            responseTime(opBuilder, 50, reportingRepository::findLastStatus);
            ops.add(opBuilder.build());
        }

        // WRITE
        if (DiagnosticLevel.WriteDatabase.isLessThanOrEqualTo(level)) {
            // create and delete a migrate record; make sure it has data that won't mess anything up
            final Status.Builder opBuilder = Status.builder().detail("schema", "reporting").detail("type", "WRITE");
            final Migrate migrate = responseTime(opBuilder, 300, () ->
                    reportingRepository.create(Migrate.builder()
                    .jobId(0)
                    .status(MigrateStatus.ABANDONED)
                    .firstImportId(0)
                    .lastImportId(0)
                    .build()));
            reportingRepository.delete(migrate.getId());
            ops.add(opBuilder.build());
        }

        return ops;
    }
}
