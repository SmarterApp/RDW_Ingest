package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlCopyWarehouseToStagingRepository;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlListExecutionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

/**
 * Jdbc implementation of {@link SqlListExecutionRepository}.
 */
@Repository
class JdbcSqlCopyWarehouseToStagingRepository implements SqlCopyWarehouseToStagingRepository {

    private final  NamedParameterJdbcTemplate reportingJdbcTemplate;
    private final NamedParameterJdbcTemplate warehouseJdbcTemplate;

    @Autowired
    public JdbcSqlCopyWarehouseToStagingRepository( NamedParameterJdbcTemplate reportingJdbcTemplate,
                                                    NamedParameterJdbcTemplate warehouseJdbcTemplate) {
        this.reportingJdbcTemplate = reportingJdbcTemplate;
        this.warehouseJdbcTemplate = warehouseJdbcTemplate;
    }

    @Transactional
    @Override
    public void execute(final String warehouseReadSql,
                        final String stagingInsertSql,
                        final int migrateId,
                        final MigrateBatch migrateBatch) {

        final List<Map<String, Object>> result = warehouseJdbcTemplate.queryForList(warehouseReadSql,
                new MapSqlParameterSource("start_import_id", migrateBatch.getMigrate().getFirstImportId())
                        .addValue("end_importId", migrateBatch.getMigrate().getFirstImportId()));

        if (result.isEmpty()) return;

        final MapSqlParameterSource[] stagingParams = new MapSqlParameterSource[result.size()];
        int i = 0;
        for (final Map<String, Object> row : result) {

            final MapSqlParameterSource parameterSource = new MapSqlParameterSource();
            for (final String col : row.keySet()) {
                parameterSource.addValue(col, row.get(col));
            }
            parameterSource.addValue("migrate_id", migrateId);
            stagingParams[i++] = parameterSource;
        }
        reportingJdbcTemplate.batchUpdate(stagingInsertSql, stagingParams);
    }
}