package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlCopyWarehouseToStagingRepository;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.SqlCopyStatements;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.List;
import java.util.Map;

/**
 * Jdbc implementation of {@link SqlCopyWarehouseToStagingRepository}.
 */
@Repository
class JdbcSqlCopyWarehouseToStagingRepository implements SqlCopyWarehouseToStagingRepository {

    private final NamedParameterJdbcTemplate reportingJdbcTemplate;
    private final NamedParameterJdbcTemplate warehouseJdbcTemplate;

    @Autowired
    public JdbcSqlCopyWarehouseToStagingRepository(final NamedParameterJdbcTemplate reportingJdbcTemplate,
                                                   final NamedParameterJdbcTemplate warehouseJdbcTemplate) {
        this.reportingJdbcTemplate = reportingJdbcTemplate;
        this.warehouseJdbcTemplate = warehouseJdbcTemplate;
    }

    @Override
    @Transactional
    public void execute(final List<SqlCopyStatements> copyStatementsList, final Instant firstAt, final Instant lastAt, final long migrateId) {
        for (final SqlCopyStatements sqlCopyStatements : copyStatementsList) {
            final List<Map<String, Object>> result = warehouseJdbcTemplate.queryForList(sqlCopyStatements.getWarehouseRead(),
                    new MapSqlParameterSource("first_at", Timestamp.from(firstAt))
                            .addValue("last_at", Timestamp.from(lastAt)));

            execute(sqlCopyStatements.getStagingInsert(), result, migrateId);
        }
    }

    @Override
    @Transactional
    public void execute(final List<SqlCopyStatements> copyStatementsList) {
        for (final SqlCopyStatements sqlCopyStatements : copyStatementsList) {
            execute(sqlCopyStatements.getStagingInsert(), warehouseJdbcTemplate.queryForList(sqlCopyStatements.getWarehouseRead(), new MapSqlParameterSource()), null);
        }
    }

    private void execute(final String stagingInsertSql, final List<Map<String, Object>> result, final Long migrateId) {
        if (result.isEmpty()) return;

        final MapSqlParameterSource[] stagingParams = new MapSqlParameterSource[result.size()];
        int i = 0;
        for (final Map<String, Object> row : result) {

            final MapSqlParameterSource parameterSource = new MapSqlParameterSource();
            for (final String col : row.keySet()) {
                parameterSource.addValue(col, row.get(col));
            }
            if (migrateId != null) parameterSource.addValue("migrate_id", migrateId);
            stagingParams[i++] = parameterSource;
        }

        reportingJdbcTemplate.batchUpdate(stagingInsertSql, stagingParams);
    }
}