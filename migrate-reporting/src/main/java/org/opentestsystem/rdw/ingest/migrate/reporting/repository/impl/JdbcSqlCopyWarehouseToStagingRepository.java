package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlCopyWarehouseToStagingRepository;
import org.opentestsystem.rdw.ingest.migrate.reporting.step.SqlCopyStatements;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.ColumnMapRowMapper;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.List;

/**
 * Jdbc implementation of {@link SqlCopyWarehouseToStagingRepository}.
 */
@Repository
class JdbcSqlCopyWarehouseToStagingRepository implements SqlCopyWarehouseToStagingRepository {

    private final NamedParameterJdbcTemplate reportingJdbcTemplate;
    private final NamedParameterJdbcTemplate warehouseJdbcTemplate;

    @Autowired
    public JdbcSqlCopyWarehouseToStagingRepository(final NamedParameterJdbcTemplate reportingJdbcTemplate,
                                                   final NamedParameterJdbcTemplate warehouseJdbcTemplate) {
        this.reportingJdbcTemplate = reportingJdbcTemplate;
        this.warehouseJdbcTemplate = warehouseJdbcTemplate;
    }

    @Override
    @Transactional
    public void execute(final List<SqlCopyStatements> copyStatementsList, final Instant firstAt, final Instant lastAt, final long migrateId) {
        execute(copyStatementsList, migrateId, new MapSqlParameterSource()
                .addValue("first_at", Timestamp.from(firstAt))
                .addValue("last_at", Timestamp.from(lastAt)));
    }

    @Override
    @Transactional
    public void execute(final List<SqlCopyStatements> copyStatementsList) {
        execute(copyStatementsList, null, new MapSqlParameterSource());
    }

    @Override
    @Transactional
    public void execute(final List<SqlCopyStatements> copyStatementsList,
                        final Long migrateId,
                        final MapSqlParameterSource queryParams) {
        for (final SqlCopyStatements sqlCopyStatements : copyStatementsList) {
            final List<SqlParameterSource> params = warehouseJdbcTemplate.query(
                    sqlCopyStatements.getWarehouseRead(), queryParams, new SqlParamsRowMapper(migrateId));
            final SqlParameterSource[] stagingParams = params.toArray(new SqlParameterSource[params.size()]);
            reportingJdbcTemplate.batchUpdate(sqlCopyStatements.getStagingInsert(), stagingParams);
        }
    }

    /**
     * A RowMapper that converts a row directly into a SqlParameterSource.
     * Implementation inspired by {@link ColumnMapRowMapper}.
     */
    private static class SqlParamsRowMapper implements RowMapper<SqlParameterSource> {
        private final Long migrateId;

        SqlParamsRowMapper(final Long migrateId) {
            this.migrateId = migrateId;
        }

        @Override
        public SqlParameterSource mapRow(final ResultSet rs, final int rowNum) throws SQLException {
            final ResultSetMetaData rsmd = rs.getMetaData();
            final int columnCount = rsmd.getColumnCount();
            final MapSqlParameterSource parameterSource = new MapSqlParameterSource();
            for (int i = 1; i <= columnCount; i++) {
                final String key = JdbcUtils.lookupColumnName(rsmd, i);
                final Object value = JdbcUtils.getResultSetValue(rs, i);
                parameterSource.addValue(key, value);
            }
            if (migrateId != null) {
                parameterSource.addValue("migrate_id", migrateId);
            }
            return parameterSource;
        }
    }
}