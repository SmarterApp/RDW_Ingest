package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlListExecutionRepository;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A generic step for executing {@link SqlListExecutionStep#sqls} in the given order if
 * the {@link MigrateBatch} has at least one content from the {@link SqlListExecutionStep#supportedContents}
 */
class SqlListExecutionStep extends StepTasklet {
    private final SqlListExecutionRepository repository;
    private final Iterable<String> sqls;

    private final Iterable<ImportContent> supportedContents;

    /**
     * Constructor
     *
     * @param supportedContents the list of the {@link ImportContent} supported by this step
     * @param repository        the repository
     * @param sqls              the sqls to be executed by this step
     */
    public SqlListExecutionStep(final Iterable<ImportContent> supportedContents,
                                final SqlListExecutionRepository repository,
                                final Iterable<String> sqls) {
        this.sqls = sqls;
        this.supportedContents = supportedContents;
        this.repository = repository;
    }

    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {

        for (final ImportContent supportedContent : supportedContents) {
            if (getJobBatch(chunkContext).getImportContent().contains(supportedContent)) {
                repository.execute(sqls);
                return RepeatStatus.FINISHED;
            }
        }
        return RepeatStatus.FINISHED;
    }

    @VisibleForTesting
    Iterable<String> getSqls() {
        return newArrayList(sqls);
    }

    @VisibleForTesting
    Iterable<ImportContent> getSupportedContents() {
        return newArrayList(supportedContents);
    }
}
