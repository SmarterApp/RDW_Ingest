package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.listener.JobExecutionListenerSupport;
import org.springframework.beans.factory.annotation.Autowired;

import static org.springframework.batch.core.ExitStatus.COMPLETED;
import static org.springframework.batch.core.ExitStatus.FAILED;

/**
 * MigrateJobExecutionListener
 */
public class MigrateJobExecutionListener extends JobExecutionListenerSupport {

    private static final Logger logger = LoggerFactory.getLogger(MigrateJobExecutionListener.class);
    private ReportingMigrateRepository reportingMigrateRepository;

    @Autowired
    void setReportingMigrateRepository(final ReportingMigrateRepository reportingMigrateRepository) {
        this.reportingMigrateRepository = reportingMigrateRepository;
    }

    @Override
    public void beforeJob(final JobExecution jobExecution) {
        final MigrateJobParameters jobParameters = (MigrateJobParameters) jobExecution.getJobParameters();
        jobExecution.getExecutionContext().put(ExecutionParams.batch, new MigrateBatch(reportingMigrateRepository.create(
                Migrate.builder()
                        .jobId(jobExecution.getJobId())
                        .status(MigrateStatus.STARTED)
                        .firstAt(jobParameters.getFirstAt())
                        .lastAt(jobParameters.getLastAt())
                        .build()),
                jobParameters.getMigrateCodes())
        );

        logger.info("Migrate Job id " + jobExecution.getJobId() + "] is launched]");
    }

    @Override
    public void afterJob(final JobExecution jobExecution) {
        //the job execution exit status has an exit code and description, we are checking just the exist code.
        final String exitCode = jobExecution.getExitStatus().getExitCode();
        final MigrateStatus status = exitCode.equals(COMPLETED.getExitCode()) ? MigrateStatus.COMPLETED :
                exitCode.equals(FAILED.getExitCode()) ? MigrateStatus.FAILED : MigrateStatus.ABANDONED;

        reportingMigrateRepository.updateStatusById(((MigrateBatch) jobExecution.getExecutionContext().get(ExecutionParams.batch)).getMigrate().getId(), status);
        logger.info("Migrate Job id " + jobExecution.getJobId() + "] is complete with status [" + jobExecution.getExitStatus() + "] and migrate status [" + status + "]");
    }
}
