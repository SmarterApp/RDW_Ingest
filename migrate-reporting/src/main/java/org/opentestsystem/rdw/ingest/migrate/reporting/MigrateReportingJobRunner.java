package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import org.opentestsystem.rdw.migrate.common.MigrateJobRunner;
import org.opentestsystem.rdw.migrate.common.TenantAwareMigrateJobHandler;
import org.opentestsystem.rdw.migrate.common.TenantAwareMigrateJobRunner;
import org.opentestsystem.rdw.multitenant.TenantProperties;

/**
 * Scheduled execution of the {@link MigrateReportingConfiguration#jobBuilderFactory}'s job.
 * <p>
 * Instead of using an Async annotation this directly invokes the executor. Why?
 * Because i'm not quite sure how Async + Scheduled(fixedDelay) interact. The
 * work needs to complete before the method returns; doing it this way makes it
 * explicit.
 * </p>
 *
 * @see TenantAwareMigrateJobRunner
 * @see MigrateJobRunner
 */
@EnableScheduling
@Component
@Import({MigrateReportingConfiguration.class})
class MigrateReportingJobRunner extends TenantAwareMigrateJobRunner {

    @Autowired
    public MigrateReportingJobRunner(final TenantProperties tenantProperties,
                                     final TenantAwareMigrateJobHandler jobHandler) {
        super(tenantProperties, jobHandler);
    }

    /**
     * Trigger run based on schedule.
     */
    @Scheduled(initialDelayString = "${migrate.batch.delay}", fixedDelayString = "${migrate.batch.delay}")
    public void scheduleRun() {
        run();
    }
}
