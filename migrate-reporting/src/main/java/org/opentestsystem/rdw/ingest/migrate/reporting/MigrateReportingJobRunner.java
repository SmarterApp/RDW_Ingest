package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.Optional;

/**
 * Scheduled execution of the {@link MigrateReportingConfiguration#jobBuilderFactory}'s job.
 * It skips job execution while paused or disabled. It is paused using Spring's Lifecycle
 * start/stop (which can be set using the pause/resume actuator end-points). It is disabled
 * if there are any unresolved migrations in the database. An unresolved migration is any
 * that has a status of FAILED or STARTED. To enable, any such migrate records should be set
 * to ABANDONED with a message.
 */
@EnableScheduling
@Component
@Import({MigrateReportingConfiguration.class})
class MigrateReportingJobRunner implements MigrateLifecycle {
    private static final Logger logger = LoggerFactory.getLogger(MigrateReportingJobRunner.class);

    private final ReportingMigrateRepository migrateRepository;
    private final WarehouseImportRepository importRepository;
    private final int batchSize;
    private final JobLauncher jobLauncher;
    private final Job job;
    private boolean paused = false;
    private boolean enabled = true;
    private Long blocker = null;

    @Autowired
    public MigrateReportingJobRunner(final ReportingMigrateRepository migrateRepository,
                                     final WarehouseImportRepository importRepository,
                                     final JobLauncher jobLauncher,
                                     final Job job,
                                     @Value("${migrate.batch.size}") final int batchSize) {
        this.migrateRepository = migrateRepository;
        this.importRepository = importRepository;
        this.jobLauncher = jobLauncher;
        this.job = job;
        this.batchSize = batchSize;
    }

    @Scheduled(fixedDelayString = "${migrate.batch.delay}")
    public void run() {
        try {
            boolean subsequent = false;
            Optional<JobParameters> jobParameters;
            while (checkRunJobs() && (jobParameters = getNextJobParams(subsequent)).isPresent()) {
                jobLauncher.run(job, jobParameters.get());
                subsequent = true;
            }
        } catch (final Exception e) {
            logger.error("migrate reporting job failure [" + e.getMessage() + "]");
        }
    }

    @Override
    public void start() {
        if (paused) {
            logger.info("resuming scheduled migrate jobs");
            paused = false;
        }
    }

    @Override
    public void stop() {
        if (!paused) {
            logger.info("pausing scheduled migrate jobs");
            paused = true;
        }
    }

    @Override
    public boolean isRunning() {
        return !paused;
    }

    @Override
    public void enable(final boolean flag) {
        if (flag && !enabled) {
            logger.info("enabling scheduled migrate jobs");
            enabled = true;
        } else if (!flag && enabled) {
            logger.warn("disabling scheduled migrate jobs; manually fix last migrate status to enable");
            enabled = false;
        }
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    private boolean checkRunJobs() {
        if (!isRunning()) return false;

        final MigrateStatus status = migrateRepository.findLastStatus();
        enable(status == null || status == MigrateStatus.COMPLETED || status == MigrateStatus.ABANDONED);

        return isRunning() && isEnabled();
    }

    private Optional<JobParameters> getNextJobParams(final boolean subsequent) {
        final MigrateImportValues migrateImportValues = importRepository
                .getMigrateImportValues(migrateRepository.findLastMigratedImportId(), batchSize);

        // a work stopping blocker
        if (migrateImportValues.getBlocker() != null && migrateImportValues.getFirst() == null) {
            // if it is the same as before, disable processing
            // (if it is a different blocker then progress is being made and processing should continue)
            if (blocker != null && blocker.equals(migrateImportValues.getBlocker())) {
                logger.warn("migrate job blocked by import record {}", blocker);
                enable(false);
                return Optional.empty();
            }
        }

        // set or clear blocker based on these results
        blocker = migrateImportValues.getBlocker();

        // no work to do ...
        if (migrateImportValues.getFirst() == null) {
            return Optional.empty();
        }

        // if this is not the first run then only return work if it is a full count
        // (otherwise it keeps scraping the last few records, effectively defeating the micro-batching)
        if (subsequent && (migrateImportValues.getLast() - migrateImportValues.getFirst() + 1) < batchSize) {
            return Optional.empty();
        }

        return Optional.of(JobParams.createJobParams(migrateImportValues.getFirst(), migrateImportValues.getLast()));
    }
}