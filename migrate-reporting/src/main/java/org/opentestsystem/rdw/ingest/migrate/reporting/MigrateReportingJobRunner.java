package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.opentestsystem.rdw.ingest.migrate.reporting.service.NextJobParamsService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.Optional;

/**
 * Scheduled execution of the {@link MigrateReportingConfiguration#jobBuilderFactory}'s job
 */
@EnableScheduling
@Component
@Import({MigrateReportingConfiguration.class})
class MigrateReportingJobRunner {
    private static final Logger logger = LoggerFactory.getLogger(MigrateReportingJobRunner.class);

    private final int batchSize;
    private final JobLauncher jobLauncher;
    private final NextJobParamsService nextJobParamsService;
    private final Job job;

    @Autowired
    public MigrateReportingJobRunner(final JobLauncher jobLauncher,
                                     final Job job,
                                     final NextJobParamsService nextJobParamsService,
                                     @Value("${migrate.batch.size:1000}") final int batchSize) {
        this.jobLauncher = jobLauncher;
        this.job = job;
        this.nextJobParamsService = nextJobParamsService;
        this.batchSize = batchSize;
    }

    @Scheduled(fixedDelayString = "${migrate.batch.delay:5000}", initialDelayString = "${migrate.batch.initialDelay:500000}")
    public void run() {

        try {
            Optional<JobParameters> jobParameters = nextJobParamsService.getNextJobParams(batchSize);
            while (jobParameters.isPresent()) {

                jobLauncher.run(job, jobParameters.get());
                jobParameters = nextJobParamsService.getNextJobParams(batchSize);
            }
        } catch (final Exception e) {
            logger.error("migrate reporting job failure [" + e.getMessage() + "]");
        }
    }
}