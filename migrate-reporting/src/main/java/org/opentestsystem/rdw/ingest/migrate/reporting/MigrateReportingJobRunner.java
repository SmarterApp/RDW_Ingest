package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import org.opentestsystem.rdw.migrate.common.MigrateJobRunner;
import org.opentestsystem.rdw.migrate.common.TenantAwareMigrateJobRunner;
import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;
import org.opentestsystem.rdw.migrate.common.repository.WarehouseImportRepository;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;

/**
 * Scheduled execution of the {@link MigrateReportingConfiguration#jobBuilderFactory}'s job.
 * <p>
 * Instead of using an Async annotation this directly invokes the executor. Why?
 * Because i'm not quite sure how Async + Scheduled(fixedDelay) interact. The
 * work needs to complete before the method returns; doing it this way makes it
 * explicit.
 * </p>
 *
 * @see TenantAwareMigrateJobRunner
 * @see MigrateJobRunner
 */
@EnableScheduling
@Component
@Import({MigrateReportingConfiguration.class})
class MigrateReportingJobRunner extends TenantAwareMigrateJobRunner {

    private final ExecutorService executorService;

    @Autowired
    public MigrateReportingJobRunner(final MigrateRepository migrateRepository,
                                     final WarehouseImportRepository importRepository,
                                     final TenantIdResolver tenantIdResolver,
                                     final JobLauncher jobLauncher,
                                     final Job job,
                                     @Value("${migrate.batch.size}") final int batchSize,
                                     final TenantProperties tenantProperties,
                                     @Qualifier("singleThreadExecutor") final ExecutorService executorService) {
        super(migrateRepository, importRepository, tenantIdResolver, jobLauncher, job, batchSize, tenantProperties);
        this.executorService = executorService;
    }

    /**
     * Override to use the same executor to serialize work and avoid duplicating datasources
     * and other resources.
     */
    @Scheduled(initialDelayString = "${migrate.batch.delay}", fixedDelayString = "${migrate.batch.delay}")
    @Override
    public void run() {
        try {
            // get the results before returning so the scheduled delay is correct
            executorService.submit((Runnable) super::run).get();
        } catch (final InterruptedException | ExecutionException e) {
            logger.warn("Execution error running migrate reporting: {}", e.getMessage());
        }
    }

    /**
     * Override to use the same executor to serialize work and avoid duplicating datasources
     * and other resources.
     *
     * @param tenantId tenant id
     */
    @Override
    public void run(final String tenantId) {
        executorService.submit(() -> super.run(tenantId));
    }
}
