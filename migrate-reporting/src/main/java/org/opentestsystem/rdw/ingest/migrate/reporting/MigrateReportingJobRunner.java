package org.opentestsystem.rdw.ingest.migrate.reporting;


import org.springframework.batch.core.Job;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import org.opentestsystem.rdw.migrate.common.MigrateJobRunner;
import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;
import org.opentestsystem.rdw.migrate.common.repository.WarehouseImportRepository;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;

/**
 * Scheduled execution of the {@link MigrateReportingConfiguration#jobBuilderFactory}'s job.
 *
 * @see MigrateJobRunner
 */
@EnableScheduling
@EnableAsync
@Component
@Import({MigrateReportingConfiguration.class})
class MigrateReportingJobRunner extends MigrateJobRunner {

    private final TenantProperties tenantProperties;

    @Autowired
    public MigrateReportingJobRunner(final MigrateRepository migrateRepository,
                                     final WarehouseImportRepository importRepository,
                                     final TenantIdResolver tenantIdResolver,
                                     final JobLauncher jobLauncher,
                                     final Job job,
                                     @Value("${migrate.batch.size}") final int batchSize,
                                     final TenantProperties tenantProperties) {
        super(migrateRepository, importRepository, tenantIdResolver, jobLauncher, job, batchSize);
        this.tenantProperties = tenantProperties;
    }

    @Scheduled(fixedDelayString = "${migrate.batch.delay}")
    @Override
    public void run() {
        // run the migration for every known tenant
        for (final TenantProperties.Tenant tenant : tenantProperties.getTenants().values()) {
            TenantContextHolder.setTenantId(tenant.getId());
            super.run();
        }
        TenantContextHolder.clear();
    }
}
