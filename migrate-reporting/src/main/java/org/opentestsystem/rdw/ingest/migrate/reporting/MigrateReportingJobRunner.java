package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;

/**
 * Scheduled execution of the {@link MigrateReportingConfiguration#jobBuilderFactory}'s job
 */
@EnableScheduling
@Component
@Import({MigrateReportingConfiguration.class})
class MigrateReportingJobRunner {
    private static final Logger logger = LoggerFactory.getLogger(MigrateReportingJobRunner.class);

    private final JobLauncher jobLauncher;
    private final Job job;

    @Autowired
    public MigrateReportingJobRunner(final JobLauncher jobLauncher, final Job job) {
        this.jobLauncher = jobLauncher;
        this.job = job;
    }

    @Scheduled(fixedDelayString = "${migrate.delay}")
    public void run() {
        try {
            //TODO: implement real parameters
            final Map<String, JobParameter> jobParams = newHashMap();
            jobParams.put("time", new JobParameter(System.currentTimeMillis()));

            jobLauncher.run(job, new JobParameters(jobParams));
        } catch (final Exception e) {
            logger.error("migrate reporting job failure [" + e.getMessage() + "]");
        }
    }
}