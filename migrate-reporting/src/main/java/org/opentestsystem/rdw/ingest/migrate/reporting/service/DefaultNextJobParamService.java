package org.opentestsystem.rdw.ingest.migrate.reporting.service;


import org.opentestsystem.rdw.ingest.migrate.reporting.JobParams;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.Optional;

import static com.google.common.collect.Maps.newHashMap;

@Service
class DefaultNextJobParamService implements NextJobParamsService {

    private final WarehouseImportRepository warehouseImportRepository;
    private final ReportingMigrateRepository reportingMigrateRepository;

    DefaultNextJobParamService(final WarehouseImportRepository warehouseImportRepository,
                               final ReportingMigrateRepository reportingMigrateRepository) {
        this.warehouseImportRepository = warehouseImportRepository;
        this.reportingMigrateRepository = reportingMigrateRepository;
    }

    public Optional<JobParameters> getNextJobParams(final int batchSize) {

        // If there are no imports there is no work to migrate.
        final Optional<Long> max = warehouseImportRepository.findMaxImportId();
        if (!max.isPresent()) return Optional.empty();

        // Get the last migrated import id.
        final Optional<Long> last = reportingMigrateRepository.findLastMigratedImportId();
        if (last.isPresent() && max.equals(last)) return Optional.empty();

        final Map<String, JobParameter> jobParams = newHashMap();
        jobParams.put(JobParams.batchSize, new JobParameter((long) batchSize));
        //this is an identifying parameter for the job instance
        jobParams.put("jobIdentifier", new JobParameter(System.currentTimeMillis(), true));

        if (!last.isPresent()) {
            // If there has been no migration start with the first.
            Optional<Long> first = warehouseImportRepository.findMinImportId();
            if (!first.isPresent()) {
                return Optional.empty();
            }
            jobParams.put(JobParams.fistImportId, new JobParameter(first.get()));
            jobParams.put(JobParams.lastImportId, new JobParameter((max.get() - first.get()) < batchSize ? max.get() : first.get() + (batchSize - 1)));

        } else {
            jobParams.put(JobParams.fistImportId, new JobParameter(last.get() + 1));
            jobParams.put(JobParams.lastImportId, new JobParameter((max.get() - last.get()) <= batchSize ? max.get() : last.get() + batchSize));
        }
        return Optional.of(new JobParameters(jobParams));
    }
}
