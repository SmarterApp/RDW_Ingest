package org.opentestsystem.rdw.ingest.migrate.reporting.service;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.JobParams;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;
import org.springframework.batch.core.JobParameters;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DefaultNextJobParamServiceTest {

    private WarehouseImportRepository warehouseImportRepository;
    private ReportingMigrateRepository reportingMigrateRepository;
    private NextJobParamsService nextJobParamsService;

    @Before
    public void setUp() {
        warehouseImportRepository = mock(WarehouseImportRepository.class);
        reportingMigrateRepository = mock(ReportingMigrateRepository.class);
        nextJobParamsService = new DefaultNextJobParamService(warehouseImportRepository, reportingMigrateRepository);
    }

    @Test
    public void shoulReturnNoJobParamsWhenAllImportsHaveBeenMigrated() {
        when(reportingMigrateRepository.findLastMigratedImportId()).thenReturn(Optional.of(-1008L));
        when(warehouseImportRepository.findMaxImportId()).thenReturn(Optional.of((-1008L)));

        final Optional<JobParameters> optionalJobParams = nextJobParamsService.getNextJobParams(10);
        assertThat(optionalJobParams).isEmpty();
    }

    @Test
    public void shouldHandleLessWorkLastAndMaxNegative() {
        when(reportingMigrateRepository.findLastMigratedImportId()).thenReturn(Optional.of(-1008L));
        when(warehouseImportRepository.findMaxImportId()).thenReturn(Optional.of((-1002L)));

        final Optional<JobParameters> optionalJobParams = nextJobParamsService.getNextJobParams(10);
        assertThat(optionalJobParams).isPresent();

        final JobParameters jobParameters = optionalJobParams.get();
        assertThat(jobParameters.getLong(JobParams.fistImportId)).isEqualTo(-1007L);
        assertThat(jobParameters.getLong(JobParams.lastImportId)).isEqualTo(-1002L);
        assertThat(jobParameters.getLong(JobParams.batchSize)).isEqualTo(10L);
    }

    @Test
    public void shouldHandleMoreWorkLastAndMax() {
        when(reportingMigrateRepository.findLastMigratedImportId()).thenReturn(Optional.of(3L));
        when(warehouseImportRepository.findMaxImportId()).thenReturn(Optional.of((2000L)));

        final Optional<JobParameters> optionalJobParams = nextJobParamsService.getNextJobParams(10);
        assertThat(optionalJobParams).isPresent();

        final JobParameters jobParameters = optionalJobParams.get();
        assertThat(jobParameters.getLong(JobParams.fistImportId)).isEqualTo(4L);
        assertThat(jobParameters.getLong(JobParams.lastImportId)).isEqualTo(13L);
        assertThat(jobParameters.getLong(JobParams.batchSize)).isEqualTo(10L);
    }

    @Test
    public void shouldHandleExactWorkLastAndMax() {
        when(reportingMigrateRepository.findLastMigratedImportId()).thenReturn(Optional.of(19L));
        when(warehouseImportRepository.findMaxImportId()).thenReturn(Optional.of((30L)));

        final Optional<JobParameters> optionalJobParams = nextJobParamsService.getNextJobParams(10);
        assertThat(optionalJobParams).isPresent();

        final JobParameters jobParameters = optionalJobParams.get();
        assertThat(jobParameters.getLong(JobParams.fistImportId)).isEqualTo(20L);
        assertThat(jobParameters.getLong(JobParams.lastImportId)).isEqualTo(29L);
        assertThat(jobParameters.getLong(JobParams.batchSize)).isEqualTo(10L);
    }

    @Test
    public void shouldHandleLessWorkLastAndMax() {
        when(reportingMigrateRepository.findLastMigratedImportId()).thenReturn(Optional.of(2L));
        when(warehouseImportRepository.findMaxImportId()).thenReturn(Optional.of((7L)));

        final Optional<JobParameters> optionalJobParams = nextJobParamsService.getNextJobParams(10);
        assertThat(optionalJobParams).isPresent();

        final JobParameters jobParameters = optionalJobParams.get();
        assertThat(jobParameters.getLong(JobParams.fistImportId)).isEqualTo(3L);
        assertThat(jobParameters.getLong(JobParams.lastImportId)).isEqualTo(7L);
        assertThat(jobParameters.getLong(JobParams.batchSize)).isEqualTo(10L);
    }

    @Test
    public void shouldHandleNoWorkMax() {
        when(warehouseImportRepository.findMaxImportId()).thenReturn(Optional.empty());

        final Optional<JobParameters> jobParams = nextJobParamsService.getNextJobParams(10);

        assertThat(jobParams).isEmpty();
    }

    @Test
    public void shouldHandleMoreWorkFirstAndMax() {
        when(reportingMigrateRepository.findLastMigratedImportId()).thenReturn(Optional.empty());
        when(warehouseImportRepository.findMaxImportId()).thenReturn(Optional.of((2000L)));
        when(warehouseImportRepository.findMinImportId()).thenReturn(Optional.of((21L)));

        final Optional<JobParameters> optionalJobParams = nextJobParamsService.getNextJobParams(10);
        assertThat(optionalJobParams).isPresent();

        final JobParameters jobParameters = optionalJobParams.get();
        assertThat(jobParameters.getLong(JobParams.fistImportId)).isEqualTo(21L);
        assertThat(jobParameters.getLong(JobParams.lastImportId)).isEqualTo(30L);
        assertThat(jobParameters.getLong(JobParams.batchSize)).isEqualTo(10L);
    }

    @Test
    public void shouldHandleExactWorkFirstAndMax() {
        when(reportingMigrateRepository.findLastMigratedImportId()).thenReturn(Optional.empty());
        when(warehouseImportRepository.findMaxImportId()).thenReturn(Optional.of((30L)));
        when(warehouseImportRepository.findMinImportId()).thenReturn(Optional.of((21L)));

        final Optional<JobParameters> optionalJobParams = nextJobParamsService.getNextJobParams(10);
        assertThat(optionalJobParams).isPresent();

        final JobParameters jobParameters = optionalJobParams.get();
        assertThat(jobParameters.getLong(JobParams.fistImportId)).isEqualTo(21L);
        assertThat(jobParameters.getLong(JobParams.lastImportId)).isEqualTo(30L);
        assertThat(jobParameters.getLong(JobParams.batchSize)).isEqualTo(10L);
    }

    @Test
    public void shouldHandleLessWorkFirstAndMax() {
        when(reportingMigrateRepository.findLastMigratedImportId()).thenReturn(Optional.empty());
        when(warehouseImportRepository.findMaxImportId()).thenReturn(Optional.of((27L)));
        when(warehouseImportRepository.findMinImportId()).thenReturn(Optional.of((21L)));

        final Optional<JobParameters> optionalJobParams = nextJobParamsService.getNextJobParams(10);
        assertThat(optionalJobParams).isPresent();

        final JobParameters jobParameters = optionalJobParams.get();
        assertThat(jobParameters.getLong(JobParams.fistImportId)).isEqualTo(21L);
        assertThat(jobParameters.getLong(JobParams.lastImportId)).isEqualTo(27L);
        assertThat(jobParameters.getLong(JobParams.batchSize)).isEqualTo(10L);
    }

    @Test
    public void shouldHandleNoWorkFirst() {
        when(reportingMigrateRepository.findLastMigratedImportId()).thenReturn(Optional.empty());
        when(warehouseImportRepository.findMaxImportId()).thenReturn(Optional.of((2000L)));
        when(warehouseImportRepository.findMinImportId()).thenReturn(Optional.empty());

        final Optional<JobParameters> jobParams = nextJobParamsService.getNextJobParams(10);

        assertThat(jobParams).isEmpty();
    }
}