package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.MigrateStatus;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.WarehouseToStagingStepsConfig.StagePackageStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@SqlGroup({
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),

        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
})
public class StagePackageIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @Test
    public void itShouldCopyPackages() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_asmt", 2, "id IN (-99, -98, -11)"));
        //deleted asmt's targets should ot be moved to staging
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_asmt_target_exclusion", 0, "asmt_id = -59"));
        //for Math, only claim 1 targets must be included
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_asmt_target_exclusion", 1, "asmt_id = -111"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_asmt_target_exclusion", 2, "asmt_id = -311"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_asmt_target", 0, "asmt_id = -59"));
        //for Math, only claim 1 targets must be included
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_asmt_target", 1, "asmt_id = -111"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_asmt_target", 5, "asmt_id = -311"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_item", 5, "asmt_id in( -99, -98, -11)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_item", 10, "answer_key is null"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_item_other_target", 1, "item_id in( -991, -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_item_common_core_standard", 1, "item_id in( -991, -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_item_common_core_standard", 1, "item_id in( -991, -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_asmt_score", 1, "asmt_id IN (-99, -98)"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(firstAt)
                        .lastAt(lastAt)
                        .migrateCodes(false)
                        .build());

        final JobExecution jobExecution = launchStep(StagePackageStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldCopyMorePackagesWithMoreImports() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_asmt", 3, "id IN (-99, -98, -11)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_item", 9, "asmt_id in( -99, -98, -11)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_item_other_target", 1, "item_id in( -991, -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_item_common_core_standard", 1, "item_id in( -991, -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_asmt_score", 1, "asmt_id IN (-99, -98)"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(Instant.parse("2017-05-18T19:05:33.966Z"))
                        .lastAt(lastAt)
                        .migrateCodes(false)
                        .build());

        final JobExecution jobExecution = launchStep(StagePackageStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_item", "id = -9 and common_core_standard_ids = 'naturalId-99|naturalId-98'")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_item", "id = -8 and common_core_standard_ids = 'naturalId-98'")).isEqualTo(1);
    }

    @Test
    public void itShouldFailWithNoMigrateBatch() {
        final JobExecution jobExecution = launchStep(StagePackageStepName);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
        assertThat(jobExecution.getExitStatus().getExitDescription()).contains("Exception");
        // Getting the next step returns failed status.
        assertThat(jobExecution.getStepExecutions().iterator().next().getStatus()).isEqualTo(BatchStatus.FAILED);
    }

}
