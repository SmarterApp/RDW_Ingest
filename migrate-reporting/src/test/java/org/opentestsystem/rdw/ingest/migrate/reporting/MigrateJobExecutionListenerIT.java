package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.item.ExecutionContext;

import java.time.Instant;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;


public class MigrateJobExecutionListenerIT {
    private final Instant firstAt = Instant.parse("2017-05-18T19:06:34.966Z");
    private final Instant lastAt = Instant.parse("2017-05-20T19:06:34.966Z");

    private ReportingMigrateRepository reportingMigrateRepository;
    private MigrateJobExecutionListener listener;
    private JobExecution jobExecution;

    @Before
    public void setUp() {

        reportingMigrateRepository = mock(ReportingMigrateRepository.class);
        jobExecution = mock(JobExecution.class);

        final MigrateJobParameters jobParameters = new MigrateJobParameters(firstAt, lastAt, true);
        when(jobExecution.getJobParameters()).thenReturn(jobParameters);
        when(jobExecution.getJobId()).thenReturn(-99L);

        final Migrate migrate = Migrate.builder()
                .id(-101L)
                .jobId(-99L)
                .firstAt(firstAt)
                .lastAt(lastAt)
                .build();

        final ExecutionContext context = mock(ExecutionContext.class);
        when(jobExecution.getExecutionContext()).thenReturn(context);
        when(context.get(ExecutionParams.batch)).thenReturn(new MigrateBatch(migrate, true));

        listener = new MigrateJobExecutionListener();
        listener.setReportingMigrateRepository(reportingMigrateRepository);
    }

    @Test
    public void itShouldCreateNewMigrateRecordBeforeJob() {
        listener.beforeJob(jobExecution);

        verify(reportingMigrateRepository).create(Migrate.builder()
                .jobId(-99L)
                .status(MigrateStatus.STARTED)
                .firstAt(firstAt)
                .lastAt(lastAt)
                .build());
    }

    @Test
    public void itShouldUpdateMigrateRecordAfterJobCompleted() {
        when(jobExecution.getExitStatus()).thenReturn(ExitStatus.COMPLETED);
        listener.afterJob(jobExecution);

        verify(reportingMigrateRepository).updateStatusById(-101L, MigrateStatus.COMPLETED);
    }

    @Test
    public void itShouldUpdateMigrateRecordAfterJobFailsWithAnyMessage() {
        when(jobExecution.getExitStatus()).thenReturn(new ExitStatus(ExitStatus.FAILED.getExitCode(), "some error"));
        listener.afterJob(jobExecution);

        verify(reportingMigrateRepository).updateStatusById(-101L, MigrateStatus.FAILED);
    }

    @Test
    public void itShouldUpdateMigrateRecordAfterJob() {
        when(jobExecution.getExitStatus()).thenReturn(ExitStatus.STOPPED);
        listener.afterJob(jobExecution);

        verify(reportingMigrateRepository).updateStatusById(-101L, MigrateStatus.ABANDONED);
    }
}