package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.MigrateStatus;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.WarehouseToStagingStepsConfig.StageNormsStepName;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;


public class StageNormsIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD,
                    statements = {"INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, school_year, name, label, version, deleted, import_id, update_import_id, created, updated) VALUES\n" +
                            "(-11, '(SBAC)SBAC-IAB-ASMT TEST-11', -98, 2, 1, 1999, 'SBAC-IAB-FIXED-G4M-OA-MATH-4',     'test IAB',    '9835', 0, -5000, -5000, '2017-05-18 19:05:33.967000', '2017-05-18 20:06:34.966000'),\n" +
                            "(-99, '(SBAC)SBAC-IAB-ASMT TEST',    -99, 2, 1, 1999, 'SBAC-IAB-FIXED-G4M-OA-MATH-4',     'MTH IAB G4',  '9835', 1, -5000, -20,   '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000'),\n" +
                            "(-98, 'SBAC)SBAC-ICA-ASMT TEST',     -98, 1, 2, 1999, 'SBAC-ICA-FIXED-G5E-COMBINED-2017', 'Grade 5 ELA', '9831', 0, -20, -20,     '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000'),\n" +
                            "(-97, 'SBAC)SBAC-ICA-ASMT TEST-2',   -98, 1, 2, 1999, 'SBAC-ICA-FIXED-G5E-COMBINED-2017', 'Grade 5 ELA', '9831', 0, -20, -20,     '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000');\n" +
                            "\n" +
                            "INSERT INTO percentile (id, asmt_id, start_date, end_date, count, mean, standard_deviation, min_score, max_score, deleted, import_id, update_import_id, created, updated) VALUES\n" +
                            "  (-89, -11, '2018-01-01', '2018-03-31', 835430, 2420.1, 88.9, 0,    9999, 0, -20, -20, '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000'),\n" +
                            "  (-88, -98, '2018-01-01', '2018-03-31', 843395, 2461,   93.8, 1111, 4444, 0, -20, -20, '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000'),\n" +
                            "  (-87, -97, '2018-01-01', '2018-03-31', 843395, 2467,   NULL, 1500, 3500, 0, -20, -20, '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000');\n" +
                            "\n" +
                            "INSERT INTO percentile_score (percentile_id, percentile_rank, score, min_inclusive, max_exclusive) VALUES\n" +
                            "  (-89, 25, 2278, 0, 2420),(-89, 50, 2420, 2420, 2566),(-89, 75, 2566, 2566, 9999),\n" +
                            "  (-88, 10, 2307, 1111, 2408),(-88, 30, 2408, 2408, 2464),(-88, 50, 2464, 2464, 2516),(-88, 70, 2516, 2516, 2612),(-88, 90, 2612, 2612, 4444),\n" +
                            "  (-87, 25, 2345, 1500, 2504),(-87, 50, 2504, 2504, 2651),(-87, 75, 2651, 2651, 3500);"},
                    config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD,
                    statements = {"DELETE FROM staging_percentile_score WHERE percentile_id IN (-89, -88, -87);\n" +
                            "DELETE FROM staging_percentile WHERE id IN (-89, -88, -87);\n" +
                            "DELETE FROM staging_asmt WHERE id IN (-11, -99, -98, -97);"},
                    config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD,
                    statements = {"DELETE FROM percentile_score WHERE percentile_id IN (-89, -88, -87);\n" +
                            "DELETE FROM percentile WHERE id IN (-89, -88, -87);\n" +
                            "DELETE FROM asmt WHERE id IN (-11, -99, -98, -97);"},
                    config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldCopyNorms() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_percentile", 3, "id IN (-89, -88, -87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_percentile_score", 11, "percentile_id IN (-89, -88, -87)"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(firstAt)
                        .lastAt(lastAt)
                        .migrateCodes(false)
                        .build());

        final JobExecution jobExecution = launchStep(StageNormsStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile", "id IN (-89, -88, -87)")).isEqualTo(3);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile", "id = -89 AND min_score = 0 AND max_score = 9999")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -89 AND percentile_rank = 25 AND min_inclusive = 0")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -89 AND percentile_rank = 75 AND max_exclusive = 9999")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -89 AND percentile_rank IN (25,50,75)")).isEqualTo(3);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -88 AND percentile_rank IN (10,30,50,70,90)")).isEqualTo(5);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -88 AND percentile_rank IN (25,75)")).isZero();
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -87 AND percentile_rank IN (25,50,75)")).isEqualTo(3);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD,
                    statements = {"INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, school_year, name, label, version, deleted, import_id, update_import_id, created, updated) VALUES\n" +
                            "(-11, '(SBAC)SBAC-IAB-ASMT TEST-11', -98, 2, 1, 1999, 'SBAC-IAB-FIXED-G4M-OA-MATH-4',     'test IAB',    '9835', 0, -5000, -5000, '2017-05-18 19:05:33.967000', '2017-05-18 20:06:34.966000'),\n" +
                            "(-99, '(SBAC)SBAC-IAB-ASMT TEST',    -99, 2, 1, 1999, 'SBAC-IAB-FIXED-G4M-OA-MATH-4',     'MTH IAB G4',  '9835', 1, -5000, -20,   '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000'),\n" +
                            "(-98, 'SBAC)SBAC-ICA-ASMT TEST',     -98, 1, 2, 1999, 'SBAC-ICA-FIXED-G5E-COMBINED-2017', 'Grade 5 ELA', '9831', 0, -20, -20,     '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000'),\n" +
                            "(-97, 'SBAC)SBAC-ICA-ASMT TEST-2',   -98, 1, 2, 1999, 'SBAC-ICA-FIXED-G5E-COMBINED-2017', 'Grade 5 ELA', '9831', 0, -20, -20,     '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000');\n" +
                            "\n" +
                            "INSERT INTO percentile (id, asmt_id, start_date, end_date, count, mean, standard_deviation, min_score, max_score, deleted, import_id, update_import_id, created, updated) VALUES\n" +
                            "  (-89, -11, '2018-01-01', '2018-03-31', 835430, 2420.1, 88.9, 0,    9999, 0, -5000, -99, '2017-05-18 19:05:33.967000', '2017-05-18 20:06:34.966000'),\n" +
                            "  (-88, -98, '2018-01-01', '2018-03-31', 843395, 2461,   93.8, 1111, 4444, 0, -5000, -20, '2017-05-18 19:05:33.967000', '2017-07-18 19:05:34.966000'),\n" +
                            "  (-87, -97, '2018-01-01', '2018-03-31', 843395, 2467,   NULL, 1500, 3500, 0, -20, -20, '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000');\n" +
                            "\n" +
                            "INSERT INTO percentile_score (percentile_id, percentile_rank, score, min_inclusive, max_exclusive) VALUES\n" +
                            "  (-89, 25, 2278, 0, 2420),(-89, 50, 2420, 2420, 2566),(-89, 75, 2566, 2566, 9999),\n" +
                            "  (-88, 10, 2307, 1111, 2408),(-88, 30, 2408, 2408, 2464),(-88, 50, 2464, 2464, 2516),(-88, 70, 2516, 2516, 2612),(-88, 90, 2612, 2612, 4444),\n" +
                            "  (-87, 25, 2345, 1500, 2504),(-87, 50, 2504, 2504, 2651),(-87, 75, 2651, 2651, 3500);"},
                    config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD,
                    statements = {"DELETE FROM staging_percentile_score WHERE percentile_id IN (-89, -88, -87);\n" +
                            "DELETE FROM staging_percentile WHERE id IN (-89, -88, -87);\n" +
                            "DELETE FROM staging_asmt WHERE id IN (-11, -99, -98, -97);"},
                    config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD,
                    statements = {"DELETE FROM percentile_score WHERE percentile_id IN (-89, -88, -87);\n" +
                            "DELETE FROM percentile WHERE id IN (-89, -88, -87);\n" +
                            "DELETE FROM asmt WHERE id IN (-11, -99, -98, -97);"},
                    config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldCopyNewAndUpdatedNorms() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_percentile", 2, "id IN (-89, -88, -87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_percentile_score", 8, "percentile_id IN (-89, -88, -87)"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(firstAt)
                        .lastAt(lastAt)
                        .migrateCodes(false)
                        .build());

        final JobExecution jobExecution = launchStep(StageNormsStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile", "id IN (-89, -88, -87)")).isEqualTo(2);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile", "id = -89 AND min_score = 0 AND max_score = 9999")).isZero();
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile", "id = -88 AND min_score = 1111 AND max_score = 4444")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile", "id = -87 AND min_score = 1500 AND max_score = 3500")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -89 AND percentile_rank = 25 AND min_inclusive = 0")).isZero();
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -89 AND percentile_rank = 75 AND max_exclusive = 9999")).isZero();
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -89 AND percentile_rank IN (25,50,75)")).isZero();
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -88 AND percentile_rank IN (10,30,50,70,90)")).isEqualTo(5);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -88 AND percentile_rank IN (25,75)")).isZero();
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id = -87 AND percentile_rank IN (25,50,75)")).isEqualTo(3);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD,
                    statements = {"INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, school_year, name, label, version, deleted, import_id, update_import_id, created, updated) VALUES\n" +
                            "(-11, '(SBAC)SBAC-IAB-ASMT TEST-11', -98, 2, 1, 1999, 'SBAC-IAB-FIXED-G4M-OA-MATH-4',     'test IAB',    '9835', 0, -5000, -5000, '2017-05-18 19:05:33.967000', '2017-05-18 20:06:34.966000'),\n" +
                            "(-99, '(SBAC)SBAC-IAB-ASMT TEST',    -99, 2, 1, 1999, 'SBAC-IAB-FIXED-G4M-OA-MATH-4',     'MTH IAB G4',  '9835', 1, -5000, -20,   '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000'),\n" +
                            "(-98, 'SBAC)SBAC-ICA-ASMT TEST',     -98, 1, 2, 1999, 'SBAC-ICA-FIXED-G5E-COMBINED-2017', 'Grade 5 ELA', '9831', 0, -20, -20,     '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000'),\n" +
                            "(-97, 'SBAC)SBAC-ICA-ASMT TEST-2',   -98, 1, 2, 1999, 'SBAC-ICA-FIXED-G5E-COMBINED-2017', 'Grade 5 ELA', '9831', 0, -20, -20,     '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000');\n" +
                            "\n" +
                            "INSERT INTO percentile (id, asmt_id, start_date, end_date, count, mean, standard_deviation, min_score, max_score, deleted, import_id, update_import_id, created, updated) VALUES\n" +
                            "  (-89, -11, '2018-01-01', '2018-03-31', 835430, 2420.1, 88.9, 0,    9999, 0, -5000, -99, '2017-05-18 19:05:33.967000', '2017-05-18 20:06:34.966000'),\n" +
                            "  (-88, -98, '2018-01-01', '2018-03-31', 843395, 2461,   93.8, 1111, 4444, 1, -5000, -20, '2017-05-18 19:05:33.967000', '2017-07-18 19:05:34.966000'),\n" +
                            "  (-87, -97, '2018-01-01', '2018-03-31', 843395, 2467,   NULL, 1500, 3500, 1, -20, -20, '2017-07-18 19:05:34.966000', '2017-07-18 19:05:34.966000');\n" +
                            "\n" +
                            "INSERT INTO percentile_score (percentile_id, percentile_rank, score, min_inclusive, max_exclusive) VALUES\n" +
                            "  (-89, 25, 2278, 0, 2420),(-89, 50, 2420, 2420, 2566),(-89, 75, 2566, 2566, 9999),\n" +
                            "  (-88, 10, 2307, 1111, 2408),(-88, 30, 2408, 2408, 2464),(-88, 50, 2464, 2464, 2516),(-88, 70, 2516, 2516, 2612),(-88, 90, 2612, 2612, 4444),\n" +
                            "  (-87, 25, 2345, 1500, 2504),(-87, 50, 2504, 2504, 2651),(-87, 75, 2651, 2651, 3500);"},
                    config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD,
                    statements = {"DELETE FROM staging_percentile_score WHERE percentile_id IN (-89, -88, -87);\n" +
                            "DELETE FROM staging_percentile WHERE id IN (-89, -88, -87);\n" +
                            "DELETE FROM staging_asmt WHERE id IN (-11, -99, -98, -97);"},
                    config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD,
                    statements = {"DELETE FROM percentile_score WHERE percentile_id IN (-89, -88, -87);\n" +
                            "DELETE FROM percentile WHERE id IN (-89, -88, -87);\n" +
                            "DELETE FROM asmt WHERE id IN (-11, -99, -98, -97);"},
                    config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldNotCopyNewAndUpdatedChildRecordsOnDelete() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_percentile", 2, "id IN (-89, -88, -87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_percentile_score", 0, "percentile_id IN (-89, -88, -87)"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(firstAt)
                        .lastAt(lastAt)
                        .migrateCodes(false)
                        .build());

        final JobExecution jobExecution = launchStep(StageNormsStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile", "id IN (-89, -88, -87)")).isEqualTo(2);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile", "id = -89 AND min_score = 0 AND max_score = 9999")).isZero();
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile", "id = -88 AND min_score = 1111 AND max_score = 4444 AND deleted = 1")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile", "id = -87 AND min_score = 1500 AND max_score = 3500 AND deleted = 1")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "staging_percentile_score", "percentile_id IN (-89, -88, -87)")).isZero();
    }

}
