package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.codesEntities;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertCodesStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class UpsertCodesIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @SqlGroup({
            // insert codes into the staging tables
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldDoNothingIfBatchDoesNotHaveCodeImportContent() {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codesEntities) {
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 0, "id IN (-96, -97, -98, -99)"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 0, "practice IN (-98, -99)"));
            } else if ("translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 0, "namespace IN ('backend') AND label_code IN ('code2-test', 'code1-test') AND language_code IN ('gua', 'lan')"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 0, "id IN (-98, -99)"));
            }
        }
        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), false));

        JobExecution jobExecution = launchStep(upsertCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            // insert codes into the staging tables
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldInsert() {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codesEntities) {
            //there are 4 entries in the staging table for the administration_condition and 2 for all other codes
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 4, "id IN (-96, -97, -98, -99)"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 2, "practice IN (-98, -99)"));
            } else if ("translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 2, "namespace IN ('backend') AND label_code IN ('code2-test', 'code1-test') AND language_code IN ('gua', 'lan')"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 2, "id IN (-98, -99)"));
            }
        }
        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), true));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateCodesPreloadReportingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldUpdateAndInsert() {

        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codesEntities) {
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 3, "id IN (-96, -97, -98, -99)"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, -1, "code = 'before test'"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "code = 'IN-test'"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "practice IN (-98, -99)"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, -1, "description = 'before test'"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "description = 'Make sense of problems and persevere in solving them'"));
            } else if ("translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "namespace IN ('backend') AND label_code IN ('code2-test', 'code1-test') AND language_code IN ('gua', 'lan')"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, -1, "label = 'before test'"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "label = 'Hola'"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "id IN (-98, -99)"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "id IN (-98, -99)"));
            }
        }

        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), true));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            //loads all code tables with one row each with id = -98
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingForDeleteSetup.sql"}),
            //loads all code tables with one row each with id = -99
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateCodesPreloadReportingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldInsertButNotDeleteCodes() {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codesEntities) {
            //is should add a new row and do not deleted the existing one
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "id IN (-98, -99)"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "practice IN (-98, -99)"));
            } else if ("translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "namespace IN ('backend') AND label_code IN ('code2-test', 'code1-test') AND language_code IN ('gua', 'lan')"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "id IN (-98, -99)"));
            }
        }

        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), true));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
