package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.WarehouseToStagingStepsConfig.StagePackageStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SqlGroup({
        // Set up import id's
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}),
        // Codes migrate from warehouse.
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}),
        // Entities migrate from warehouse.
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}),
        // Teardown
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseStagingEntitiesTruncate.sql"}),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTearDown.sql"}),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"})
})
public class stagePackageIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private static final String StagingTablePrefix = "staging_test.staging_";
    private static final long DefaultFirstImportId = -99L;
    private static final long DefaultLastImportId = -1L;

    @Test
    public void itShouldNotCopyPackagesIfBatchDoesNotHavepackageOrExamImportContent() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "asmt", 0, "id IN (-99, -98, -11)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "item", 0, "asmt_id in( -99, -98, -11)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "item_other_target", 0, "item_id in( -991, -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "item_common_core_standard", 0, "item_id in( -991, -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "asmt_score", 0, "asmt_id IN (-99, -98)"));

        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), newArrayList(ImportContent.GROUPS,
                ImportContent.ORGANIZATION,
                ImportContent.CODES)));

        JobExecution jobExecution = launchStep(StagePackageStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldCopyPackages() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "asmt", 2, "id IN (-99, -98, -11)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "item", 5, "asmt_id in( -99, -98, -11)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "item_other_target", 1, "item_id in( -991, -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "item_common_core_standard", 1, "item_id in( -991, -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "asmt_score", 1, "asmt_id IN (-99, -98)"));

        getStepExecutionContext().put("batch",
                new MigrateBatch(
                        Migrate.builder().id(1L).jobId(1)
                                .status(MigrateStatus.STARTED)
                                .firstImportId(DefaultFirstImportId)
                                .lastImportId(DefaultLastImportId)
                                .build(),
                        newArrayList(ImportContent.EXAM, ImportContent.PACKAGE)));

        final JobExecution jobExecution = launchStep(StagePackageStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldCopyMorePackagesWithMoreImports() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "asmt", 3, "id IN (-99, -98, -11)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "item", 9, "asmt_id in( -99, -98, -11)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "item_other_target", 1, "item_id in( -991, -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "item_common_core_standard", 1, "item_id in( -991, -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "asmt_score", 1, "asmt_id IN (-99, -98)"));

        getStepExecutionContext().put("batch",
                new MigrateBatch(
                        Migrate.builder().id(1L).jobId(1)
                                .status(MigrateStatus.STARTED)
                                .firstImportId(-5000L)
                                .lastImportId(DefaultLastImportId)
                                .build(),
                        newArrayList(ImportContent.EXAM, ImportContent.PACKAGE)));

        final JobExecution jobExecution = launchStep(StagePackageStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldFailWithNoMigrateBatch() {
        final JobExecution jobExecution = launchStep(StagePackageStepName);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
        assertThat(jobExecution.getExitStatus().getExitDescription()).contains("Exception");
        // Getting the next step returns failed status.
        assertThat(jobExecution.getStepExecutions().iterator().next().getStatus()).isEqualTo(BatchStatus.FAILED);
    }

}
