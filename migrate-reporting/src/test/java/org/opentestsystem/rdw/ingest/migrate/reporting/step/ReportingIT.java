package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchIT;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.test.MetaDataInstanceFactory;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.reporting.MigrateReportingConfiguration.stepReportingName;


public class ReportingIT extends SpringBatchIT {
    private StepExecution stepExecution;

    @Before
    public void setUp() {
        stepExecution = MetaDataInstanceFactory.createStepExecution();
    }

    @Test
    public void testStep() throws Exception {
        stepExecution.getExecutionContext().put("batch", new MigrateBatch(1, 1, newArrayList()));

        final JobExecution jobExecution = getJobLauncherTestUtils().launchStep(stepReportingName, stepExecution.getExecutionContext());

        assertThat(jobExecution.getExitStatus().getExitCode()).isEqualTo(ExitStatus.COMPLETED.getExitCode());
    }

    @Test
    public void testStepWithError() throws Exception {
        stepExecution.getExecutionContext().put("batch", null);

        final JobExecution jobExecution = getJobLauncherTestUtils().launchStep(stepReportingName, stepExecution.getExecutionContext());

        assertThat(jobExecution.getExitStatus().getExitCode()).isEqualTo("test_failure");
    }
}
