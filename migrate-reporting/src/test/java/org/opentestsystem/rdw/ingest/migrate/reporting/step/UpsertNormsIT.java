package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertAsmtsStepName;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertNormsStepName;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

public class UpsertNormsIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingPercentilesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDataSource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDataSource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD,
                    statements = {"INSERT INTO asmt (id, natural_id, grade_id, grade_code, type_id, subject_id, school_year, name, label, version, update_import_id, cut_point_1, cut_point_2, cut_point_3, min_score, max_score, updated, migrate_id) VALUES\n" +
                            "   (-11, '(SBAC)SBAC-IAB-ASMT TEST-11', -98, '98', 2, 1, 1999, 'SBAC-IAB-FIXED-G4M-OA-MATH-4',     'test',          '9835', -1, 2442, 2502, 2582, 2201, 2701, '2017-07-18 20:14:34.000000', -1),\n" +
                            "   (-98, 'SBAC)SBAC-ICA-ASMT TEST',     -98, '98', 1, 1, 1999, 'SBAC-ICA-FIXED-G5E-COMBINED-2017', 'Grade 5 ELA',   '9835', -1, 2442, 2502, 2582, 2201, 2701, '2017-07-18 20:14:34.000000', -1),\n" +
                            "   (-97, 'SBAC)SBAC-ICA-ASMT TEST-2',   -98, '98', 1, 2, 1999, 'SBAC-ICA-FIXED-G5E-COMNED-2017-2', 'Grade 5 ELA-2', '9835', -1, 2442, 2502, 2582, 2201, 2701, '2017-07-18 20:14:34.000000', -1);"},
                    config = @SqlConfig(dataSource = "reportingDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingPercentilesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDataSource"))
    })
    @Test
    public void itShouldInsert() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();

        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile", "id IN (-89, -88, -87)")).isZero();
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id IN (-89, -88, -87)")).isZero();

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile", 3, "id IN (-89, -88, -87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile_score", 11, "percentile_id IN (-89, -88, -87)"));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertNormsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -89 AND percentile_rank IN (25,50,75)")).isEqualTo(3);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -88 AND percentile_rank IN (10,30,50,70,90)")).isEqualTo(5);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -87 AND percentile_rank IN (25,50,75)")).isEqualTo(3);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertAsmtsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -89 AND percentile_rank IN (25,50,75)")).isEqualTo(3);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -88 AND percentile_rank IN (10,30,50,70,90)")).isEqualTo(5);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -87 AND percentile_rank IN (25,50,75)")).isEqualTo(3);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingPercentilesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDataSource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDataSource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingPercentilesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingPercentilesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDataSource"))
    })
    @Test
    public void itShouldUpdateAndInsert() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();

        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile", "id IN (-89, -88, -87)")).isEqualTo(2);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile", "id = -89 AND min_score = 1000 AND max_score = 3000")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -89 AND percentile_rank = 25 AND min_inclusive = 1000")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -89 AND percentile_rank = 75 AND max_exclusive = 3000")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id IN (-89, -88)")).isEqualTo(6);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -89 AND percentile_rank IN (25,50,75)")).isEqualTo(3);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -88 AND percentile_rank IN (25,50,75)")).isEqualTo(3);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -87")).isZero();

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile", 1, "id IN (-89, -88, -87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile_score", 5, "percentile_id IN (-89, -88, -87)"));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertNormsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile", "id IN (-89, -88, -87)")).isEqualTo(3);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile", "id = -89 AND min_score = 1111 AND max_score = 3333")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -89 AND percentile_rank = 25 AND min_inclusive = 1111")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -89 AND percentile_rank = 75 AND max_exclusive = 3333")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -89 AND percentile_rank IN (25,50,75)")).isEqualTo(3);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -88 AND percentile_rank IN (10,30,50,70,90)")).isEqualTo(5);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -88 AND percentile_rank IN (25,75)")).isZero();
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -87 AND percentile_rank IN (25,50,75)")).isEqualTo(3);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertAsmtsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile", "id IN (-89, -88, -87)")).isEqualTo(3);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile", "id = -89 AND min_score = 1111 AND max_score = 3333")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -89 AND percentile_rank = 25 AND min_inclusive = 1111")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -89 AND percentile_rank = 75 AND max_exclusive = 3333")).isEqualTo(1);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -89 AND percentile_rank IN (25,50,75)")).isEqualTo(3);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -88 AND percentile_rank IN (10,30,50,70,90)")).isEqualTo(5);
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -88 AND percentile_rank IN (25,75)")).isZero();
        assertThat(countRowsInTableWhere(reportingJdbcTemplate, "percentile_score", "percentile_id = -87 AND percentile_rank IN (25,50,75)")).isEqualTo(3);
    }
}
