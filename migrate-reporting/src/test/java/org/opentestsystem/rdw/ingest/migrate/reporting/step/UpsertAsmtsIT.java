package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertAsmtsStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

public class UpsertAsmtsIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingCodesPreloadToReporting.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldInsert() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.asmt", "id = -98 and claim1_score_code='SOCK_R' and claim2_score_code = 'SOCK_LS' and claim3_score_code = '2-W' and claim4_score_code = '4-CR'")).isZero();
        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.asmt", "id = -99 and claim1_score_code is null and claim2_score_code is null and claim3_score_code is null and claim4_score_code is null")).isZero();

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", 2, "id IN (-98, -99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item", 9, "1=1"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", 0, "item_id in( -991)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", 3, "item_id in( -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_common_core_standard", 0, "item_id in( -991)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_common_core_standard", 3, "item_id in( -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", 2, "grade_code IN ('98', '99')"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt_score", 2, "asmt_id IN (-98, -99)"));

        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), false));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertAsmtsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertAsmtsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.asmt", "id = -98 and claim1_score_code='SOCK_R' and claim2_score_code = 'SOCK_LS' and claim3_score_code = '2-W' and claim4_score_code = '4-CR'")).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.asmt", "id = -99 and claim1_score_code is null and claim2_score_code is null and claim3_score_code is null and claim4_score_code is null")).isEqualTo(1);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingCodesPreloadToReporting.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesPreloadReportingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldUpdateAndInsert() {

        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", 1, "id IN (-98, -99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", -1, "label = 'test'"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item", 5, "asmt_id in (-98, -99)"));

        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.item", "id = -990 and claim_code = 'claim-99' and target_code = 'target-98'")).isEqualTo(0);
        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.item", "id = -990 and claim_code = 'claim' and target_code = 'target'")).isEqualTo(1);

        //this item is in the asmt that is in the staging but it does not have this other target, so it is removed via parent update
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", -1, "item_id in( -991)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", 2, "item_id in( -990, -980)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_common_core_standard", -1, "item_id in( -991)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_common_core_standard", 2, "item_id in( -990, -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt_score", 1, "asmt_id IN (-98, -99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", 1, "id IN (-99, -98) AND cut_point_1 = 2442 AND cut_point_2 = 2502 AND cut_point_3 = 2582 AND min_score = 2201 and max_score = 2701"));


        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), true));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertAsmtsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertAsmtsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.item", "id = -990 and claim_code = 'claim-99' and target_code = 'target-98'")).isEqualTo(1);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingCodesPreloadToReporting.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingForDeleteSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesPreloadReportingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldInsertButNoteDelete() {

        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", 0, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item", 5, "1=1"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item", 0, "asmt_id in( -99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item", 5, "asmt_id in( -98)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", 0, "item_id in( -991)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", 1, "item_id in( -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", 0, "item_id in( -990)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_common_core_standard", 0, "item_id in( -991)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_common_core_standard", 1, "item_id in( -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_common_core_standard", 0, "item_id in( -990)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt_score", 0, "asmt_id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt_score", 1, "asmt_id IN (-98)"));

        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), false));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertAsmtsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertAsmtsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
