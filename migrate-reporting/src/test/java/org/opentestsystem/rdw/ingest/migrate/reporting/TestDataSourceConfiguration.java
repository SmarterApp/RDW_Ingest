package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.springframework.batch.core.configuration.annotation.BatchConfigurer;
import org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer;
import org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;

/**
 * Configuration for DataSources in the Integration Test
 * Note that in the test environment we are sharing the same data source for different database instances
 */
@Configuration
@EnableTransactionManagement
@Profile("test")
public class TestDataSourceConfiguration {

    /**
     * Data source for spring batch and reporting data mart with transaction manager.
     *
     * @return DataSource
     */
    @Bean(name = "batchDataSource")
    @ConfigurationProperties(prefix = "spring.batch_datasource")
    public DataSource batchDataSource() {
        return DataSourceBuilder
                .create()
                .build();
    }

    /**
     * Spring Batch needs this if setting the data source.
     * In addition to the primary being set.
     *
     * @return BatchConfigurer
     */
    @Bean
    BatchConfigurer configurer(final DataSource dataSource) {
        return new DefaultBatchConfigurer(dataSource);
    }

    /**
     * The jdbc template used for reading and writing to the reporting data mart.
     *
     * @return DataSource
     */
    @Bean(name = "queryJdbcTemplate")
    public NamedParameterJdbcTemplate queryJdbcTemplate(final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }


    /**
     * The jdbc template used for reading from the data warehouse.
     *
     * @return DataSource
     */
    @Bean(name = "warehouseJdbcTemplate")
    public NamedParameterJdbcTemplate warehouseJdbcTemplate(final DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }

}