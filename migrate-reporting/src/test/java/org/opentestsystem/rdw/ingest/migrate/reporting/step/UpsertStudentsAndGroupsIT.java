package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertStudentsAndGroupsStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class UpsertStudentsAndGroupsIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource"))
    })
    @Test
    public void itShouldUpdateAndInsert() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student", 3, "id in (-89, -88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student", -1, "last_or_surname = 'TestName'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_ethnicity", 4, "student_id in (-89, -88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group", 2, "id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group", -1, "creator = 'TestName'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group_membership", 6, "student_group_id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "user_student_group", 3, "student_group_id in (-91, -8, -7)"));

        getStepExecutionContext().put("batch", mock(Migrate.class));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertStudentsAndGroupsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertStudentsAndGroupsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesForDeleteSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource"))
    })
    @Test
    public void itShouldInsertButNoteDelete() {

        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student", 0, "id in (-89)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student", 3, "id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_ethnicity", 4, "student_id in (-89, -88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group", 0, "id in (-91)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group", 2, "id in (-8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group_membership", 3, "student_group_id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "user_student_group", 2, "student_group_id in (-91, -8, -7)"));

        getStepExecutionContext().put("batch", mock(Migrate.class));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertStudentsAndGroupsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertStudentsAndGroupsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
