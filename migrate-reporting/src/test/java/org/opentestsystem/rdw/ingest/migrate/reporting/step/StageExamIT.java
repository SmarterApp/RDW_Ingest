package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.batch.test.StepRunner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SqlGroup({
        // Set up import id's
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}),
        // Codes migrate from warehouse.
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}),
        // Entities migrate from warehouse.
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}),
        // Teardown
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseStagingEntitiesTruncate.sql"}),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTearDown.sql"}),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"})
})
public class StageExamIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private static final String StagingTablePrefix = "staging_test.staging_";
    private static final long DefaultFirstImportId = -99L;
    private static final long DefaultLastImportId = -1L;

    private StepTasklet stageExamStep;
    private JobExecution jobExecution;
    private ChunkContext chunkContext;

    @Autowired
    private WarehouseToStagingStepsConfig config;

    @Before
    public void setUp() {
        stageExamStep = config.stageExamStep();
        jobExecution = mock(JobExecution.class);
        chunkContext = new ChunkContext(new StepContext(new StepExecution("stageExamStep", jobExecution)));
    }

    @Test
    public void itShouldNotCopyExamsIfBatchDoesNotHavePackageOrExamImportContent() throws Exception {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam", 0, "id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_student", 0, "id in (-18, -17, -16, -15)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_available_accommodation", 0, "exam_id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_item", 0, "exam_id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_claim_score", 0, "exam_id in (-88, -87, -86, -85)"));

        getStepExecutionContext().put("batch",
                new MigrateBatch(
                        Migrate.builder().id(1L).jobId(1)
                                .status(MigrateStatus.STARTED)
                                .firstImportId(DefaultFirstImportId)
                                .lastImportId(DefaultLastImportId)
                                .build(),
                        newArrayList(newArrayList(ImportContent.GROUPS,
                                ImportContent.PACKAGE,
                                ImportContent.ORGANIZATION,
                                ImportContent.CODES))));


        when(jobExecution.getExecutionContext()).thenReturn(getStepExecutionContext());
        final RepeatStatus status = stageExamStep.execute(null, chunkContext);

        assertThat(status).isEqualTo(RepeatStatus.FINISHED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldCopyExams() throws Exception {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        // exam with id -88 is deleted
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam", 4, "id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_student", 3, "id in (-17, -15, -16)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_student", 0, "id in (-18)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_available_accommodation", 3, "exam_id in (-87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_available_accommodation", 0, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_item", 3, "exam_id in (-87, -86,  -85)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_item", 0, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_claim_score", 3, "exam_id in (-87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_claim_score", 0, "exam_id in (-88)"));

        getStepExecutionContext().put("batch",
                new MigrateBatch(
                        Migrate.builder().id(1L).jobId(1)
                                .status(MigrateStatus.STARTED)
                                .firstImportId(DefaultFirstImportId)
                                .lastImportId(DefaultLastImportId)
                                .build(),
                        newArrayList(ImportContent.EXAM)));

        when(jobExecution.getExecutionContext()).thenReturn(getStepExecutionContext());

        final RepeatStatus status = stageExamStep.execute(null, chunkContext);

        assertThat(status).isEqualTo(RepeatStatus.FINISHED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldNotCopyExamsIfNoImports() throws Exception {

        final StepRunner stepRunner = new StepRunner(getJobLauncherTestUtils().getJobLauncher(), getJobLauncherTestUtils().getJobRepository());
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam", 0, "id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_student", 0, "id in (-18, -17, -16, -15)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_available_accommodation", 0, "exam_id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_item", 0, "exam_id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "exam_claim_score", 0, "exam_id in (-88, -87, -86, -85)"));

        getStepExecutionContext().put("batch",
                new MigrateBatch(
                        Migrate.builder().id(1L).jobId(1)
                                .status(MigrateStatus.STARTED)
                                .firstImportId(20000L)
                                .lastImportId(20001L)
                                .build(),
                        newArrayList(ImportContent.EXAM)));

        when(jobExecution.getExecutionContext()).thenReturn(getStepExecutionContext());

        final RepeatStatus status = stageExamStep.execute(null, chunkContext);

        assertThat(status).isEqualTo(RepeatStatus.FINISHED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailWithNoMigrateBatch() throws Exception {
        when(jobExecution.getExecutionContext()).thenReturn(getStepExecutionContext());

        final RepeatStatus status = stageExamStep.execute(null, chunkContext);

        assertThat(status).isEqualTo(RepeatStatus.FINISHED);
    }
}
