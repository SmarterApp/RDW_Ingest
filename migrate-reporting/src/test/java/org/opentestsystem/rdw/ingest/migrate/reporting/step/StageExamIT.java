package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.ExecutionParams;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.WarehouseToStagingStepsConfig.StageExamStep;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SqlGroup({
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),

        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
})
public class StageExamIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @Test
    public void itShouldCopyExams() throws Exception {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        // exam with id -88 is deleted
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam", 4, "id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_student", 3, "id in (-17, -15, -16)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_student", 0, "id in (-18)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_available_accommodation", 3, "exam_id in (-87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_available_accommodation", 0, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_item", 3, "exam_id in (-87, -86,  -85)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_item", 0, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_claim_score", 3, "exam_id in (-87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_claim_score", 0, "exam_id in (-88)"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(firstAt)
                        .lastAt(lastAt)
                        .migrateCodes(false)
                        .build());

        final JobExecution jobExecution = launchStep(StageExamStep);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldNotCopyExamsIfNoImports() throws Exception {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam", 0, "id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_student", 0, "id in (-18, -17, -16, -15)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_available_accommodation", 0, "exam_id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_item", 0, "exam_id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, StagingTablePrefix + "exam_claim_score", 0, "exam_id in (-88, -87, -86, -85)"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(Instant.parse("2017-07-18T20:16:34.966Z"))
                        .lastAt(Instant.parse("2017-07-18T20:16:34.966Z"))
                        .migrateCodes(false)
                        .build());

        final JobExecution jobExecution = launchStep(StageExamStep);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldFailWithNoMigrateBatch() throws Exception {
        final JobExecution jobExecution = launchStep(StageExamStep);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
        assertThat(jobExecution.getExitStatus().getExitDescription()).contains("Exception");
        // Getting the next step returns failed status.
        assertThat(jobExecution.getStepExecutions().iterator().next().getStatus()).isEqualTo(BatchStatus.FAILED);
    }
}
