package org.opentestsystem.rdw.ingest.migrate.reporting.listener;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.JobParams;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;


public class MigrateJobExecutionListenerIT {
    private ReportingMigrateRepository reportingMigrateRepository;
    private MigrateJobExecutionListener listener;
    private JobExecution jobExecution;

    @Before
    public void setUp() {
        reportingMigrateRepository = mock(ReportingMigrateRepository.class);
        jobExecution = mock(JobExecution.class);

        final Map<String, JobParameter> params = newHashMap();
        params.put(JobParams.fistImportId, new JobParameter(10L));
        params.put(JobParams.lastImportId, new JobParameter(20L));
        final JobParameters jobParameters = new JobParameters(params);
        when(jobExecution.getJobParameters()).thenReturn(jobParameters);
        when(jobExecution.getJobId()).thenReturn(-101L);

        listener = new MigrateJobExecutionListener();
        listener.setReportingMigrateRepository(reportingMigrateRepository);
    }

    @Test
    public void itShouldCreateNewMigrateRecordBeforeJob() {
        listener.beforeJob(jobExecution);

        verify(reportingMigrateRepository).create(-101L, MigrateStatus.STARTED, 10L, 20L);
    }

    @Test
    public void itShouldUpdateMigrateRecordAfterJobCompleted() {
        when(jobExecution.getExitStatus()).thenReturn(ExitStatus.COMPLETED);
        listener.afterJob(jobExecution);

        verify(reportingMigrateRepository).updateStatusById(-101L, MigrateStatus.COMPLETED);
    }

    @Test
    public void itShouldUpdateMigrateRecordAfterJobFailed() {
        when(jobExecution.getExitStatus()).thenReturn(ExitStatus.FAILED);
        listener.afterJob(jobExecution);

        verify(reportingMigrateRepository).updateStatusById(-101L, MigrateStatus.FAILED);
    }

    @Test
    public void itShouldUpdateMigrateRecordAfterJob() {
        when(jobExecution.getExitStatus()).thenReturn(ExitStatus.STOPPED);
        listener.afterJob(jobExecution);

        verify(reportingMigrateRepository).updateStatusById(-101L, MigrateStatus.ABANDONED);
    }
}