package org.opentestsystem.rdw.ingest.migrate.reporting.status;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DatabaseStatusIndicatorTest {

    private WarehouseImportRepository warehouseRepository;
    private ReportingMigrateRepository reportingRepository;
    private DatabaseStatusIndicator statusIndicator;

    @Before
    public void createStatusIndicator() {
        warehouseRepository = mock(WarehouseImportRepository.class);
        reportingRepository = mock(ReportingMigrateRepository.class);

        statusIndicator = new DatabaseStatusIndicator(warehouseRepository, reportingRepository);
    }

    @Test
    public void itShouldHaveAName() {
        assertThat(statusIndicator.name()).contains("database");
    }

    @Test
    public void itShouldDoLevelCheck() {
        assertThat(statusIndicator.doLevelCheck(2)).isFalse();
        assertThat(statusIndicator.doLevelCheck(3)).isTrue();
    }

    @Test
    public void itShouldReportIdealForRead() {
        final Status status = doStatusCheck(3);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());
        final List<Status> statuses = (List<Status>) status.getDetails().get("databaseOperations");
        assertThat(statuses).hasSize(2);
    }

    @Test
    public void itShouldReportIdealForWrite() {
        when(reportingRepository.create(any(Migrate.class))).thenAnswer(invocation -> {
            final Migrate migrate = (Migrate) invocation.getArguments()[0];
            return migrate.copy().id(123L).build();
        });

        final Status status = doStatusCheck(4);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());
        final List<Status> statuses = (List<Status>) status.getDetails().get("databaseOperations");
        assertThat(statuses).hasSize(3);
    }

    private Status doStatusCheck(final int level) {
        final Status.Builder builder = Status.builder();
        statusIndicator.doStatusCheck(builder, level);
        return builder.build();
    }

}