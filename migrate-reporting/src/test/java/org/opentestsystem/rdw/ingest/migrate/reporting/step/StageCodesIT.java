package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.WarehouseToStagingStepsConfig.StageCodesStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class StageCodesIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private static final String StagingTablePrefix = "staging_test.staging_";
    private static final long DefaultFirstImportId = -99L;
    private static final long DefaultLastImportId = -1L;

    @SqlGroup({
            // insert codes into the staging tables
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"})
    })
    @Test
    public void itShouldNotCopyCodesIfBatchDoesNotHaveCodeImportContent() {
        // Collect counts of rows in each staging code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : WarehouseToStagingStepsConfig.codesEntities) {
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 0, "id IN (-96, -97, -98, -99)"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 0, "practice IN (-98, -99)"));
            } else if ("accommodation_translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 0, "accommodation_id IN (-98, -99) AND language_id IN (-98, -99)"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 0, "id IN (-98, -99)"));
            }
        }
        //
        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), newArrayList(ImportContent.EXAM,
                ImportContent.PACKAGE,
                ImportContent.GROUPS,
                ImportContent.ORGANIZATION)));

        JobExecution jobExecution = launchStep(StageCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            // insert codes into the staging tables
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseStagingCodesTruncate.sql"})
    })
    @Test
    public void itShouldCopyCodes() {
        // Collect counts of rows in each staging code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : WarehouseToStagingStepsConfig.codesEntities) {
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 4, "id IN (-96, -97, -98, -99)"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 2, "practice IN (-98, -99)"));
            } else if ("accommodation_translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 2, "accommodation_id IN (-98, -99) AND language_id IN (-98, -99)"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 2, "id IN (-98, -99)"));
            }
        }

        getStepExecutionContext().put("batch",
                new MigrateBatch(
                        Migrate.builder().id(1L).jobId(1)
                                .status(MigrateStatus.STARTED)
                                .firstImportId(DefaultFirstImportId)
                                .lastImportId(DefaultLastImportId)
                                .build(),
                        newArrayList(ImportContent.CODES)));

        final JobExecution jobExecution = launchStep(StageCodesStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            // insert codes into the staging tables
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseStagingCodesTruncate.sql"})
    })
    @Test
    public void itShouldCopyCodesRegardlessOfFirstAndLast() {
        // Collect counts of rows in each staging code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : WarehouseToStagingStepsConfig.codesEntities) {
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 4, "id IN (-96, -97, -98, -99)"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 2, "practice IN (-98, -99)"));
            } else if ("accommodation_translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 2, "accommodation_id IN (-98, -99) AND language_id IN (-98, -99)"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + table, 2, "id IN (-98, -99)"));
            }
        }

        getStepExecutionContext().put("batch",
                new MigrateBatch(
                        Migrate.builder().id(1L).jobId(1)
                                .status(MigrateStatus.STARTED)
                                .firstImportId(200000L)
                                .lastImportId(200009L)
                                .build(),
                        newArrayList(ImportContent.CODES)));

        final JobExecution jobExecution = launchStep(StageCodesStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }


}
