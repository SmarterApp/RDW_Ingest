package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.MigrateStatus;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.WarehouseToStagingStepsConfig.StageCodesStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SqlGroup({
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),

        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource"))
})
public class StageCodesIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @Test
    public void itShouldNotCopyCodesIfBatchDoesNotHaveCodeImportContent() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : WarehouseToStagingStepsConfig.codesEntities) {
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_" + table, 0, "id IN (-96, -97, -98, -99)"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_" + table, 0, "practice IN (-98, -99)"));
            } else if ("accommodation_translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_translation", 0, "namespace IN ('backend') AND label_code IN ('code2-test', 'code1-test') AND language_code IN ('gua', 'lan')"));
            } else if ("school_year".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_" + table, 0, "year in(1999, 1998)"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_" + table, 0, "id IN (-98, -99)"));
            }
        }
        //
        getStepExecutionContext().put(ExecutionParams.migrate, mock(Migrate.class));

        JobExecution jobExecution = launchStep(StageCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldCopyCodesRegardlessOfFirstAndLastAt() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : WarehouseToStagingStepsConfig.codesEntities) {
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_" + table, 4, "id IN (-96, -97, -98, -99)"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_" + table, 2, "practice IN (-98, -99)"));
            } else if ("accommodation_translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_translation", 2, "namespace IN ('backend') AND label_code IN ('code2-test', 'code1-test') AND language_code IN ('gua', 'lan')"));
            } else if ("school_year".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_" + table, 2, "year in(1999, 1998)"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_" + table, 2, "id IN (-98, -99)"));
            }
        }
        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder()
                        .id(1L)
                        .jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(Instant.MIN)
                        .lastAt(Instant.MIN)
                        .migrateCodes(true)
                        .build());

        final JobExecution jobExecution = launchStep(StageCodesStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldFailWithNoMigrateBatch() {
        final JobExecution jobExecution = launchStep(StageCodesStepName);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
        assertThat(jobExecution.getExitStatus().getExitDescription()).contains("Exception");
        // Getting the next step returns failed status.
        assertThat(jobExecution.getStepExecutions().iterator().next().getStatus()).isEqualTo(BatchStatus.FAILED);
    }
}
