package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.WarehouseToStagingStepsConfig.StageOrganizationsStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class StageOrganizationsIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private static final String StagingTablePrefix = "staging_test.staging_";

    private final Instant firstAt = Instant.parse("2017-07-18T19:05:34.966Z");
    private final Instant lastAt = Instant.parse("2017-07-18T20:14:34.000Z");

    @SqlGroup({
            // Set up import id's
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}),
            // Codes migrate from warehouse.
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}),
            // Entities migrate from warehouse.
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}),
            // Teardown
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseStagingEntitiesTruncate.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"})
    })
    @Test
    public void itShouldCopyOrganizations() {
        // Collect counts of rows in each staging code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        // Deleted school is copied, but not it's district.
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "school", 1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "district", 0, "id IN (-99)"));
        // Not deleted school is copied along with district.
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "school", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "district", 1, "id IN (-98)"));
        // No codes in staging.
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "grade", 0, "1=1"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "gender", 0, "1=1"));

        getStepExecutionContext().put("batch",
                new MigrateBatch(
                        Migrate.builder().id(1L).jobId(1)
                                .status(MigrateStatus.STARTED)
                                .firstAt(firstAt)
                                .lastAt(lastAt)
                                .build(), false));

        final JobExecution jobExecution = launchStep(StageOrganizationsStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            // Set up import id's
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}),
            // Codes migrate from warehouse.
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}),
            // Entities migrate from warehouse.
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, statements = {"INSERT INTO warehouse_test.school (id, district_id, name, natural_id, deleted, import_id, update_import_id, created, updated) " +
                    "VALUES (-97, -99, 'Sample School -97', 'natural_id-97', 0, -2, -2, '2017-07-18 20:13:34.000000', '2017-07-18 20:13:34.000000')"}),
            // Teardown
            @Sql(executionPhase = AFTER_TEST_METHOD, statements = {"DELETE FROM warehouse_test.school WHERE id IN (-97)"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseStagingEntitiesTruncate.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"})
    })
    @Test
    public void itShouldCopyDistrictIfOneSchoolDeleted() {
        // Collect counts of rows in each staging code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        // Deleted school is copied, and so is district because school -97.
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "school", 1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "district", 1, "id IN (-99)"));
        // Not deleted school is copied along with district.
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "school", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "district", 1, "id IN (-98)"));
        // Extra school
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "school", 1, "id IN (-97)"));
        // No codes in staging.
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "grade", 0, "1=1"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "gender", 0, "1=1"));

        getStepExecutionContext().put("batch",
                new MigrateBatch(
                        Migrate.builder().id(1L).jobId(1)
                                .status(MigrateStatus.STARTED)
                                .firstAt(firstAt)
                                .lastAt(lastAt)
                                .build(), true));

        final JobExecution jobExecution = launchStep(StageOrganizationsStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldFailWithNoMigrateBatch() {
        final JobExecution jobExecution = launchStep(StageOrganizationsStepName);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
        assertThat(jobExecution.getExitStatus().getExitDescription()).contains("Exception");
        // Getting the next step returns failed status.
        assertThat(jobExecution.getStepExecutions().iterator().next().getStatus()).isEqualTo(BatchStatus.FAILED);
    }

}
