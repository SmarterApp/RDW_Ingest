package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.MigrateStatus;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.WarehouseToStagingStepsConfig.StageOrganizationsStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class StageOrganizationsIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @SqlGroup({
            // Set up import id's
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            // Codes migrate from warehouse.
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            // Entities migrate from warehouse.
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            // Teardown
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldCopyOrganizations() {
        // Collect counts of rows in each staging code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        // Deleted school is copied, but not its district.
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_school", 1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_district", 0, "id IN (-99)"));
        // Not deleted school is copied along with district.
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_school", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_district", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_district_group", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_school_group", 1, "id IN (-98)"));
        // No codes in reporting.
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_grade", 0, "1=1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_gender", 0, "1=1"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(firstAt)
                        .lastAt(lastAt)
                        .migrateCodes(false)
                        .build());

        final JobExecution jobExecution = launchStep(StageOrganizationsStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, statements = {"INSERT INTO school (id, district_id, name, natural_id, deleted, import_id, update_import_id, created, updated) " +
                    "VALUES (-97, -99, 'Sample School -97', 'natural_id-97', 0, -2, -2, '2017-07-18 20:13:34.000000', '2017-07-18 20:13:34.000000')"}, config = @SqlConfig(dataSource = "warehouseDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, statements = {"DELETE FROM school WHERE id IN (-97)"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldCopyDistrictIfOneSchoolDeleted() {
        // Collect counts of rows in each staging code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        // Deleted school is copied, and so is district because school -97.
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_school", 1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_district", 1, "id IN (-99)"));
        // Not deleted school is copied along with district.
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_school", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_district", 1, "id IN (-98)"));
        // Extra school
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_school", 1, "id IN (-97)"));
        // No codes in reporting.
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_grade", 0, "1=1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_gender", 0, "1=1"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(firstAt)
                        .lastAt(lastAt)
                        .migrateCodes(true)
                        .build());

        final JobExecution jobExecution = launchStep(StageOrganizationsStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldFailWithNoMigrateBatch() {
        final JobExecution jobExecution = launchStep(StageOrganizationsStepName);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
        assertThat(jobExecution.getExitStatus().getExitDescription()).contains("Exception");
        // Getting the next step returns failed status.
        assertThat(jobExecution.getStepExecutions().iterator().next().getStatus()).isEqualTo(BatchStatus.FAILED);
    }

}
