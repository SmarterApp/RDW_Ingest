package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.WarehouseToStagingStepsConfig.StageGroupsStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SqlGroup({
        // Set up import id's
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}),
        // Codes migrate from warehouse.
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}),
        // Entities migrate from warehouse.
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}),
        // Teardown
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseStagingEntitiesTruncate.sql"}),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTearDown.sql"}),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"})
})
public class StageGroupsIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private static final String StagingTablePrefix = "staging_test.staging_";
    private final Instant firstAt = Instant.parse("2017-07-18T19:05:34.966Z");
    private final Instant lastAt = Instant.parse("2017-07-18T20:14:34.000Z");

    @Test
    public void itShouldCopyGroups() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "student", 4, "id in (-89, -88, -87, -86, -33, -11)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "student_ethnicity", 4, "student_id in (-89, -88, -87, -86, -33, -11)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "student_group", 3, "id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "student_group_membership", 3, "student_group_id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "user_student_group", 2, "student_group_id in (-91, -8, -7)"));

        getStepExecutionContext().put("batch",
                new MigrateBatch(
                        Migrate.builder().id(1L).jobId(1)
                                .status(MigrateStatus.STARTED)
                                .firstAt(firstAt)
                                .lastAt(lastAt)
                                .build(),
                        true));

        final JobExecution jobExecution = launchStep(StageGroupsStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldCopyMoreGroupsWithMoreImports() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "student", 5, "id in (-89, -88, -87, -86, -33, -11)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "student_ethnicity", 4, "student_id in (-89, -88, -87, -86, -33, -11)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "student_group", 3, "id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "student_group_membership", 4, "student_group_id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, StagingTablePrefix + "user_student_group", 2, "student_group_id in (-91, -8, -7)"));

        getStepExecutionContext().put("batch",
                new MigrateBatch(
                        Migrate.builder().id(1L).jobId(1)
                                .status(MigrateStatus.STARTED)
                                .firstAt(firstAt)
                                .lastAt(Instant.parse("2017-07-18T20:16:34.966Z"))
                                .build(), false));

        final JobExecution jobExecution = launchStep(StageGroupsStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldFailWithNoMigrateBatch() {
        final JobExecution jobExecution = launchStep(StageGroupsStepName);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
        assertThat(jobExecution.getExitStatus().getExitDescription()).contains("Exception");
        // Getting the next step returns failed status.
        assertThat(jobExecution.getStepExecutions().iterator().next().getStatus()).isEqualTo(BatchStatus.FAILED);
    }

}
