package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;
import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertSubjectsStepName;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class UpsertSubjectsIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingSubjectSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource"))
    })
    @Test
    public void itShouldUpdateAndInsert() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject", 0, "id IN (-2, -3, 1, 2)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject", 1, "id = -1"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", 0, "subject_id in (-2, 1, 2)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", 1, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", 1, "subject_id = -1 and alt_score_performance_level_count=4"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", -1, "subject_id = -3 and asmt_type_id = 3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", 1, "subject_id = -3 and asmt_type_id = 1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", -1, "subject_id = -3 and asmt_type_id = 2 and performance_level_count = 3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", 1, "subject_id = -3 and asmt_type_id = 2 and performance_level_count = 8"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_score", 0, "subject_id in(-2, 1, 2)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_score", -1, "subject_id = -3 and id in (-60)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_score", 0, "subject_id = -3 and id in (-15)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_score", 1, "subject_id = -3 and id in (-16)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_score", 1, "subject_id = -1 and id in (-17)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_translation", 0, "subject_id in (-2, 1, 2)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_translation", 2, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_translation", -1, "subject_id = -3 and label = 'old'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_translation", 1, "subject_id = -3 and label = 'new'"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "claim", 0, "subject_id in (-2, 1, 2)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "claim", 0, "subject_id = -3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "claim", 1, "subject_id = -3 and code = 'new'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "claim", -1, "subject_id = -3 and code = 'deleted'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "claim", 4, "subject_id = -1"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "target", 4, "id in (-1, -2, -3, -4, -68, -69)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "target", 1, "id in (-67)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "target", -1, "id in (-60)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "target", 0, "id in (-5, -6, -7, -8 -9)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "depth_of_knowledge", 0, "subject_id in (-2, 1, 2, -3)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "depth_of_knowledge", 1, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "depth_of_knowledge", 0, "subject_id = -2"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "depth_of_knowledge", 1, "subject_id = -3 and reference = 'new'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "depth_of_knowledge", -1, "subject_id = -3 and reference = 'deleted'"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "common_core_standard", 0, "subject_id in (-2, 1, 2, -3)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "common_core_standard", 2, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "common_core_standard", 1, "subject_id = -3 and natural_id = 'new'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "common_core_standard", -1, "subject_id = -3 and natural_id = 'deleted'"));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertSubjectsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertSubjectsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
