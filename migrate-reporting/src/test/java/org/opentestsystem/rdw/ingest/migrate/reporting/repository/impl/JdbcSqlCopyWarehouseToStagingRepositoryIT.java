package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateWarehouseToStagingSqlConfiguration;
import org.opentestsystem.rdw.ingest.migrate.reporting.RepositoryIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlCopyWarehouseToStagingRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;



@Import({MigrateWarehouseToStagingSqlConfiguration.class})
public class JdbcSqlCopyWarehouseToStagingRepositoryIT extends RepositoryIT {

    @Autowired
    private MigrateWarehouseToStagingSqlConfiguration sqlConfig;

    @Autowired
    private SqlCopyWarehouseToStagingRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Sql(statements = {
            "INSERT INTO warehouse_test.import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
            "INSERT INTO warehouse_test.district (id, name, natural_id) VALUES (-22, 'Sample District 1', 'DistrictNaturalId');",
            "INSERT INTO warehouse_test.school (id, district_id, name, natural_id, import_id, update_import_id) VALUES (-27, -22, 'Sample School 1', 'SchoolNaturalId', 1, 1);"
    })
    @Test
    public void itShouldCopy() {

        final Migrate migrate = Migrate.builder()
                .firstImportId(1L)
                .lastImportId(5L)
                .jobId(1)
                .status(MigrateStatus.STARTED)
                .build();

        assertThat(countRowsInTableWhere(jdbcTemplate, "warehouse_test.district", "id=-22")).isEqualTo(1);
        assertThat(countRowsInTable(jdbcTemplate, "staging_test.staging_district")).isEqualTo(0);

        repository.execute(sqlConfig.getEntities().get("district").getSql().get("warehouseRead"),
                sqlConfig.getEntities().get("district").getSql().get("stagingInsert"),
                -1, new MigrateBatch(migrate, newArrayList()));

        assertThat(countRowsInTableWhere(jdbcTemplate, "staging_test.staging_district", "id=-22")).isEqualTo(1);
    }

}