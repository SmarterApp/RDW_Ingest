package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.junit.Before;
import org.junit.Test;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.item.ExecutionContext;

import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.ingest.migrate.reporting.JobParams.FirstImportId;
import static org.opentestsystem.rdw.ingest.migrate.reporting.JobParams.LastImportId;

public class MigrateJobPartitionerTest {

    private JobExecution jobExecution;
    private MigrateJobPartitioner partitioner;

    @Before
    public void setUp() {
        jobExecution = mock(JobExecution.class);
        partitioner = new MigrateJobPartitioner();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailIfNotInitialized() {
        when(jobExecution.getJobParameters()).thenReturn(JobParams.createJobParams(1, 10));
        partitioner.partition(2);
    }

    @Test
    public void itShouldPartition() {
        when(jobExecution.getJobParameters()).thenReturn(JobParams.createJobParams(1, 10));
        partitioner.beforeJob(jobExecution);

        Map<String, ExecutionContext> map = partitioner.partition(2);
        final ExecutionContext ex1 = new ExecutionContext();
        ex1.put(FirstImportId, 1L);
        ex1.put(LastImportId, 5L);

        final ExecutionContext ex2 = new ExecutionContext();
        ex2.put(FirstImportId, 6L);
        ex2.put(LastImportId, 10L);

        assertThat(map.values()).containsExactlyInAnyOrder(ex1, ex2);

        map = partitioner.partition(3);
        final ExecutionContext ex3 = new ExecutionContext();
        ex3.put(FirstImportId, 1L);
        ex3.put(LastImportId, 4L);

        final ExecutionContext ex4 = new ExecutionContext();
        ex4.put(FirstImportId, 5L);
        ex4.put(LastImportId, 8L);

        final ExecutionContext ex5 = new ExecutionContext();
        ex5.put(FirstImportId, 9L);
        ex5.put(LastImportId, 10L);

        assertThat(map.values()).containsExactlyInAnyOrder(ex3, ex4, ex5);

    }

    @Test
    public void itShouldPartitionEdgeCases() {
        when(jobExecution.getJobParameters()).thenReturn(JobParams.createJobParams(1, 1));
        partitioner.beforeJob(jobExecution);

        Map<String, ExecutionContext> map = partitioner.partition(2);
        final ExecutionContext ex = new ExecutionContext();
        ex.put(FirstImportId, 1L);
        ex.put(LastImportId, 1L);
        assertThat(map.values()).containsExactlyInAnyOrder(ex);

        when(jobExecution.getJobParameters()).thenReturn(JobParams.createJobParams(1, 2));
        partitioner.beforeJob(jobExecution);

        map = partitioner.partition(10);
        final ExecutionContext ex2 = new ExecutionContext();
        ex2.put(FirstImportId, 1L);
        ex2.put(LastImportId, 1L);

        final ExecutionContext ex3 = new ExecutionContext();
        ex3.put(FirstImportId, 2L);
        ex3.put(LastImportId, 2L);

        assertThat(map.values()).containsExactlyInAnyOrder(ex2, ex3);
    }
}