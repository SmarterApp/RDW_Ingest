package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.StepExecution;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import static org.assertj.core.api.Assertions.assertThat;


import static org.opentestsystem.rdw.ingest.migrate.reporting.MigrateReportingConfiguration.stepWarehouseCheckName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class WarehouseCheckIT extends SpringBatchStepIT {


    @Test
    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, statements = "INSERT INTO `warehouse-test`.subject (id, name) VALUES (-99, 'extra')"),
            @Sql(executionPhase = AFTER_TEST_METHOD, statements = "DELETE FROM `warehouse-test`.subject where id = -99")
    })
    public void shouldFailWithExtraSubject() {

        shouldHaveFailed(launchStep(stepWarehouseCheckName));
    }

    @Test
    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, statements = "INSERT INTO `warehouse-test`.asmt_type (id, code, name) VALUES (-99, 'zzz', 'extra')"),
            @Sql(executionPhase = AFTER_TEST_METHOD, statements = "DELETE FROM `warehouse-test`.asmt_type where id = -99")
    })
    public void shouldFailWithExtraAsmtType() {

        shouldHaveFailed(launchStep(stepWarehouseCheckName));
    }

    @Test
    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, statements = "UPDATE `warehouse-test`.subject SET name = 'modify' where name = 'Math'"),
            @Sql(executionPhase = AFTER_TEST_METHOD, statements = "UPDATE `warehouse-test`.subject SET name = 'Math' where name = 'modify'")
    })
    public void shouldFailWithModifiedSubject() {

        shouldHaveFailed(launchStep(stepWarehouseCheckName));
    }

    @Test
    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, statements = "INSERT INTO `warehouse-test`.subject_claim_score (id, subject_id, asmt_type_id, code, name) VALUES (-99,  1, 1, '1', 'Extra' )"),
            @Sql(executionPhase = AFTER_TEST_METHOD, statements = "DELETE FROM `warehouse-test`.subject_claim_score WHERE id = -99")
    })
    public void shouldFailWithExtraSubjectClaimScore() {

        shouldHaveFailed(launchStep(stepWarehouseCheckName));
    }

    /**
     * There are some tests that are designed to fail with deleted, extra or modified critical code tables.
     *
     * @param jobExecution The execution object from Spring Batch.
     */
    private void shouldHaveFailed(JobExecution jobExecution) {
        StepExecution stepExecution = jobExecution.getStepExecutions().iterator().next();

        assertThat( stepExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
        assertThat( stepExecution.getStepName()).isEqualTo(stepWarehouseCheckName);
        assertThat( jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
    }

    @Test
    public void shouldPassCheckWithDefaultCodes() {
        final JobExecution jobExecution = launchStep(stepWarehouseCheckName);

        StepExecution stepExecution = jobExecution.getStepExecutions().iterator().next();

        assertThat( stepExecution.getStatus()).isEqualTo(BatchStatus.COMPLETED);
        assertThat( stepExecution.getStepName()).isEqualTo(stepWarehouseCheckName);
        assertThat( jobExecution.getStatus()).isEqualTo(BatchStatus.COMPLETED);
    }

}
