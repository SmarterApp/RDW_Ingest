package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.updateEmbargoStepName;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertOrganizationsStepName;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class UpdateEmbargoIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEmbargoSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:StagingEmbargoTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource"))
    })
    @Test
    public void itShouldUpdate() {
        // one district (-99) has the same effective embargo setting
        // one district (-98) has a new setting and schools should change

        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "school", 2, "embargo_enabled = 1 AND id IN(-97, -98, -99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "school", -2, "embargo_enabled = 0 AND id IN(-97, -98, -99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "school", 2, "migrate_id = -99 AND id IN(-97, -98, -99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "school", -2, "migrate_id = -10 AND id IN(-97, -98, -99)"));

        getStepExecutionContext().put("batch", mock(Migrate.class));

        // run the step first time
        JobExecution jobExecution = launchStep(updateEmbargoStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(updateEmbargoStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
