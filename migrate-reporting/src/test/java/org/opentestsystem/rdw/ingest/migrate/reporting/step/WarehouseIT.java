package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.ExecutionParams;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.CODES;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.EXAM;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.GROUPS;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.ORGANIZATION;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.PACKAGE;
import static org.opentestsystem.rdw.ingest.migrate.reporting.MigrateReportingConfiguration.stepWarehouseName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class WarehouseIT extends SpringBatchStepIT {

    @Test
    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"})
    })
    public void testStepWithThreeTypes() {
        // Simulate that migrate param was set up.
        // The warehouse step reads first and last import id's from migrate.
        getStepExecutionContext().put(
                ExecutionParams.migrate,
                Migrate.builder()
                        .id(1L)
                        .jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstImportId(-99L)
                        .lastImportId(-11L)
                        .build());

        final JobExecution jobExecution = launchStep(stepWarehouseName);
        MigrateBatch migrateBatch = (MigrateBatch) jobExecution.getExecutionContext().get(ExecutionParams.batch);

        assertThat(migrateBatch).isNotNull();
        assertThat(migrateBatch.getImportContent()).contains(EXAM, PACKAGE, CODES, GROUPS);
        assertThat(migrateBatch.getImportContent()).doesNotContain(ORGANIZATION);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.COMPLETED);
    }

    @Test
    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"})
    })

    public void testStepWithOneType() {
        // Simulate that migrate param was set up.
        // The warehouse step reads first and last import id's from migrate.
        getStepExecutionContext().put(
                ExecutionParams.migrate,
                Migrate.builder()
                        .id(1L)
                        .jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstImportId(-89L)
                        .lastImportId(-85L)
                        .build());

        final JobExecution jobExecution = launchStep(stepWarehouseName);
        MigrateBatch migrateBatch = (MigrateBatch) jobExecution.getExecutionContext().get(ExecutionParams.batch);

        assertThat(migrateBatch).isNotNull();
        assertThat(migrateBatch.getImportContent()).contains(GROUPS);
        assertThat(migrateBatch.getImportContent()).doesNotContain(ORGANIZATION, PACKAGE, EXAM, CODES);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.COMPLETED);
    }

    @Test
    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"})
    })
    public void testStepWithNoContent() {
        // Simulate that migrate param was set up.
        // The warehouse step reads first and last import id's from migrate.
        getStepExecutionContext().put(
                ExecutionParams.migrate,
                Migrate.builder()
                        .id(1L)
                        .jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstImportId(200L)
                        .lastImportId(250L)
                        .build());

        final JobExecution jobExecution = launchStep(stepWarehouseName);
        MigrateBatch migrateBatch = (MigrateBatch) jobExecution.getExecutionContext().get(ExecutionParams.batch);

        assertThat(migrateBatch).isNull();
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
    }

}
