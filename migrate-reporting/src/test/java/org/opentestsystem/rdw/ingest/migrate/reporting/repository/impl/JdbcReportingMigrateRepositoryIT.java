package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.RepositoryIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@Sql(statements = {"INSERT INTO reporting_test.migrate (id, job_id, status, first_at, last_at) VALUES" +
        "(-10, 1, 20,'2017-07-18 19:45:33.966000', '2017-07-18 19:45:43.966000')," +
        "(-9, 2, 20, '2017-07-18 19:45:23.966000', '2017-07-18 19:45:33.966000');"
})
public class JdbcReportingMigrateRepositoryIT extends RepositoryIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private ReportingMigrateRepository repository;

    @Test
    public void itShouldFindLastMigratedImportId() {
        final Instant lastAt = Instant.parse("2017-07-18T19:45:43.966Z");
        assertThat(repository.findLastMigratedAt()).isEqualTo(lastAt);
    }

    @Sql(statements = "DELETE FROM reporting_test.migrate")
    @Test
    public void itShouldFindNothingForLastMigratedImportId() {
        assertThat(repository.findLastMigratedAt()).isNull();
    }

    @Test
    public void itShouldCreate() {
        final String sql = "job_id = -999 and status = -10 and first_at = convert_tz(timestamp('2007-01-02T14:30:00Z'), '+00:00', @@session.time_zone) and last_at = convert_tz(timestamp('2007-01-02T15:30:00Z'), '+00:00', @@session.time_zone)";
        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.migrate", sql)).isZero();

        repository.create(Migrate.builder()
                .jobId(-999)
                .status(MigrateStatus.ABANDONED)
                .firstAt(Instant.parse("2007-01-02T14:30:00Z"))
                .lastAt(Instant.parse("2007-01-02T15:30:00Z"))
                .build());

        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.migrate", sql)).isEqualTo(1);
    }

    @Test
    public void itShouldDelete() {
        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.migrate", "id=-9")).isEqualTo(1);

        repository.delete(-9);

        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.migrate", "id=-9")).isEqualTo(0);
    }

    @Sql(statements = "INSERT INTO reporting_test.migrate (id, job_id, status, first_at, last_at) VALUES\n" +
            "  (-100, -99, -10,'2017-07-18 19:45:33.966000', '2017-07-18 19:45:43.966000');")
    @Test
    public void itShouldUpdateStatus() {
        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.migrate", "id=-100 and status=-10")).isEqualTo(1);

        repository.updateStatusById(-100, MigrateStatus.COMPLETED);

        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.migrate", "id=-100 and status=20")).isEqualTo(1);
    }

    @Test
    public void itShouldReturnLastStatusIfComplete() {
        assertThat(repository.findLastStatus()).isEqualTo(MigrateStatus.COMPLETED);
    }

    @Sql(statements = "INSERT INTO reporting_test.migrate (id, job_id, status, first_at, last_at) VALUES\n" +
            "  (-1, -99, -10, '2017-07-18 19:45:33.966000', '2017-07-18 19:45:43.966000');")
    @Test
    public void itShouldReturnLastStatusIfAbandoned() {
        assertThat(repository.findLastStatus()).isEqualTo(MigrateStatus.ABANDONED);
    }

    @Sql(statements = "DELETE FROM reporting_test.migrate")
    @Test
    public void itShouldReturnNullLastStatus() {
        assertThat(repository.findLastStatus()).isNull();
    }

    @Sql(statements = "INSERT INTO reporting_test.migrate (id, job_id, status, first_at, last_at) VALUES\n" +
            "  (-1, -99, -31, '2017-07-18 19:45:33.966000', '2017-07-18 19:45:43.966000');")
    @Test
    public void itShouldReturnNullLastStatusIfBadData() {
        assertThat(repository.findLastStatus()).isNull();
    }
}