package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.RepositoryIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@Sql(scripts = {"classpath:MigrateImportFromWarehouseSetup.sql"})
public class JdbcReportingMigrateRepositoryIT extends RepositoryIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private ReportingMigrateRepository repository;

    @Test
    public void itShouldFindLastMigratedImportId() {
        final Long defaultLastMigratedImportId = -1001L;
        final Optional<Long> last = repository.findLastMigratedImportId();
        assertThat(last)
                .isPresent()
                .hasValue(defaultLastMigratedImportId);
    }

    @Sql(statements = "DELETE FROM reporting_test.migrate")
    @Test
    public void itShouldFindNothingForLastMigratedImportId() {
        final Optional<Long> last = repository.findLastMigratedImportId();
        assertThat(last)
                .isEmpty();
    }

    @Test
    public void itShouldCreate() {
        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.migrate", "id = -999 and status = -10 and first_import_id = -1 and last_import_id = -4")).isZero();

        repository.create(-999, MigrateStatus.ABANDONED, -1, -4);

        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.migrate", "id = -999 and status = -10 and first_import_id = -1 and last_import_id = -4")).isEqualTo(1);
    }

    @Sql(statements = "INSERT INTO reporting_test.migrate (id, status, first_import_id, last_import_id) VALUES\n" +
            "  (-100, -10, -1020, -1011);")
    @Test
    public void itShouldUpdateStatus() {
        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.migrate", "id=-100 and status=-10")).isEqualTo(1);

        repository.updateStatusById(-100, MigrateStatus.COMPLETED);

        assertThat(countRowsInTableWhere(jdbcTemplate, "reporting_test.migrate", "id=-100 and status=20")).isEqualTo(1);
    }
}