package org.opentestsystem.rdw.ingest.migrate.reporting;


import org.junit.Before;
import org.junit.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.opentestsystem.rdw.ingest.migrate.reporting.service.NextJobParamsService;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersInvalidException;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.repository.JobExecutionAlreadyRunningException;
import org.springframework.batch.core.repository.JobInstanceAlreadyCompleteException;
import org.springframework.batch.core.repository.JobRestartException;

import java.util.Optional;

import static com.google.common.collect.Maps.newHashMap;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;


public class MigrateReportingJobRunnerTest {
    private JobLauncher jobLauncher;
    private Job job;
    private MigrateReportingJobRunner reportingJobRunner;
    private NextJobParamsService nextJobParamsService;
    private JobParameters jobParameters;

    @Before
    public void setUp() throws JobParametersInvalidException, JobExecutionAlreadyRunningException, JobRestartException, JobInstanceAlreadyCompleteException {
        jobLauncher = mock(JobLauncher.class);
        job = mock(Job.class);
        nextJobParamsService = mock(NextJobParamsService.class);

        jobParameters = new JobParameters(newHashMap());
        jobParameters.getParameters().put("jobIdentifier", new JobParameter(System.currentTimeMillis(), true));

        final Answer<Optional<JobParameters>> answer = new Answer<Optional<JobParameters>>() {
            int numOfCalls = 0;

            public Optional<JobParameters> answer(InvocationOnMock invocation) throws Throwable {
                if (numOfCalls > 1) return Optional.empty();

                numOfCalls++;
                jobParameters.getParameters().put("jobIdentifier", new JobParameter("test" + System.currentTimeMillis(), true));
                return Optional.of(jobParameters);
            }
        };

        when(nextJobParamsService.getNextJobParams(10)).then(answer);
        reportingJobRunner = new MigrateReportingJobRunner(jobLauncher, job, nextJobParamsService, 10);
    }

    @Test
    public void isShouldLaunchJobInLoop() throws JobParametersInvalidException, JobExecutionAlreadyRunningException, JobRestartException, JobInstanceAlreadyCompleteException {
        reportingJobRunner.run();

        verify(nextJobParamsService, times(3)).getNextJobParams(10);
        verify(jobLauncher, times(2)).run(job, jobParameters);
    }


//TODO: understand why this cause conflicts with other tests

//    @Test
//    public void isShouldHandleExceptionsInNextJobParamService() {
//        when(nextJobParamsService.getNextJobParams(10)).thenThrow(new RuntimeException());
//
//        reportingJobRunner.run();
//        verify(jobLauncher, never());
//    }
//
//    @Test
//    public void isShouldHandleExceptionsInJobAndStopTheLoop() throws JobParametersInvalidException, JobExecutionAlreadyRunningException, JobRestartException, JobInstanceAlreadyCompleteException {
//        when(jobLauncher.run(job, jobParameters)).thenThrow(new RuntimeException());
//
//        reportingJobRunner.run();
//
//        verify(nextJobParamsService, times(1)).getNextJobParams(10);
//        verify(jobLauncher, times(1)).run(job, jobParameters);
//    }
}