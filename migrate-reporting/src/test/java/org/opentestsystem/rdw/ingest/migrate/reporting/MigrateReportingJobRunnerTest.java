package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.ReportingMigrateRepository;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionException;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.same;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class MigrateReportingJobRunnerTest {
    private ReportingMigrateRepository migrateRepository;
    private WarehouseImportRepository importRepository;
    private JobLauncher jobLauncher;
    private Job job;
    private MigrateReportingJobRunner reportingJobRunner;

    @Before
    public void setUp() throws JobExecutionException {
        migrateRepository = mock(ReportingMigrateRepository.class);
        when(migrateRepository.findLastStatus()).thenReturn(MigrateStatus.COMPLETED);
        when(migrateRepository.findLastMigratedImportId()).thenReturn(null);

        // simulate two chunks of work
        importRepository = mock(WarehouseImportRepository.class);
        when(importRepository.getMigrateImportValues(null, 10))
                .thenReturn(new MigrateImportValues(1L, 10L, null))
                .thenReturn(new MigrateImportValues(11L, 20L, null))
                .thenReturn(new MigrateImportValues(null, null, null));

        jobLauncher = mock(JobLauncher.class);
        job = mock(Job.class);

        reportingJobRunner = new MigrateReportingJobRunner(migrateRepository, importRepository, jobLauncher, job, 10);
    }

    @Test
    public void isShouldLaunchJobInLoop() throws JobExecutionException {
        reportingJobRunner.run();

        verify(importRepository, times(3)).getMigrateImportValues(null, 10);
        verify(jobLauncher, times(2)).run(same(job), any(JobParameters.class));
    }

    @Test
    public void isShouldHandleExceptionsInRepository() throws JobExecutionException {
        when(importRepository.getMigrateImportValues(null, 10)).thenThrow(new RuntimeException());

        reportingJobRunner.run();
        verify(jobLauncher, never()).run(same(job), any(JobParameters.class));
    }

    @Test
    public void isShouldHandleExceptionsInJobAndStopTheLoop() throws JobExecutionException {
        when(jobLauncher.run(same(job), any(JobParameters.class))).thenThrow(new RuntimeException());

        reportingJobRunner.run();

        verify(importRepository, times(1)).getMigrateImportValues(null, 10);
        verify(jobLauncher, times(1)).run(same(job), any(JobParameters.class));
    }

    @Test
    public void itShouldNotLaunchJobIfPaused() throws JobExecutionException {
        reportingJobRunner.stop();
        reportingJobRunner.run();
        verify(jobLauncher, never()).run(same(job), any(JobParameters.class));
    }

    @Test
    public void itShouldNotLaunchJobIfDisabled() throws JobExecutionException {
        when(migrateRepository.findLastStatus()).thenReturn(MigrateStatus.FAILED);
        reportingJobRunner.run();
        assertThat(reportingJobRunner.isEnabled()).isFalse();
        verify(jobLauncher, never()).run(same(job), any(JobParameters.class));
    }

    @Test
    public void itShouldDisableForBlocker() throws JobExecutionException {
        when(importRepository.getMigrateImportValues(null, 10))
                .thenReturn(new MigrateImportValues(null, null, 5L));
        reportingJobRunner.run();

        reportingJobRunner.run();
        assertThat(reportingJobRunner.isEnabled()).isFalse();
        verify(jobLauncher, never()).run(same(job), any(JobParameters.class));
    }

    @Test
    public void itShouldNotLoopForPartialBlock() throws JobExecutionException {
        when(importRepository.getMigrateImportValues(null, 10))
                .thenReturn(new MigrateImportValues(1L, 10L, null))
                .thenReturn(new MigrateImportValues(11L, 13L, null))
                .thenReturn(new MigrateImportValues(null, null, null));

        reportingJobRunner.run();
        verify(jobLauncher, times(1)).run(same(job), any(JobParameters.class));
    }
}