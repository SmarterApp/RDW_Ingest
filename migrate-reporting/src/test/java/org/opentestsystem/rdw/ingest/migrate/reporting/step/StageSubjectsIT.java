package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.MigrateStatus;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.WarehouseToStagingStepsConfig.StageSubjectStepName;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SqlGroup({
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),

        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
})
public class StageSubjectsIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @Test
    public void itShouldCopySubjects() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();

        // Verify that only 'updated' subjects' data are loaded into staging
        // Subjects with ids -1 and -3 are updated, and with id -2 is not
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject", 3, "id IN (1, 2, -1)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject", 1, "id = -3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject", 0, "id = -2"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_asmt_type", 1, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_asmt_type", 2, "subject_id = -3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_asmt_type", 0, "subject_id = -2"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_asmt_scoring", 3, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_asmt_scoring", 4, "subject_id = -3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_asmt_scoring", 0, "subject_id = -2"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_score", 4, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_score", 3, "subject_id = -3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_score", 0, "subject_id = -2"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_translation", 2, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_translation", 2, "subject_id = -3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_subject_translation", 0, "subject_id = -2"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_claim", 3, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_claim", 4, "subject_id = -3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_claim", 0, "subject_id = -2"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_target", 4, "id in (-1, -2, -3, -4)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_target", 4, "id in (-66, -67, -68, -69)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_target", 0, "id in (-5, -6, -7, -8 -9)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_depth_of_knowledge", 1, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_depth_of_knowledge", 3, "subject_id = -3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_depth_of_knowledge", 0, "subject_id = -2"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_common_core_standard", 2, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_common_core_standard", 3, "subject_id = -3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "staging_common_core_standard", 0, "subject_id = -2"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(firstAt)
                        .lastAt(lastAt)
                        .migrateCodes(false)
                        .build());

        final JobExecution jobExecution = launchStep(StageSubjectStepName);

        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
