package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.deleteEntitiesStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class DeleteEntitiesIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingCodesPreloadToReporting.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingForDeleteSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesPreloadReportingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldDeleteButNotInsertEntities() {

        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.school", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.school", 0, "id IN (-1)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.school", 0, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.district", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.district", 0, "id IN (-1)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.district", 0, "id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", 0, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item", -4, "asmt_id in( -99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item", 0, "asmt_id in( -98)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", -1, "item_id in( -990)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", 0, "item_id in( -980, 991)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_common_core_standard", -1, "item_id in( -990)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_common_core_standard", 0, "item_id in( -980, 991)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt_score", -1, "asmt_id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt_score", 0, "asmt_id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student", -1, "id in (-89)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student", 0, "id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student_group", -1, "id in (-91)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student_group", 0, "id in (-8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student_group_membership", -1, "student_group_id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.user_student_group", -1, "student_group_id in (-91, -8, -7)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", -1, "id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", 0, "id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_available_accommodation", -1, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_available_accommodation", 0, "exam_id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_item", -1, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_item", 0, "exam_id in (-87)"));

        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), newArrayList(ImportContent.EXAM)));

        // run the step first time
        JobExecution jobExecution = launchStep(deleteEntitiesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(deleteEntitiesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingCodesPreloadToReporting.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingForDeleteSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesPreloadReportingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldDoNothingIfBatchDoesNotHaveRightImportContent() {

        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.school", 0, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.school", 0, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.district", 0, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.district", 0, "id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", 0, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", 0, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item", 0, "asmt_id in( -99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item", 0, "asmt_id in( -98)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", 0, "item_id in( -990)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", 0, "item_id in( -980, 991)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_common_core_standard", 0, "item_id in( -990)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_common_core_standard", 0, "item_id in( -980, 991)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt_score", 0, "asmt_id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt_score", 0, "asmt_id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student", 0, "id in (-89)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student", 0, "id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student_group", 0, "id in (-91)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student_group", 0, "id in (-8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student_group_membership", 0, "student_group_id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.user_student_group", 0, "student_group_id in (-91, -8, -7)"));

         tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", 0, "id in (-88, -87)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_available_accommodation", 0, "exam_id in (-88, -87)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_item", 0, "exam_id in (-88, -87)"));

        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), newArrayList(ImportContent.CODES)));

        // run the step first time
        JobExecution jobExecution = launchStep(deleteEntitiesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(deleteEntitiesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
