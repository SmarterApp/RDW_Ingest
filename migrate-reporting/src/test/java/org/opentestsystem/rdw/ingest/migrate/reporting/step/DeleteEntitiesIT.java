package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.deleteEntitiesStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class DeleteEntitiesIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesForDeleteSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource"))
    })
    @Test
    public void itShouldDeleteButNotInsertEntities() {

        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "school", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "school", 0, "id IN (-1)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "school", 0, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "district", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "district", 0, "id IN (-1)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "district", 0, "id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt", 0, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt_target", 0, "asmt_id <> -59"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt_target", -2, "asmt_id = -59"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item", -4, "asmt_id in( -99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item", 0, "asmt_id in( -98)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_other_target", -1, "item_id in( -990)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_other_target", 0, "item_id in( -980, 991)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_common_core_standard", -1, "item_id in( -990)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_common_core_standard", 0, "item_id in( -980, 991)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt_score", -1, "asmt_id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt_score", 0, "asmt_id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile", -1, "id IN (-89)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile", 0, "id IN (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile_score", -3, "percentile_id in( -89)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile_score", 0, "percentile_id in( -88)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student", -1, "id in (-89)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student", 0, "id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group", -1, "id in (-91)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group", 0, "id in (-8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group_membership", -1, "student_group_id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "user_student_group", -1, "student_group_id in (-91, -8, -7)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", -1, "id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 0, "id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_available_accommodation", -1, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_available_accommodation", 0, "exam_id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_item", -1, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_item", 0, "exam_id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_target_score", -2, "exam_id = -59"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_target_score", 0, "exam_id <> -59"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student", -1, "id in (-89) AND gender_code IN ('before_test')"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", -1, "id in (-88) AND completeness_code IN ('before') AND administration_condition_code IN ('before test')"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 0, "id in (-87) AND completeness_code IN ('before') AND administration_condition_code IN ('before test')"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_ethnicity", -1, "ethnicity_id IN (-99) AND ethnicity_code IN ('before test')"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_ethnicity", 0, "ethnicity_id IN (-98) AND ethnicity_code IN ('Asian-test')"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt", -1, "id IN (-99) AND cut_point_1 = 2442 AND cut_point_2 = 2502 AND cut_point_3 = 2582 AND min_score = 2201 and max_score = 2701"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt", 0, "id IN (-98) AND cut_point_1 = 2442 AND cut_point_2 = 2502 AND cut_point_3 = 2582 AND min_score = 2201 and max_score = 2701"));

        getStepExecutionContext().put("batch", mock(Migrate.class));

        // run the step first time
        JobExecution jobExecution = launchStep(deleteEntitiesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(deleteEntitiesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
