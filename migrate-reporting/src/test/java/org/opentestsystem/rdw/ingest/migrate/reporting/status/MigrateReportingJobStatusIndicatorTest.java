package org.opentestsystem.rdw.ingest.migrate.reporting.status;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.migrate.common.MigrateLifecycle;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class MigrateReportingJobStatusIndicatorTest {

    private MigrateLifecycle migrateLifecycle;
    private MigrateReportingJobStatusIndicator statusIndicator;

    @Before
    public void createStatusIndicator() {
        migrateLifecycle = mock(MigrateLifecycle.class);

        statusIndicator = new MigrateReportingJobStatusIndicator(migrateLifecycle);
    }

    @Test
    public void itShouldHaveAName() {
        assertThat(statusIndicator.name()).contains("migrate");
    }

    @Test
    public void itShouldBeAtPingLevel() {
        assertThat(statusIndicator.doLevelCheck(0)).isTrue();
        assertThat(statusIndicator.doLevelCheck(2)).isTrue();
    }

    @Test
    public void itShouldReturnIdealStatus() {
        when(migrateLifecycle.isEnabled()).thenReturn(true);
        when(migrateLifecycle.isRunning()).thenReturn(true);
        final Status.Builder builder = Status.builder();
        statusIndicator.doStatusCheck(builder, 2);
        final Status status = builder.build();
        assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());
        assertThat(status.getDetails().get("lifecycle")).isEqualTo("running,enabled");
    }

    @Test
    public void itShouldReturnWarningStatus() {
        when(migrateLifecycle.isEnabled()).thenReturn(false);
        when(migrateLifecycle.isRunning()).thenReturn(false);
        final Status.Builder builder = Status.builder();
        statusIndicator.doStatusCheck(builder, 2);
        final Status status = builder.build();
        assertThat(status.getStatusRating()).isEqualTo(Rating.Warning.value());
        assertThat(status.getDetails().get("lifecycle")).isEqualTo("paused,disabled");
    }
}