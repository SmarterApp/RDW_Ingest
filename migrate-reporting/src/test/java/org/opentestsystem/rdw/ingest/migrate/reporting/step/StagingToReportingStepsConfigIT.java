package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import com.google.common.collect.Lists;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateStagingToWarehouseSqlConfiguration;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchIT.BatchTestConfig;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.SqlListExecutionRepository;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.step.builder.TaskletStepBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.codesEntities;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.deleteCodesStepName;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.deleteEntitiesStepName;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertAsmtsStepName;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertCodesStepName;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertExamsStepName;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertOrganizationsStepName;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertStudentsAndGroupsStepName;

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = {BatchTestConfig.class})
@SpringBootTest
@ActiveProfiles("test")
public class StagingToReportingStepsConfigIT {
    @Autowired
    MigrateStagingToWarehouseSqlConfiguration sqlConfig;

    private StepBuilderFactory stepBuilderFactory;
    private SqlListExecutionRepository sqlListExecutionRepository;

    private StagingToReportingStepsConfig configUnderTest;

    @Before
    public void setUp() {
        stepBuilderFactory = mock(StepBuilderFactory.class);
        sqlListExecutionRepository = mock(SqlListExecutionRepository.class);

        configUnderTest = new StagingToReportingStepsConfig(stepBuilderFactory, sqlConfig, sqlListExecutionRepository);
    }

    @Test
    public void verifyUpsertCodesStepConfiguration() {
        final StepBuilder stepBuilder = mock(StepBuilder.class);
        when(stepBuilderFactory.get(upsertCodesStepName)).thenReturn(stepBuilder);
        when(stepBuilder.tasklet(any())).thenReturn(mock(TaskletStepBuilder.class));
        final ArgumentCaptor<SqlListCodesExecutionStep> captor = ArgumentCaptor.forClass(SqlListCodesExecutionStep.class);

        configUnderTest.upsertCodesStep();
        verify(stepBuilder).tasklet(captor.capture());

        final SqlListCodesExecutionStep argument = captor.getValue();

        final List<String> expectedSqls = newArrayList();
        for (final String entity : codesEntities) {
            expectedSqls.add(sqlConfig.getEntities().get(entity).getSql().get("update"));
            expectedSqls.add(sqlConfig.getEntities().get(entity).getSql().get("insert"));
        }

        assertThat(argument.getSqls()).containsExactlyElementsOf(expectedSqls);
    }

    @Test
    public void verifyDeleteCodesStepConfiguration() {
        final StepBuilder stepBuilder = mock(StepBuilder.class);
        when(stepBuilderFactory.get(deleteCodesStepName)).thenReturn(stepBuilder);
        when(stepBuilder.tasklet(any())).thenReturn(mock(TaskletStepBuilder.class));
        final ArgumentCaptor<SqlListCodesExecutionStep> captor = ArgumentCaptor.forClass(SqlListCodesExecutionStep.class);

        configUnderTest.deleteCodesStep();
        verify(stepBuilder).tasklet(captor.capture());

        final SqlListCodesExecutionStep argument = captor.getValue();

        final List<String> expectedSqls = newArrayList();
        for (final String table : Lists.reverse(codesEntities)) {
            expectedSqls.add(sqlConfig.getEntities().get(table).getSql().get("delete"));
        }

        assertThat(argument.getSqls()).containsExactlyElementsOf(expectedSqls);
    }

    @Test
    public void verifyDeleteEntitiesStepConfiguration() {
        final List<String> entities = newArrayList(
                "district",
                "school",
                "asmt",
                "item",
                "item_other_target",
                "item_common_core_standard",
                "asmt_score",
                "student",
                "student_ethnicity",
                "student_group",
                "user_student_group",
                "student_group_membership",
                "exam",
                "exam_item",
                "exam_available_accommodation");

        final StepBuilder stepBuilder = mock(StepBuilder.class);
        when(stepBuilderFactory.get(deleteEntitiesStepName)).thenReturn(stepBuilder);
        when(stepBuilder.tasklet(any())).thenReturn(mock(TaskletStepBuilder.class));
        final ArgumentCaptor<SqlListExecutionStep> captor = ArgumentCaptor.forClass(SqlListExecutionStep.class);

        configUnderTest.deleteEntitiesStep();
        verify(stepBuilder).tasklet(captor.capture());

        final SqlListExecutionStep argument = captor.getValue();

        final List<String> expectedSqls = newArrayList();
        for (final String table : Lists.reverse(entities)) {
            expectedSqls.add(sqlConfig.getEntities().get(table).getSql().get("delete"));
        }

        assertThat(argument.getSqls()).containsExactlyElementsOf(expectedSqls);
    }

    @Test
    public void verifyUpsertOrganizationStepConfiguration() {
        final StepBuilder stepBuilder = mock(StepBuilder.class);
        when(stepBuilderFactory.get(upsertOrganizationsStepName)).thenReturn(stepBuilder);
        when(stepBuilder.tasklet(any())).thenReturn(mock(TaskletStepBuilder.class));
        final ArgumentCaptor<SqlListExecutionStep> captor = ArgumentCaptor.forClass(SqlListExecutionStep.class);

        configUnderTest.upsertOrganizationsStep();
        verify(stepBuilder).tasklet(captor.capture());

        final SqlListExecutionStep argument = captor.getValue();

        final List<String> expectedSqls = newArrayList();
        expectedSqls.add(sqlConfig.getEntities().get("district").getSql().get("update"));
        expectedSqls.add(sqlConfig.getEntities().get("district").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("school").getSql().get("update"));
        expectedSqls.add(sqlConfig.getEntities().get("school").getSql().get("insert"));

        assertThat(argument.getSqls()).containsExactlyElementsOf(expectedSqls);
    }

    @Test
    public void verifUpsertAsmtsStepConfiguration() {
        final StepBuilder stepBuilder = mock(StepBuilder.class);
        when(stepBuilderFactory.get(upsertAsmtsStepName)).thenReturn(stepBuilder);
        when(stepBuilder.tasklet(any())).thenReturn(mock(TaskletStepBuilder.class));
        final ArgumentCaptor<SqlListExecutionStep> captor = ArgumentCaptor.forClass(SqlListExecutionStep.class);

        configUnderTest.upsertAsmtsStep();
        verify(stepBuilder).tasklet(captor.capture());

        final SqlListExecutionStep argument = captor.getValue();

        final List<String> expectedSqls = newArrayList();
        expectedSqls.add(sqlConfig.getEntities().get("asmt").getSql().get("update"));
        expectedSqls.add(sqlConfig.getEntities().get("asmt").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("asmt_score").getSql().get("update"));
        expectedSqls.add(sqlConfig.getEntities().get("asmt_score").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("asmt_score").getSql().get("deleteAsPartOfParentUpdate"));
        expectedSqls.add(sqlConfig.getEntities().get("item").getSql().get("update"));
        expectedSqls.add(sqlConfig.getEntities().get("item").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("item").getSql().get("deleteAsPartOfParentUpdate"));
        expectedSqls.add(sqlConfig.getEntities().get("item_common_core_standard").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("item_common_core_standard").getSql().get("deleteAsPartOfParentUpdate"));
        expectedSqls.add(sqlConfig.getEntities().get("item_other_target").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("item_other_target").getSql().get("deleteAsPartOfParentUpdate"));

        assertThat(argument.getSqls()).containsExactlyElementsOf(expectedSqls);
    }


    @Test
    public void verifyUpsertStudentsAndGroupsStepConfiguration() {
        final StepBuilder stepBuilder = mock(StepBuilder.class);
        when(stepBuilderFactory.get(upsertStudentsAndGroupsStepName)).thenReturn(stepBuilder);
        when(stepBuilder.tasklet(any())).thenReturn(mock(TaskletStepBuilder.class));
        final ArgumentCaptor<SqlListExecutionStep> captor = ArgumentCaptor.forClass(SqlListExecutionStep.class);

        configUnderTest.upsertStudentsAndGroupsStep();
        verify(stepBuilder).tasklet(captor.capture());

        final SqlListExecutionStep argument = captor.getValue();

        final List<String> expectedSqls = newArrayList();
        expectedSqls.add(sqlConfig.getEntities().get("student").getSql().get("update"));
        expectedSqls.add(sqlConfig.getEntities().get("student").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("student_ethnicity").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("student_ethnicity").getSql().get("deleteAsPartOfParentUpdate"));
        expectedSqls.add(sqlConfig.getEntities().get("student_group").getSql().get("update"));
        expectedSqls.add(sqlConfig.getEntities().get("student_group").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("user_student_group").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("user_student_group").getSql().get("deleteAsPartOfParentUpdate"));
        expectedSqls.add(sqlConfig.getEntities().get("student_group_membership").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("student_group_membership").getSql().get("deleteAsPartOfParentUpdate"));

        assertThat(argument.getSqls()).containsExactlyElementsOf(expectedSqls);
    }

    @Test
    public void verifyUpsertExamsStepConfiguration() {
        final StepBuilder stepBuilder = mock(StepBuilder.class);
        when(stepBuilderFactory.get(upsertExamsStepName)).thenReturn(stepBuilder);
        when(stepBuilder.tasklet(any())).thenReturn(mock(TaskletStepBuilder.class));
        final ArgumentCaptor<SqlListExecutionStep> captor = ArgumentCaptor.forClass(SqlListExecutionStep.class);

        configUnderTest.upsertExamsStep();
        verify(stepBuilder).tasklet(captor.capture());

        final SqlListExecutionStep argument = captor.getValue();

        final List<String> expectedSqls = newArrayList();
        expectedSqls.add(sqlConfig.getEntities().get("exam").getSql().get("update"));
        expectedSqls.add(sqlConfig.getEntities().get("exam").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("exam_item").getSql().get("update"));
        expectedSqls.add(sqlConfig.getEntities().get("exam_item").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("exam_item").getSql().get("deleteAsPartOfParentUpdate"));
        expectedSqls.add(sqlConfig.getEntities().get("exam_available_accommodation").getSql().get("insert"));
        expectedSqls.add(sqlConfig.getEntities().get("exam_available_accommodation").getSql().get("deleteAsPartOfParentUpdate"));

        assertThat(argument.getSqls()).containsExactlyElementsOf(expectedSqls);
    }
}