package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.junit.Test;
import org.opentestsystem.rdw.migrate.common.MigrateJobParameters;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.batch.core.ExitStatus.COMPLETED;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;


public class ReportingMigrateJobIT extends SpringBatchIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    private final Instant firstAt = Instant.parse("2017-07-18T19:05:34.965Z");
    private final Instant lastAt = Instant.parse("2017-07-18T20:14:34.000Z");

    private static final List<String> codesEntities = newArrayList(
            "grade", "elas", "completeness", "administration_condition", "ethnicity", "gender",
            "accommodation", "math_practice", "accommodation_translation"
    );

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesForDeleteSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingCodesPreload.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldUpsertAndDeleteCodesIfBatchHasImportContentWithCodes() throws Exception {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codesEntities) {
            if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, -1, "practice IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 1, "practice IN (-98)"));
            } else if ("accommodation_translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, -1, "label_code IN ('code1-test') AND language_code IN ('lan')"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 1, "label_code IN ('code2-test') AND language_code IN ('gua')"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, -1, "id IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 1, "id IN (-98)"));
            }
        }

        final JobExecution jobExecution = getJobLauncherTestUtils().launchJob(new MigrateJobParameters(firstAt, lastAt, true, false, 10));

        assertThat(jobExecution.getExitStatus()).isEqualTo(COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingSubjectSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldUpsertAndDeleteEntities() throws Exception {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "school", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "school", 1, "id IN (-98) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "district", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "district", 1, "id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt", 1, "id IN (-98) and migrate_id is not null"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt_target", -2, "asmt_id = -59"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt_target", 3, "asmt_id = -311"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt_target", 2, "asmt_id = -311 and include_in_report = 0"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item", -4, "asmt_id in( -99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item", 5, "asmt_id in( -98)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item", 4, "asmt_id in( -98) and field_test = 0 and active = 1 and type = 1 and options_count = 0 and answer_key = 'key'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item", 1, "asmt_id in( -98) and field_test = 1 and active = 0 and type = 2 and options_count = 8 and answer_key = 'key'"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_other_target", -1, "item_id in( -991)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_other_target", 1, "item_id in( -980)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_other_target", -1, "item_id in( -990)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_common_core_standard", -1, "item_id in( -991)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_common_core_standard", 1, "item_id in( -980)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_common_core_standard", -1, "item_id in( -990)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt_score", -1, "asmt_id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt_score", 1, "asmt_id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile", -1, "id IN (-89)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile", 1, "id IN (-88) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile_score", -3, "percentile_id in(-89)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "percentile_score", 5, "percentile_id in(-88)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student", -1, "id in (-89) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student", 3, "id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_ethnicity", 3, "student_id in (-89, -88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group", -1, "id in (-91)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group", 2, "id in (-8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group_membership", 2, "student_group_id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "user_student_group", 1, "student_group_id in (-91, -8, -7)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", -1, "id in (-88) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_available_accommodation", 1, "exam_id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_available_accommodation", -1, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_item", 1, "exam_id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_item", -1, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 3, "id in (-87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", -1, "id = -59"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 0, "id in (-111, -311)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_target_score", -2, "exam_id = -59"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_target_score", 7, "exam_id = -311"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_target_score", 1, "exam_id = -111"));

        // -88 is deleted, -87 and -86 have elas set, -85 doesn't have elas set
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 2, "id in (-87, -86) and elas_code in ('E99', 'E98')"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 1, "id in (-85) and elas_code is null"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 2, "elas_start_at is not null"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject", 0, "id IN (-2, -3, 1, 2)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject", 1, "id = -1"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", 0, "subject_id in (-2, 1, 2)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", 1, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", -1, "subject_id = -3 and asmt_type_id = 3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", 1, "subject_id = -3 and asmt_type_id = 1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", -1, "subject_id = -3 and asmt_type_id = 2 and performance_level_count = 3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_asmt_type", 1, "subject_id = -3 and asmt_type_id = 2 and performance_level_count = 8"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_claim_score", 0, "subject_id in(-2, 1, 2)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_claim_score", -1, "subject_id = -3 and id in (-60)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_claim_score", 0, "subject_id = -3 and id in (-15)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_claim_score", 1, "subject_id = -3 and id in (-16)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_translation",  0, "subject_id in (-2, 1, 2)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_translation",  2, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_translation", -1, "subject_id = -3 and label = 'old'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "subject_translation",  1, "subject_id = -3 and label = 'new'"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "claim", 0, "subject_id in (-2)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "claim", 1, "subject_id = -3"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "claim", 1, "subject_id = -3 and code = 'new'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "claim", -1, "subject_id = -3 and code = 'deleted'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "claim", 3, "subject_id = -1"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "target", 4, "id in (-1, -2, -3, -4, -68, -69)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "target", 1, "id in (-67)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "target", -1, "id in (-60)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "target", 0, "id in (-5, -6, -7, -8 -9)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "depth_of_knowledge",  0, "subject_id in (-2, 1, 2, -3)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "depth_of_knowledge",  1, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "depth_of_knowledge",  0, "subject_id = -2"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "depth_of_knowledge",  1, "subject_id = -3 and reference = 'new'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "depth_of_knowledge", -1, "subject_id = -3 and reference = 'deleted'"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "common_core_standard",  0, "subject_id in (-2, 1, 2, -3)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "common_core_standard",  2, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "common_core_standard",  1, "subject_id = -3 and natural_id = 'new'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "common_core_standard", -1, "subject_id = -3 and natural_id = 'deleted'"));

        // Range matches ImportContentSetup.sql
        final JobExecution jobExecution = getJobLauncherTestUtils().launchJob(new MigrateJobParameters(firstAt, lastAt, true, false, 10));

        assertThat(jobExecution.getExitStatus()).isEqualTo(COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}