package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.junit.Test;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.batch.core.ExitStatus.COMPLETED;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;


public class ReportingMigrateJobIT extends SpringBatchIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private static final List<String> codesEntities = newArrayList(
            "grade", "completeness", "administration_condition", "ethnicity", "gender",
            "accommodation", "claim", "depth_of_knowledge", "math_practice", "item_trait_score", "language",
            "target", //depends on claim
            "item_difficulty_cuts", //depends on grade
            "accommodation_translation"
    );

    @SqlGroup({
            //TODO: this should be changed to be handled by the migration from warehouse to staging
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ImportContentCodesSetup.sql"}),
            //loads all code tables with one row each with id = -98
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateCodesFromWarehouseForDeleteSetup.sql"}),

            //loads all code tables with one row each with id = -99
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateCodesPreloadReportingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromWarehouseTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ImportContentCodesTeardown.sql"})
    })
    @Test
    public void itShouldUpsertAndDeleteCodesIfBatchHasImportContentWithCodes() throws Exception {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codesEntities) {
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, -1, "id IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "id IN (-98)"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, -1, "practice IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "practice IN (-98)"));
            } else if ("accommodation_translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, -1, "accommodation_id IN (-99) AND language_id IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "accommodation_id IN (-98) AND language_id IN (-98)"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, -1, "id IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test." + table, 1, "id IN (-98)"));
            }
        }

        final JobExecution jobExecution = getJobLauncherTestUtils().launchJob(JobParamHelper.createJobParams(100, -99, -1));

        assertThat(jobExecution.getExitStatus()).isEqualTo(COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            // Import content is implemented from content in batch.
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ImportContentSetup.sql"}),
            // Codes migrate from warehouse.
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateCodesFromWarehouseSetup.sql"}),
            // todo: entities need to be implemented from warehouse.
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingForDeleteSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromWarehouseCodesPreloadToReporting.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesPreloadReportingSetup.sql"}),
            // Teardown
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromWarehouseTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ImportContentTeardown.sql"})
    })
    @Test
    public void itShouldUpsertAndDeleteEntities() throws Exception {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.school", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.school", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.district", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.district", 1, "id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item", -4, "asmt_id in( -99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item", 5, "asmt_id in( -98)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", -1, "item_id in( -991)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", 1, "item_id in( -980)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.item_other_target", -1, "item_id in( -990)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt_score", -1, "asmt_id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.asmt_score", 1, "asmt_id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student", -1, "id in (-89)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student", 3, "id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student_ethnicity", 4, "student_id in (-89, -88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student_group", -1, "id in (-91)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student_group", 2, "id in (-8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.student_group_membership", 2, "student_group_id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.user_student_group", 1, "student_group_id in (-91, -8, -7)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.iab_exam", -1, "id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.iab_exam_item", 1, "iab_exam_id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.iab_exam_available_accommodation", -1, "iab_exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.iab_exam_available_accommodation", 1, "iab_exam_id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.iab_exam_item", -1, "iab_exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.iab_exam", 2, "id in (-87, -86)"));

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", -1, "id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_available_accommodation", 1, "exam_id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_available_accommodation", -1, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_item", 1, "exam_id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_item", -1, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", 2, "id in (-87, -86)"));

        // Range matches ImportContentSetup.sql
        final JobExecution jobExecution = getJobLauncherTestUtils().launchJob(JobParamHelper.createJobParams(100, -99, -1));

        assertThat(jobExecution.getExitStatus()).isEqualTo(COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}