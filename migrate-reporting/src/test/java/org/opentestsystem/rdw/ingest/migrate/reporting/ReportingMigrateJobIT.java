package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.junit.Test;
import org.opentestsystem.rdw.migrate.common.MigrateJobParameters;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.batch.core.ExitStatus.COMPLETED;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;


public class ReportingMigrateJobIT extends SpringBatchIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    private final Instant firstAt = Instant.parse("2017-07-18T19:05:34.965Z");
    private final Instant lastAt = Instant.parse("2017-07-18T20:14:34.000Z");

    private static final List<String> codesEntities = newArrayList(
            "grade", "completeness", "administration_condition", "ethnicity", "gender",
            "accommodation", "claim", "depth_of_knowledge", "math_practice", "item_trait_score",
            "target", //depends on claim
            "translation"
    );

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesForDeleteSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingCodesPreload.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldUpsertAndDeleteCodesIfBatchHasImportContentWithCodes() throws Exception {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codesEntities) {
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, -1, "id IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 1, "id IN (-98)"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, -1, "practice IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 1, "practice IN (-98)"));
            } else if ("translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, -1, "label_code IN ('code1-test') AND language_code IN ('lan') AND namespace IN ('backend')"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 1, "label_code IN ('code2-test') AND language_code IN ('gua') AND namespace IN ('backend')"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, -1, "id IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 1, "id IN (-98)"));
            }
        }

        final JobExecution jobExecution = getJobLauncherTestUtils().launchJob(new MigrateJobParameters(firstAt, lastAt, true, 10));

        assertThat(jobExecution.getExitStatus()).isEqualTo(COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldUpsertAndDeleteEntities() throws Exception {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "school", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "school", 1, "id IN (-98) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "district", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "district", 1, "id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt", 1, "id IN (-98) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item", -4, "asmt_id in( -99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item", 5, "asmt_id in( -98)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_other_target", -1, "item_id in( -991)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_other_target", 1, "item_id in( -980)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_other_target", -1, "item_id in( -990)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_common_core_standard", -1, "item_id in( -991)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_common_core_standard", 1, "item_id in( -980)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "item_common_core_standard", -1, "item_id in( -990)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt_score", -1, "asmt_id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "asmt_score", 1, "asmt_id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student", -1, "id in (-89) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student", 3, "id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_ethnicity", 3, "student_id in (-89, -88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group", -1, "id in (-91)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group", 2, "id in (-8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "student_group_membership", 2, "student_group_id in (-91, -8, -7)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "user_student_group", 1, "student_group_id in (-91, -8, -7)"));

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", -1, "id in (-88) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_available_accommodation", 1, "exam_id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_available_accommodation", -1, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_item", 1, "exam_id in (-87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_item", -1, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 2, "id in (-87, -85)"));

        // Range matches ImportContentSetup.sql
        final JobExecution jobExecution = getJobLauncherTestUtils().launchJob(new MigrateJobParameters(firstAt, lastAt, true, 10));

        assertThat(jobExecution.getExitStatus()).isEqualTo(COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}