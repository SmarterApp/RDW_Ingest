package org.opentestsystem.rdw.ingest.migrate.reporting;

import org.junit.Test;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.reporting.StagingToReportingStepsConfig.codesEntities;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.batch.core.ExitStatus.COMPLETED;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;


public class ReportingMigrateJobIT extends SpringBatchIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @SqlGroup({
            //loads all code tables with one row each with id = -98
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingForDeleteSetup.sql"}),
            //loads all code tables with one row each with id = -99
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateCodesPreloadReportingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTierDown.sql"})
    })
    @Test
    public void itShouldUpsertAndDeleteCodesIfBatchHasImportContentWithCodes() throws Exception {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codesEntities) {
            if ("administration_condition".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "`reporting-test`." + table, -1, "id IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "`reporting-test`." + table, 1, "id IN (-98)"));
            } else if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "`reporting-test`." + table, -1, "practice IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "`reporting-test`." + table, 1, "practice IN (-98)"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "`reporting-test`." + table, -1, "id IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "`reporting-test`." + table, 1, "id IN (-98)"));
            }
        }

        //TODO: for now the warehouse tasks adds ImportContent.CODES to the batch if import table is empty
        final JobExecution jobExecution = getJobLauncherTestUtils().launchJob();

        assertThat(jobExecution.getExitStatus()).isEqualTo(COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}