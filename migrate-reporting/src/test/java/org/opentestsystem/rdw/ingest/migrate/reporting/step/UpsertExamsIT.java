package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertExamsStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class UpsertExamsIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource"))
    })
    @Test
    public void itShouldInsert() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_available_accommodation", 2, "exam_id in (-88, -87)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 1, "id in (-88) and available_accommodation_codes ='code1-test|code2-test'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_item", 4, "exam_id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 2, "id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 2, "id in (-88, -87, -86) AND grade_code in ('98')"));
        //There were 2 new exams inserted, but the administration_condition and completeness codes were changed, so the count will be 3
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 1, "id in (-88) AND completeness_code IN ('test98') AND administration_condition_code IN ('test98')"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 2, "id in (-87, -86) AND completeness_code IN ('test99') AND administration_condition_code IN ('test99')"));

        getStepExecutionContext().put("batch", mock(Migrate.class));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource"))
    })
    @Test
    public void itShouldUpdate() {

        final List<TableTestCountHelper> tableTestCounts = newArrayList();

        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_item", -1, "exam_id = -88 and item_id = -9 and response = 'test'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_item", 1, "exam_id = -88 and item_id = -9 and response = '<response><math xmlns=\"http://www.w3.org/1998/Math/MathML\" title=\"10\"><mstyle><mn>10</mn></mstyle></math></response>'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", -1, " id = -88 and t3_program_type = 'test'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 1, " id = -88 and t3_program_type = 'updated t3 type'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", -1, "id = -88 and completeness_code = 'before'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", -1, "id = -88 and administration_condition_code = 'before test'")); tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", -1, "id = -88 and completeness_code = 'before'"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 1, "id = -88 and administration_condition_code = 'test98'"));

        getStepExecutionContext().put("batch", mock(Migrate.class));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesForDeleteSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource"))
    })
    @Test
    public void itShouldNotDelete() {

        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_available_accommodation", 0, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam_item", 0, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, "exam", 0, "id in (-88)"));

        getStepExecutionContext().put("batch", mock(Migrate.class));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
