package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.migrate.reporting.Migrate;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateBatch;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.reporting.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.upsertExamsStepName;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class UpsertExamsIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldDoNothingIfBatchDoesNotHaveRightImportContent() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_available_accommodation", 0, "1=1"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_item", 0, "1=1"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", 0, "1=1"));

        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), newArrayList(ImportContent.CODES)));

        final JobExecution jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingCodesPreloadToReporting.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesPreloadReportingSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldInsert() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_available_accommodation", 2, "exam_id in (-88, -87)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", 1, "id in (-88) and available_accommodation_codes ='code1-test|code2-test'"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_item", 4, "exam_id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", 2, "id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", 2, "id in (-88, -87, -86) AND grade_code in ('98')"));
        //There were 2 new exams inserted, but the administration_condition and completeness codes were changed, so the count will be 3
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", 3, "id in (-88, -87, -86) AND completeness_code IN ('test1') AND administration_condition_code IN ('IN-test')"));

        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), newArrayList(ImportContent.EXAM)));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingCodesPreloadToReporting.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesPreloadReportingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldUpdate() {

        final List<TableTestCountHelper> tableTestCounts = newArrayList();

        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_item", -1, "response = 'test'"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", -1, " t3_program_type = 'test'"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", -1, " completeness_code = 'before' and administration_condition_code = 'before test'"));
        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), newArrayList(ImportContent.EXAM)));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingCodesPreloadToReporting.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingForDeleteSetup.sql"}),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:MigrateEntitiesPreloadReportingSetup.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateEntitiesFromStagingTearDown.sql"}),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:MigrateCodesFromStagingTearDown.sql"})
    })
    @Test
    public void itShouldNoteDelete() {

        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_available_accommodation", 0, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam_item", 0, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(jdbcTemplate, "reporting_test.exam", 0, "id in (-88)"));

        getStepExecutionContext().put("batch", new MigrateBatch(mock(Migrate.class), newArrayList(ImportContent.EXAM)));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertExamsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
