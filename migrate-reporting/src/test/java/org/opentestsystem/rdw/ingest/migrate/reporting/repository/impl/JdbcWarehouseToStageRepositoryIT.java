package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.migrate.reporting.RepositoryIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseToStageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.CODES;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.EXAM;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.GROUPS;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.ORGANIZATION;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.PACKAGE;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

public class JdbcWarehouseToStageRepositoryIT extends RepositoryIT {

    @Autowired
    private WarehouseToStageRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    public void shouldFindWarehouseSubjects() throws Exception {
        final List<Map<String, Object>> subjects = repository.findWarehouseSubjects();
        assertThat(countRowsInTable(jdbcTemplate, "warehouse_test.subject")).isEqualTo(subjects.size());
    }

    @Test
    public void shouldFindReportingSubjects() throws Exception {
        final List<Map<String, Object>> subjects = repository.findReportingSubjects();
        assertThat(countRowsInTable(jdbcTemplate, "reporting_test.subject")).isEqualTo(subjects.size());
    }

    @Test
    public void shouldFindWarehouseAsmtTypes() throws Exception {
        final List<Map<String, Object>> asmtTypes = repository.findWarehouseAsmtTypes();
        assertThat(countRowsInTable(jdbcTemplate, "warehouse_test.asmt_type")).isEqualTo(asmtTypes.size());
    }

    @Test
    public void shouldFindReportingAsmtTypes() throws Exception {
        final List<Map<String, Object>> asmtTypes = repository.findReportingAsmtTypes();
        assertThat(countRowsInTable(jdbcTemplate, "reporting_test.asmt_type")).isEqualTo(asmtTypes.size());
    }

    @Test
    public void shouldFindWarehouseSubjectClaimScores() throws Exception {
        final List<Map<String, Object>> subjectClaimScores = repository.findWarehouseSubjectClaimScores();
        assertThat(countRowsInTable(jdbcTemplate, "warehouse_test.subject_claim_score"))
                .isEqualTo(subjectClaimScores.size());
    }

    @Test
    public void shouldFindReportingSubjectClaimScores() throws Exception {
        final List<Map<String, Object>> subjectClaimScores = repository.findReportingSubjectClaimScores();
        assertThat(countRowsInTable(jdbcTemplate, "reporting_test.subject_claim_score"))
                .isEqualTo(subjectClaimScores.size());
    }

    @SqlGroup({
            @Sql(scripts = {"classpath:WarehouseImportSetup.sql"})
    })
    @Test
    public void itShouldFindOneOfEach() {
        Set<ImportContent> contentList = repository.findDistinctImportContentInRange(-3000L, -1L);
        assertThat(contentList.size()).isEqualTo(5);
        assertThat(contentList).contains(EXAM, PACKAGE, CODES, ORGANIZATION, GROUPS);
    }

    @SqlGroup({
            @Sql(scripts = {"classpath:WarehouseImportSetup.sql"})
    })
    @Test
    public void itShouldFindOneAndFive() {
        Set<ImportContent> contentList = repository.findDistinctImportContentInRange(-90L, -80L);
        assertThat(contentList.size()).isEqualTo(2);
        assertThat(contentList).contains(EXAM, GROUPS);
        assertThat(contentList).doesNotContain(PACKAGE, CODES, ORGANIZATION);
    }

    @SqlGroup({
            @Sql(scripts = {"classpath:WarehouseImportSetup.sql"})
    })
    @Test
    public void itShouldFindOne() {
        Set<ImportContent> contentList = repository.findDistinctImportContentInRange(-95L, -90L);
        assertThat(contentList.size()).isEqualTo(1);
        assertThat(contentList).contains(EXAM);
        assertThat(contentList).doesNotContain(PACKAGE, CODES, ORGANIZATION, GROUPS);
    }

    @SqlGroup({
            @Sql(scripts = {"classpath:WarehouseImportSetup.sql"})
    })
    @Test
    public void itShouldFindNoneOutOfRange() {
        Set<ImportContent> contentList = repository.findDistinctImportContentInRange(100L, 200L);
        assertThat(contentList).isEmpty();
    }

    @Sql(statements = {"DELETE FROM warehouse_test.import where id = 1"})
    @Test
    public void itShouldFindNoneEmptyImport() {
        assertThat(countRowsInTable(jdbcTemplate, "warehouse_test.import")).isEqualTo(0);
        Set<ImportContent> contentList = repository.findDistinctImportContentInRange(1L, 10L);
        assertThat(contentList).isEmpty();
    }
}