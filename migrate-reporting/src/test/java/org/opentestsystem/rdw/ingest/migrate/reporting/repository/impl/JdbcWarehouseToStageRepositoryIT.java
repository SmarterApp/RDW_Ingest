package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.RepositoryIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseToStageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

public class JdbcWarehouseToStageRepositoryIT extends RepositoryIT {

    @Autowired
    private WarehouseToStageRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    public void shouldFindWarehouseSubjects() throws Exception {
        final List<Map<String, Object>> subjects = repository.findWarehouseSubjects();
        assertThat(countRowsInTable(jdbcTemplate, "warehouse_test.subject")).isEqualTo(subjects.size());
    }

    @Test
    public void shouldFindReportingSubjects() throws Exception {
        final List<Map<String, Object>> subjects = repository.findReportingSubjects();
        assertThat(countRowsInTable(jdbcTemplate, "reporting_test.subject")).isEqualTo(subjects.size());
    }

    @Test
    public void shouldFindWarehouseAsmtTypes() throws Exception {
        final List<Map<String, Object>> asmtTypes = repository.findWarehouseAsmtTypes();
        assertThat(countRowsInTable(jdbcTemplate, "warehouse_test.asmt_type")).isEqualTo(asmtTypes.size());
    }

    @Test
    public void shouldFindReportingAsmtTypes() throws Exception {
        final List<Map<String, Object>> asmtTypes = repository.findReportingAsmtTypes();
        assertThat(countRowsInTable(jdbcTemplate, "reporting_test.asmt_type")).isEqualTo(asmtTypes.size());
    }

    @Test
    public void shouldFindWarehouseSubjectClaimScores() throws Exception {
        final List<Map<String, Object>> subjectClaimScores = repository.findWarehouseSubjectClaimScores();
        assertThat(countRowsInTable(jdbcTemplate, "warehouse_test.subject_claim_score"))
                .isEqualTo(subjectClaimScores.size());
    }

    @Test
    public void shouldFindReportingSubjectClaimScores() throws Exception {
        final List<Map<String, Object>> subjectClaimScores = repository.findReportingSubjectClaimScores();
        assertThat(countRowsInTable(jdbcTemplate, "reporting_test.subject_claim_score"))
                .isEqualTo(subjectClaimScores.size());
    }

    @Sql(statements = {
            "INSERT INTO warehouse_test.import (id, status, content, contentType, digest, batch, creator) VALUES\n" +
                    "  (-1010, 1, 2, 'application/xml', 'hash-asmt', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1009, 1, 2, 'application/xml', 'hash-asmt', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1008, 1, 4, 'application/xml', 'hash-school', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1007, 1, 4, 'application/xml', 'hash-school', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1006, 1, 5, 'application/xml', 'hash-student', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1005, 1, 5, 'application/xml', 'hash-student', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1004, 1, 5, 'application/xml', 'hash-group', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1003, 1, 1, 'application/xml', 'hash-iab_exam', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1002, 1, 1, 'application/xml', 'hash-iab_exam', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1001, 1, 1, 'application/xml', 'hash-exam', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1000, 1, 3, 'application/xml', 'hash-code', 'batch', 'dwtest@example.com');"
    })
    @Test
    public void itShouldFindOneOfEach() {
        List<Integer> contentList = repository.findImportContentForBatch(-3000L, -1L);
        assertThat(contentList.size()).isEqualTo(5);
        assertThat(contentList).contains(1, 2, 3, 4, 5);
    }

    @Sql(statements = {
            "INSERT INTO warehouse_test.import (id, status, content, contentType, digest, batch, creator) VALUES\n" +
                    "  (-1006, 1, 5, 'application/xml', 'hash-student', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1005, 1, 5, 'application/xml', 'hash-student', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1004, 1, 5, 'application/xml', 'hash-group', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1003, 1, 1, 'application/xml', 'hash-iab_exam', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1002, 1, 1, 'application/xml', 'hash-iab_exam', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1001, 1, 1, 'application/xml', 'hash-exam', 'batch', 'dwtest@example.com');"
    })
    @Test
    public void itShouldFindOneAndFive() {
        List<Integer> contentList = repository.findImportContentForBatch(-3000L, -1L);
        assertThat(contentList.size()).isEqualTo(2);
        assertThat(contentList).contains(1, 5);
        assertThat(contentList).doesNotContain(2, 3, 4);
    }

    @Sql(statements = {
            "INSERT INTO warehouse_test.import (id, status, content, contentType, digest, batch, creator) VALUES\n" +
                    "  (-1006, 1, 5, 'application/xml', 'hash-student', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1005, 1, 5, 'application/xml', 'hash-student', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1004, 1, 5, 'application/xml', 'hash-group', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1003, 1, 1, 'application/xml', 'hash-iab_exam', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1002, 1, 1, 'application/xml', 'hash-iab_exam', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1001, 1, 1, 'application/xml', 'hash-exam', 'batch', 'dwtest@example.com');"
    })
    @Test
    public void itShouldFindOne() {
        List<Integer> contentList = repository.findImportContentForBatch(-1003L, -1001L);
        assertThat(contentList.size()).isEqualTo(1);
        assertThat(contentList).contains(1);
        assertThat(contentList).doesNotContain(2, 3, 4, 5);
    }

    @Sql(statements = {
            "INSERT INTO warehouse_test.import (id, status, content, contentType, digest, batch, creator) VALUES\n" +
                    "  (-1006, 1, 5, 'application/xml', 'hash-student', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1005, 1, 5, 'application/xml', 'hash-student', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1004, 1, 5, 'application/xml', 'hash-group', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1003, 1, 1, 'application/xml', 'hash-iab_exam', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1002, 1, 1, 'application/xml', 'hash-iab_exam', 'batch', 'dwtest@example.com'),\n" +
                    "  (-1001, 1, 1, 'application/xml', 'hash-exam', 'batch', 'dwtest@example.com');"
    })
    @Test
    public void itShouldFindNone() {
        List<Integer> contentList = repository.findImportContentForBatch(100L, 200L);
        assertThat(contentList).isEmpty();
    }
}