package org.opentestsystem.rdw.ingest.migrate.reporting.step;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.codesEntities;
import static org.opentestsystem.rdw.ingest.migrate.reporting.step.StagingToReportingStepsConfig.deleteCodesStepName;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class DeleteCodesIT extends SpringBatchStepIT {

    @Autowired
    private JdbcTemplate reportingJdbcTemplate;

    @SqlGroup({
            //loads all code tables in `staging`; one row in each table with id = -98
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingCodesForDeleteSetup.sql"}, config = @SqlConfig(dataSource = "reportingDataSource")),
            //loads all code tables in `reporting`;one row in each table with id = -99
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingCodesPreload.sql"}, config = @SqlConfig(dataSource = "reportingDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDataSource"))
    })
    @Test
    public void itShouldDeleteButNotUpsertCodes() {
        // collect counts of rows in each `reporting` code table before the step
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codesEntities) {
            if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, -1, "practice IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 0, "practice IN (-98)"));
            } else if ("accommodation_translation".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, -1, "label_code IN ('code1-test.2017') AND language_code IN ('lan')"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 0, "label_code IN ('code2-test.2017') AND language_code IN ('gua')"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 0, "label_code NOT IN ('code1-test.2017', 'code2-test.2017')"));
            } else if ("school_year".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, -1, "year in(1999)"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 0, "year in(1998)"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, -1, "id IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 0, "id IN (-98)"));
            }
        }

        getStepExecutionContext().put(ExecutionParams.migrate, Migrate.builder().migrateCodes(true).build());

        // run the step first time
        JobExecution jobExecution = launchStep(deleteCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(deleteCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            //loads all code tables with one row each with id = -99
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:ReportingCodesPreload.sql"}, config = @SqlConfig(dataSource = "reportingDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDataSource"))
    })
    @Test
    public void itShouldDoNothingIfBatchDoesNotHaveImportContentWithCodes() {
        // collect counts of rows in each `reporting` code table before the step
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codesEntities) {
            if ("math_practice".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 0, "1=1"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate, table, 0, "1=1"));
            }
        }
        getStepExecutionContext().put(ExecutionParams.migrate, mock(Migrate.class));

        // run the step first time
        final JobExecution jobExecution = launchStep(deleteCodesStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
