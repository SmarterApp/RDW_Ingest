package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateImportValues;
import org.opentestsystem.rdw.ingest.migrate.reporting.RepositoryIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.jdbc.Sql;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

public class JdbcWarehouseImportRepositoryIT extends RepositoryIT {

    @Autowired
    private WarehouseImportRepository repository;

    @Test
    public void itShouldFindAllImportStatus() {
        assertThat(repository.findAllImportStatus()).containsExactlyInAnyOrder(ImportStatus.values());
    }

    @Sql(statements = {"DELETE FROM warehouse_test.import",
            "INSERT INTO warehouse_test.import (id, status, content, contentType, digest, created, updated) VALUES\n" +
                    "  (-996, 0, 1, 'application/xml', 'digest', '2017-07-18 19:45:33.966000', '2017-07-18 19:45:33.966000')," +
                    "  (-997, 1, 2, 'application/xml', 'digest', '2017-07-18 19:16:33.966000', '2017-07-18 19:17:09.966000')," +
                    "  (-998, 0, 3, 'application/xml', 'digest', '2017-07-18 19:16:33.966000', '2017-07-18 19:16:33.966000')," +
                    "  (-999, 1, 1, 'application/xml', 'digest', '2017-07-18 19:15:33.966000', '2017-07-18 19:47:34.966000')," +
                    "  (-1000, 1, 4, 'application/xml', 'digest', '2017-07-18 19:14:33.966000', '2017-07-18 19:15:08.966000')," +
                    "  (-1001, 1, 1, 'application/xml', 'digest', '2017-07-18 19:13:33.966000', '2017-07-18 19:14:07.966000')," +
                    "  (-1002, 1, 1, 'application/xml', 'digest', '2017-07-18 19:12:33.966000', '2017-07-18 19:13:06.966000')," +
                    "  (-1003, 1, 1, 'application/xml', 'digest', '2017-07-18 19:11:33.966000', '2017-07-18 19:12:05.966000')," +
                    "  (-1004, 1, 3, 'application/xml', 'digest', '2017-07-18 19:10:33.966000', '2017-07-18 19:09:04.966000')," +
                    "  (-1005, 1, 4, 'application/xml', 'digest', '2017-07-18 19:09:33.966000', '2017-07-18 19:08:03.966000')," +
                    "  (-1006, 1, 5, 'application/xml', 'digest', '2017-07-18 19:08:33.966000', '2017-07-18 19:46:34.966000')," +
                    "  (-1007, 0, 1, 'application/xml', 'digest', '2017-07-18 19:07:33.966000', '2017-07-18 19:07:33.966000')," +
                    "  (-1008, 1, 1, 'application/xml', 'digest', '2017-07-18 19:06:33.966000', '2017-07-18 19:46:34.966000')," +
                    "  (-1009, 1, 3, 'application/xml', 'digest', '2017-07-18 19:06:33.966000', '2017-07-18 19:07:02.966000')," +
                    "  (-1010, 1, 1, 'application/xml', 'digest', '2017-07-18 19:05:33.966000', '2017-07-18 19:06:01.966000');"})
    @Test
    public void itShouldGetMigrateJobState() {
        final Instant boundaryAt = Instant.parse("2017-07-18T19:46:34.966Z");
        final Instant lastAt = Instant.parse("2017-07-18T19:47:34.966Z");

        MigrateImportValues jobState = repository.getMigrateImportValues(null, 10);
        assertThat(jobState.getFirstAt()).isEqualTo(Instant.parse("2017-07-18T19:05:33.966Z"));
        assertThat(jobState.getLastAt()).isEqualTo(boundaryAt);
        assertThat(jobState.getImportCount()).isEqualTo(10);
        assertThat(jobState.migrateCodes()).isTrue();

        jobState = repository.getMigrateImportValues(boundaryAt, 10);
        assertThat(jobState.getFirstAt()).isEqualTo(boundaryAt);
        assertThat(jobState.getLastAt()).isEqualTo(lastAt);
        assertThat(jobState.getImportCount()).isEqualTo(3);
        assertThat(jobState.migrateCodes()).isTrue();

        jobState = repository.getMigrateImportValues(lastAt, 10);
        assertThat(jobState.getFirstAt()).isEqualTo(lastAt);
        assertThat(jobState.getLastAt()).isEqualTo(lastAt);
        assertThat(jobState.getImportCount()).isEqualTo(1);
        assertThat(jobState.migrateCodes()).isTrue();

        jobState = repository.getMigrateImportValues(Instant.parse("2017-07-18T19:11:33.966Z"), 3);
        assertThat(jobState.getLastAt()).isEqualTo(Instant.parse("2017-07-18T19:14:07.966Z"));
        assertThat(jobState.getImportCount()).isEqualTo(3);
        assertThat(jobState.migrateCodes()).isFalse();
    }

    @Sql(statements = "DELETE FROM warehouse_test.import")
    @Test
    public void itShouldGetMigrateJobStateWhenNoImports() {
        final MigrateImportValues migrateImportValues = repository.getMigrateImportValues(null, 10);

        assertThat(migrateImportValues.getFirstAt()).isNull();
        assertThat(migrateImportValues.getLastAt()).isNull();
        assertThat(migrateImportValues.getImportCount()).isZero();
        assertThat(migrateImportValues.migrateCodes()).isFalse();
    }
}