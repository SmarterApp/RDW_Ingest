package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.reporting.RepositoryIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.jdbc.Sql;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@Sql(scripts = {"classpath:MigrateImportFromWarehouseSetup.sql"})
public class JdbcWarehouseImportRepositoryIT extends RepositoryIT {

    @Autowired
    private WarehouseImportRepository repository;

    private static final Long setupMinImportId = -1010L;
    private static final Long setupLastImportId = -1001L;
    private static final Long setupMaxImportId = -989L;
    private static final Integer setupBatchSize = 10;

    @Test
    public void itShouldFindSetupMinImportId() {
        final Optional<Long> min = repository.findMinImportId();
        assertThat(min)
                .isPresent()
                .hasValue(setupMinImportId);
    }

    @Sql(statements = "DELETE FROM warehouse_test.import")
    @Test
    public void itShouldFindNothingForMinImportId() {
        final Optional<Long> min = repository.findMinImportId();
        assertThat(min).isEmpty();
    }

    @Test
    public void itShouldFindSetupImportId() {
        final Optional<Long> max = repository.findMaxImportIdNotMigrated(setupLastImportId, setupBatchSize);
        assertThat(max)
                .isPresent()
                .contains(setupMaxImportId);
    }

    @Test
    public void itShouldFindSmallerBatch() {
        final Optional<Long> max = repository.findMaxImportIdNotMigrated(setupLastImportId, setupBatchSize - 2);
        assertThat(max)
                .isPresent()
                .contains(-992L);  // -991 is invalid
    }

    @Test
    public void itShouldFindSmallerBatchPastSkippedSequence() {
        final Optional<Long> max = repository.findMaxImportIdNotMigrated(setupLastImportId, setupBatchSize - 6);
        assertThat(max)
                .isPresent()
                .contains(-996L);  // -997 is missing
    }

    @Test
    public void itShouldNotFindImportIdIfNotAvailable() {
        final Long lastImportIdGreaterThanAvailable = 10L;
        final Optional<Long> max = repository.findMaxImportIdNotMigrated(lastImportIdGreaterThanAvailable, setupBatchSize);
        assertThat(max).isEmpty();
    }

    @Test
    public void itShouldNotFindImportIdIfBatchSizeZero() {
        final Integer batchSize = 0;
        final Optional<Long> max = repository.findMaxImportIdNotMigrated(setupLastImportId, batchSize);
        assertThat(max).isEmpty();
    }

}