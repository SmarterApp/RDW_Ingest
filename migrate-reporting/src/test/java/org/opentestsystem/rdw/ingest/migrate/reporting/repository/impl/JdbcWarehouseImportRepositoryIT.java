package org.opentestsystem.rdw.ingest.migrate.reporting.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.migrate.reporting.MigrateJobState;
import org.opentestsystem.rdw.ingest.migrate.reporting.RepositoryIT;
import org.opentestsystem.rdw.ingest.migrate.reporting.repository.WarehouseImportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.jdbc.Sql;

import static org.assertj.core.api.Assertions.assertThat;

public class JdbcWarehouseImportRepositoryIT extends RepositoryIT {

    @Autowired
    private WarehouseImportRepository repository;

    @Test
    public void itShouldFindAllImportStatus() {
        assertThat(repository.findAllImportStatus()).containsExactlyInAnyOrder(ImportStatus.values());
    }

    @Sql(statements = "INSERT INTO warehouse_test.import (id, status, content, contentType, digest) VALUES\n" +
            "  (-1010, 1, 1, 'application/xml', 'digest')," +
            "  (-1009, 1, 1, 'application/xml', 'digest')," +
            "  (-1008, 1, 1, 'application/xml', 'digest')," +
            "  (-1007, 1, 1, 'application/xml', 'digest')," +
            "  (-1006, 1, 1, 'application/xml', 'digest')," +
            "  (-1005, 1, 1, 'application/xml', 'digest')," +
            "  (-1004, 1, 1, 'application/xml', 'digest')," +
            "  (-1003, 1, 1, 'application/xml', 'digest')," +
            "  (-1002, 1, 1, 'application/xml', 'digest')," +
            "  (-1001, 1, 1, 'application/xml', 'digest')," +
            "  (-1000, 1, 1, 'application/xml', 'digest')," +
            "  (-0999, 1, 1, 'application/xml', 'digest')," +
            "  (-0998, 1, 1, 'application/xml', 'digest')," +
            "  (-0997, 1, 1, 'application/xml', 'digest');")
    @Test
    public void itShouldGetMigrateJobState() {
        final MigrateJobState jobState = repository.getMigrateJobState(-1008L, 10);
        assertThat(jobState.getFirst()).isEqualTo(-1007);
        assertThat(jobState.getLast()).isEqualTo(-998);
        assertThat(jobState.getBlocker()).isNull();
    }

    @Sql(statements = "DELETE FROM warehouse_test.import")
    @Test
    public void itShouldGetMigrateJobStateWhenNoImports() {
        assertThat(repository.getMigrateJobState(null, 10).getFirst()).isNull();
    }

    @Sql(statements = "INSERT INTO warehouse_test.import (id, status, content, contentType, digest) VALUES\n" +
            "  (-1010, 0, 1, 'application/xml', 'digest')," +
            "  (-1009, 1, 1, 'application/xml', 'digest')," +
            "  (-1008, 1, 1, 'application/xml', 'digest')," +
            "  (-1007, 1, 1, 'application/xml', 'digest')," +
            "  (-1006, 1, 1, 'application/xml', 'digest')," +
            "  (-1005, 1, 1, 'application/xml', 'digest')," +
            "  (-1004, 1, 1, 'application/xml', 'digest')," +
            "  (-1003, 1, 1, 'application/xml', 'digest')," +
            "  (-1002, 1, 1, 'application/xml', 'digest')," +
            "  (-1001, 1, 1, 'application/xml', 'digest')," +
            "  (-1000, 1, 1, 'application/xml', 'digest')," +
            "  (-0999, 1, 1, 'application/xml', 'digest')," +
            "  (-0998, 1, 1, 'application/xml', 'digest')," +
            "  (-0997, 1, 1, 'application/xml', 'digest');")
    @Test
    public void itShouldBeFullyBlockedByEarlierImport() {
        final MigrateJobState jobState = repository.getMigrateJobState(-1008L, 10);
        assertThat(jobState.getFirst()).isNull();
        assertThat(jobState.getBlocker()).isEqualTo(-1010);
    }

    @Sql(statements = "INSERT INTO warehouse_test.import (id, status, content, contentType, digest) VALUES\n" +
            "  (-1010, 1, 1, 'application/xml', 'digest')," +
            "  (-1009, 1, 1, 'application/xml', 'digest')," +
            "  (-1008, 1, 1, 'application/xml', 'digest')," +
            "  (-1007, 1, 1, 'application/xml', 'digest')," +
            "  (-1006, 1, 1, 'application/xml', 'digest')," +
            "  (-1005, 1, 1, 'application/xml', 'digest')," +
            "  (-1004, 0, 1, 'application/xml', 'digest')," +
            "  (-1003, 1, 1, 'application/xml', 'digest')," +
            "  (-1002, 1, 1, 'application/xml', 'digest')," +
            "  (-1001, 1, 1, 'application/xml', 'digest')," +
            "  (-1000, 1, 1, 'application/xml', 'digest')," +
            "  (-0999, 1, 1, 'application/xml', 'digest')," +
            "  (-0998, 1, 1, 'application/xml', 'digest')," +
            "  (-0997, 1, 1, 'application/xml', 'digest');")
    @Test
    public void itShouldBePartiallyBlocked() {
        final MigrateJobState jobState = repository.getMigrateJobState(-1008L, 10);
        assertThat(jobState.getFirst()).isEqualTo(-1007);
        assertThat(jobState.getLast()).isEqualTo(-1005);
        assertThat(jobState.getBlocker()).isEqualTo(-1004);
    }
}