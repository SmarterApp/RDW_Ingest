package org.opentestsystem.rdw.migrate.common;

import org.junit.Test;

import java.time.Instant;
import java.time.temporal.ChronoUnit;

import static org.assertj.core.api.Assertions.assertThat;

public class MigrateImportValuesTest {

    @Test
    public void itShouldBuildAnObject() {
        final Instant last = Instant.now();
        final Instant first = last.minus(317, ChronoUnit.MILLIS);
        final MigrateImportValues values = MigrateImportValues.builder()
                .importCount(23)
                .firstAt(first)
                .lastAt(last)
                .migrateCodes(true)
                .migrateEmbargo(true)
                .build();
        assertThat(values.getImportCount()).isEqualTo(23);
        assertThat(values.getFirstAt()).isEqualTo(first);
        assertThat(values.getLastAt()).isEqualTo(last);
        assertThat(values.migrateCodes()).isTrue();
        assertThat(values.migrateEmbargo()).isTrue();
    }

    @Test
    public void itShouldHaveDefaults() {
        final MigrateImportValues values = MigrateImportValues.builder()
                .build();
        assertThat(values.getImportCount()).isZero();
        assertThat(values.getFirstAt()).isNull();
        assertThat(values.getLastAt()).isNull();
        assertThat(values.migrateCodes()).isFalse();
        assertThat(values.migrateEmbargo()).isFalse();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldValidateTimeForCount() {
        MigrateImportValues.builder().importCount(23).build();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldValidateTimeRange() {
        final Instant last = Instant.now();
        final Instant first = last.minus(317, ChronoUnit.MILLIS);

        // it's okay if first and last are the same ...
        assertThat(MigrateImportValues.builder().importCount(23).firstAt(first).lastAt(first).build()).isNotNull();

        // but first can't be after last ...
        MigrateImportValues.builder().importCount(23).firstAt(last).lastAt(first).build();
    }
}
