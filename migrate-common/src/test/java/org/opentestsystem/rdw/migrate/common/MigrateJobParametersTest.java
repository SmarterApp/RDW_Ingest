package org.opentestsystem.rdw.migrate.common;

import org.junit.Test;
import org.springframework.batch.core.JobParameter;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

public class MigrateJobParametersTest {

    @Test
    public void itShouldSetIdentifyingJobParamAndPreserveCtorValues() {
        final Instant firstAt = Instant.parse("2017-05-18T19:06:34.966Z");
        final Instant lastAt = Instant.parse("2017-05-20T19:06:34.966Z");
        final MigrateJobParameters jobParameters = new MigrateJobParameters(firstAt, lastAt, true, true, 10);

        final JobParameter jobIdParam = jobParameters.getParameters().get(MigrateJobParameters.JobIdentifier);
        assertThat(jobIdParam.isIdentifying()).isTrue();
        assertThat(jobIdParam.getValue()).isNotNull();

        assertThat(jobParameters.getFirstAt()).isEqualTo(firstAt);
        assertThat(jobParameters.getLastAt()).isEqualTo(lastAt);
        assertThat(jobParameters.getMigrateCodes()).isTrue();
        assertThat(jobParameters.getMigrateEmbargo()).isTrue();
        assertThat(jobParameters.getBatchSize()).isEqualTo(10);
    }

    @Test
    public void itShouldRoundtripTimestampsWithMicrosecondPrecision() {
        final Instant firstAt = Instant.parse("2017-05-18T19:06:34.966123Z");
        final Instant lastAt = Instant.parse("2017-05-20T19:06:34.966456Z");
        final MigrateJobParameters jobParameters = new MigrateJobParameters(firstAt, lastAt, false, false, 10);

        assertThat(jobParameters.getFirstAt()).isEqualTo(firstAt);
        assertThat(jobParameters.getLastAt()).isEqualTo(lastAt);
    }
}