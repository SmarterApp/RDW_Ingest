package org.opentestsystem.rdw.migrate.common;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;

import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import static org.mockito.Mockito.*;


public class TenantAwareMigrateJobRunnerTest {
    // Class under test.
    private TenantAwareMigrateJobRunner jobRunner;

    private TenantProperties tenantProperties;
    private TenantAwareMigrateJobHandler jobHandler;

    @Before
    public void setUp() {
        // for most of the tests we want a single tenant ('cause that's how they were written initially)
        tenantProperties = new TenantProperties();
        tenantProperties.setTenants(ImmutableMap.of("CA", Tenant.builder().id("CA").key("CA").build()));

        jobHandler = mock(TenantAwareMigrateJobHandler.class);

        jobRunner =  new TenantAwareMigrateJobRunner(tenantProperties, jobHandler);
    }

    @Test
    public void itShouldSetRunningToTrue() {
        when(jobHandler.isRunning()).thenReturn(false);
        jobRunner.start();
        verify(jobHandler).setRunning(true);
    }

    @Test
    public void itShouldSetRunningToFalse() {
        when(jobHandler.isRunning()).thenReturn(true);
        jobRunner.stop();
        verify(jobHandler).setRunning(false);
    }

    @Test
    public void itShouldDelegateRunToHandler() {
        jobRunner.run("CA");

        verify(jobHandler).run("CA");
    }

    @Test
    public void itShouldRunForAllTenants() {
        tenantProperties.setTenants(ImmutableMap.of(
                "CA", Tenant.builder().id("CA").key("CA").build(),
                "NV", Tenant.builder().id("NV").key("NV").build()));

        jobRunner.run();

        verify(jobHandler, times(2)).run(anyString());
        verify(jobHandler).run("CA");
        verify(jobHandler).run("NV");
    }
}
