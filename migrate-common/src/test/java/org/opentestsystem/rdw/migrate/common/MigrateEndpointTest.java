package org.opentestsystem.rdw.migrate.common;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class MigrateEndpointTest {

    private MigrateLifecycle jobRunner;
    private MigrateRepository repository;
    private MigrateEndpoint endpoint;

    @Before
    public void createEndpoint() {
        jobRunner = mock(MigrateLifecycle.class);
        repository = mock(MigrateRepository.class);
        endpoint = new MigrateEndpoint(jobRunner, repository);
    }

    @Test
    public void itShouldGetGoodMigrateInfo() {
        final Migrate lastMigrate = mock(Migrate.class);
        when(lastMigrate.getStatus()).thenReturn(MigrateStatus.COMPLETED);
        when(lastMigrate.getLastAt()).thenReturn(Instant.now());
        when(repository.findLast()).thenReturn(lastMigrate);

        when(jobRunner.isRunning()).thenReturn(true);
        when(jobRunner.isEnabled()).thenReturn(true);

        assertThat(endpoint.invoke())
                .contains("running, enabled")
                .contains("COMPLETED")
                .doesNotContain("Last successful");
    }

    @Test
    public void itShouldBadGoodMigrateInfo() {
        final Migrate lastMigrate = mock(Migrate.class);
        when(lastMigrate.getStatus()).thenReturn(MigrateStatus.FAILED);
        when(lastMigrate.getLastAt()).thenReturn(Instant.now());
        when(repository.findLast()).thenReturn(lastMigrate);
        when(repository.findLastMigratedAt()).thenReturn(Instant.now());

        when(jobRunner.isRunning()).thenReturn(true);
        when(jobRunner.isEnabled()).thenReturn(false);

        assertThat(endpoint.invoke())
                .contains("running, disabled")
                .contains("FAILED")
                .contains("Last successful");
    }

    @Test
    public void itShouldNotMigrateIfDisabled() {
        when(jobRunner.isEnabled()).thenReturn(false);
        assertThat(endpoint.migrate()).isFalse();
    }

    @Test
    public void itShouldNotMigrateIfPaused() {
        when(jobRunner.isEnabled()).thenReturn(true);
        when(jobRunner.isRunning()).thenReturn(false);
        assertThat(endpoint.migrate()).isFalse();
    }

    @Test
    public void itShouldMigrate() {
        when(jobRunner.isEnabled()).thenReturn(true);
        when(jobRunner.isRunning()).thenReturn(true);
        assertThat(endpoint.migrate()).isTrue();
        verify(jobRunner).run();
    }

    @Test
    public void itShouldNotEnableIfEnabled() {
        when(jobRunner.isEnabled()).thenReturn(true);
        assertThat(endpoint.enable()).isFalse();
    }

    @Test
    public void itShouldNotEnableIfLastMigrateIsNotFailed() {
        when(jobRunner.isEnabled()).thenReturn(false);

        final Migrate lastMigrate = mock(Migrate.class);
        when(lastMigrate.getStatus()).thenReturn(MigrateStatus.COMPLETED);
        when(repository.findLast()).thenReturn(lastMigrate);

        assertThat(endpoint.enable()).isFalse();
    }

    @Test
    public void itShouldEnable() {
        when(jobRunner.isEnabled()).thenReturn(false);

        final Migrate lastMigrate = mock(Migrate.class);
        when(lastMigrate.getId()).thenReturn(42L);
        when(lastMigrate.getStatus()).thenReturn(MigrateStatus.FAILED);
        when(repository.findLast()).thenReturn(lastMigrate);

        assertThat(endpoint.enable()).isTrue();
        verify(repository).updateStatusById(42L, MigrateStatus.ABANDONED);
    }
}
