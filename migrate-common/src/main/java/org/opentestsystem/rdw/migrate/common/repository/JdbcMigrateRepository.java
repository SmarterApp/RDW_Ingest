package org.opentestsystem.rdw.migrate.common.repository;

import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.MigrateStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.IncorrectResultSizeDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.Timestamp;
import java.time.Instant;

@Repository
class JdbcMigrateRepository implements MigrateRepository {

    @Value("${sql.reporting.migrate.findLastMigratedAt}")
    private String findLastMigratedAt;

    @Value("${sql.reporting.migrate.create}")
    private String create;

    @Value("${sql.reporting.migrate.delete}")
    private String delete;

    @Value("${sql.reporting.migrate.updateStatusById}")
    private String updateStatusById;

    @Value("${sql.reporting.migrate.findLast}")
    private String findLast;

    private final NamedParameterJdbcTemplate migrateJdbcTemplate;

    @Autowired
    public JdbcMigrateRepository(final NamedParameterJdbcTemplate migrateJdbcTemplate) {
        this.migrateJdbcTemplate = migrateJdbcTemplate;
    }

    @Override
    public Instant findLastMigratedAt() {
        final Timestamp lastMigratedAt = migrateJdbcTemplate.getJdbcOperations().queryForObject(findLastMigratedAt, Timestamp.class);
        return lastMigratedAt == null ? null : lastMigratedAt.toInstant();
    }

    @Override
    public Migrate create(final Migrate migrate) {
        final KeyHolder keyHolder = new GeneratedKeyHolder();

        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("job_id", migrate.getJobId())
                .addValue("size", migrate.getSize())
                .addValue("migrate_codes", migrate.isMigrateCodes())
                .addValue("migrate_embargo", migrate.isMigrateEmbargo())
                .addValue("status", migrate.getStatus().getValue())
                .addValue("first_at", Timestamp.from(migrate.getFirstAt()))
                .addValue("last_at", Timestamp.from(migrate.getLastAt()));

        migrateJdbcTemplate.update(create, parameterSource, keyHolder);
        return Migrate.builder()
                .copy(migrate)
                .id(keyHolder.getKey().longValue())
                .build();
    }

    @Override
    public void delete(final long id) {
        migrateJdbcTemplate.update(delete, new MapSqlParameterSource("id", id));
    }

    @Override
    public void updateStatusById(final long id, final MigrateStatus status) {
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("id", id)
                .addValue("status", status.getValue());

        migrateJdbcTemplate.update(updateStatusById, parameterSource);
    }

    @Override
    public MigrateStatus findLastStatus() {
        try {
            return findLast().getStatus();
        } catch (final IncorrectResultSizeDataAccessException | IllegalArgumentException | NullPointerException e) {
            // edge cases: no migrate rows, bad data
            return null;
        }
    }

    @Override
    public Migrate findLast() {
        try {
            return migrateJdbcTemplate.queryForObject(findLast, new MapSqlParameterSource(), MigrateRowMapper);
        } catch (final IncorrectResultSizeDataAccessException e) {
            return null;
        }
    }

    private static final RowMapper<Migrate> MigrateRowMapper = (rs, rowNum) -> Migrate.builder()
            .id(rs.getLong("id"))
            .jobId(rs.getLong("job_id"))
            .status(MigrateStatus.fromValue(rs.getInt("status")))
            .firstAt(rs.getTimestamp("first_at").toInstant())
            .lastAt(rs.getTimestamp("last_at").toInstant())
            .size(rs.getInt("size"))
            .migrateCodes(rs.getBoolean("migrate_codes"))
            .migrateEmbargo(rs.getBoolean("migrate_embargo"))
            .build();
}
