package org.opentestsystem.rdw.migrate.common;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.endpoint.AbstractEndpoint;
import org.springframework.boot.actuate.endpoint.Endpoint;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.time.ZoneOffset;
import java.util.Optional;
import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;

/**
 * {@link Endpoint} to trigger migration and/or re-enable disabled migration.
 * <p>
 * This has deep knowledge of tenants and how the current thread context stores them.
 * </p>
 */
@Component
@ConfigurationProperties(prefix = "endpoints.migrate")
public class MigrateEndpoint extends AbstractEndpoint<String> {
    private static final Logger logger = LoggerFactory.getLogger(MigrateEndpoint.class);

    private final TenantAwareMigrateLifecycle jobRunner;
    private final MigrateRepository repository;
    private final TenantProperties tenantProperties;

    @Autowired
    public MigrateEndpoint(final TenantAwareMigrateLifecycle jobRunner,
                           final MigrateRepository repository,
                           final TenantProperties tenantProperties) {
        super("migrate", true, true);
        this.jobRunner = jobRunner;
        this.repository = repository;
        this.tenantProperties = tenantProperties;
    }

    @Override
    public String invoke() {
        final StringBuilder builder = new StringBuilder("Migrate: ");
        builder.append(jobRunner.isRunning() ? "running" : "paused").append("\n");

        // get status of each tenant by setting thread context and asking job runner for status
        for (final Tenant tenant : tenantProperties.getTenants().values()) {
            TenantContextHolder.setTenantId(tenant.getId());
            builder.append(tenant.getId()).append(": ")
                    .append(jobRunner.isEnabled() ? "enabled" : "disabled");

            final Migrate lastMigrate = repository.findLast();
            if (lastMigrate != null) {
                builder.append("; last migrate: ").append(lastMigrate.getStatus())
                        .append(" to ").append(asOffsetDateTime(lastMigrate.getLastAt()));

                if (lastMigrate.getStatus() != MigrateStatus.COMPLETED) {
                    final Instant lastMigratedAt = repository.findLastMigratedAt();
                    if (lastMigratedAt != null) {
                        builder.append("; last successful migrate to ").append(asOffsetDateTime(lastMigratedAt));
                    }
                }
            }
            builder.append("\n");
        }

        return builder.toString();
    }

    private static String asOffsetDateTime(final Instant value) {
        return ISO_LOCAL_DATE_TIME.format(value.atOffset(ZoneOffset.UTC));
    }

    /**
     * Trigger migration.
     *
     * @param tenantId optional tenant id
     * @return message indicating action taken (or not)
     */
    public String migrate(final String tenantId) {
        final String message;
        if (!jobRunner.isRunning()) {
            message = "Ignoring /migrate request since migrate is not running";
        } else if (tenantId != null) {
            if (!checkAndSetTenant(tenantId)) {
                message = "Ignoring /migrate request for unknown tenant id " + tenantId;
            } else if (!jobRunner.isEnabled()) {
                message = "Ignoring /migrate request since migrate is disabled for tenant " + tenantId;
            } else {
                message = "Migrate triggered by /migrate request for tenant " + tenantId;
                jobRunner.run(tenantId);
            }
        } else {
            message = "Migrate triggered by /migrate request for all tenants";
            jobRunner.run();
        }

        logger.info(message);
        return message;
    }

    /**
     * Enable migration.
     * <p>
     * Migration is enabled by updating the FAILED migrate record to ABANDONED state.
     * </p>
     *
     * @param tenantId tenant id
     * @return message indicating action taken (or not)
     */
    public String enable(final String tenantId) {
        final String message;
        if (!checkAndSetTenant(tenantId)) {
            message = "Ignoring /migrate/enable request for unknown tenant id " + tenantId;
        } else if (jobRunner.isEnabled()) {
            message = "Ignoring /migrate/enable request since migrate is already enabled for tenant " + tenantId;
        } else {
            final Migrate migrate = repository.findLast();
            if (migrate.getStatus() == MigrateStatus.FAILED) {
                message = "Marking migrate " + migrate.getId() + " as ABANDONED for tenant " + tenantId;
                repository.updateStatusById(migrate.getId(), MigrateStatus.ABANDONED);
                jobRunner.enable(true);
            } else {
                // it really shouldn't get here but it does
                message = "Re-enabling migrate " + migrate.getId() + " (already in state " + migrate.getStatus().name() + ") for tenant " + tenantId;
                jobRunner.enable(true);
            }
        }

        logger.info(message);
        return message;
    }

    private boolean checkAndSetTenant(final String tenantId) {
        final Optional<Tenant> tenant = tenantProperties.findTenantById(tenantId);
        if (!tenant.isPresent()) return false;

        TenantContextHolder.setTenantId(tenant.get().getId());
        return true;
    }
}
