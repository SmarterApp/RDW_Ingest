package org.opentestsystem.rdw.migrate.common;

import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.actuate.endpoint.AbstractEndpoint;
import org.springframework.boot.actuate.endpoint.Endpoint;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.time.ZoneOffset;
import java.util.concurrent.Executors;

import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;

/**
 * {@link Endpoint} to trigger migration and/or re-enable disabled migration.
 */
@Component
@ConfigurationProperties(prefix = "endpoints.migrate")
public class MigrateEndpoint extends AbstractEndpoint<String> {
    private static final Logger logger = LoggerFactory.getLogger(MigrateEndpoint.class);

    private final MigrateLifecycle jobRunner;
    private final MigrateRepository repository;

    public MigrateEndpoint(final MigrateLifecycle jobRunner, final MigrateRepository repository) {
        super("migrate");
        this.jobRunner = jobRunner;
        this.repository = repository;
    }

    @Override
    public String invoke() {
        final StringBuilder builder = new StringBuilder("Migrate: ");
        builder.append(jobRunner.isRunning() ? "running" : "paused")
            .append(", ").append(jobRunner.isEnabled() ? "enabled" : "disabled");

        final Migrate lastMigrate = repository.findLast();
        if (lastMigrate != null) {
            builder.append(". Last migrate: ").append(lastMigrate.getStatus())
                   .append(" to ").append(asOffsetDateTime(lastMigrate.getLastAt()));

            if (lastMigrate.getStatus() != MigrateStatus.COMPLETED) {
                final Instant lastMigratedAt = repository.findLastMigratedAt();
                if (lastMigratedAt != null) {
                    builder.append(". Last successful migrate to ").append(asOffsetDateTime(lastMigratedAt));
                }
            }
        }
        return builder.toString();
    }

    private static String asOffsetDateTime(final Instant value) {
        return ISO_LOCAL_DATE_TIME.format(value.atOffset(ZoneOffset.UTC));
    }

    /**
     * Trigger migration.
     *
     * @return true if migration was triggered, false otherwise
     */
    public boolean migrate() {
        if (!jobRunner.isEnabled()) {
            logger.info("Ignoring /migrate request since migrate is not enabled");
            return false;
        }
        if (!jobRunner.isRunning()) {
            logger.info("Ignoring /migrate request since migrate is not running");
            return false;
        }

        Executors.newSingleThreadExecutor().execute(jobRunner::run);

        logger.info("Migrate triggered by /migrate request");
        return true;
    }

    /**
     * Enable migration.
     * <p>
     * Migration is enabled by updating the FAILED migrate record to ABANDONED state.
     * </p>
     *
     * @return true if migration was re-enabled, false otherwise
     */
    public boolean enable() {
        if (jobRunner.isEnabled()) {
            logger.info("Ignoring /migrate/enable request since migrate is not disabled");
            return false;
        }

        final Migrate migrate = repository.findLast();
        if (migrate.getStatus() != MigrateStatus.FAILED) {
            logger.warn("Ignoring /migrate/enable request since last migrate is not FAILED");
            return false;
        }

        logger.info("Marking migrate {} as ABANDONED", migrate.getId());
        repository.updateStatusById(migrate.getId(), MigrateStatus.ABANDONED);
        return true;
    }
}
