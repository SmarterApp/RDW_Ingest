package org.opentestsystem.rdw.migrate.common;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.endpoint.AbstractEndpoint;
import org.springframework.boot.actuate.endpoint.Endpoint;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.time.ZoneOffset;
import java.util.concurrent.Executors;
import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import static java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;

/**
 * {@link Endpoint} to trigger migration and/or re-enable disabled migration.
 * <p>
 * This has deep knowledge of tenants and how the current thread context stores them.
 * </p>
 */
@Component
@ConfigurationProperties(prefix = "endpoints.migrate")
public class MigrateEndpoint extends AbstractEndpoint<String> {
    private static final Logger logger = LoggerFactory.getLogger(MigrateEndpoint.class);

    private final MigrateLifecycle jobRunner;
    private final MigrateRepository repository;
    private final TenantProperties tenantProperties;

    @Autowired
    public MigrateEndpoint(final MigrateLifecycle jobRunner,
                           final MigrateRepository repository,
                           final TenantProperties tenantProperties) {
        super("migrate", true, true);
        this.jobRunner = jobRunner;
        this.repository = repository;
        this.tenantProperties = tenantProperties;
    }

    @Override
    public String invoke() {
        final StringBuilder builder = new StringBuilder("Migrate: ");
        builder.append(jobRunner.isRunning() ? "running" : "paused").append("\n");

        // get status of each tenant by setting thread context and asking job runner for status
        for (final TenantProperties.Tenant tenant : tenantProperties.getTenants().values()) {
            TenantContextHolder.setTenantId(tenant.getId());
            builder.append(tenant.getId()).append(": ")
                    .append(jobRunner.isEnabled() ? "enabled" : "disabled");

            final Migrate lastMigrate = repository.findLast();
            if (lastMigrate != null) {
                builder.append("; last migrate: ").append(lastMigrate.getStatus())
                        .append(" to ").append(asOffsetDateTime(lastMigrate.getLastAt()));

                if (lastMigrate.getStatus() != MigrateStatus.COMPLETED) {
                    final Instant lastMigratedAt = repository.findLastMigratedAt();
                    if (lastMigratedAt != null) {
                        builder.append("; last successful migrate to ").append(asOffsetDateTime(lastMigratedAt));
                    }
                }
            }
            builder.append("\n");
        }

        return builder.toString();
    }

    private static String asOffsetDateTime(final Instant value) {
        return ISO_LOCAL_DATE_TIME.format(value.atOffset(ZoneOffset.UTC));
    }

    /**
     * Trigger migration.
     *
     * @param tenantId tenant id
     * @return true if migration was triggered, false otherwise
     */
    public boolean migrate(final String tenantId) {
        // set tenant in this thread context (throws if tenant id is unknown)
        checkAndSetTenant(tenantId);

        if (!jobRunner.isEnabled()) {
            logger.info("Ignoring /migrate request since migrate is disabled for tenant {}", tenantId);
            return false;
        }
        if (!jobRunner.isRunning()) {
            logger.info("Ignoring /migrate request since migrate is not running");
            return false;
        }

        Executors.newSingleThreadExecutor().execute(() -> {
            TenantContextHolder.setTenantId(tenantId);
            jobRunner.run();
        });

        logger.info("Migrate triggered by /migrate request for tenant {}", tenantId);
        return true;
    }

    /**
     * Enable migration.
     * <p>
     * Migration is enabled by updating the FAILED migrate record to ABANDONED state.
     * </p>
     *
     * @param tenantId tenant id
     * @return true if migration was re-enabled, false otherwise
     */
    public boolean enable(final String tenantId) {
        // set tenant in this thread context (throws if tenant id is unknown)
        checkAndSetTenant(tenantId);

        if (jobRunner.isEnabled()) {
            logger.info("Ignoring /migrate/enable request since migrate is already enabled for tenant {}", tenantId);
            return false;
        }

        final Migrate migrate = repository.findLast();
        if (migrate.getStatus() != MigrateStatus.FAILED) {
            logger.warn("Ignoring /migrate/enable request since last migrate is not FAILED for tenant {}", tenantId);
            return false;
        }

        logger.info("Marking migrate {} as ABANDONED for tenant {}", migrate.getId(), tenantId);
        repository.updateStatusById(migrate.getId(), MigrateStatus.ABANDONED);
        jobRunner.enable(true);
        return true;
    }

    private void checkAndSetTenant(final String tenantId) {
        final TenantProperties.Tenant tenant = tenantProperties.findTenantById(tenantId).orElseThrow(() ->
                new IllegalArgumentException("unknown tenant id " + tenantId + " (they are case sensitive)")
        );
        TenantContextHolder.setTenantId(tenant.getId());
    }
}
