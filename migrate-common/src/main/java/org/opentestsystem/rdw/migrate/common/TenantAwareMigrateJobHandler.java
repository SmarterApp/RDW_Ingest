package org.opentestsystem.rdw.migrate.common;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.MessageBuilder;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;
import org.opentestsystem.rdw.migrate.common.repository.WarehouseImportRepository;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;

public class TenantAwareMigrateJobHandler {
    private static final Logger logger = LoggerFactory.getLogger(MigrateJobRunner.class);

    private static final String TenantId = "TenantId";

    private final MigrateRepository migrateRepository;
    private final WarehouseImportRepository importRepository;
    private final int batchSize;
    private final JobLauncher jobLauncher;
    private final Job job;
    private boolean running = true;
    private final TenantIdResolver tenantIdResolver;
    private final Map<String, Boolean> tenantDisabled = new ConcurrentHashMap<>();
    private final MigrateJobProcessor migrateJobProcessor;

    /**
     * @param migrateRepository migrate repository
     * @param importRepository used to query for next job params
     * @param tenantIdResolver used when enabling migrate for a tenant
     * @param jobLauncher job launcher
     * @param job job
     * @param batchSize controls amount of work done in a single migrate jobs
     * @param migrateJobProcessor channels for the queue
     */
    public TenantAwareMigrateJobHandler(final MigrateRepository migrateRepository,
                                        final WarehouseImportRepository importRepository,
                                        final TenantIdResolver tenantIdResolver,
                                        final JobLauncher jobLauncher,
                                        final Job job,
                                        @Value("${migrate.batch.size}") final int batchSize,
                                        final MigrateJobProcessor migrateJobProcessor) {
        this.migrateRepository = migrateRepository;
        this.importRepository = importRepository;
        this.tenantIdResolver = tenantIdResolver;
        this.jobLauncher = jobLauncher;
        this.job = job;
        this.batchSize = batchSize;
        this.migrateJobProcessor = migrateJobProcessor;
    }


    @StreamListener(MigrateJobProcessor.MigrateJobInput)
    public void migrateJobDispatcher(final Message<Map<String,Object>> message) {
        final Map<String,Object> properties = message.getPayload();
        runAsync(properties);
    }

    // Queue the job to force serialized processing
    void run(final String tenantId) {
        final Map<String,Object> properties = getProperties(tenantId);
        logger.warn("Queuing migrate job: " + properties);

        final Message<Map<String,Object>> message = MessageBuilder.withPayload(properties).build();
        migrateJobProcessor.migrateJobOutput().send(message);
    }

    private void runAsync(Map<String,Object> properties) {
        // Sanity check.
        if (properties.get(TenantId) == null) {
            logger.error("migrate reporting job failure [no tenant set in queued job]");
            return;
        }

        try {
            TenantContextHolder.setTenantId((String)properties.get(TenantId));
            logger.warn("Processing migrate job: " + properties);

            Optional<MigrateJobParameters> jobParameters;
            while (checkRunJobs() && (jobParameters = getNextJobParams()).isPresent()) {
                jobLauncher.run(job, jobParameters.get());

                // don't continue if the actual size is less than the limit
                // this allows one run with less than batch-size, to catch the leftovers
                // (otherwise it keeps scraping the last few records, effectively defeating the batching)
                if (jobParameters.get().getBatchSize() < batchSize) {
                    break;
                }
            }
        } catch (final Exception e) {
            logger.error("migrate reporting job failure [" + e.getMessage() + "]");
        } finally {
            TenantContextHolder.clear();
        }

        logger.warn("Completed processing migrate job: " + properties);
    }

    private Map<String,Object> getProperties(final String tenantId) {
        final Map<String,Object> properties = new HashMap<>();
        properties.put(TenantId, tenantId);

        return properties;
    }

    void setRunning(final boolean running) {
        this.running = running;
    }

    boolean isRunning() {
        return running;
    }

    void setEnabled(final boolean flag) {
        final String tenantId = getTenantId();
        final boolean enabled = isEnabled();
        if (flag && !enabled) {
            logger.info("enabling scheduled migrate jobs for tenant {}", tenantId);
            tenantDisabled.put(tenantId, false);
        } else if (!flag && enabled) {
            logger.warn("disabling scheduled migrate jobs for tenant {}; manually fix last migrate status to setEnabled", tenantId);
            tenantDisabled.put(tenantId, true);
        }
    }

    boolean isEnabled() {
        return !tenantDisabled.computeIfAbsent(getTenantId(), k -> false);
    }

    private String getTenantId() {
        return tenantIdResolver.getTenantId().orElseThrow(() ->
                new IllegalStateException("no migrate tenant set"));
    }

    private boolean checkRunJobs() {
        if (!isRunning()) return false;

        final MigrateStatus status = migrateRepository.findLastStatus();
        setEnabled(status == null || status == MigrateStatus.COMPLETED || status == MigrateStatus.ABANDONED);

        return isRunning() && isEnabled();
    }

    private Optional<MigrateJobParameters> getNextJobParams() {
        final MigrateImportValues migrateImportValues = importRepository
                .getMigrateImportValues(migrateRepository.findLastMigratedAt(), batchSize);

        // no work to do ...
        if (migrateImportValues.getImportCount() == 0) {
            return Optional.empty();
        }

        return Optional.of(new MigrateJobParameters(migrateImportValues));
    }
}
