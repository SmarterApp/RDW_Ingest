package org.opentestsystem.rdw.migrate.common;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.listener.JobExecutionListenerSupport;

import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;

import static org.springframework.batch.core.ExitStatus.COMPLETED;
import static org.springframework.batch.core.ExitStatus.FAILED;

/**
 * This job listener is responsible for creating a migrate record and setting its status.
 */
public class MigrateJobExecutionListener extends JobExecutionListenerSupport {

    private static final Logger logger = LoggerFactory.getLogger(MigrateJobExecutionListener.class);
    private final MigrateRepository reportingMigrateRepository;
    private final TenantIdResolver tenantIdResolver;

    public MigrateJobExecutionListener(final MigrateRepository reportingMigrateRepository,
                                       final TenantIdResolver tenantIdResolver) {
        this.reportingMigrateRepository = reportingMigrateRepository;
        this.tenantIdResolver = tenantIdResolver;
    }

    @Override
    public void beforeJob(final JobExecution jobExecution) {
        final MigrateJobParameters jobParameters = (MigrateJobParameters) jobExecution.getJobParameters();
        jobExecution.getExecutionContext().put(ExecutionParams.migrate, reportingMigrateRepository.create(
                Migrate.builder()
                        .jobId(jobExecution.getJobId())
                        .status(MigrateStatus.STARTED)
                        .firstAt(jobParameters.getFirstAt())
                        .lastAt(jobParameters.getLastAt())
                        .migrateCodes(jobParameters.getMigrateCodes())
                        .migrateEmbargo(jobParameters.getMigrateEmbargo())
                        .size(jobParameters.getBatchSize())
                        .build()));

        logger.info("Migrate Job id {} for tenant {} is launched",
                jobExecution.getJobId(), tenantIdResolver.getTenantId().orElse("??"));
    }

    @Override
    public void afterJob(final JobExecution jobExecution) {
        //the job execution exit status has an exit code and description, we are checking just the exist code.
        final String exitCode = jobExecution.getExitStatus().getExitCode();
        MigrateStatus status =
                exitCode.equals(COMPLETED.getExitCode()) ? MigrateStatus.COMPLETED :
                exitCode.equals(FAILED.getExitCode()) ? MigrateStatus.FAILED : MigrateStatus.ABANDONED;

        // quick fix for periodic migration problem that can occur during tenant creation and deletion
        if (status == MigrateStatus.FAILED) {
            final ExitStatus exitStatus = jobExecution.getExitStatus();
            if (StringUtils.contains(exitStatus.getExitDescription(), "No value for key")) {
                status = MigrateStatus.ABANDONED;
            }
        }

        reportingMigrateRepository.updateStatusById(((Migrate) jobExecution.getExecutionContext().get(ExecutionParams.migrate)).getId(), status);
        logger.info("Migrate Job id {} for tenant {} is complete with status [{}] and migrate status {}",
                jobExecution.getJobId(), tenantIdResolver.getTenantId().orElse("??"), jobExecution.getExitStatus(), status);
    }
}
