package org.opentestsystem.rdw.migrate.common;

import org.springframework.boot.actuate.endpoint.Endpoint;
import org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Component
@ConfigurationProperties(prefix = "endpoints.migrate")
public class MigrateMvcEndpoint extends EndpointMvcAdapter {

    private final MigrateEndpoint delegate;

    /**
     * @param delegate the underlying {@link Endpoint} to adapt.
     */
    public MigrateMvcEndpoint(final MigrateEndpoint delegate) {
        super(delegate);
        this.delegate = delegate;
    }

    @Override
    @GetMapping(produces = MediaType.TEXT_PLAIN_VALUE)
    public Object invoke() {
        return super.invoke();
    }

    @PostMapping()
    @ResponseBody
    public Object migrate(@RequestParam(required = false) final String tenantId) {
        if (!getDelegate().isEnabled()) {
            // Shouldn't happen - MVC endpoint shouldn't be registered when delegate's disabled
            return getDisabledResponse();
        }
        return delegate.migrate(tenantId) + "\n";
    }

    @PostMapping(path = "/enable")
    @ResponseBody
    public Object enable(@RequestParam final String tenantId) {
        if (!getDelegate().isEnabled()) {
            // Shouldn't happen - MVC endpoint shouldn't be registered when delegate's disabled
            return getDisabledResponse();
        }
        return delegate.enable(tenantId) + "\n";
    }
}
