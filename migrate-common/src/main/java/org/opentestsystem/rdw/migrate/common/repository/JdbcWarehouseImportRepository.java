package org.opentestsystem.rdw.migrate.common.repository;

import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.migrate.common.MigrateImportValues;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.List;

@Repository
class JdbcWarehouseImportRepository implements WarehouseImportRepository {

    @Value("${sql.warehouse.import.findAllImportStatus}")
    private String sqlFindAllImportStatus;

    @Value("${sql.warehouse.import.findImportState}")
    private String sqlFindImportState;

    @Value("${sql.warehouse.import.existsImportContentInTimeRange}")
    private String sqlExistsImportContentInTimeRange;

    private final NamedParameterJdbcTemplate warehouseJdbcTemplate;

    @Autowired
    public JdbcWarehouseImportRepository(final NamedParameterJdbcTemplate warehouseJdbcTemplate) {
        this.warehouseJdbcTemplate = warehouseJdbcTemplate;
    }

    @Override
    public MigrateImportValues getMigrateImportValues(final Instant prev, final int batchSize) {
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("prev", prev == null ? null : Timestamp.from(prev))
                .addValue("size", batchSize);
        return warehouseJdbcTemplate.queryForObject(sqlFindImportState, parameterSource, new RowMapper<MigrateImportValues>() {
            @Override
            public MigrateImportValues mapRow(final ResultSet rs, final int rowNum) throws SQLException {
                final Instant start = getInstantNullable(rs, "start");
                final Instant stop = getInstantNullable(rs, "stop");
                final int importCount = rs.getInt("cnt");
                final boolean migrateCodes = importCount > 0
                        && existsImportContentInTimeRange(ImportContent.CODES, start, stop);

                // Embargo settings need to be migrated if they've changed (obviously) but also if
                // organizations are being migrated because new schools need their embargo flag set.
                // This is a pretty big hammer but organization import is infrequent and the embargo
                // migrate is idempotent and quick. If it becomes a problem we could refine the rules.
                final boolean migrateEmbargo = importCount > 0
                        && (existsImportContentInTimeRange(ImportContent.EMBARGO, start, stop)
                         || existsImportContentInTimeRange(ImportContent.ORGANIZATION, start, stop));

                return MigrateImportValues.builder()
                        .firstAt(start)
                        .lastAt(stop)
                        .importCount(importCount)
                        .migrateCodes(migrateCodes)
                        .migrateEmbargo(migrateEmbargo)
                        .build();
            }

            private Instant getInstantNullable(final ResultSet rs, final String column) throws SQLException {
                final Timestamp value = rs.getTimestamp(column);
                return rs.wasNull() ? null : value.toInstant();
            }
        });
    }

    private boolean existsImportContentInTimeRange(final ImportContent content, final Instant firstAt, final Instant lastAt) {
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("content", content.getValue())
                .addValue("first_at", Timestamp.from(firstAt))
                .addValue("last_at", Timestamp.from(lastAt));

        return !warehouseJdbcTemplate.queryForList(sqlExistsImportContentInTimeRange, parameterSource, Integer.class).isEmpty();
    }

    @Override
    public List<ImportStatus> findAllImportStatus() {
        return warehouseJdbcTemplate.query(sqlFindAllImportStatus, (rs, rowNum) -> ImportStatus.valueOf(rs.getString("name")));
    }
}
