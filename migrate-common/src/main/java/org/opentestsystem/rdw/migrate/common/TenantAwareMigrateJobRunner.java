package org.opentestsystem.rdw.migrate.common;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.launch.JobLauncher;

import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;
import org.opentestsystem.rdw.migrate.common.repository.WarehouseImportRepository;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;

public class TenantAwareMigrateJobRunner extends MigrateJobRunner implements TenantAwareMigrateLifecycle {

    private final TenantProperties tenantProperties;

    public TenantAwareMigrateJobRunner(final MigrateRepository migrateRepository,
                                       final WarehouseImportRepository importRepository,
                                       final TenantIdResolver tenantIdResolver,
                                       final JobLauncher jobLauncher,
                                       final Job job,
                                       final int batchSize,
                                       final TenantProperties tenantProperties) {
        // NOTE: because of the thread-based tenant handling, the jobLauncher MUST use a synchronous executor
        super(migrateRepository, importRepository, tenantIdResolver, jobLauncher, job, batchSize);
        this.tenantProperties = tenantProperties;
        if (tenantProperties.getTenants().isEmpty()) {
            logger.warn("No tenants found, no migration jobs will be run (this is probably a configuration error)");
        }
    }

    @Override
    public void run() {
        // run the migration for every known tenant
        for (final Tenant tenant : tenantProperties.getTenants().values()) {
            run(tenant.getId());
        }
    }


    @Override
    public void run(final String tenantId) {
        TenantContextHolder.setTenantId(tenantId);
        super.run();
        TenantContextHolder.clear();
    }
}
