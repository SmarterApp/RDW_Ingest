package org.opentestsystem.rdw.migrate.common;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;

/**
 * This adds handling of all tenants to the base migrate job runner.
 * It also provides the single-tenant run hook.
 */
public class TenantAwareMigrateJobRunner implements TenantAwareMigrateLifecycle {

    protected static final Logger logger = LoggerFactory.getLogger(TenantAwareMigrateJobHandler.class);

    private final TenantProperties tenantProperties;
    private final TenantAwareMigrateJobHandler handler;

    public TenantAwareMigrateJobRunner(final TenantProperties tenantProperties,
                                       final TenantAwareMigrateJobHandler tenantAwareMigrateJobHandler) {
        this.tenantProperties = tenantProperties;
        if (tenantProperties.getTenants().isEmpty()) {
            logger.warn("No tenants found, no migration jobs will be run (this is probably a configuration error)");
        }
        this.handler = tenantAwareMigrateJobHandler;
    }

    @Override
    public void run() {
        // run the migration for every known tenant
        for (final Tenant tenant : tenantProperties.getTenants().values()) {
            run(tenant.getId());
        }
    }

    @Override
    public void run(final String tenantId) {
        handler.run(tenantId);
    }

    @Override
    public void start() {
        if (!handler.isRunning()) {
            logger.info("resuming scheduled migrate jobs");
            handler.setRunning(true);
        }
    }

    @Override
    public void stop() {
        if (handler.isRunning()) {
            logger.info("pausing scheduled migrate jobs");
            handler.setRunning(false);
        }
    }

    @Override
    public boolean isRunning() {
        return handler.isRunning();
    }

    @Override
    public void enable(final boolean flag) {
        handler.setEnabled(flag);
    }

    @Override
    public boolean isEnabled() {
        return handler.isEnabled();
    }
}
