package org.opentestsystem.rdw.migrate.common;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Value;

import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;
import org.opentestsystem.rdw.migrate.common.repository.WarehouseImportRepository;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;

/**
 * Helper to run a migrate job.
 * <p>
 * It skips job execution while paused or disabled. It is paused using Spring's Lifecycle
 * start/stop (which can be set using the pause/resume actuator end-points). It is disabled
 * if there are any unresolved migrations in the database. An unresolved migration is any
 * that has a status of FAILED or STARTED. To enable, any such migrate records should be set
 * to ABANDONED with a message.
 * </p>
 * <p>
 * The job runner is tenant aware wrt to the enabled flag; it requires a tenant id resolver
 * and stores disabled state by tenant. Note that means that run(), enable(), isEnabled()
 * all depend on the current thread context.
 * </p>
 */
public abstract class MigrateJobRunner implements MigrateLifecycle {
    private static final Logger logger = LoggerFactory.getLogger(MigrateJobRunner.class);

    private final MigrateRepository migrateRepository;
    private final WarehouseImportRepository importRepository;
    private final int batchSize;
    private final JobLauncher jobLauncher;
    private final Job job;
    private boolean paused = false;
    private final TenantIdResolver tenantIdResolver;
    private final Map<String, Boolean> tenantDisabled = new ConcurrentHashMap<>();

    public MigrateJobRunner(final MigrateRepository migrateRepository,
                            final WarehouseImportRepository importRepository,
                            final TenantIdResolver tenantIdResolver,
                            final JobLauncher jobLauncher,
                            final Job job,
                            @Value("${migrate.batch.size}") final int batchSize) {
        this.migrateRepository = migrateRepository;
        this.importRepository = importRepository;
        this.tenantIdResolver = tenantIdResolver;
        this.jobLauncher = jobLauncher;
        this.job = job;
        this.batchSize = batchSize;
    }

    @Override
    public void run() {
        try {
            Optional<MigrateJobParameters> jobParameters;
            while (checkRunJobs() && (jobParameters = getNextJobParams()).isPresent()) {
                jobLauncher.run(job, jobParameters.get());

                // don't continue if the actual size is less than the limit
                // this allows one run with less than batch-size, to catch the leftovers
                // (otherwise it keeps scraping the last few records, effectively defeating the batching)
                if (jobParameters.get().getBatchSize() < batchSize) {
                    break;
                }
            }
        } catch (final Exception e) {
            logger.error("migrate reporting job failure [" + e.getMessage() + "]");
        }
    }

    @Override
    public void start() {
        if (paused) {
            logger.info("resuming scheduled migrate jobs");
            paused = false;
        }
    }

    @Override
    public void stop() {
        if (!paused) {
            logger.info("pausing scheduled migrate jobs");
            paused = true;
        }
    }

    @Override
    public boolean isRunning() {
        return !paused;
    }

    @Override
    public void enable(final boolean flag) {
        final String tenantId = getTenantId();
        final boolean disabled = tenantDisabled.computeIfAbsent(tenantId, k -> false);
        if (flag && disabled) {
            logger.info("enabling scheduled migrate jobs for tenant {}", tenantId);
            tenantDisabled.put(tenantId, false);
        } else if (!flag && !disabled) {
            logger.warn("disabling scheduled migrate jobs for tenant {}; manually fix last migrate status to enable", tenantId);
            tenantDisabled.put(tenantId, true);
        }
    }

    @Override
    public boolean isEnabled() {
        return !tenantDisabled.computeIfAbsent(getTenantId(), k -> false);
    }

    private String getTenantId() {
        return tenantIdResolver.getTenantId().orElseThrow(() ->
                new IllegalStateException("no migrate tenant set"));
    }

    private boolean checkRunJobs() {
        if (!isRunning()) return false;

        final MigrateStatus status = migrateRepository.findLastStatus();
        enable(status == null || status == MigrateStatus.COMPLETED || status == MigrateStatus.ABANDONED);

        return isRunning() && isEnabled();
    }

    private Optional<MigrateJobParameters> getNextJobParams() {
        final MigrateImportValues migrateImportValues = importRepository
                .getMigrateImportValues(migrateRepository.findLastMigratedAt(), batchSize);

        // no work to do ...
        if (migrateImportValues.getImportCount() == 0) {
            return Optional.empty();
        }

        return Optional.of(new MigrateJobParameters(migrateImportValues));
    }
}
