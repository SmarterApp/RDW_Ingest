package org.opentestsystem.rdw.ingest.validator;

import org.apache.commons.cli.CommandLine;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.ExpectedSystemExit;
import org.junit.contrib.java.lang.system.SystemOutRule;

import org.opentestsystem.rdw.ingest.validator.service.MessageSink;
import org.opentestsystem.rdw.ingest.validator.service.Validator;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;

public class ValidatorApplicationTest {

    private ValidatorApplication application;
    private Validator validator;

    @Rule
    public final SystemOutRule outRule = new SystemOutRule().enableLog();

    @Rule
    public final ExpectedSystemExit exitRule = ExpectedSystemExit.none();

    @Before
    public void createApplication() {
        validator = mock(Validator.class);
        application = new ValidatorApplication(validator);
    }

    @Test
    public void itShouldParseSimpleArgs() {
        final CommandLine commandLine = application.parseArgs("-s math.xml -t math.2018.csv".split(" "));
        assertThat(commandLine.getOptionValue('s')).isEqualTo("math.xml");
        assertThat(commandLine.getOptionValue('t')).isEqualTo("math.2018.csv");
    }

    @Test
    public void itShouldParseRepeatedOptions() {
        final CommandLine commandLine = application.parseArgs("-s math.xml -s ela.xml -t math.2018.csv -t ela.2018.csv".split(" "));
        assertThat(commandLine.getOptionValues('s')).containsExactly("math.xml", "ela.xml");
        assertThat(commandLine.getOptionValues('t')).containsExactly("math.2018.csv", "ela.2018.csv");
    }

    @Test
    public void itShouldExitForUnknownOption() {
        exitRule.expectSystemExitWithStatus(1);
        application.parseArgs("-s math.xml -a ela.2018.csv".split(" "));
    }

    @Test
    public void itShouldExitIfNoOptions() {
        exitRule.expectSystemExitWithStatus(1);
        application.parseArgs("".split(" "));
    }

    @Test
    public void itShouldOutputValidatorMessages() {
        doAnswer(invocation -> {
            ((MessageSink)invocation.getArgument(0)).error("gosh darn");
            return null;
        }).when(validator).validate(any(MessageSink.class), anyList(), anyList());
        application.run("-s math.xml".split(" "));
        assertThat(outRule.getLog()).contains("gosh darn");
    }
}
