package org.opentestsystem.rdw.ingest.validator.service;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import org.opentestsystem.rdw.common.model.assessment.Assessment;
import org.opentestsystem.rdw.common.model.assessment.AssessmentSerializationService;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.common.model.subject.SubjectSerializationService;

public class DefaultValidator implements Validator {

    private final SubjectSerializationService subjectSerializationService;
    private final AssessmentSerializationService assessmentSerializationService;

    /**
     * @param subjectSerializationService subject reader
     * @param assessmentSerializationService assessment reader
     */
    public DefaultValidator(final SubjectSerializationService subjectSerializationService,
                            final AssessmentSerializationService assessmentSerializationService) {
        this.subjectSerializationService = subjectSerializationService;
        this.assessmentSerializationService = assessmentSerializationService;
    }

    @Override
    public void validate(final MessageSink messageSink, final List<String> subjectFiles, final List<String> assessmentFiles) {
        final List<Subject> subjects = loadSubjects(messageSink, subjectFiles);
        final List<Assessment> assessments = loadAssessments(messageSink, assessmentFiles);

        SubjectChecker.checkSubjects(messageSink, subjects);
        AssessmentChecker.checkAssessments(messageSink, assessments, subjects);
    }

    private List<Subject> loadSubjects(final MessageSink messageSink, final List<String> files) {
        final List<Subject> subjects = new ArrayList<>();
        for (final String file : files) {
            try (final InputStream is = new FileInputStream(file)) {
                subjects.add(subjectSerializationService.parseSubject(is));
            } catch (final FileNotFoundException e) {
                messageSink.error("file not found: {0}", file);
            } catch (final IOException | IllegalArgumentException e) {
                messageSink.error("problem reading file: " + e.getMessage());
            } catch (final Exception e) {
                messageSink.error(e.getMessage());
            }
        }
        return subjects;
    }

    private List<Assessment> loadAssessments(final MessageSink messageSink, final List<String> files) {
        final List<Assessment> assessments = new ArrayList<>();
        for (final String file : files) {
            try (final InputStream is = new FileInputStream(file)) {
                assessments.addAll(assessmentSerializationService.parse(is));
            } catch (final FileNotFoundException e) {
                messageSink.error("file not found: {0}", file);
            } catch (final IOException e) {
                messageSink.error("problem reading file: " + e.getMessage());
            } catch (final Exception e) {
                messageSink.error(e.getMessage());
            }
        }
        return assessments;
    }
}
