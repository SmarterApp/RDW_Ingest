package org.opentestsystem.rdw.ingest.validator;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

import java.util.Collections;
import java.util.List;

import org.opentestsystem.rdw.ingest.validator.service.MessageCollector;
import org.opentestsystem.rdw.ingest.validator.service.Validator;

import static com.google.common.collect.Lists.newArrayList;

/**
 * This application processes input files and produces validation output.
 * It is expecting to run from the command-line: it outputs to stdout and calls exit(n) for errors.
 */
public class ValidatorApplication {

    /**
     * Entry point.
     *
     * @param args application command line arguments
     */
    public static void main(final String[] args) {
        new ValidatorApplication(ApplicationConfiguration.validator()).run(args);
    }

    private final Validator validator;

    ValidatorApplication(final Validator validator) {
        this.validator = validator;
    }

    /**
     * Run the application, processing subject and test package files.
     *
     * @param args application command line arguments
     */
    void run(final String[] args) {
        final CommandLine commandLine = parseArgs(args);
        final List<String> subjectFiles = commandLine.hasOption('s')? newArrayList(commandLine.getOptionValues('s'))
                : Collections.emptyList();
        final List<String> assessmentFiles = commandLine.hasOption('t') ? newArrayList(commandLine.getOptionValues('t'))
                : Collections.emptyList();

        final MessageCollector messageCollector = new MessageCollector();
        validator.validate(messageCollector, subjectFiles, assessmentFiles);
        for (final String message : messageCollector.getMessages()) {
            System.out.println(message);
        }
    }

    CommandLine parseArgs(final String[] args) {
        final Options options = getOptions();
        final CommandLineParser parser = new DefaultParser();
        try {
            final CommandLine commandLine = parser.parse(options, args);
            if (!commandLine.hasOption('s') && !commandLine.hasOption('t')) {
                throw new ParseException("Specify at least one subject (-s) or test package (-t) file");
            }
            return commandLine;
        } catch (final ParseException e) {
            System.err.println(e.getMessage());

            final String header = "Validator for RDW subject and test package files";
            final String footer = "You may repeat options multiple times";
            final HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp("Validator", header, options, footer, false);

            System.exit(1);
            return null;
        }
    }

    private Options getOptions() {
        final Options options = new Options();
        options.addOption("s", "subject", true, "subject file");
        options.addOption("t", "test-package", true, "test package (tabulator) file");
        return options;
    }
}
