package org.opentestsystem.rdw.script;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;

import static java.util.Collections.singletonList;
import static org.hamcrest.CoreMatchers.hasItem;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

public class PipelineDefinitionJsonTest {
    private PipelineDefinition pipelineDefinition;
    private VersionedResource nodeDefinition;
    private final ObjectMapper objectMapper = new ObjectMapper()
            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);


    @Before
    public void setUp() {
        nodeDefinition = new VersionedResource("exam_script", "1.0", ResourceType.USER_NODE);

        pipelineDefinition = PipelineDefinition.builder()
                .name("Exam Pipeline")
                .version("1.0")
                .nodeDefinitions(singletonList(nodeDefinition))
                .build();
    }

    @Test
    public void marshallUnmarshallTest() throws Exception {
        final String json = objectMapper.writeValueAsString(pipelineDefinition);

        final PipelineDefinition.PipelineDefinitionBuilder builder =
                objectMapper.readValue(json, PipelineDefinition.PipelineDefinitionBuilder.class);

        final PipelineDefinition newPipelineDefinition = builder.build();

        assertThat(newPipelineDefinition.getName(), is(pipelineDefinition.getName()));
        assertThat(newPipelineDefinition.getVersion(), is(pipelineDefinition.getVersion()));
        assertThat(newPipelineDefinition.getNodeDefinitions().size(), is(1));
        assertThat(newPipelineDefinition.getNodeDefinitions(), hasItem(nodeDefinition));
    }
}