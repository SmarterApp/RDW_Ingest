package org.opentestsystem.rdw.ingest.script;

import org.apache.tools.ant.util.FileUtils;
import org.hamcrest.CoreMatchers;
import org.hamcrest.Matcher;
import org.hamcrest.Matchers;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.io.InputStreamReader;
import java.io.Reader;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.ImportException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.CoreMatchers.allOf;
import static org.hamcrest.CoreMatchers.containsString;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ValidatorScriptTest {
    private static final String SAMPLE_INPUT = "Hello, world!";

    @Mock
    private ScriptSource scriptSource;

    private ScriptCompiler compiler;

    private ScriptPipelineConfiguration configuration = new ScriptPipelineConfiguration();

    @Rule
    public ExpectedException exception = ExpectedException.none();

    @Before
    public void setup() throws Exception {
        when(scriptSource.loadScriptBaseClass()).thenReturn(
                loadFromResourceFile("/scripts/DSLScriptBase.groovy"));
        compiler = new ScriptCompiler(configuration.groovyClassLoader(scriptSource));
    }

    @Test
    public void itShouldReturnOriginalInputIfNoErrors() {
        final String script = "checkValid";
        assertThat(runScript(script, SAMPLE_INPUT)).isEqualTo(SAMPLE_INPUT);
    }

    @Test
    public void itShouldThrowErrorsWithDefaultStatus() {
        exception.expect(ImportException.class);
        exception.expectMessage(allOf(
                containsString("element"),
                containsString("value"),
                containsString("error")));
        exception.expect(statusMatches(ImportStatus.BAD_DATA));

        final String script = "addError('element','value','error');checkValid";
        runScript(script, "any input");
    }

    @Test
    public void itShouldThrowErrorsWithRequestedStatus() {
        exception.expect(ImportException.class);
        exception.expectMessage(allOf(
                containsString("element"),
                containsString("value"),
                containsString("error")));
        exception.expect(statusMatches(ImportStatus.UNKNOWN_SCHOOL));

        final String script = "addError('element','value','error'); checkValid 'UNKNOWN_SCHOOL'";
        runScript(script, "any input");
    }

    private Matcher<Object> statusMatches(ImportStatus status) {
        return Matchers.hasProperty("status", CoreMatchers.is(status));
    }

    private String loadFromResourceFile(final String name) throws Exception {
        Reader scriptReader = new InputStreamReader(this.getClass().getResourceAsStream(name));
        return FileUtils.readFully(scriptReader);
    }

    private Object runScript(final String script, final Object input) {
        try {
            Class<? extends PipelineScript> scriptClass = compiler.compile(script);
            return scriptClass.getConstructor().newInstance().bindInput(input).run();
        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
