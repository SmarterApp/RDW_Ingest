package org.opentestsystem.rdw.ingest.script;

import org.junit.Before;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

public class DefaultScriptSourceTest {

    private DefaultScriptSource scriptSource;

    @Before
    public void createScriptSource() {
        scriptSource = new DefaultScriptSource();
    }

    @Test
    public void itShouldLoadTheScriptBase() {
        assertThat(scriptSource.loadScriptBaseClass())
                .contains("DSLScriptBase")
                .contains("PipelineScript");
    }

    @Test
    public void itShouldLoadPipelineDefinition() {
        final PipelineDefinition pipelineDefinition = scriptSource.loadPipelineDefinition("test", "23");
        assertThat(pipelineDefinition.getName()).isEqualTo("test");
        assertThat(pipelineDefinition.getVersion()).isEqualTo("23");
    }

    @Test
    public void loadScriptIsStubbedOut() {
        final VersionedResource node = mock(VersionedResource.class);
        assertThat(scriptSource.loadScript(node).getCode()).isEqualTo("return 0");
    }
}
