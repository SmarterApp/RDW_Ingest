package org.opentestsystem.rdw.ingest.script;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.Reader;
import java.io.StringReader;
import java.util.Collections;
import java.util.Map;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;


public class ScriptDefinitionTest {

    private ScriptDefinition scriptDefinition;
    private Reader input;

    @Before
    public void setup() {
        Map<String,Object> configuration = Collections.singletonMap("test", "value");
        scriptDefinition = ScriptDefinition.builder()
                .name("test")
                .version("1.0")
                .type(ResourceType.USER_NODE)
                .compiledScript(MockScript.class)
                .configuration(configuration)
                .build();

        input = new StringReader("Hello");
    }

    @After
    public void tearDown() throws Exception {
        input.close();
    }

    @Test
    public void itShouldBindInputToScript() throws Exception {
        PipelineScript script = scriptDefinition.getInstance(input);
        assertThat(script.getProperty("input"), is(input));
    }

    @Test
    public void itShouldBindConfigToScriptProperties() throws Exception {
        PipelineScript script = scriptDefinition.getInstance(null);
        assertThat(script.getProperty("test"), is("value"));
    }

    @Test
    public void itShouldBindExtraPropertiesToScriptProperties() throws Exception {
        PipelineScript script = scriptDefinition.getInstance(null,
                Collections.singletonMap("answer", 42));

        assertThat(script.getProperty("test"), is("value"));
        assertThat(script.getProperty("answer"), is(42));
    }
}

class MockScript extends PipelineScript {
    public MockScript() {
    }

    @Override
    public PipelineScript enableXmlExtensions() {
        return this;
    }

    @Override
    public Object run() {
        return "Test Results";
    }
}
