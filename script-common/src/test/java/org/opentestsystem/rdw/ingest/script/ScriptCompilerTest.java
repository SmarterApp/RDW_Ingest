package org.opentestsystem.rdw.ingest.script;

import groovy.lang.Script;
import org.apache.commons.io.IOUtils;
import org.codehaus.groovy.control.CompilationFailedException;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.when;


@RunWith(MockitoJUnitRunner.class)
public class ScriptCompilerTest {
    @Mock
    private ScriptSource scriptSource;

    private ScriptCompiler compiler;

    private final ScriptPipelineConfiguration configuration = new ScriptPipelineConfiguration();

    @Rule
    public ExpectedException exception = ExpectedException.none();

    @Before
    public void setup() throws Exception {
        final String base = IOUtils.toString(this.getClass().getResourceAsStream("/scripts/DSLScriptBase.groovy"), UTF_8);
        when(scriptSource.loadScriptBaseClass()).thenReturn(base);

        compiler = new ScriptCompiler(configuration.groovyClassLoader(scriptSource));
    }

    @Test
    public void itShouldCompileTheScript() {
        compiler.compile("return 1");
    }

    @Test
    public void itShouldCompileIntoRunnableCode() throws Exception{
        final Class<? extends Script> scriptClass = compiler.compile("return 'Hello'");

        assertThat(scriptClass.getConstructor().newInstance().run(), is("Hello"));
    }

    @Test
    public void testCompilerError() {
        exception.expect(CompilationFailedException.class);
        exception.expectMessage(containsString("expecting '''"));

        compiler.compile("println 'hello'; return 'Unterminated string  ");
    }

    @Test
    public void testRuntimeError() throws Exception {
        exception.expect(RuntimeException.class);

        final Class<? extends Script> scriptClass = compiler.compile("return 1 / 0");
        scriptClass.getConstructor().newInstance().run();
    }

    @Test
    public void testValidDslEnable() throws Exception {
        final Class<? extends PipelineScript> scriptClass = compiler.compile("enable 'xml'; outputXml");
        final String sampleXml = "<sample><field>1</field></sample>";
        scriptClass.newInstance().bindInput(sampleXml).run();
    }

    @Test
    public void testInvalidDslEnable() throws Exception {
        exception.expect(RuntimeException.class);
        exception.expectMessage(containsString("bogus type"));

        final Class<? extends PipelineScript> scriptClass = compiler.compile("enable 'bogus type'; return 'hello'");
        scriptClass.newInstance().run();
    }
}
