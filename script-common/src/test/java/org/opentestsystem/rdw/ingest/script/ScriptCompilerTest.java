package org.opentestsystem.rdw.ingest.script;

import groovy.lang.Script;
import org.apache.tools.ant.filters.StringInputStream;
import org.codehaus.groovy.control.CompilationFailedException;
import org.junit.Test;

import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertNotNull;
import static org.testng.Assert.fail;


/**
 * Created by Greg Charles on 2019-03-21.
 */
public class ScriptCompilerTest {

    private ScriptCompiler compiler;

    @Test
    public void getScriptClass() {
        compiler = new ScriptCompiler("return 1");

        assertNotNull(compiler.getScriptClass());
    }

    @Test
    public void getInstance() {
        compiler = new ScriptCompiler("return 'Hello ' + input.getText()");
        InputStream input = new StringInputStream("Test User");
        Script script = compiler.getInstance(input);
        assertThat(script.run(), is("Hello Test User"));
    }

    @Test
    public void getInstanceWithProperties() {
        compiler = new ScriptCompiler("return greeting + ' ' + title + ' ' + input.getText()");
        InputStream input = new StringInputStream("Test User");
        Map<String,Object> map = new HashMap<>();
        map.put("title", "Mr.");
        map.put("greeting", "Hello");

        Script script = compiler.getInstance(input, map);
        assertThat(script.run(), is("Hello Mr. Test User"));
    }

    @Test
    public void testCompilerError() {
        try {
            compiler = new ScriptCompiler("pruntln 'hello'; return 'OK");
            fail("Expecting compile error");
        } catch (CompilationFailedException cfe) {
            assertThat(cfe.getMessage(), containsString("pruntln"));
        }
    }

    @Test
    public void testRuntimeError() {
        try {
            compiler = new ScriptCompiler("return 1 / 0");
            Script script = compiler.getInstance(null);
            script.run();
            fail("Expecting runtime exception");
        } catch (RuntimeException re) {
            assertThat(re.getMessage(), containsString("Division by zero"));
        }
    }
}