package org.opentestsystem.rdw.ingest.script;

import groovy.lang.Script;
import org.apache.tools.ant.util.FileUtils;
import org.codehaus.groovy.control.CompilationFailedException;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.io.InputStreamReader;
import java.io.Reader;

import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.Mockito.when;


@RunWith(MockitoJUnitRunner.class)
public class ScriptCompilerTest {
    @Mock
    private ScriptSource scriptSource;

    private ScriptCompiler compiler;

    private ScriptPipelineConfiguration configuration = new ScriptPipelineConfiguration();

    @Rule
    public ExpectedException exception = ExpectedException.none();

    @Before
    public void setup() throws Exception {
        when(scriptSource.loadScriptBaseClass()).thenReturn(loadFromResourceFile("/scripts/DSLScriptBase.groovy"));
        when(scriptSource.loadScriptBaseClass()).thenReturn(loadFromResourceFile("/scripts/DSLScriptBase.groovy"));

        compiler = new ScriptCompiler(configuration.groovyClassLoader(scriptSource));
    }

    @Test
    public void itShouldCompileTheScript() {
        compiler.compile("return 1");
    }

    @Test
    public void itShouldCompileIntoRunnableCode() throws Exception{
        final Class<? extends Script> scriptClass = compiler.compile("return 'Hello'");

        assertThat(scriptClass.getConstructor().newInstance().run(), is("Hello"));
    }

    @Test
    public void testCompilerError() {
        exception.expect(CompilationFailedException.class);
        exception.expectMessage(containsString("expecting '''"));

        compiler.compile("println 'hello'; return 'Unterminated string  ");
    }

    @Test
    public void testRuntimeError() throws Exception {
        exception.expect(RuntimeException.class);

        Class<? extends Script> scriptClass = compiler.compile("return 1 / 0");
        scriptClass.getConstructor().newInstance().run();
    }

    private String loadFromResourceFile(String name) throws Exception {
        Reader scriptReader = new InputStreamReader(this.getClass().getResourceAsStream(name));
        return FileUtils.readFully(scriptReader);
    }
}