package org.opentestsystem.rdw.ingest.script;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Arrays;
import java.util.Map;
import org.opentestsystem.rdw.ingest.script.impl.DefaultPipelineFactory;

import static java.util.Collections.emptyMap;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class PipelineFactoryTest {

    @Mock
    private ScriptSource scriptSource;

    @Mock
    private VersionedResource nodeDefinition;

    @Mock
    private ScriptCompiler scriptCompiler;

    @Mock
    private ConfigurationCompiler configurationCompiler;

    @Mock
    private PropertyResolver propertyResolver;

    @Rule
    public ExpectedException exception = ExpectedException.none();

    private PipelineFactory factory;

    @Before
    public void setUp() {
        final PipelineDefinition pipelineDefinition = PipelineDefinition.builder()
                .name("test")
                .version("1.0")
                .nodeDefinitions(Arrays.asList(nodeDefinition, nodeDefinition, nodeDefinition))
                .build();

        final String scriptCode = "return 'results'";
        final Map<String,String> scriptProperties = emptyMap();

        factory = new DefaultPipelineFactory(scriptSource, scriptCompiler, configurationCompiler, propertyResolver);

        when(scriptSource.loadPipelineDefinition(anyString(), anyString())).thenReturn(pipelineDefinition);
        when(scriptSource.loadScript(nodeDefinition)).thenReturn(new ScriptInfo(scriptCode, scriptProperties));
    }

    @Test
    public void testNameAndVersion() throws Exception {
        Pipeline pipeline = factory.getPipeline("test", "1.0");
        assertThat(pipeline.getPipelineDefinition().getName(), is("test"));
        assertThat(pipeline.getPipelineDefinition().getVersion(), is("1.0"));
    }

    @Test
    public void testInitialize() throws Exception {
        Pipeline pipeline = factory.getPipeline("test", "1.0");
        verify(scriptSource).loadPipelineDefinition(anyString(), anyString());
        verify(scriptSource, times(3)).loadScript(nodeDefinition);
        verify(scriptCompiler, times(3)).compile(anyString());
        verify(configurationCompiler, times(3)).compile(anyMap());

        assertThat(pipeline.getPipelineDefinition().getName(), is("test"));
        assertThat(pipeline.getPipelineDefinition().getVersion(), is("1.0"));
    }
}