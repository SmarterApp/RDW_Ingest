package org.opentestsystem.rdw.ingest.script;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.Arrays;
import java.util.Optional;

import static java.util.Collections.singletonList;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.ArgumentMatchers.anyMap;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class PipelineFactoryTest {

    @Mock
    private ScriptSource scriptSource;

    @Mock
    private ScriptDefinition scriptDefinition;

    @Mock
    private ScriptCompiler scriptCompiler;

    @Mock
    private ConfigurationCompiler configurationCompiler;

    @Rule
    public ExpectedException exception = ExpectedException.none();

    private PipelineFactory factory;

    @Before
    public void setUp() {
        factory = new PipelineFactory(scriptSource, scriptCompiler, configurationCompiler);
        when(scriptDefinition.getScriptCode()).thenReturn("return 'results'");

        when(scriptSource.loadPipelineDefinition(anyString(), anyString())).thenReturn(
                new PipelineDefinition("test", "1.0", Optional.empty(),
                        singletonList("xml"),
                        Arrays.asList(scriptDefinition, scriptDefinition, scriptDefinition)));
        when(scriptSource.loadScriptCodeAndConfig(scriptDefinition)).thenReturn(scriptDefinition);
        when(scriptSource.loadScriptCodeAndConfig(scriptDefinition)).thenReturn(scriptDefinition);
    }

    @Test
    public void testNameAndVersion() throws Exception {
        Pipeline pipeline = factory.initializePipeline("test", "1.0");
        assertThat(pipeline.getPipelineDefinition().getName(), is("test"));
        assertThat(pipeline.getPipelineDefinition().getVersion(), is("1.0"));
    }

    @Test
    public void testInitialize() throws Exception {
        Pipeline pipeline = factory.initializePipeline("test", "1.0");
        verify(scriptSource).loadPipelineDefinition(anyString(), anyString());
        verify(scriptSource, times(3)).loadScriptCodeAndConfig(scriptDefinition);
        verify(scriptCompiler, times(3)).compile(anyString());
        verify(configurationCompiler, times(3)).compile(anyMap());

        assertThat(pipeline.getPipelineDefinition().getName(), is("test"));
        assertThat(pipeline.getPipelineDefinition().getVersion(), is("1.0"));
    }
}