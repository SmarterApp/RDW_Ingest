package org.opentestsystem.rdw.ingest.script;

import com.google.common.collect.ImmutableList;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;

public class PipelineDefinitionTest {

    @Test
    public void itShouldReturnBuilderValues() {
        final VersionedResource node = mock(VersionedResource.class);
        final PipelineDefinition pipelineDefinition = PipelineDefinition.builder()
                .name("test")
                .version("23")
                .rollbackVersion("16")
                .options(ImmutableList.of("xml"))
                .nodeDefinitions(ImmutableList.of(node))
                .build();

        assertThat(pipelineDefinition.getType()).isEqualTo(ResourceType.PIPELINE);
        assertThat(pipelineDefinition.getName()).isEqualTo("test");
        assertThat(pipelineDefinition.getVersion()).isEqualTo("23");
        assertThat(pipelineDefinition.getRollbackVersion()).isEqualTo("16");
        assertThat(pipelineDefinition.getOptions()).containsExactly("xml");
        assertThat(pipelineDefinition.getNodeDefinitions()).containsExactly(node);
    }

    @Test
    public void builderHasADevFriendlyToString() {
        final PipelineDefinition.PipelineDefinitionBuilder builder = PipelineDefinition.builder()
                .name("test")
                .version("23")
                .rollbackVersion("16")
                .options(ImmutableList.of("xml"));

        assertThat(builder.toString()).contains("test").contains("23").contains("16").contains("xml");
    }

    @Test
    public void equalsIsBroken() {
        final VersionedResource node = mock(VersionedResource.class);
        final PipelineDefinition one = PipelineDefinition.builder()
                .name("test")
                .version("23")
                .rollbackVersion("16")
                .options(ImmutableList.of("xml"))
                .nodeDefinitions(ImmutableList.of(node))
                .build();
        final PipelineDefinition two = PipelineDefinition.builder()
                .name("test")
                .version("23")
                .rollbackVersion("19")
                .options(ImmutableList.of("csv"))
                .nodeDefinitions(ImmutableList.of(node))
                .build();

        assertThat(one.equals(two)).isTrue();
        assertThat(one.hashCode()).isEqualTo(two.hashCode());
    }
}
