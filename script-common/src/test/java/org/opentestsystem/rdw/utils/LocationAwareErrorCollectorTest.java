package org.opentestsystem.rdw.utils;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Before;
import org.junit.Test;

import org.opentestsystem.rdw.utils.DataElementError;
import org.opentestsystem.rdw.utils.LocationAwareErrorCollector;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.utils.LocationAwareErrorCollector.MaxMessageCount;

public class LocationAwareErrorCollectorTest {

    private LocationAwareErrorCollector context;

    @Before
    public void setup() {
        context = new LocationAwareErrorCollector();
    }

    @Test
    public void itShouldPushAndPopLocationsAndBindMessagesToTheCurrentLocation() {
        context.push("Parent_A");
        context.failure("Message A");

        context.push("Child_A");
        context.failure("Message A_A", "Value A_A");
        context.pop();

        context.push("Child_B");
        context.failure("Message A_B");
        context.pop();

        context.pop();
        context.push("Parent_B");
        context.failure("Message B");
        context.pop();

        assertThat(context.getMessages())
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnly(
                        new DataElementError("Parent_A", null, "Message A"),
                        new DataElementError("Parent_A:Child_A", "Value A_A", "Message A_A"),
                        new DataElementError("Parent_A:Child_B", null, "Message A_B"),
                        new DataElementError("Parent_B", null, "Message B")
                );
    }

    @Test
    public void itShouldBeValidIfThereAreNoErrors() {
        assertThat(context.isValid()).isTrue();
        context.failure("Failure message");
        assertThat(context.isValid()).isFalse();
    }

    @Test
    public void itShouldProvideMessagesAsJson() throws Exception {
        context.push("parent", "code");
        context.failure("failure 1");
        context.push("child");
        context.failure("failure 2", "value 2");

        final String json = context.toJson();
        final ArrayNode root = (ArrayNode) new ObjectMapper().readTree(json);
        assertThat(root).hasSize(2);

        final ObjectNode parentMessage = (ObjectNode) root.get(0);
        assertThat(parentMessage.get("elementName").asText()).isEqualTo("parent(code)");
        assertThat(parentMessage.get("error").asText()).isEqualTo("failure 1");

        final ObjectNode childMessage = (ObjectNode) root.get(1);
        assertThat(childMessage.get("elementName").asText()).isEqualTo("parent(code):child");
        assertThat(childMessage.get("error").asText()).isEqualTo("failure 2");
        assertThat(childMessage.get("value").asText()).isEqualTo("value 2");
    }

    @Test
    public void itShouldLimitTheJsonMessageCount() throws Exception {
        context.push("location");
        for (int i = 0; i < MaxMessageCount * 2; i++) {
            context.failure("Failure " + i);
        }

        final ArrayNode root = (ArrayNode) new ObjectMapper().readTree(context.toJson());
        assertThat(root).hasSize(MaxMessageCount + 1);
    }
}