package org.opentestsystem.rdw.ingest.script;

import org.codehaus.groovy.control.CompilationFailedException;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static java.util.stream.Collectors.toList;

/**
 * Factory class for creating a Pipeline by loading the pipeline definition and then using it to
 * load the script definitions for each node.
 */
public class PipelineFactory {
    // Interface for loading the script base class code, the pipeline definition, and the script code.
    private final ScriptSource scriptSource;

    // Compiler of Groovy scripts into Java byte code.
    private final ScriptCompiler scriptCompiler;

    // Compiler of configuration properties, which may involve loading database connections and
    // other manipulations
    private final ConfigurationCompiler configCompiler;

    public PipelineFactory(final ScriptSource scriptSource,
                           final ScriptCompiler scriptCompiler,
                           final ConfigurationCompiler configCompiler) {
        this.scriptSource = scriptSource;
        this.scriptCompiler = scriptCompiler;
        this.configCompiler = configCompiler;
    }

    public Pipeline initializePipeline(String pipelineName, String pipelineVersion) throws PipelineBuildExcepition {
        PipelineDefinition pipelineDefinition = scriptSource.loadPipelineDefinition(pipelineName, pipelineVersion);

        List<ScriptDefinition> scriptDefinitions =
                pipelineDefinition.getScriptDefinitions()
                .stream()
                .map(scriptSource::loadScriptCodeAndConfig)
                .collect(toList());

        Map<ScriptDefinition,Exception> buildErrors = new HashMap<>();

        // For each script, compile the code and configuration and report back any errors.
        for (ScriptDefinition scriptDefinition : scriptDefinitions) {
            try {
                scriptDefinition.setScriptClass(scriptCompiler.compile(scriptDefinition.getScriptCode()));
                scriptDefinition.setConfiguration(configCompiler.compile(scriptDefinition.getProperties()));
            } catch (CompilationFailedException cfe) {
                cfe.fillInStackTrace();
                buildErrors.put(scriptDefinition, cfe);
            }
        }

        if (!buildErrors.isEmpty()) {
            throw new PipelineBuildExcepition(
                    "Failed to build pipeline: " + pipelineName + " v. " + pipelineVersion,
                    buildErrors);
        }

        return new Pipeline(pipelineDefinition);
    }
}
