package org.opentestsystem.rdw.ingest.script.security;

import java.io.FilePermission;
import java.lang.reflect.ReflectPermission;
import java.security.AccessControlException;
import java.security.Permission;
import java.security.PermissionCollection;
import java.security.Permissions;
import java.security.SecurityPermission;
import java.util.PropertyPermission;
import java.util.logging.LoggingPermission;

/**
 *  Implementation of SandboxPermissions for running user pipeline scripts. The necessary permissions
 *  are hardcoded in, but this could be changed to load from configuration.
 */
public class DefaultSandboxPermissions implements SandboxPermissions {
    private final PermissionCollection whitelist;
    private final PermissionCollection blacklist;

    public DefaultSandboxPermissions() {

        // Define whitelist. Note: add new AllPermission() to make everything permitted except what
        // is on the blacklist.
        this.whitelist = new Permissions();

        // Minimal permissions needed to run Groovy scripts.
        whitelist.add(new PropertyPermission("line.separator", "read"));
        whitelist.add(new PropertyPermission("file.separator", "read"));
        whitelist.add(new PropertyPermission("path.separator", "read"));
        whitelist.add(new PropertyPermission("java.class.version", "read"));
        whitelist.add(new PropertyPermission("java.home", "read"));
        whitelist.add(new PropertyPermission("file.encoding", "read"));
        whitelist.add(new PropertyPermission("com.sun.security.*", "read"));
        whitelist.add(new LoggingPermission("control", null));
        whitelist.add(new ReflectPermission("suppressAccessChecks"));
        whitelist.add(new RuntimePermission("accessClassInPackage.sun.reflect"));
        whitelist.add(new RuntimePermission("accessDeclaredMembers"));
        whitelist.add(new RuntimePermission("createClassLoader"));
        whitelist.add(new RuntimePermission("getProtectionDomain"));
        whitelist.add(new SecurityPermission("getProperty.*"));
        whitelist.add(new FilePermission(System.getProperty("java.home") + "/lib/-", "read"));

        // This one is probably only used by JUnit tests in dev to load certain classes from incremental builds.
        // However, it should be safe to include everywhere.
        whitelist.add(new FilePermission(System.getProperty("user.home") + "/.gradle/caches/-", "read"));

        // Define blacklist. Note: leave this empty to allow everything permitted by the whitelist.
        this.blacklist = new Permissions();
    }

    @Override
    public void checkPermission(final Permission perm) throws AccessControlException {
        if (whitelist == null || !whitelist.implies(perm)) {
            throw new AccessControlException("access denied (not whitelisted) " + perm, perm);
        }

        if (blacklist != null && blacklist.implies(perm)) {
            throw new AccessControlException("access denied (blacklisted) " + perm, perm);
        }
    }
}
