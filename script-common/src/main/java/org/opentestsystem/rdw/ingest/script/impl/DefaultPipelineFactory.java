package org.opentestsystem.rdw.ingest.script.impl;

import org.codehaus.groovy.control.CompilationFailedException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.opentestsystem.rdw.ingest.script.ConfigurationCompiler;
import org.opentestsystem.rdw.ingest.script.Pipeline;
import org.opentestsystem.rdw.ingest.script.PipelineBuildException;
import org.opentestsystem.rdw.ingest.script.PipelineDefinition;
import org.opentestsystem.rdw.ingest.script.PipelineFactory;
import org.opentestsystem.rdw.ingest.script.PipelineScript;
import org.opentestsystem.rdw.ingest.script.PropertyResolver;
import org.opentestsystem.rdw.ingest.script.ScriptCompiler;
import org.opentestsystem.rdw.ingest.script.ScriptDefinition;
import org.opentestsystem.rdw.ingest.script.ScriptInfo;
import org.opentestsystem.rdw.ingest.script.ScriptSource;
import org.opentestsystem.rdw.ingest.script.VersionedResource;
import org.opentestsystem.rdw.ingest.script.security.SandboxSecurityManager;

/**
 * Factory class for creating a Pipeline by loading the pipeline definition and then using it to
 * load the script definitions for each node.
 */
public class DefaultPipelineFactory implements PipelineFactory {
    // Interface for loading the script base class code, the pipeline definition, and the script code.
    private final ScriptSource scriptSource;

    // Compiler of Groovy scripts into Java byte code.
    private final ScriptCompiler scriptCompiler;

    // Compiler of configuration properties, which may involve loading database connections and
    // other manipulations
    private final ConfigurationCompiler configCompiler;
    private final PropertyResolver propertyResolver;
    private final SandboxSecurityManager sandboxSecurityManager;

    public DefaultPipelineFactory(final ScriptSource scriptSource,
                                  final ScriptCompiler scriptCompiler,
                                  final ConfigurationCompiler configCompiler,
                                  final PropertyResolver propertyResolver,
                                  final SandboxSecurityManager sandboxSecurityManager) {
        this.scriptSource = scriptSource;
        this.scriptCompiler = scriptCompiler;
        this.configCompiler = configCompiler;
        this.propertyResolver = propertyResolver;
        this.sandboxSecurityManager = sandboxSecurityManager;
    }

    /**
     * Creates a runnable pipeline by loading and compiling the scripts.
     *
     * @param pipelineName the name of the pipeline to create
     * @param pipelineVersion the version of the pipeline
     *
     * @return a fully compiled pipeline that can be run against input files
     *
     * @throws PipelineBuildException if any part of the pipeline couldn't be loaded or compiled.
     */
    @Override
    public Pipeline getPipeline(final String pipelineName, final String pipelineVersion)
            throws PipelineBuildException
    {
        PipelineDefinition pipelineDefinition = scriptSource.loadPipelineDefinition(pipelineName, pipelineVersion);

        List<ScriptDefinition> scriptDefinitions = new ArrayList<>();
        Map<VersionedResource,Exception> buildErrors = new HashMap<>();

        // For each node, load and compile the code and configuration and report back any errors.
        for (VersionedResource node : pipelineDefinition.getNodeDefinitions()) {
            try {
                final ScriptInfo scriptInfo = scriptSource.loadScript(node);
                final Class<? extends PipelineScript> scriptClass = scriptCompiler.compile(scriptInfo.getCode());
                final Map<String,Object> configuration = configCompiler.compile(scriptInfo.getProperties());

                scriptDefinitions.add(
                    ScriptDefinition.builder()
                        .name(node.getName())
                        .version(node.getVersion())
                        .type(node.getType())
                        .compiledScript(scriptClass)
                        .configuration(configuration)
                        .propertyResolver(propertyResolver)
                        .build());
            } catch (CompilationFailedException cfe) {
                cfe.fillInStackTrace();
                buildErrors.put(node, cfe);
            }
        }

        if (!buildErrors.isEmpty()) {
            throw new PipelineBuildException(
                    "Failed to build pipeline: " + pipelineName + " v. " + pipelineVersion,
                    pipelineDefinition, buildErrors);
        }

        return new Pipeline(pipelineDefinition, scriptDefinitions, sandboxSecurityManager);
    }
}
