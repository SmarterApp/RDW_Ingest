package org.opentestsystem.rdw.ingest.script;

import groovy.lang.GroovyClassLoader;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;

/**
 * Spring configuration for archive service. To use do something like:<pre>
 * {@literal @}Import(ArchiveConfiguration.class)
 *  public class Application {
 *      {@literal @}Autowired private PipelineFactory factory;
 *      private Pipeline pipeline = factory.initializePipeline(PIPELINE_NAME, PIPELINE_VERSION);
 * </pre>
 *
 * @see PipelineFactory
 * @see ScriptCompiler
 * @see ScriptSource
 * @see GroovyClassLoader
 */
@Configuration
public class ScriptPipelineConfiguration {
    private static final String BASE_CLASS_NAME = "DSLScriptBase";

    @Bean
    public ScriptCompiler scriptCompiler(GroovyClassLoader classLoader) {
        return new ScriptCompiler(classLoader);
    }

    @Bean
    public GroovyClassLoader groovyClassLoader(ScriptSource scriptSource) {
        GroovyClassLoader parent = new GroovyClassLoader(PipelineScript.class.getClassLoader());

        try (Reader reader = new StringReader(scriptSource.loadScriptBaseClass())) {
            Class baseClass = parent.parseClass(reader, BASE_CLASS_NAME);

            CompilerConfiguration compilerConfig = new CompilerConfiguration();
            compilerConfig.setScriptBaseClass(baseClass.getName());

            return new GroovyClassLoader(parent, compilerConfig);
        } catch (IOException e) {
            throw new RuntimeException("Cannot create script class loader");
        }
    }

    @Bean
    public PipelineFactory pipelineFactory(ScriptSource scriptSource, ScriptCompiler scriptCompiler) {
        return new PipelineFactory(scriptSource, scriptCompiler, new ConfigurationCompiler());
    }

    @Bean
    public ScriptSource scriptSource() {
        return new ScriptSourceImpl();
    }
}
