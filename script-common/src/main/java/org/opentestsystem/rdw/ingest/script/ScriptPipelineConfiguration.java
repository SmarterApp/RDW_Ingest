package org.opentestsystem.rdw.ingest.script;

import groovy.lang.GroovyClassLoader;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.opentestsystem.rdw.ingest.script.impl.DefaultConfigurationCompiler;
import org.opentestsystem.rdw.ingest.script.impl.DefaultPipelineFactory;
import org.opentestsystem.rdw.ingest.script.impl.DefaultPropertyResolver;
import org.opentestsystem.rdw.ingest.script.impl.DefaultScriptSource;
import org.opentestsystem.rdw.ingest.script.security.DefaultSandboxPermissions;
import org.opentestsystem.rdw.ingest.script.security.SandboxPermissions;
import org.opentestsystem.rdw.ingest.script.security.SandboxSecurityManager;
import org.opentestsystem.rdw.ingest.script.security.ScriptClassLoader;

/**
 * Spring configuration for archive service. To use do something like:<pre>
 * {@literal @}Import(ArchiveConfiguration.class)
 *  public class Application {
 *      {@literal @}Autowired private PipelineFactory factory;
 *      private Pipeline pipeline = factory.getPipeline(PIPELINE_NAME, PIPELINE_VERSION);
 * </pre>
 *
 * @see PipelineFactory
 * @see ScriptCompiler
 * @see ScriptSource
 * @see GroovyClassLoader
 */
@Configuration
public class ScriptPipelineConfiguration {
    private static final String BASE_CLASS_NAME = "DSLScriptBase";

    @Bean
    public ScriptCompiler scriptCompiler(final GroovyClassLoader classLoader) {
        return new ScriptCompiler(classLoader);
    }

    @Bean
    public ConfigurationCompiler configurationCompiler() {
        return new DefaultConfigurationCompiler();
    }

    @Bean
    public GroovyClassLoader groovyClassLoader(final ScriptSource scriptSource) {
        final GroovyClassLoader parent = new GroovyClassLoader(new ScriptClassLoader());

        try (final Reader reader = new StringReader(scriptSource.loadScriptBaseClass())) {
            final Class baseClass = parent.parseClass(reader, BASE_CLASS_NAME);

            final CompilerConfiguration compilerConfig = new CompilerConfiguration();
            compilerConfig.setScriptBaseClass(baseClass.getName());

            return new GroovyClassLoader(parent, compilerConfig);
        } catch (final IOException e) {
            throw new RuntimeException("Cannot create script class loader");
        }
    }

    @Bean
    public PipelineFactory pipelineFactory(final ScriptSource scriptSource,
                                           final ScriptCompiler scriptCompiler,
                                           final ConfigurationCompiler configurationCompiler,
                                           final PropertyResolver propertyResolver,
                                           final SandboxSecurityManager sandboxSecurityManager) {
        return new DefaultPipelineFactory(scriptSource,
                scriptCompiler,
                configurationCompiler,
                propertyResolver,
                sandboxSecurityManager);
    }

    @Bean
    public ScriptSource scriptSource() {
        return new DefaultScriptSource();
    }

    @Bean
    public PropertyResolver propertyResolver() {
        return new DefaultPropertyResolver();
    }

    @Bean
    public SandboxSecurityManager sandboxSecurityManager(final SandboxPermissions permissions) {
        return new SandboxSecurityManager(permissions);
    }

    @Bean
    public SandboxPermissions sandboxPermissions() {
        return new DefaultSandboxPermissions();
    }
}
