package org.opentestsystem.rdw.ingest.script.impl;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.io.IOUtils;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import org.opentestsystem.rdw.ingest.script.PipelineDefinition;
import org.opentestsystem.rdw.ingest.script.ScriptInfo;
import org.opentestsystem.rdw.ingest.script.ScriptSource;
import org.opentestsystem.rdw.ingest.script.VersionedResource;

import static java.util.Collections.emptyMap;

/**
 * TODO: This is a stub. It must be replaced with a real implementation that loads scripts from an s3 bucket,
 * a private GitHub repo, or other source.
 */
public class DefaultScriptSource implements ScriptSource {
    private static final ObjectMapper objectMapper = new ObjectMapper()
            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

    @Override
    public String loadScriptBaseClass() {
        return loadFromResourceFile("/scripts/DSLScriptBase.groovy");
    }

    @Override
    public PipelineDefinition loadPipelineDefinition(final String pipelineName, final String pipelineVersion) {
        try {
            final String json = loadFromResourceFile("/scripts/" + pipelineName + ".json");
            return objectMapper.readValue(json, PipelineDefinition.PipelineDefinitionBuilder.class).build();
        } catch (final IOException e) {
            throw new RuntimeException("Cannot create Pipeline Definition", e);
        }
    }

    @Override
    public ScriptInfo loadScript(final VersionedResource nodeDefinition) {
        final String code = loadFromResourceFile("/scripts/" + nodeDefinition.getName() + ".groovy");
        return new ScriptInfo(code, emptyMap());
    }

    private String loadFromResourceFile(final String name) {
        try (final InputStream input = this.getClass().getResourceAsStream(name)) {
            return IOUtils.toString(input, StandardCharsets.UTF_8);
        } catch (final IOException e) {
            throw new RuntimeException("Failed to load " + name, e);
        }
    }
}
