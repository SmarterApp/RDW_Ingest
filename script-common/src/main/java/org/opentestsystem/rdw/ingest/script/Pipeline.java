package org.opentestsystem.rdw.ingest.script;

import org.slf4j.LoggerFactory;

import java.util.List;
import org.opentestsystem.rdw.ingest.common.model.ImportException;

import static org.opentestsystem.rdw.ingest.script.ResourceType.USER_NODE;

/**
 * A Pipeline is a series of precompiled scripts that run against input in order to
 * transform, filter, and validated it.
 */
public class Pipeline {
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(Pipeline.class);

    private final PipelineDefinition pipelineDefinition;
    private final List<ScriptDefinition> scriptDefinitions;

    public Pipeline(final PipelineDefinition pipelineDefinition, final List<ScriptDefinition> scriptDefinitions) {
        this.pipelineDefinition = pipelineDefinition;
        this.scriptDefinitions = scriptDefinitions;
    }

    public PipelineDefinition getPipelineDefinition() {
        return pipelineDefinition;
    }

    public PipelineResults run(final Object input)  {
        Object lastValidTransformation = input;

        for (ScriptDefinition sd : scriptDefinitions) {
            // For now, assume that user nodes transform the data and system nodes validate
            boolean isTransform = sd.getType() == USER_NODE;

            try {
                PipelineScript script = sd.getInstance(lastValidTransformation);

                if (isTransform && pipelineDefinition.getOptions().contains("xml")) {
                    script.enableXmlExtensions();
                }

                final Object results = script.run();

                if (results == null) {
                    // (A script always returns the value of its last expression, so this is unlikely to happen.)
                    logger.warn("Script {} returned null results.", sd.toString());
                }

                if (isTransform) {
                    lastValidTransformation = results;
                } else if (results instanceof Boolean && (Boolean) results) {
                    logger.debug("Validating script {} returned true", sd.toString());
                } else {
                    logger.warn("Unexpected result type: {}", results.getClass());
                }
            } catch (ImportException ie) {
                ie.fillInStackTrace();
                throw ie;
            } catch (Exception e) {
                logger.warn("Pipeline runtime error", e);
                throw new RuntimeException("Runtime error in script: " + sd + ": " + e.getMessage(), e);
            }
        }

        return new PipelineResults(lastValidTransformation);
    }
}
