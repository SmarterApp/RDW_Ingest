package org.opentestsystem.rdw.ingest.script;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;

import static java.util.Collections.emptyList;
import static java.util.Collections.emptyMap;
import static java.util.Collections.singletonList;

/**
 * TODO: This is a stub. It must be replaced with a real implementation that loads scripts from an s3 bucket,
 * a private GitHub repo, or other source.
 */
public class DefaultScriptSource implements ScriptSource {
    @Override
    public String loadScriptBaseClass() {
        return loadFromResourceFile("/scripts/DSLScriptBase.groovy");
    }

    @Override
    public PipelineDefinition loadPipelineDefinition(final String pipelineName, final String pipelineVersion) {
        return PipelineDefinition.builder()
                .name(pipelineName)
                .version(pipelineVersion)
                .options(singletonList("xml"))
                .nodeDefinitions(emptyList())
                .build();
    }

    @Override
    public ScriptInfo loadScript(final VersionedResource nodeDefinition) {
        return new ScriptInfo("return 0", emptyMap());
    }

    private String loadFromResourceFile(String name) {
        try {
            Reader scriptReader = new InputStreamReader(this.getClass().getResourceAsStream(name));
            return readFully(scriptReader);
        } catch (IOException e) {
            throw new RuntimeException("Failed to load " + name, e);
        }
    }

    private String readFully(Reader reader) throws IOException {
        char[] arr = new char[8 * 1024];
        StringBuilder buffer = new StringBuilder();
        int numCharsRead;
        while ((numCharsRead = reader.read(arr, 0, arr.length)) != -1) {
            buffer.append(arr, 0, numCharsRead);
        }
        reader.close();
        return buffer.toString();
    }
}
