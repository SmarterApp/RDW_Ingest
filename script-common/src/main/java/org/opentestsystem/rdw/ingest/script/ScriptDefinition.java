package org.opentestsystem.rdw.ingest.script;

import java.io.Reader;
import java.util.Map;
import java.util.Objects;

/**
 * Script definition for pipeline nodes scripts.
 */
public class ScriptDefinition {
    private final String name;
    private final String version;
    private final NodeType type;

    private String scriptCode;
    private Map<String,String> properties;

    private Class<? extends PipelineScript> compiledScript;
    private Map<String,Object> configuration;

    public ScriptDefinition(final String name, final String version, final NodeType type) {
        this.name = name;
        this.version = version;
        this.type = type;
    }

    public String getName() {
        return name;
    }

    public String getVersion() {
        return version;
    }

    public NodeType getType() {
        return type;
    }

    public String getScriptCode() {
        return scriptCode;
    }

    public void setScriptCode(final String scriptCode) {
        this.scriptCode = scriptCode;
    }

    public Map<String, String> getProperties() {
        return properties;
    }

    public void setProperties(final Map<String, String> properties) {
        this.properties = properties;
    }

    public Map<String, Object> getConfiguration() {
        return configuration;
    }

    public void setConfiguration(final Map<String, Object> configuration) {
        this.configuration = configuration;
    }

    public void setScriptClass(final Class<? extends PipelineScript> compiledScript) {
        this.compiledScript = compiledScript;
    }

    /**
     * Get an instance of the script to be run against the given input
     * @param input an open Reader with the input file for the script to work on
     * @return an instance of a PipelineScript
     *
     * @throws Exception
     */
    public PipelineScript getInstance(Reader input) throws Exception {
        return getInstance(input,null);
    }

    /**
     * Get an instance of the script to be run against the given input and properties.
     *
     * @param input an open Reader with the input file for the script to work on
     * @param additionalConfiguration a Map of string properties that will be added to the configuration and
     *                                made available to the scripts
     * @return an instance of a PipelineScript
     *
     * @throws Exception
     */
    public PipelineScript getInstance(Reader input, Map<String,Object> additionalConfiguration) throws Exception {
        return compiledScript.getConstructor().newInstance()
                .bindProperties(configuration)
                .bindProperties(additionalConfiguration)
                .bindInput(input);
    }

    @Override
    public String toString() {
        return String.format("'%s' (%s type), v. %s", name, type, version);
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final ScriptDefinition that = (ScriptDefinition) o;
        return name.equals(that.name) &&
                version.equals(that.version) &&
                Objects.equals(scriptCode, that.scriptCode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, version, scriptCode);
    }
}
