package org.opentestsystem.rdw.ingest.script;

import java.util.Collections;
import java.util.Map;

/**
 * Script definition for pipeline nodes scripts.
 */
public class ScriptDefinition extends VersionedResource {
    private final Class<? extends PipelineScript> compiledScript;
    private final Map<String,Object> configuration;
    private final PropertyResolver propertyResolver;

    private ScriptDefinition(final String name,
                             final String version,
                             final ResourceType type,
                             final Class<? extends PipelineScript> compiledScript,
                             final Map<String, Object> configuration,
                             final PropertyResolver propertyResolver)
    {
        super(name, version, type);
        this.compiledScript = compiledScript;
        this.configuration = Collections.unmodifiableMap(configuration);
        this.propertyResolver = propertyResolver;
    }

    public static ScriptDefinitionBuilder builder() {
        return new ScriptDefinitionBuilder();
    }

    public Map<String, Object> getConfiguration() {
        return configuration;
    }

    /**
     * Get an instance of the script to be run against the given input
     * @param input an open Reader with the input file for the script to work on
     * @return an instance of a PipelineScript
     *
     * @throws Exception if there is an problem constructing the script
     */
    public PipelineScript getInstance(Object input) throws Exception {
        return getInstance(input,null);
    }

    /**
     * Get an instance of the script to be run against the given input and properties.
     *
     * @param input an open Reader with the input file for the script to work on
     * @param additionalConfiguration a Map of string properties that will be added to the configuration and
     *                                made available to the scripts
     * @return an instance of a PipelineScript
     *
     * @throws Exception if there is an problem constructing the script
     */
    public PipelineScript getInstance(Object input, Map<String,Object> additionalConfiguration) throws Exception {
        final PipelineScript script = compiledScript.getConstructor().newInstance()
                .bindProperties(configuration)
                .bindProperties(additionalConfiguration)
                .bindInput(input);

        if (getType() == ResourceType.SYSTEM_NODE && this.propertyResolver != null) {
            script.setProperty("propertyResolver", propertyResolver);
        }

        return script;
    }


    public static class ScriptDefinitionBuilder {
        private String name;
        private String version;
        private ResourceType type;
        private Class<? extends PipelineScript> compiledScript;
        private Map<String, Object> configuration;
        private PropertyResolver propertyResolver;

        ScriptDefinitionBuilder() {
        }

        public ScriptDefinitionBuilder name(final String name) {
            this.name = name;
            return this;
        }

        public ScriptDefinitionBuilder version(final String version) {
            this.version = version;
            return this;
        }

        public ScriptDefinitionBuilder type(final ResourceType type) {
            this.type = type;
            return this;
        }

        public ScriptDefinitionBuilder compiledScript(final Class<? extends PipelineScript> compiledScript) {
            this.compiledScript = compiledScript;
            return this;
        }

        public ScriptDefinitionBuilder configuration(final Map<String, Object> configuration) {
            this.configuration = configuration;
            return this;
        }

        public ScriptDefinitionBuilder propertyResolver(final PropertyResolver propertyResolver) {
            this.propertyResolver = propertyResolver;
            return this;
        }

        public ScriptDefinition build() {
            return new ScriptDefinition(name, version, type, compiledScript, configuration, propertyResolver);
        }

        public String toString() {
            return "ScriptDefinition.ScriptDefinitionBuilder(name=" + this.name +
                    ", version=" + this.version +
                    ", type=" + this.type +
                    ", compiledScript=" + this.compiledScript +
                    ", configuration=" + this.configuration +
                    ")";
        }
    }
}
