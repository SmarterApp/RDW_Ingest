package org.opentestsystem.rdw.script.util;

import org.apache.commons.lang3.StringUtils;

import javax.validation.constraints.NotNull;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * Utility methods used to process scripts and their output.
 */
public class ScriptUtils {
    /**
     * Extract information about where a script error occurred by digging it out of the stack trace.
     *
     * @param t any Throwable
     * @return a map of the script info if it can be found in the throwable's stack trace, otherwise
     *         an empty map.
     */
    @NotNull
    public static Map<String,Object> extractScriptInfo(final Throwable t) {
        if (t == null) {
            return Collections.emptyMap();
        }

        return extractScriptInfo(t.getStackTrace());
    }

    /**
     * Extract information about where a script error occurred by digging it out of the stack trace.
     *
     * @param stackTrace array of StackTraceElements such as can be retrieved from a Throwable or a Thread.
     *
     * @return a map of the script info if it can be found in the stack trace, otherwise an empty map.
     */
    @NotNull
    public static Map<String,Object> extractScriptInfo(final StackTraceElement [] stackTrace) {
        if (stackTrace == null || stackTrace.length == 0) {
            return Collections.emptyMap();
        }

        for (StackTraceElement element: stackTrace) {
            if (StringUtils.endsWith(element.getFileName(), ".groovy")) {
                final Map<String,Object> map = new HashMap<>();

                map.put("className", element.getClassName());
                map.put("methodName", element.getMethodName());
                map.put("fileName", element.getFileName());
                map.put("lineNumber", element.getLineNumber());

                return map;
            }
        }

        // Not found
        return Collections.emptyMap();
    }
}
