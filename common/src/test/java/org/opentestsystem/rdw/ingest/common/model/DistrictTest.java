package org.opentestsystem.rdw.ingest.common.model;

import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class DistrictTest {

    @Test
    public void itShouldPreserveBuilderValues() {
        final District district = District.builder()
                .id(110L)
                .naturalId("id")
                .name("name")
                .externalId("eid")
                .stateCode("code")
                .build();
        assertThat(district.getType()).isEqualTo(Organization.Type.District);
        assertThat(district.getId()).isEqualTo(110L);
        assertThat(district.getNaturalId()).isEqualTo("id");
        assertThat(district.getName()).isEqualTo("name");
        assertThat(district.getExternalId()).isEqualTo("eid");
        assertThat(district.getStateCode()).isEqualTo("code");
    }

    @Test
    public void itShouldCompareDistricts() {
        final District.Builder builder = District.builder().name("name").naturalId("id").stateCode("code");

        final District district = builder.build();
        final District sameDistrict = builder.build();

        assertThat(district).isEqualTo(sameDistrict);
        assertThat(district.hashCode()).isEqualTo(sameDistrict.hashCode());

        assertThat(sameDistrict).isNotEqualTo(null);

        District otherDistrict = builder.copy(district).name("new name").build();
        assertThat(district).isNotEqualTo(otherDistrict);
        assertThat(district.hashCode()).isNotEqualTo(otherDistrict.hashCode());

        otherDistrict = builder.copy(district).naturalId("new id").build();
        assertThat(district).isNotEqualTo(otherDistrict);
        assertThat(district.hashCode()).isNotEqualTo(otherDistrict.hashCode());

        otherDistrict = builder.copy(district).stateCode("new code").build();
        assertThat(district).isNotEqualTo(otherDistrict);
        assertThat(district.hashCode()).isNotEqualTo(otherDistrict.hashCode());

        otherDistrict = builder.copy(district).externalId("nces id").build();
        assertThat(district).isNotEqualTo(otherDistrict);
        assertThat(district.hashCode()).isNotEqualTo(otherDistrict.hashCode());
    }
}