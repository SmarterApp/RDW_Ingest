package org.opentestsystem.rdw.ingest.common.multitenant;

import org.junit.Before;
import org.junit.Test;

import org.opentestsystem.rdw.script.Pipeline;
import org.opentestsystem.rdw.script.PipelineFactory;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class TenantAwareCachingPipelineFactoryTest {

    private static final String PipelineName = "TestPipeline";

    private PipelineFactory pipelineFactory;
    private PipelineFactory wrappedFactory;

    @Before
    public void createPipelineFactory() {
        wrappedFactory = mock(PipelineFactory.class);
        pipelineFactory = new TenantAwareCachingPipelineFactory(wrappedFactory);
    }

    @Test
    public void itShouldCachePipelines() {
        final Pipeline pipelineV1 = mock(Pipeline.class);
        final Pipeline pipelineV2 = mock(Pipeline.class);
        when(wrappedFactory.getPipeline(PipelineName, "1")).thenReturn(pipelineV1);
        when(wrappedFactory.getPipeline(PipelineName, "2")).thenReturn(pipelineV2);

        assertThat(pipelineFactory.getPipeline(PipelineName, "1")).isSameAs(pipelineV1);
        assertThat(pipelineFactory.getPipeline(PipelineName, "2")).isSameAs(pipelineV2);
        assertThat(pipelineFactory.getPipeline(PipelineName, "3")).isNull();  // don't think this happens in real life
        assertThat(pipelineFactory.getPipeline(PipelineName, "2")).isSameAs(pipelineV2);
        assertThat(pipelineFactory.getPipeline(PipelineName, "2")).isSameAs(pipelineV2);
        assertThat(pipelineFactory.getPipeline(PipelineName, "1")).isSameAs(pipelineV1);

        verify(wrappedFactory, times(1)).getPipeline(PipelineName, "1");
        verify(wrappedFactory, times(1)).getPipeline(PipelineName, "2");
        verify(wrappedFactory, times(1)).getPipeline(PipelineName, "3");
    }
}
