package org.opentestsystem.rdw.ingest.common.model;

import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class SchoolTest {

    @Test
    public void itShouldPreserveBuilderValues() {
        final District district = District.builder().name("district").naturalId("district id").stateCode("code").build();
        final School school = School.builder()
                .id(111L)
                .naturalId("school id")
                .name("school")
                .externalId("eid")
                .district(district)
                .build();
        assertThat(school.getType()).isEqualTo(Organization.Type.School);
        assertThat(school.getId()).isEqualTo(111);
        assertThat(school.getNaturalId()).isEqualTo("school id");
        assertThat(school.getName()).isEqualTo("school");
        assertThat(school.getExternalId()).isEqualTo("eid");
        assertThat(school.getDistrict()).isSameAs(district);
    }

    @Test
    public void itAllowsDistrictToBeSet() {
        final District district = District.builder().name("district").naturalId("district id").stateCode("code").build();
        final School school = School.builder().name("school").naturalId("school id").district(district).build();
        final District anotherDistrict = District.builder().name("district2").naturalId("district2").stateCode("code").build();
        school.setDistrict(anotherDistrict);
        assertThat(school.getDistrict()).isSameAs(anotherDistrict);
    }

    @Test
    public void itAllowsIdToBeSet() {
        final District district = District.builder().name("district").naturalId("district id").stateCode("code").build();
        final School school = School.builder().name("school").naturalId("school id").district(district).build();
        assertThat(school.getId()).isNull();
        school.setId(123L);
        assertThat(school.getId()).isEqualTo(123);
        school.setId(null);
        assertThat(school.getId()).isNull();
    }

    @Test
    public void itAllowsFlagToBeSet() {
        final District district = District.builder().name("district").naturalId("district id").stateCode("code").build();
        final School school = School.builder().name("school").naturalId("school id").district(district).build();
        assertThat(school.getFlag()).isFalse();
        school.setFlag(true);
        assertThat(school.getFlag()).isTrue();
    }

    @Test
    public void itShouldCompareSchool() {
        final District district = District.builder().name("district").naturalId("district id").stateCode("code").build();
        final School.Builder builder = School.builder().name("school").naturalId("school id").district(district);

        final School school = builder.build();
        final School sameSchool = builder.build();

        assertThat(school).isEqualTo(sameSchool);
        assertThat(school.hashCode()).isEqualTo(sameSchool.hashCode());

        assertThat(builder.build()).isNotEqualTo(null);

        School diffSchool = builder.copy(school).name("new name").build();
        assertThat(school).isNotEqualTo(diffSchool);
        assertThat(school.hashCode()).isNotEqualTo(diffSchool.hashCode());

        diffSchool = builder.copy(school).naturalId("new id").build();
        assertThat(school).isNotEqualTo(diffSchool);
        assertThat(school.hashCode()).isNotEqualTo(diffSchool.hashCode());

        diffSchool = builder.copy(school).externalId("nces id").build();
        assertThat(school).isNotEqualTo(diffSchool);
        assertThat(school.hashCode()).isNotEqualTo(diffSchool.hashCode());

        diffSchool = builder.copy(school).district(District.builder().copy(district).name("district 1").build()).build();
        assertThat(school).isNotEqualTo(diffSchool);
        assertThat(school.hashCode()).isNotEqualTo(diffSchool.hashCode());
    }

    @Test
    public void itSupportsAncestry() {
        final DistrictGroup group = DistrictGroup.builder().id(100L).name("group").naturalId("group id").build();
        final District district = District.builder().id(110L).name("district").naturalId("district id").stateCode("code").parent(group).build();
        final School school = School.builder().id(111L).name("school").naturalId("school id").district(district).build();

        assertThat(school.findAncestor(Organization.Type.District)).isEqualTo(district);
        assertThat(school.findAncestor(Organization.Type.DistrictGroup)).isEqualTo(group);
        assertThat(school.findAncestor(Organization.Type.SchoolGroup)).isNull();

        assertThat(school.findAncestorId(Organization.Type.District)).isEqualTo(110);
        assertThat(school.findAncestorId(Organization.Type.DistrictGroup)).isEqualTo(100);
        assertThat(school.findAncestorId(Organization.Type.SchoolGroup)).isNull();
    }
}