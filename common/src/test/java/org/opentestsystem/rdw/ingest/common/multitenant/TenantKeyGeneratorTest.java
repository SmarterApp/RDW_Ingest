package org.opentestsystem.rdw.ingest.common.multitenant;

import org.junit.Before;
import org.junit.Test;
import org.springframework.cache.interceptor.KeyGenerator;

import java.lang.reflect.Method;
import java.util.Optional;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class TenantKeyGeneratorTest {

    private KeyGenerator keyGenerator;
    private TenantIdResolver tenantIdResolver;
    private Method method;

    @Before
    public void createKeyGenerator() {
        method = mock(Method.class);
        when(method.getName()).thenReturn("doStuff");

        tenantIdResolver = mock(TenantIdResolver.class);
        keyGenerator = new TenantKeyGenerator(tenantIdResolver);
    }

    @Test
    public void itShouldGenerateAKeyWithTenantId() {
        when(tenantIdResolver.getTenantId()).thenReturn(Optional.of("CA"));
        assertThat(keyGenerator.generate(null, method)).isEqualTo("CA_doStuff");
        assertThat(keyGenerator.generate(null, method, 123)).isEqualTo("CA_doStuff_123");
    }

    @Test
    public void itShouldGenerateAKeyWithNoTenantId() {
        when(tenantIdResolver.getTenantId()).thenReturn(Optional.empty());
        assertThat(keyGenerator.generate(null, method)).isEqualTo("NO_TENANT_ID_doStuff");
        assertThat(keyGenerator.generate(null, method, 123)).isEqualTo("NO_TENANT_ID_doStuff_123");
    }
}
