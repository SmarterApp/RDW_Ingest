package org.opentestsystem.rdw.ingest.common.status;

import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class AbstractStatusIndicatorTest {

    @Test
    public void itShouldCatchException() {
        final AbstractStatusIndicator statusIndicator = new AbstractStatusIndicator() {
            @Override protected void doStatusCheck(final Status.Builder builder, final int level) {
                throw new UnsupportedOperationException("test error");
            }
            @Override protected boolean doLevelCheck(final int level) { return true; }
            @Override public String name() { return null; }
        };

        final Status status = statusIndicator.status(1);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Failed.value());
        assertThat(status.getDetails().get("error")).isEqualTo("test error");
    }

    @Test
    public void itShouldCheckLevel() {
        final AbstractStatusIndicator statusIndicator = new AbstractStatusIndicator() {
            @Override protected void doStatusCheck(final Status.Builder builder, final int level) { }
            @Override protected boolean doLevelCheck(final int level) { return false; }
            @Override public String name() { return null; }
        };

        assertThat(statusIndicator.status(1)).isNull();
    }

    @Test
    public void itShouldAddResponseTimeDetail() {
        final AbstractStatusIndicator statusIndicator = new AbstractStatusIndicator() {
            @Override protected void doStatusCheck(final Status.Builder builder, final int level) {
                responseTime(builder, 200, () -> {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                    }
                    return null;
                });
            }
            @Override protected boolean doLevelCheck(final int level) { return true; }
            @Override public String name() { return null; }
        };

        assertThat(statusIndicator.status(1).getDetails().get("responseTime")).isNotNull();
    }

    @Test
    public void itShouldAddDegradedResponseTimeDetail() {
        final AbstractStatusIndicator statusIndicator = new AbstractStatusIndicator() {
            @Override protected void doStatusCheck(final Status.Builder builder, final int level) {
                responseTime(builder, 10, () -> {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                    }
                    return null;
                });
            }
            @Override protected boolean doLevelCheck(final int level) { return true; }
            @Override public String name() { return null; }
        };

        assertThat(statusIndicator.status(1).getStatusRating()).isEqualTo(Rating.Degraded.value());
    }
}
