package org.opentestsystem.rdw.ingest.common.util;

import com.google.common.base.Function;
import com.google.common.base.Strings;
import com.google.common.primitives.Ints;
import org.junit.Before;
import org.junit.Test;

import java.text.ParseException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toBoolean;

public class ParserHelperTest {

    private ParserHelper parserHelper;
    private DataElementErrorCollector errorCollector;

    @Before
    public void createParserHelper() {
        errorCollector = new DataElementErrorCollector();
        parserHelper = new ParserHelper(errorCollector);
    }

    @Test
    public void itShouldParseMandatory() {
        assertThat(parserHelper.parseMandatory("field", "value  ", Strings::emptyToNull)).isEqualTo("value");
        assertThat(errorCollector.size()).isZero();

        assertThat(parserHelper.parseMandatory("field", "", Strings::emptyToNull)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
        assertThat(errorCollector.contains(new DataElementError("field", "", "Invalid value"))).isTrue();

        assertThat(parserHelper.parseMandatory("field", "test", Double::parseDouble)).isNull();
        assertThat(errorCollector.size()).isEqualTo(2);
        assertThat(errorCollector.contains(new DataElementError("field", "test", "For input string: \"test\""))).isTrue();

        assertThat(parserHelper.parseMandatory("field", null, Strings::emptyToNull)).isNull();
        assertThat(errorCollector.size()).isEqualTo(3);
    }

    @Test
    public void itShouldParseOptional() {
        assertThat(parserHelper.parseOptional("field", "value  ", Strings::emptyToNull)).isEqualTo("value");
        assertThat(errorCollector.size()).isZero();

        assertThat(parserHelper.parseOptional("field", "", Strings::emptyToNull)).isNull();
        assertThat(errorCollector.size()).isZero();

        assertThat(parserHelper.parseOptional("field", "test", Double::parseDouble)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
        assertThat(errorCollector.contains(new DataElementError("field", "test", "For input string: \"test\""))).isTrue();

        assertThat(parserHelper.parseOptional("field", null, Strings::emptyToNull)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
    }

    @Test
    public void itShouldParseMandatoryAndValidate() {
        assertThat(parserHelper.parseMandatoryAndValidate("field", "23", Ints::tryParse, (Function<Integer, Boolean>) value -> value > 0)).isTrue();
        assertThat(errorCollector.size()).isZero();

        assertThat(parserHelper.parseMandatoryAndValidate("field", "-7", Ints::tryParse, (Function<Integer, Boolean>) value -> value > 0)).isFalse();
        assertThat(errorCollector.size()).isZero();

        assertThat(parserHelper.parseMandatoryAndValidate("field", "fubar", Ints::tryParse, (Function<Integer, Boolean>) value -> value > 0)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
    }

    @Test
    public void itShouldValidate() {
        assertThat(parserHelper.validate("field", 23, (Function<Integer, Boolean>) value -> value > 0)).isTrue();
        assertThat(errorCollector.size()).isZero();

        assertThat(parserHelper.validate("field", -7, (Function<Integer, Boolean>) value -> value > 0)).isFalse();
        assertThat(errorCollector.size()).isZero();

        assertThat(parserHelper.validate("field", null, (Function<Integer, Boolean>) value -> value > 0)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
        assertThat(errorCollector.contains(new DataElementError("field", null, "Must not be null"))).isTrue();

        assertThat(parserHelper.validate("number", "test", Double::parseDouble)).isNull();
        assertThat(errorCollector.size()).isEqualTo(2);
        assertThat(errorCollector.contains(new DataElementError("number", "test", "For input string: \"test\""))).isTrue();
    }

    @Test
    public void ItShouldParseToBoolean() throws ParseException {
        assertThat(toBoolean("yes")).isEqualTo(true);
        assertThat(toBoolean("YES")).isEqualTo(true);
        assertThat(toBoolean("Yes")).isEqualTo(true);
        assertThat(toBoolean("Y")).isEqualTo(true);
        assertThat(toBoolean("y")).isEqualTo(true);

        assertThat(toBoolean("No")).isEqualTo(false);
        assertThat(toBoolean("NO")).isEqualTo(false);
        assertThat(toBoolean("no")).isEqualTo(false);
        assertThat(toBoolean("n")).isEqualTo(false);
        assertThat(toBoolean("N")).isEqualTo(false);
    }

    @Test(expected = IllegalArgumentException.class)
    public void ItShouldThrowUnsupportedValueForBoolean() throws ParseException {
        toBoolean("something");
    }

    @Test(expected = IllegalArgumentException.class)
    public void ItShouldThrowUnsupportedForNull() throws ParseException {
        toBoolean(null);
    }
}
