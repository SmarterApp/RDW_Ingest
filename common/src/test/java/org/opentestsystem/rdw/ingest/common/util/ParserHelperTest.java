package org.opentestsystem.rdw.ingest.common.util;

import com.google.common.base.Function;
import org.junit.Before;
import org.junit.Test;

import java.time.LocalDate;

import static java.time.Year.MAX_VALUE;
import static java.time.Year.MIN_VALUE;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.checkNotBlank;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toBoolean;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toBooleanOrNull;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toDouble;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toGrade;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toInteger;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toIntegerOrNull;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toLocalDate;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toLocalDateOrNull;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toLong;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toYear;

public class ParserHelperTest {

    private ParserHelper parserHelper;
    private DataElementErrorCollector errorCollector;

    @Before
    public void createParserHelper() {
        errorCollector = new DataElementErrorCollector();
        parserHelper = new ParserHelper(errorCollector);
    }

    @Test
    public void itShouldValidate() {
        assertThat(parserHelper.validate("field", 23, (Function<Integer, Boolean>) value -> value > 0)).isTrue();
        assertThat(errorCollector.size()).isZero();

        assertThat(parserHelper.validate("field", -7, (Function<Integer, Boolean>) value -> value > 0)).isFalse();
        assertThat(errorCollector.size()).isZero();

        assertThat(parserHelper.validate("field", null, toDouble)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
        assertThat(errorCollector.contains(new DataElementError("field", null, "value may not be blank"))).isTrue();

        assertThat(parserHelper.validate("number", "test", Double::parseDouble)).isNull();
        assertThat(errorCollector.size()).isEqualTo(2);
        assertThat(errorCollector.contains(new DataElementError("number", "test", "For input string: \"test\""))).isTrue();
    }

    @Test
    public void ItShouldParseToBoolean() {
        assertThat(toBoolean.apply("yes")).isEqualTo(true);
        assertThat(toBoolean.apply("YES")).isEqualTo(true);
        assertThat(toBoolean.apply("Yes")).isEqualTo(true);
        assertThat(toBoolean.apply("Y")).isEqualTo(true);
        assertThat(toBoolean.apply("y")).isEqualTo(true);
        assertThat(toBoolean.apply("TRUE")).isEqualTo(true);
        assertThat(toBoolean.apply("true")).isEqualTo(true);
        assertThat(toBoolean.apply("t")).isEqualTo(true);

        assertThat(toBoolean.apply("No")).isEqualTo(false);
        assertThat(toBoolean.apply("NO")).isEqualTo(false);
        assertThat(toBoolean.apply("no")).isEqualTo(false);
        assertThat(toBoolean.apply("n")).isEqualTo(false);
        assertThat(toBoolean.apply("N")).isEqualTo(false);
        assertThat(toBoolean.apply("FALSE")).isEqualTo(false);
        assertThat(toBoolean.apply("false")).isEqualTo(false);
        assertThat(toBoolean.apply("f")).isEqualTo(false);
    }

    @Test
    public void itShouldParseOptionalBoolean() {
        assertThat(toBooleanOrNull.apply("yes")).isEqualTo(true);
        assertThat(toBooleanOrNull.apply("no ")).isEqualTo(false);
        assertThat(toBooleanOrNull.apply("  ")).isNull();
    }

    @Test(expected = IllegalArgumentException.class)
    public void ItShouldThrowUnsupportedValueForBoolean() {
        toBoolean.apply("something");
    }

    @Test(expected = IllegalArgumentException.class)
    public void ItShouldThrowUnsupportedForNull() {
        toBoolean.apply(null);
    }

    @Test
    public void itShouldParseOptionalInteger() {
        assertThat(toIntegerOrNull.apply(null)).isNull();
        assertThat(toIntegerOrNull.apply(" ")).isNull();
        assertThat(toIntegerOrNull.apply("42")).isEqualTo(42);
        assertThat(toIntegerOrNull.apply("  42  ")).isEqualTo(42);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToParseInvalidOptionalInteger() {
        toIntegerOrNull.apply("notanumber");
    }

    @Test
    public void itShouldValidateString() {
        assertThat(parserHelper.validate("field", "test", 20, true)).isEqualTo("test");
        assertThat(errorCollector.isEmpty()).isTrue();

        assertThat(parserHelper.validate("field", "test       ", 5, false)).isEqualTo("test");
        assertThat(errorCollector.isEmpty()).isTrue();

        assertThat(parserHelper.validate("field", "    test", 5, false)).isEqualTo("test");
        assertThat(errorCollector.isEmpty()).isTrue();

        assertThat(parserHelper.validate("field", "test", 3, false)).isEqualTo("test");
        assertThat(errorCollector.contains(new DataElementError("field", "test", "string is too long, max length is " + 3))).isTrue();
    }

    @Test
    public void itShouldValidateEmptyString() {
        assertThat(parserHelper.validate("field", "", 20, false)).isNull();
        assertThat(errorCollector.isEmpty()).isTrue();

        assertThat(parserHelper.validate("field", "   ", 20, false)).isNull();
        assertThat(errorCollector.isEmpty()).isTrue();

        assertThat(parserHelper.validate("field", "   ", 20, true)).isNull();
        assertThat(errorCollector.contains(new DataElementError("field", "   ", "value may not be blank"))).isTrue();
    }

    @Test
    public void itShouldValidateNullString() {
        assertThat(parserHelper.validate("field", null, 20, false)).isNull();
        assertThat(errorCollector.isEmpty()).isTrue();

        assertThat(parserHelper.validate("field", null, 20, true)).isNull();
        assertThat(errorCollector.contains(new DataElementError("field", null, "value may not be blank"))).isTrue();
    }

    @Test
    public void itShouldParseYear() {
        assertThat(toYear.apply((long) MIN_VALUE)).isEqualTo(MIN_VALUE);
        assertThat(toYear.apply((long) MAX_VALUE)).isEqualTo(MAX_VALUE);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToParseMinYear() {
        toYear.apply((long) (MIN_VALUE - 1));
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToParseMaxYear() {
        toYear.apply((long) (MAX_VALUE + 1));
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToParsNullYear() {
        toYear.apply(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailOnBlankString() {
        checkNotBlank.apply("   ");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailOnNullString() {
        checkNotBlank.apply(null);
    }

    @Test
    public void itShouldCheckNotBlanck() {
        assertThat(checkNotBlank.apply("test")).isEqualTo("test");
        assertThat(checkNotBlank.apply("  test  ")).isEqualTo("test");
    }

    @Test
    public void isShouldParseToDouble() {
        assertThat(toDouble.apply("20.22")).isEqualTo(20.22);
    }

    @Test(expected = IllegalArgumentException.class)
    public void isShouldFailToParseToDouble() {
        toDouble.apply(" ");
    }

    @Test
    public void isShouldParseToInteger() {
        assertThat(toInteger.apply("20")).isEqualTo(20);
    }

    @Test(expected = IllegalArgumentException.class)
    public void isShouldFailToParseToInteger() {
        toInteger.apply(" ");
    }

    @Test
    public void isShouldParseToLong() {
        assertThat(toLong.apply("20")).isEqualTo(20);
    }

    @Test(expected = IllegalArgumentException.class)
    public void isShouldFailToParseToLong() {
        toLong.apply(" ");
    }

    @Test
    public void itShouldParseOptionalDate() {
        assertThat(toLocalDateOrNull.apply(null)).isNull();
        assertThat(toLocalDateOrNull.apply(" ")).isNull();
        assertThat(toLocalDateOrNull.apply("2007-12-03")).isEqualTo(LocalDate.parse("2007-12-03"));
        assertThat(toLocalDateOrNull.apply("  2007-12-03  ")).isEqualTo(LocalDate.parse("2007-12-03"));
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToParseInvalidLocalDateOrNull() {
        toLocalDateOrNull.apply("notadate");
    }

    @Test
    public void isShouldParseToGrade() {
        assertThat(toGrade.apply("1")).isEqualTo("01");
        assertThat(toGrade.apply("2")).isEqualTo("02");
        assertThat(toGrade.apply("10")).isEqualTo("10");
        assertThat(toGrade.apply("101")).isEqualTo("101");
    }

    @Test(expected = IllegalArgumentException.class)
    public void isShouldFailToParseToGrade() {
        toGrade.apply(" ");
    }

    @Test
    public void itShouldHaveAUsefulMessageForUnparseableDate() {
        // samples from the wild; yes, they are expected to fail but this tests the message back

        assertThat(parserHelper.validate("testLocalDate", "8/1/17", toLocalDate)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
        assertThat(errorCollector.toJson()).isEqualTo("{\"messages\":[{\"elementName\":\"testLocalDate\",\"value\":\"8/1/17\",\"error\":\"invalid date [8/1/17], use format YYYY-MM-DD\"}]}");

        errorCollector.reset();
        assertThat(parserHelper.validate("testLocalDateOrNull", "6/30/18", toLocalDateOrNull)).isNull();
        assertThat(errorCollector.toJson()).isEqualTo("{\"messages\":[{\"elementName\":\"testLocalDateOrNull\",\"value\":\"6/30/18\",\"error\":\"invalid date [6/30/18], use format YYYY-MM-DD\"}]}");
    }
}
