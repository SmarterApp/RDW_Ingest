package org.opentestsystem.rdw.ingest.common.util;

<<<<<<< HEAD
/**
 * Created by marklaffoon on 6/1/17.
 */
public class ParserHelperTest {
=======
import com.google.common.base.Function;
import com.google.common.base.Strings;
import com.google.common.primitives.Ints;
import org.junit.Before;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class ParserHelperTest {

    private ParserHelper parserHelper;
    private DataElementErrorCollector errorCollector;

    @Before
    public void createParserHelper() {
        errorCollector = new DataElementErrorCollector();
        parserHelper = new ParserHelper(errorCollector);
    }

    @Test
    public void itShouldValidateRequiredString() {
        assertThat(parserHelper.validate("field", "value  ", Strings::emptyToNull)).isEqualTo("value");
        assertThat(parserHelper.validate("field", "", Strings::emptyToNull)).isNull();
        assertThat(parserHelper.validate("field", null, Strings::emptyToNull)).isNull();
        assertThat(errorCollector.size()).isEqualTo(2);
    }

    @Test
    public void itShouldValidateRequiredInt() {
        assertThat((Integer)parserHelper.validate("field", "23", Ints::tryParse)).isEqualTo(23);
        assertThat((Integer)parserHelper.validate("field", "", Ints::tryParse)).isNull();
        assertThat((Integer)parserHelper.validate("field", "notAnInteger", Ints::tryParse)).isNull();
        assertThat(errorCollector.size()).isEqualTo(2);
    }

    @Test
    public void itShouldValidateWithoutAnErrorCollector() {
        parserHelper = new ParserHelper();
        assertThat(parserHelper.validate("field", null, Strings::emptyToNull)).isNull();
    }

    @Test
    public void itShouldDoubleValidate() {
        // Integer::parseInt throws if argument is null, so this demonstrates the flow
        assertThat((Integer)parserHelper.validate("field", "23", Strings::emptyToNull, Integer::parseInt)).isEqualTo(23);
        assertThat((Integer)parserHelper.validate("field", "  ", Strings::emptyToNull, Integer::parseInt)).isNull();
    }

    @Test
    public void demonstrateLambda() {
        assertThat(parserHelper.validate("field", "23", Ints::tryParse, (Function<Integer, Boolean>) value -> value > 0)).isTrue();
        assertThat(parserHelper.validate("field", "-7", Ints::tryParse, (Function<Integer, Boolean>) value -> value > 0)).isFalse();
        assertThat(parserHelper.validate("field", "fubar", Ints::tryParse, (Function<Integer, Boolean>) value -> value > 0)).isNull();
    }
>>>>>>> b6995131959eb97ed9245b3ef25da2b524182c20
}
