package org.opentestsystem.rdw.ingest.common.util;

import org.apache.commons.lang3.RandomUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.util.DigestUtils;
import org.springframework.util.MimeType;

import java.util.Properties;
import org.opentestsystem.rdw.common.model.ImportContent;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.rdw.ingest.common.util.TransformedPayloadArchiver.ContentLengthProperty;
import static org.opentestsystem.rdw.ingest.common.util.TransformedPayloadArchiver.ContentTypeProperty;
import static org.springframework.util.MimeTypeUtils.APPLICATION_XML;

public class TransformedPayloadArchiverTest {

    private static final ImportContent Content = ImportContent.EXAM;
    private static final MimeType ContentType = APPLICATION_XML;
    private ByteArrayContentWriter archiveService;

    private final TransformedPayloadArchiver archiver = new TransformedPayloadArchiver();
    private final byte [] originalPayload = RandomUtils.nextBytes(100);
    private final byte [] transformedPayload = RandomUtils.nextBytes(100);
    private final String digest = DigestUtils.md5DigestAsHex(originalPayload).toUpperCase();

    @Before
    public void setUp() {
        archiveService = mock(ByteArrayContentWriter.class);
    }

    @Test
    public void itShouldArchiveTransformedPayload() {
        archiver.archive(originalPayload, transformedPayload, Content, ContentType, archiveService);

        final ArgumentCaptor<String> locationCaptor = ArgumentCaptor.forClass(String.class);
        final ArgumentCaptor<Properties> propsCaptor = ArgumentCaptor.forClass(Properties.class);

        verify(archiveService).writeResource(locationCaptor.capture(), eq(transformedPayload), propsCaptor.capture());

        final String location = locationCaptor.getValue();
        assertThat(location).contains(Content.name());
        assertThat(location.replace("/", "")).contains(digest);
        assertThat(location).contains("transform");

        final Properties properties = propsCaptor.getValue();
        assertThat(properties.getProperty(ContentTypeProperty)).isEqualTo(ContentType.toString());
        assertThat(properties.get(ContentLengthProperty)).isEqualTo(transformedPayload.length);

    }
}