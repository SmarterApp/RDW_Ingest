package org.opentestsystem.rdw.ingest.common.repository;

import com.google.common.base.Charsets;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "DELETE FROM import WHERE id = -99 or id = -1",
        "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')"
})
public class ImportRepositoryIT {

    @Autowired
    private ImportRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    public void itShouldUpdateImportStatusById() {
        assertThat(countRowsInTableWhere(jdbcTemplate, "import", "id = -99 and status =  " + ImportStatus.PROCESSED.getValue())).isZero();
        repository.updateStatusById(-99, ImportStatus.PROCESSED);

        assertThat(countRowsInTableWhere(jdbcTemplate, "import", "id = -99 and status =  " + ImportStatus.PROCESSED.getValue())).isEqualTo(1);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotUpdateImportStatusForUnknownId() {
        repository.updateStatusById(-1, ImportStatus.PROCESSED);
    }

    @Test
    public void itShouldUpdateImportStatusAndMessageById() {
        assertThat(countRowsInTableWhere(jdbcTemplate, "import", "id = -99 and status =  " + ImportStatus.BAD_DATA.getValue() + " and message = 'sample message'")).isZero();
        repository.updateStatusAndMessageById(-99, ImportStatus.BAD_DATA, "sample message");

        assertThat(countRowsInTableWhere(jdbcTemplate, "import", "id = -99 and status =  " + ImportStatus.BAD_DATA.getValue() + " and message = 'sample message'")).isEqualTo(1);
    }

    @Test
    public void itShouldUpdateImportStatusAndNullMessageById() {
        assertThat(countRowsInTableWhere(jdbcTemplate, "import", "id = -99 and status =  " + ImportStatus.BAD_DATA.getValue() + " and message is null")).isZero();
        repository.updateStatusAndMessageById(-99, ImportStatus.BAD_DATA, null);

        assertThat(countRowsInTableWhere(jdbcTemplate, "import", "id = -99 and status =  " + ImportStatus.BAD_DATA.getValue() + " and message is null")).isEqualTo(1);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowExceptionWhenIdIsUnknown() {
        repository.updateStatusAndMessageById(-1, ImportStatus.BAD_DATA, "sample message");
    }

    @Test
    public void itShouldTruncateMessage() {
        final String message = repeat('A', 65540);
        assertThat(message.length()).isEqualTo(65540);
        assertThat(message.getBytes(Charsets.UTF_8).length).isEqualTo(65540);

        repository.updateStatusAndMessageById(-99, ImportStatus.BAD_DATA, message);
        assertThat(jdbcTemplate.queryForObject("SELECT LENGTH(message) FROM import WHERE id = -99", Integer.class)).isEqualTo(65535);
        assertThat(jdbcTemplate.queryForObject("SELECT CHAR_LENGTH(message) FROM import WHERE id = -99", Integer.class)).isEqualTo(65535);
    }

    @Test
    public void itShouldTruncateUnicodeMessage() {
        final String message = "ABCDEF" + repeat('Ãž', 65540);
        assertThat(message.length()).isEqualTo(65546);
        assertThat(message.getBytes(Charsets.UTF_8).length).isEqualTo(2 * 65540 + 6);

        repository.updateStatusAndMessageById(-99, ImportStatus.BAD_DATA, message);
        assertThat(jdbcTemplate.queryForObject("SELECT LENGTH(message) FROM import WHERE id = -99", Integer.class))
                .isEqualTo(65534);              // 65535 - 1 because multibyte character was on the boundary
        assertThat(jdbcTemplate.queryForObject("SELECT CHAR_LENGTH(message) FROM import WHERE id = -99", Integer.class))
                .isEqualTo((65535-1-6)/2 + 6);  // do the math, it works
    }

    private static String repeat(final char ch, final int count) {
        final char[] chars = new char[count];
        Arrays.fill(chars, ch);
        return new String(chars);
    }
}
