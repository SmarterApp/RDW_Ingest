package org.opentestsystem.rdw.ingest.common.repository;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.common.test.TenantCacheableIT;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("common-test")
@Sql(statements = {
        "INSERT INTO language (id, code, altcode, display_order, name) VALUES (-99, 'abc', 'a1', 0, 'Language abc');",
        "INSERT INTO language (id, code, altcode, display_order, name) VALUES (-88, 'def', NULL, 1, 'Language def');",
        "INSERT INTO language (id, code, altcode, display_order, name) VALUES (-55, 'cac', NULL, 2, 'Language cac');"
})
public class LanguageRepositoryIT extends TenantCacheableIT {

    @Autowired
    private LanguageRepository repository;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findIdByCode("abc")).isEqualTo(-99);
        assertThat(repository.findIdByCode("a1")).isEqualTo(-99);
        assertThat(repository.findIdByCode("DEF")).isEqualTo(-88);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowExceptionWhenCodeIsUnknown() {
        repository.findIdByCode("zz");
    }

    @Test
    public void itShouldCacheReturnedId() {
        assertThat(getCachedValue("language", "findIdByCode", "cac")).isNull();
        assertThat(repository.findIdByCode("cac")).isEqualTo(-55);
        assertThat(getCachedValue("language", "findIdByCode", "cac").get()).isEqualTo(-55);
    }
}
