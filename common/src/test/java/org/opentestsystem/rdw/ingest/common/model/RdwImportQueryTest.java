package org.opentestsystem.rdw.ingest.common.model;

import org.junit.Test;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.common.model.RdwImportQuery.builder;

public class RdwImportQueryTest {

    @Test
    public void itShouldRetainBuilderValues() {
        final RdwImportQuery query = builder()
                .content(ImportContent.EXAM)
                .status(ImportStatus.ACCEPTED)
                .batch("abc")
                .creator("alice")
                .before("now")
                .after("2017-03-21T15:27:00Z")
                .limit(1000)
                .build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.ACCEPTED);
        assertThat(query.getBatch()).isEqualTo("abc");
        assertThat(query.getCreator()).isEqualTo("alice");
        assertThat(query.getBefore()).isNotNull();
        assertThat(query.getAfter()).isEqualTo(Instant.parse("2017-03-21T15:27:00Z"));
        assertThat(query.getLimit()).isEqualTo(1000);
    }

    @Test
    public void itCanBeEmpty() {
        assertThat(builder().build().isEmpty()).isTrue();
    }

    @Test
    public void itShouldCopyValues() {
        final RdwImportQuery src = builder()
                .content(ImportContent.EXAM)
                .status(ImportStatus.ACCEPTED)
                .batch("abc")
                .limit(100)
                .build();
        final RdwImportQuery query = src.copy()
                .status(ImportStatus.PROCESSED)
                .batch(null)
                .build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.PROCESSED);
        assertThat(query.getBatch()).isNull();

        assertThat(query.asParamString()).isEqualTo("content=EXAM&status=PROCESSED&limit=100");
    }

    @Test
    public void itShouldConvertStringValues() {
        final RdwImportQuery query = builder()
                .content("exam")
                .status("accepted")
                .build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.ACCEPTED);

        assertThat(query.asParamString()).isEqualTo("content=EXAM&status=ACCEPTED");
    }

    @Test
    public void itShouldParseContent() {
        assertThat(builder().content((String)null).build().getContent()).isNull();
        assertThat(builder().content("").build().getContent()).isNull();
        assertThat(builder().content("  ").build().getContent()).isNull();
        assertThat(builder().content("probe").build().getContent()).isEqualTo(ImportContent.PROBE);
        assertThat(builder().content("1").build().getContent()).isEqualTo(ImportContent.EXAM);
    }

    @Test
    public void itShouldParseStatus() {
        assertThat(builder().status((String)null).build().getStatus()).isNull();
        assertThat(builder().status("").build().getStatus()).isNull();
        assertThat(builder().status("  ").build().getStatus()).isNull();
        assertThat(builder().status("bad_data").build().getStatus()).isEqualTo(ImportStatus.BAD_DATA);
        assertThat(builder().status("-3").build().getStatus()).isEqualTo(ImportStatus.BAD_DATA);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresValidStatusStringEnumValue() {
        builder().status("fubar");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresValidStatusStringIntValue() {
        builder().status("-42");
    }

    @Test
    public void itShouldParseInstant() {
        final RdwImportQuery query = builder()
                .before("-PT24H")
                .before("-P2D")
                .before("-P2DT8M")
                .before("-pt10m")
                .build();
        assertThat(query.getBefore()).isBefore(Instant.now());
    }

    @Test
    public void itShouldParseBlankInstant() {
        final RdwImportQuery query = builder()
                .before("-PT24H")
                .before("  ")
                .build();
        assertThat(query.getBefore()).isNull();
    }

    @Test
    public void itShouldParseLimit() {
        assertThat(builder().limit((String)null).build().getLimit()).isNull();
        assertThat(builder().limit("").build().getLimit()).isNull();
        assertThat(builder().limit("  ").build().getLimit()).isNull();
        assertThat(builder().limit("100").build().getLimit()).isEqualTo(100);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresValidLimitString() {
        builder().limit("notanumber");
    }

    @Test
    public void itShouldParseParams() {
        final RdwImportQuery query = builder().params("status=ACCEPTED&content=EXAM&limit=100&batch=batch&creator=test&before=-PT24H&after=-PT1H").build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.ACCEPTED);
        assertThat(query.getLimit()).isEqualTo(100);
        assertThat(query.getBatch()).isEqualTo("batch");
        assertThat(query.getCreator()).isEqualTo("test");
        assertThat(query.getAfter()).isBefore(Instant.now());
        assertThat(query.getBefore()).isBefore(query.getAfter());
    }

    @Test
    public void itShouldParseEmptyParamValues() {
        final RdwImportQuery query = builder()
                .batch("mybatch")
                .status(ImportStatus.ACCEPTED)
                .params("content=EXAM&status=")
                .build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isNull();
        assertThat(query.getBatch()).isEqualTo("mybatch");
        assertThat(query.asParamString()).isEqualTo("content=EXAM&batch=mybatch");
    }

    @Test
    public void itShouldIgnoreExtraParamsAndLeadingQuestionMarkInParams() {
        final RdwImportQuery query = builder().params("?shoesize=10&content=PROBE").build();
        assertThat(query.getContent()).isEqualTo(ImportContent.PROBE);
        assertThat(query.asParamString()).isEqualTo("content=PROBE");
    }

    @Test
    public void itShouldParseProductionSetting() {
        final RdwImportQuery query = builder().params("creator=eseitembanksupport@ets.org&after=-PT25H").build();
        assertThat(query.getCreator()).isEqualTo("eseitembanksupport@ets.org");
        assertThat(query.getAfter()).isNotNull();
    }
}
