package org.opentestsystem.rdw.ingest.common.model;

import org.junit.Test;

import java.time.Instant;

import static org.assertj.core.api.Assertions.assertThat;

public class RdwImportQueryTest {

    @Test
    public void itShouldRetainBuilderValues() {
        final RdwImportQuery query = RdwImportQuery.builder()
                .content(ImportContent.EXAM)
                .status(ImportStatus.ACCEPTED)
                .batch("abc")
                .creator("alice")
                .before("now")
                .after("2017-03-21T15:27:00Z")
                .build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.ACCEPTED);
        assertThat(query.getBatch()).isEqualTo("abc");
        assertThat(query.getCreator()).isEqualTo("alice");
        assertThat(query.getBefore()).isNotNull();
        assertThat(query.getAfter()).isEqualTo(Instant.parse("2017-03-21T15:27:00Z"));
    }

    @Test
    public void itCanBeEmpty() {
        assertThat(RdwImportQuery.builder().build().isEmpty()).isTrue();
    }

    @Test
    public void itShouldCopyValues() {
        final RdwImportQuery src = RdwImportQuery.builder()
                .content(ImportContent.EXAM)
                .status(ImportStatus.ACCEPTED)
                .batch("abc")
                .build();
        final RdwImportQuery query = src.copy()
                .status(ImportStatus.PROCESSED)
                .batch(null)
                .build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.PROCESSED);
        assertThat(query.getBatch()).isNull();

        assertThat(query.asParamString()).isEqualTo("content=EXAM&status=PROCESSED");
    }

    @Test
    public void itShouldConvertStringValues() {
        final RdwImportQuery query = RdwImportQuery.builder()
                .content("exam")
                .status("accepted")
                .build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.ACCEPTED);

        assertThat(query.asParamString()).isEqualTo("content=EXAM&status=ACCEPTED");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresValidStatusStringValue() {
        RdwImportQuery.builder().status("fubar").build();
    }

    @Test
    public void itShouldParseInstant() {
        final RdwImportQuery query = RdwImportQuery.builder()
                .before("-PT24H")
                .before("-P2D")
                .before("-P2DT8M")
                .before("-pt10m")
                .build();
        assertThat(query.getBefore()).isLessThan(Instant.now());
    }

    @Test
    public void itShouldParseParams() {
        final RdwImportQuery query = RdwImportQuery.builder().params("status=ACCEPTED&content=EXAM").build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.ACCEPTED);
        assertThat(query.asParamString()).isEqualTo("content=EXAM&status=ACCEPTED");
    }

    @Test
    public void itShouldParseEmptyParamValues() {
        final RdwImportQuery query = RdwImportQuery.builder()
                .batch("mybatch")
                .status(ImportStatus.ACCEPTED)
                .params("content=EXAM&status=")
                .build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isNull();
        assertThat(query.getBatch()).isEqualTo("mybatch");
        assertThat(query.asParamString()).isEqualTo("content=EXAM&batch=mybatch");
    }

    @Test
    public void itShouldIgnoreExtraParamsAndLeadingQuestionMarkInParams() {
        final RdwImportQuery query = RdwImportQuery.builder().params("?shoesize=10&content=PROBE").build();
        assertThat(query.getContent()).isEqualTo(ImportContent.PROBE);
        assertThat(query.asParamString()).isEqualTo("content=PROBE");
    }
}
