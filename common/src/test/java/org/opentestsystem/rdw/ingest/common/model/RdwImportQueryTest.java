package org.opentestsystem.rdw.ingest.common.model;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;

import static org.assertj.core.api.Assertions.assertThat;

public class RdwImportQueryTest {

    @Test
    public void itShouldRetainBuilderValues() {
        final RdwImportQuery query = RdwImportQuery.builder()
                .content(ImportContent.EXAM)
                .status(ImportStatus.ACCEPTED)
                .batch("abc")
                .build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.ACCEPTED);
        assertThat(query.getBatch()).isEqualTo("abc");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresAtLeastOneCriterium() {
        RdwImportQuery.builder().build();
    }

    @Test
    public void itShouldCopyValues() {
        final RdwImportQuery src = RdwImportQuery.builder()
                .content(ImportContent.EXAM)
                .status(ImportStatus.ACCEPTED)
                .batch("abc")
                .build();
        final RdwImportQuery query = src.copy()
                .status(ImportStatus.PROCESSED)
                .batch(null)
                .build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.PROCESSED);
        assertThat(query.getBatch()).isNull();
    }

    @Test
    public void itShouldConvertStringValues() {
        final RdwImportQuery query = RdwImportQuery.builder()
                .content("exam")
                .status("accepted")
                .build();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.ACCEPTED);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresValidStatusStringValue() {
        RdwImportQuery.builder().status("fubar").build();
    }
}
