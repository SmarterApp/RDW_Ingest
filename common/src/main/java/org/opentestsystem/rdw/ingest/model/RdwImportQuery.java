package org.opentestsystem.rdw.ingest.model;

import static com.google.common.base.Strings.isNullOrEmpty;

/**
 * Container for query parameters.
 */
public class RdwImportQuery {
    private ImportContent content;
    private ImportStatus status;
    private String batch;

    RdwImportQuery(final ImportContent content, final ImportStatus status, final String batch) {
        this.content = content;
        this.status = status;
        this.batch = batch;
    }

    public ImportContent getContent() {
        return content;
    }

    public ImportStatus getStatus() {
        return status;
    }

    public String getBatch() {
        return batch;
    }

    public Builder copy() {
        return builder()
                .content(content)
                .batch(batch)
                .status(status);
    }

    public static Builder builder() {
        return new Builder();
    }


    public static class Builder {
        private ImportContent content;
        private ImportStatus status;
        private String batch;

        public RdwImportQuery build() {
            if (content == null && status == null && batch == null) {
                throw new IllegalArgumentException("Query must have at least one criterium set");
            }
            return new RdwImportQuery(content, status, batch);
        }

        public Builder content(final ImportContent content) {
            this.content = content;
            return this;
        }

        public Builder content(final String content) {
            this.content = isNullOrEmpty(content) ? null : ImportContent.valueOf(content.toUpperCase());
            return this;
        }

        public Builder status(final ImportStatus status) {
            this.status = status;
            return this;
        }

        public Builder status(final String status) {
            this.status = isNullOrEmpty(status) ? null : ImportStatus.valueOf(status.toUpperCase());
            return this;
        }

        public Builder batch(final String batch) {
            this.batch = batch;
            return this;
        }
    }
}
