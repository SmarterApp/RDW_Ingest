package org.opentestsystem.rdw.ingest.common.status;

import org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.server.ServletServerHttpRequest;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriComponents;
import org.springframework.web.util.UriComponentsBuilder;

import javax.servlet.http.HttpServletRequest;
import java.util.Map;

/**
 * MVC Endpoint wrapper for {@link StatusEndpoint} for serving up web diagnostics.
 *
 * @see StatusEndpoint
 * @see StatusConfiguration
 */
public class StatusMvcEndpoint extends EndpointMvcAdapter {

    private final StatusEndpoint delegate;

    public StatusMvcEndpoint(final StatusEndpoint delegate) {
        super(delegate);
        this.delegate = delegate;
    }

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE, params = {"level"})
    @ResponseBody
    public ResponseEntity<?> invoke(@RequestParam(defaultValue = "0") int level,
                                    final HttpServletRequest request) {

        return ResponseEntity.ok(injectUrl(delegate.invoke(level), request));
    }

    /**
     * If the status has the localSystem applicationInfo details this will inject an
     * additional entry for 'url'. Yes, this is hacktacular.
     *
     * @param status status to modify
     * @param request request from which to extract url
     * @return status, perhaps with additional info in it
     */
    private SystemStatus injectUrl(final SystemStatus status, final HttpServletRequest request) {
        final Status localSystem = status.getSubs().get("localSystem");
        if (localSystem == null) return status;

        final Map<String, Object> applicationInfo = (Map<String, Object>) localSystem.getDetails().get("applicationInfo");
        if (applicationInfo == null) return status;

        final UriComponents uriComponents = UriComponentsBuilder.fromHttpRequest(new ServletServerHttpRequest(request)).build();
        String scheme = uriComponents.getScheme();
        String host = uriComponents.getHost();
        int port = uriComponents.getPort();
        final StringBuilder sb = new StringBuilder();
        if (scheme != null) {
            sb.append(scheme).append("://");
        }
        sb.append(host == null ? "host" : host);
        if (port != -1) {
            sb.append(":").append(port);
        }
        applicationInfo.put("url", sb.toString());

        return status;
    }
}
