package org.opentestsystem.rdw.ingest.common.util;

import org.opentestsystem.rdw.ingest.common.model.ImportContent;

import java.util.StringJoiner;

/**
 * Strategy for creating archive locations
 */
public interface LocationStrategy {
    String location(String id);

    /**
     *  A simple location partitioning scheme based on the first few characters of the file name
     */
    public static String simpleLocationPartitioningScheme(final String prefix, final String id) {
        final StringJoiner joiner = new StringJoiner("/");
        joiner.add(prefix);
        joiner.add(id.substring(0,2));
        joiner.add(id.substring(2,4));
        joiner.add(id);
        return joiner.toString();
    }

    /**
     * The simplest location strategy uses the id as the full path/filename.
     */
    public static class SimpleLocationStrategy implements LocationStrategy {
        @Override
        public String location(final String id) {
            return id;
        }
    }

    /**
     * For import content the id is a hex digest so it can be used to partition the files.
     */
    public static class ImportContentLocationStrategy implements LocationStrategy {
        private final ImportContent content;

        public ImportContentLocationStrategy(final ImportContent content) {
            this.content = content;
        }

        @Override
        public String location(final String id) {
            return simpleLocationPartitioningScheme(content.name(), id);
        }
    }

    /**
     * For group upload content, the location strategy is similar to import content
     */

    public static class GroupUploadContentLocationStrategy implements LocationStrategy {
        private final String GroupLocationPrefix = "GROUPS";

        @Override
        public String location(final String id) {
            return simpleLocationPartitioningScheme(GroupLocationPrefix, id);
        }
    }

}
