package org.opentestsystem.rdw.ingest.common.status;

import java.util.function.Supplier;

/**
 * Helper to handle general exceptions for {@link StatusIndicator}s.
 */
public abstract class AbstractStatusIndicator implements StatusIndicator {

    @Override
    public Status status(final int level) {
        if (!doLevelCheck(level)) return null;

        final Status.Builder builder = Status.builder();
        try {
            doStatusCheck(builder, level);
        } catch (final Exception e) {
            builder.rating(Rating.Failed);
            builder.detail("error", e.getMessage());
        }
        return builder.build();
    }

    /**
     * Perform the actual status check.<br/>
     * This method will only be called with a level that passed {@link AbstractStatusIndicator#doLevelCheck(int)}.
     *
     * @param builder status builder
     * @param level diagnostic level
     * @throws RuntimeException if any problem, results in status of Failed
     */
    protected abstract void doStatusCheck(final Status.Builder builder, final int level);

    /**
     * @param level diagnostic level
     * @return true if this indicator will add status; false if this indicator will emit nothing
     */
    protected abstract boolean doLevelCheck(final int level);

    /**
     * Helper that times an operation and injects a "responseTime" detail. It also sets rating to
     * "Degraded" if response exceeds threshold.
     *
     * @param builder status builder
     * @param threshold time threshold (ms) indicating Degraded status
     * @param supplier operation to perform and time
     * @param <T> return type of operation
     * @return result of operation
     */
    protected <T> T responseTime(final Status.Builder builder, final long threshold, final Supplier<T> supplier) {
        final long start = System.currentTimeMillis();
        final T result = supplier.get();
        final long elapsed = System.currentTimeMillis() - start;
        builder.detail("responseTime", elapsed + "ms");
        if (elapsed > threshold) {
            builder.rating(Rating.Degraded);
        }
        return result;
    }
}
