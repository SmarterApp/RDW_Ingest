package org.opentestsystem.rdw.ingest.common.model;

import java.util.Objects;

public abstract class Organization {

    public enum Type {
        DistrictGroup,
        District,
        SchoolGroup,
        School
    }

    private final Type type;
    private Long id;
    private boolean flag;
    String naturalId;
    String name;
    String stateCode;
    String externalId;
    Organization parent;

    protected Organization(final Type type) {
        this.type = type;
    }

    public Long getId() {
        return id;
    }

    public void setId(final Long id) {
        this.id = id;
    }

    public boolean getFlag() {
        return flag;
    }

    public void setFlag(final boolean flag) {
        this.flag = flag;
    }

    public Type getType() {
        return type;
    }

    public String getNaturalId() {
        return naturalId;
    }

    public String getName() {
        return name;
    }

    public String getStateCode() {
        return stateCode;
    }

    public String getExternalId() {
        return externalId;
    }

    public Organization getParent() {
        return parent;
    }

    /**
     * @param type type of ancestor to find
     * @return ancestor of given type or null
     */
    public Organization findAncestor(final Type type) {
        Organization parent = getParent();
        while (parent != null) {
            if (parent.getType() == type) {
                return parent;
            }
            parent = parent.getParent();
        }
        return null;
    }

    /**
     * @param type type of ancestor to find
     * @return id of ancestor, may be null if ancestor doesn't exist or if their id is null
     */
    public Long findAncestorId(final Type type) {
        final Organization parent = findAncestor(type);
        return parent == null ? null : parent.getId();
    }

    // helper method to avoid changing tests (for now)
    public District getDistrict() {
        return (District) findAncestor(Type.District);
    }

    // helper method to avoid changing tests (for now)
    public void setDistrict(final District district) {
        parent = district;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        final Organization that = (Organization) o;

        return Objects.equals(type, that.type)
                && Objects.equals(naturalId, that.naturalId)
                && Objects.equals(name, that.name)
                && Objects.equals(stateCode, that.stateCode)
                && Objects.equals(externalId, that.externalId)
                && Objects.equals(parent, that.parent);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, naturalId, name, stateCode, externalId, parent);
    }

    public static abstract class Builder<T extends Organization, B extends Builder<T, B>> {
        protected Long id;
        protected String naturalId;
        protected String name;
        protected String stateCode;
        protected String externalId;
        protected Organization parent;

        public T build() {
            final T instance = newInstance();
            instance.setId(id);
            instance.naturalId = naturalId;
            instance.name = name;
            instance.stateCode = stateCode;
            instance.externalId = externalId;
            instance.parent = parent;
            return instance;
        }

        protected abstract T newInstance();

        public B copy(final T that) {
            id(that.getId());
            naturalId(that.getNaturalId());
            name(that.getName());
            stateCode(that.getStateCode());
            externalId(that.getExternalId());
            parent(that.getParent());
            return (B)this;
        }

        public B id(final Long id) {
            this.id = id;
            return (B)this;
        }

        public B naturalId(final String naturalId) {
            this.naturalId = naturalId;
            return (B)this;
        }

        public B name(final String name) {
            this.name = name;
            return (B)this;
        }

        public B stateCode(final String stateCode) {
            this.stateCode = stateCode;
            return (B)this;
        }

        public B parent(final Organization parent) {
            this.parent = parent;
            return (B)this;
        }

        public B externalId(final String externalId) {
            this.externalId = externalId;
            return (B)this;
        }

        // helper to avoid having to change a bunch of test code
        public B district(final District district) {
            return parent(district);
        }
    }
}
