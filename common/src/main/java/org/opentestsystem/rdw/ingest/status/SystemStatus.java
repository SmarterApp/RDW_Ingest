package org.opentestsystem.rdw.ingest.status;

/**
 * Container for overall system status.<br/>
 * Members will be set or left null based on diagnostic level.
 */
public class SystemStatus extends UnitStatus {

    private ConfigurationStatus configuration;
    private DatabaseStatus database;
    private LocalSystemStatus localSystem;
    private ProvidersStatus providers;

    public ConfigurationStatus getConfiguration() {
        return configuration;
    }

    void setConfiguration(final ConfigurationStatus configuration) {
        this.configuration = configuration;
    }

    public LocalSystemStatus getLocalSystem() {
        return localSystem;
    }

    void setLocalSystem(final LocalSystemStatus localSystem) {
        this.localSystem = localSystem;
    }

    public DatabaseStatus getDatabase() {
        return database;
    }

    void setDatabase(final DatabaseStatus database) {
        this.database = database;
    }

    public ProvidersStatus getProviders() {
        return providers;
    }

    void setProviders(final ProvidersStatus providers) {
        this.providers = providers;
    }


    public static Builder builder() {
        return new Builder();
    }

    public static class Builder extends UnitStatus.Builder<SystemStatus, SystemStatus.Builder> {
        private ConfigurationStatus configuration;
        private DatabaseStatus database;
        private LocalSystemStatus localSystem;
        private ProvidersStatus providers;

        @Override
        public SystemStatus build() {
            final SystemStatus status = super.build();
            status.setConfiguration(configuration);
            status.setDatabase(database);
            status.setLocalSystem(localSystem);
            status.setProviders(providers);
            return status;
        }

        public Builder configuration(final ConfigurationStatus configuration) {
            this.configuration = configuration;
            return this;
        }

        public Builder database(final DatabaseStatus database) {
            this.database = database;
            return this;
        }

        public Builder localSystem(final LocalSystemStatus localSystem) {
            this.localSystem = localSystem;
            return this;
        }

        public Builder providers(final ProvidersStatus providers) {
            this.providers = providers;
            return this;
        }

        @Override
        protected SystemStatus createStatus() {
            return new SystemStatus();
        }
    }
}
