package org.opentestsystem.rdw.ingest.common.model;

import java.time.Duration;
import java.time.Instant;
import java.time.format.DateTimeParseException;
import java.util.StringJoiner;

import static com.google.common.base.Strings.isNullOrEmpty;

/**
 * Container for query parameters.
 */
public class RdwImportQuery {
    private ImportContent content;
    private ImportStatus status;
    private String batch;
    private String creator;
    private Instant before;
    private Instant after;

    public ImportContent getContent() {
        return content;
    }

    public ImportStatus getStatus() {
        return status;
    }

    public String getBatch() {
        return batch;
    }

    public String getCreator() {
        return creator;
    }

    public Instant getBefore() {
        return before;
    }

    public Instant getAfter() {
        return after;
    }

    public Builder copy() {
        return builder().copy(this);
    }

    public boolean isEmpty() {
        return content == null && status == null && batch == null && creator == null && before == null && after == null;
    }

    public String asParamString() {
        final StringJoiner joiner = new StringJoiner("&");
        if (content != null) joiner.add("content=" + content);
        if (status != null) joiner.add("status=" + status);
        if (batch != null) joiner.add("batch=" + batch);
        if (creator != null) joiner.add("creator=" + creator);
        if (before != null) joiner.add("before=" + before.toString());
        if (after != null) joiner.add("after=" + after.toString());
        return joiner.toString();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private ImportContent content;
        private ImportStatus status;
        private String batch;
        private String creator;
        private Instant before;
        private Instant after;

        public RdwImportQuery build() {
            final RdwImportQuery query = new RdwImportQuery();
            query.content = content;
            query.status = status;
            query.batch = batch;
            query.creator = creator;
            query.before = before;
            query.after = after;
            return query;
        }

        public Builder copy(final RdwImportQuery query) {
            content = query.content;
            status = query.status;
            batch = query.batch;
            creator = query.creator;
            before = query.before;
            after = query.after;
            return this;
        }

        public Builder content(final ImportContent content) {
            this.content = content;
            return this;
        }

        public Builder content(final String content) {
            this.content = isNullOrEmpty(content) ? null : ImportContent.valueOf(content.toUpperCase());
            return this;
        }

        public Builder status(final ImportStatus status) {
            this.status = status;
            return this;
        }

        public Builder status(final String status) {
            this.status = isNullOrEmpty(status) ? null : ImportStatus.valueOf(status.toUpperCase());
            return this;
        }

        public Builder batch(final String batch) {
            this.batch = batch;
            return this;
        }

        public Builder creator(final String creator) {
            this.creator = creator;
            return this;
        }

        public Builder before(final Instant before) {
            this.before = before;
            return this;
        }

        public Builder before(final String before) {
            return before(parseInstant(before));
        }

        public Builder after(final Instant after) {
            this.after = after;
            return this;
        }

        public Builder after(final String after) {
            return after(parseInstant(after));
        }

        /**
         * Parses string as a flexible instant representation. Value may be:<ul>
         *     <li>null or empty</li>
         *     <li>now - use current instant</li>
         *     <li>ISO-8601 duration, PnDTnHnMn.nS, e.g. -PT6H = -6 hours, added to now()</li>
         *     <li>ISO-8601 instant, YYYY-MM-DDThh:mm:ss.sssZ</li>
         * </ul>
         *
         * @param value value to parse
         * @return appropriate instant
         */
        private static Instant parseInstant(final String value) {
            if (isNullOrEmpty(value)) {
                return null;
            } else if ("now".equalsIgnoreCase(value)) {
                return Instant.now();
            }
            try {
                return Instant.now().plus(Duration.parse(value));
            } catch (final DateTimeParseException ignored) {
            }
            try {
                return Instant.parse(value);
            } catch (final DateTimeParseException e) {
                throw new IllegalArgumentException(e);
            }
        }
    }
}
