package org.opentestsystem.rdw.ingest.common.repository;

import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;

/**
 * JDBC implementation of a SqlListExecutionRepository.
 */
public class JdbcSqlListExecutionRepository implements SqlListExecutionRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;

    public JdbcSqlListExecutionRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Transactional
    @Override
    public void execute(final Iterable<String> sqls) {
        final JdbcOperations operations = jdbcTemplate.getJdbcOperations();
        for (final String sql : checkSql(sqls)) {
            operations.execute(sql);
        }
    }

    @Transactional
    @Override
    public void execute(final Iterable<String> sqls, final Map<String, ?> parameters) {
        final SqlParameterSource params = new MapSqlParameterSource(parameters);
        for (final String sql : checkSql(sqls)) {
            jdbcTemplate.update(sql, params);
        }
    }

    /**
     * Hook for sub-classes to modify SQL statements if desired.
     * Base class simply returns the SQL statements unchanged.
     *
     * @param sqls SQL statements about to be executed
     * @return modified (or not) SQL statements
     */
    protected Iterable<String> checkSql(final Iterable<String> sqls) {
        return sqls;
    }

    protected NamedParameterJdbcTemplate getJdbcTemplate(){
        return jdbcTemplate;
    }
}
