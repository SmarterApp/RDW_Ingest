package org.opentestsystem.rdw.ingest.common.status;

import com.google.common.collect.ImmutableMap;
import org.springframework.beans.factory.annotation.Value;

import java.io.File;
import java.lang.management.ManagementFactory;
import java.lang.management.OperatingSystemMXBean;
import java.lang.management.RuntimeMXBean;
import java.lang.management.ThreadMXBean;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;

/**
 * {@link StatusIndicator} for level 1 local system diagnostics.
 */
public class LocalSystemStatusIndicator extends AbstractStatusIndicator {

    private final ZonedDateTime start;

    @Value("${build.version:DEV}")
    private String buildVersion;

    public LocalSystemStatusIndicator() {
        this.start = ZonedDateTime.now();
    }

    @Override
    public String name() {
        return "localSystem";
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return level >= 1;
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        addApplicationInfoDetails(builder);
        addMemoryDetails(builder);
        addProcessorDetails(builder);
        addThreadDetails(builder);
        addUptimeDetails(builder);
        addVolumeDetails(builder);
    }

    private void addApplicationInfoDetails(final Status.Builder builder) {
        // this map needs to be mutable because the MVC wrapper will inject the uri
        // yeah, this is a hack
        final Map<String, Object> info = newHashMap();
        info.put("version", buildVersion);
        builder.detail("applicationInfo", info);
    }

    private void addMemoryDetails(final Status.Builder builder) {
        final Runtime runtime = Runtime.getRuntime();
        builder.detail("memory", ImmutableMap.of("jvmMaxMemory", runtime.maxMemory(),
                                                 "jvmTotalMemory", runtime.totalMemory(),
                                                 "jvmFreeMemory", runtime.freeMemory()));
    }

    private void addProcessorDetails(final Status.Builder builder) {
        final OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();
        builder.detail("processor", ImmutableMap.of("arch", operatingSystemMXBean.getArch(),
                                                    "availableProcessors", operatingSystemMXBean.getAvailableProcessors(),
                                                    "systemLoad", operatingSystemMXBean.getSystemLoadAverage()));
    }

    private void addThreadDetails(final Status.Builder builder) {
        final ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();
        builder.detail("threads", ImmutableMap.of("threads", threadMxBean.getThreadCount(),
                                                  "threads.peak", threadMxBean.getPeakThreadCount(),
                                                  "threads.totalStarted", threadMxBean.getTotalStartedThreadCount()));
    }

    private void addUptimeDetails(final Status.Builder builder) {
        final RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();
        builder.detail("uptime", ImmutableMap.of("systemUptime", runtimeMXBean.getUptime()/1000 + "s",
                "runningSince", start.toString(),
                "serverTime", ZonedDateTime.now().toString()));
    }

    private void addVolumeDetails(final Status.Builder builder) {
        final File[] roots = File.listRoots();
        if (roots.length == 0) return;

        final List<Status> volumes = newArrayList();
        for (final File root : roots) {
            final double percentFree = 100.0 * root.getUsableSpace() / root.getTotalSpace();
            volumes.add(Status.builder()
                    .rating(percentFree < 1 ? Rating.Failed : percentFree < 10 ? Rating.Warning : Rating.Ideal)
                    .detail("absolutePath", root.getAbsolutePath())
                    .detail("totalSpace", root.getTotalSpace())
                    .detail("usableSpace", root.getUsableSpace())
                    .detail("percentFree", percentFree)
                    .build());
        }
        builder.detail("volumes", volumes);
    }
}
