package org.opentestsystem.rdw.ingest.common.repository;

import org.opentestsystem.rdw.ingest.common.model.School;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.SqlOutParameter;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.stereotype.Repository;

import java.sql.Types;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Repository
class JdbcSchoolRepository implements SchoolRepository {

    private final JdbcTemplate jdbcTemplate;
    private final SimpleJdbcCall upsertSchool;

    @Value("${sql.school.findIdByNaturalId}")
    private String sqlFindIdByNaturalId;

    @Autowired
    JdbcSchoolRepository(final JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.upsertSchool = new SimpleJdbcCall(jdbcTemplate)
                .withProcedureName("school_upsert")
                // in production environments procedure metadata may not be accessible so be explicit
                .withoutProcedureColumnMetaDataAccess()
                .useInParameterNames("p_district_name", "p_district_natural_id", "p_name", "p_natural_id", "p_import_id")
                .declareParameters(
                        new SqlParameter("p_district_name", Types.VARCHAR),
                        new SqlParameter("p_district_natural_id", Types.VARCHAR),
                        new SqlParameter("p_name", Types.VARCHAR),
                        new SqlParameter("p_natural_id", Types.VARCHAR),
                        new SqlParameter("p_import_id", Types.BIGINT),
                        new SqlOutParameter("p_id", Types.INTEGER)
                );
    }

    @Override
    public int upsert(final School school, final long importId) {
        return (int) upsertSchool.execute(upsertSchoolParameters(school, importId)).get("p_id");
    }

    @Override
    public List<Integer> upsert(final Iterable<School> schools, final long importId) {
        // Note for posterity: batch executing stored procedures just doesn't work very well. It is flat-out
        // impossible when there is an out param. But, even without that, the batch execution fails because
        // too many results are returned (failure happens in StatementImpl#processMultiCountsAndKeys). This
        // can be mitigated by setting the rewriteBatchedStatements flag to false but then that disables
        // batch execution. The upshot is that, even though this approach is slower, it is about as good as we
        // can get without crazy hijinx and it isn't too bad (18s for 13500 schools and 2000 districts).
        final List<Integer> ids = newArrayList();
        for (final School school : schools) {
            ids.add((int)upsertSchool.execute(upsertSchoolParameters(school, importId)).get("p_id"));
        }
        return ids;
    }

    @Override
    public Integer findIdByNaturalId(final String naturalId) {
        try {
            return jdbcTemplate.queryForObject(sqlFindIdByNaturalId, new Object[]{naturalId}, Integer.class);
        } catch (final EmptyResultDataAccessException ignore) {
            return null;
        }
    }

    private static MapSqlParameterSource upsertSchoolParameters(final School school, final long importId) {
        return new MapSqlParameterSource()
                .addValue("p_district_natural_id", school.getDistrict().getNaturalId())
                .addValue("p_district_name", school.getDistrict().getName())
                .addValue("p_name", school.getName())
                .addValue("p_natural_id", school.getNaturalId())
                .addValue("p_import_id", importId);
    }
}
