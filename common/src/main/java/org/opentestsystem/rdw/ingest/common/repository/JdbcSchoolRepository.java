package org.opentestsystem.rdw.ingest.common.repository;

import org.opentestsystem.rdw.ingest.common.model.School;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.stereotype.Repository;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Repository
class JdbcSchoolRepository implements SchoolRepository {

    private final JdbcTemplate jdbcTemplate;

    @Value("${sql.school.findIdByNaturalId}")
    private String sqlFindIdByNaturalId;

    @Value("${sql.school.upsert}")
    private String sqlUpsertSchool;

    @Autowired
    JdbcSchoolRepository(final JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    @Cacheable(value = "school", key = "#school")
    public int upsert(final School school, final long importId) {
        return (int) new SimpleJdbcCall(jdbcTemplate)
                .withProcedureName("school_upsert").execute(new MapSqlParameterSource()
                        .addValue("p_district_natural_id", school.getDistrict().getNaturalId())
                        .addValue("p_district_name", school.getDistrict().getName())
                        .addValue("p_name", school.getName())
                        .addValue("p_natural_id", school.getNaturalId())
                        .addValue("p_import_id", importId)).get("p_id");
    }

    @Override
    public void upsert(final Iterable<School> schools, final long importId) {
        final List<School> toUpsert = newArrayList(schools);
        jdbcTemplate.batchUpdate(sqlUpsertSchool, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(final PreparedStatement ps, final int i) throws SQLException {
                final School school = toUpsert.get(i);
                ps.setString(1, school.getDistrict().getName());
                ps.setString(2, school.getDistrict().getNaturalId());
                ps.setString(3, school.getName());
                ps.setString(4, school.getNaturalId());
                ps.setLong(5, importId);
            }

            @Override
            public int getBatchSize() {
                return toUpsert.size();
            }
        });
    }

    @Override
    @Cacheable(value = "schoolId")
    public Integer findIdByNaturalId(final String naturalId) {
        try {
            return jdbcTemplate.queryForObject(sqlFindIdByNaturalId, new Object[]{naturalId}, Integer.class);
        } catch (final EmptyResultDataAccessException ignore) {
            return null;
        }
    }
}
