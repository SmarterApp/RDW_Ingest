package org.opentestsystem.rdw.ingest.common.util;

import java.util.function.Function;

/**
 * Helper methods for parsing string fields
 */
public class ParserHelper {

    private final DataElementErrorCollector elementErrorCollector;

    /**
     * This is an optional construction for use only when you don't care about collecting errors
     */
    public ParserHelper() {
        this.elementErrorCollector = null;
    }

    /**
     * General construction that collects errors in to a {@link DataElementErrorCollector}
     * @param elementErrorCollector error collector to use for any errors
     */
    public ParserHelper(final DataElementErrorCollector elementErrorCollector) {
        this.elementErrorCollector = elementErrorCollector;
    }

    /**
     * Basic typed validation. The validating function should convert from String to the desired type,
     * returning null to indicate an error. Any error will be added to the error collector.
     *
     * @param name name of field, used only for error message
     * @param rawValue raw field value
     * @param fx validating function, returns null for error
     * @param <T> data type
     * @return validated value of type T, may be null
     */
    public <T> T validate(final String name, final String rawValue, final Function<String, T> fx) {
        final T value = fx.apply(rawValue == null ? null : rawValue.trim());
        if (value == null && elementErrorCollector != null)
            elementErrorCollector.add(new DataElementError(name, rawValue, "Invalid value"));
        return value;
    }

    /**
     * Typed validation that chains a basic validation with a second validation. Like basic validation,
     * the validating function should convert from String to the desired interim type, returning null
     * to indicate an error. Any non-null value from the first function is passed to the second function.
     * <p>
     * Yes, in theory a single function could be used but this was initially created to make it easy to
     * combine basic validation with repository lookups which expect well behaved input.
     * </p>
     *
     * @param name name of field, used only for error message
     * @param rawValue raw field value
     * @param fx first validating function, returns null for error
     * @param fx2 second validating function, returns null for error
     * @param <T> return type of first validating function, parameter type of second validating function
     * @param <R> return type of second validating function
     * @return validated type of type R, may be null
     */
    public <T, R> R validate(final String name, final String rawValue,
                             final Function<String, T> fx, final Function<T, R> fx2) {
        final T valueT = validate(name, rawValue, fx);
        if (valueT == null) return null;

        final R valueR = fx2.apply(valueT);
        if (valueR == null && elementErrorCollector != null)
            elementErrorCollector.add(new DataElementError(name, rawValue, "Unknown value"));

        return valueR;
    }
}
