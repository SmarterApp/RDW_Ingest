package org.opentestsystem.rdw.ingest.common.util;

import org.opentestsystem.rdw.ingest.common.error.DataElementError;

import java.util.function.BiFunction;
import java.util.function.Function;

/**
 * Helper methods for parsing
 */
public class ParserHelper {

    private final DataElementErrorCollector elementErrorCollector;


    public ParserHelper(DataElementErrorCollector elementErrorCollector) {
        this.elementErrorCollector = elementErrorCollector;
    }

    //Basic validation for types (integer, float, double, empty strings, etc), that don't require a query against the database
    public <T> T basicValidation(final String name, final String rawValue, Function<String, T> fx) {
        final String value = rawValue.trim();
        T validatedT = fx.apply(value);
        if (validatedT == null)
            elementErrorCollector.addDataElementError(new DataElementError(name, value, "Invalid value"));
        return validatedT;
    }

    //Validation of values against a supplied repository query, checking for valid primitive type first
    public <T, R> R repositoryValidation(final String name, final String rawValue,
                                         Function<String, T> fx, Function<T, R> repoFx) {
        final String value = rawValue.trim();
        T validatedVal = basicValidation(name, value, fx);
        R returnVal = null;
        if (validatedVal == null) return returnVal;

        returnVal = repoFx.apply(validatedVal);
        if (returnVal == null)
            elementErrorCollector.addDataElementError(new DataElementError(name, value, "Unknown value"));

        return returnVal;
    }

    public <T, U, R> R repositoryBiValidation(final String name, final String rawValue, Function<String, T> fx1, final int value2, final BiFunction<T, Integer, R> repoFx) {
        final String value1 = rawValue.trim();

        T validatedVal1 = basicValidation(name, value1, fx1);
        if (validatedVal1 == null) return null;

        R returnVal = repoFx.apply(validatedVal1, value2);

        if (returnVal == null) {
            elementErrorCollector.addDataElementError(new DataElementError(name,
                    String.format("%s and %s", value1, value2), "Unknown value combination"));
        }
        return returnVal;
    }
}
