package org.opentestsystem.rdw.ingest.status;

import com.google.common.collect.ImmutableMap;

import java.lang.management.ManagementFactory;
import java.lang.management.OperatingSystemMXBean;
import java.lang.management.RuntimeMXBean;
import java.lang.management.ThreadMXBean;
import java.time.ZonedDateTime;

/**
 * {@link StatusIndicator} for level 1 local system diagnostics.
 */
public class LocalSystemStatusIndicator extends AbstractStatusIndicator {

    private final ZonedDateTime start;

    public LocalSystemStatusIndicator() {
        this.start = ZonedDateTime.now();
    }

    @Override
    public int level() {
        return 1;
    }

    @Override
    public String name() {
        return "localSystem";
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder) {
        addMemoryDetails(builder);
        addProcessorDetails(builder);
        addUptimeDetails(builder);
        addThreadDetails(builder);
        // TODO - volumes
        // TODO - url
        // TODO - version info
    }

    private void addMemoryDetails(final Status.Builder builder) {
        final Runtime runtime = Runtime.getRuntime();
        builder.detail("memory", ImmutableMap.of("jvmMaxMemory", runtime.maxMemory(),
                                                 "jvmTotalMemory", runtime.totalMemory(),
                                                 "jvmFreeMemory", runtime.freeMemory()));
    }

    private void addProcessorDetails(final Status.Builder builder) {
        final OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();
        builder.detail("processor", ImmutableMap.of("arch", operatingSystemMXBean.getArch(),
                                                    "availableProcessors", operatingSystemMXBean.getAvailableProcessors(),
                                                    "systemLoad", operatingSystemMXBean.getSystemLoadAverage()));
    }

    private void addUptimeDetails(final Status.Builder builder) {
        final RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();
        builder.detail("uptime", ImmutableMap.of("systemUptime", runtimeMXBean.getUptime()/1000 + "s",
                                                 "runningSince", start.toString(),
                                                 "serverTime", ZonedDateTime.now().toString()));
    }

    private void addThreadDetails(final Status.Builder builder) {
        final ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();
        builder.detail("threads", ImmutableMap.of("threads", threadMxBean.getThreadCount(),
                                                  "threads.peak", threadMxBean.getPeakThreadCount(),
                                                  "threads.totalStarted", threadMxBean.getTotalStartedThreadCount()));
    }
}
