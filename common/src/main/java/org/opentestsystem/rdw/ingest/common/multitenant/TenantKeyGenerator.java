package org.opentestsystem.rdw.ingest.common.multitenant;

import org.springframework.cache.interceptor.KeyGenerator;

import java.lang.reflect.Method;
import java.util.StringJoiner;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;

import static org.opentestsystem.rdw.multitenant.TenantIdResolver.NO_TENANT_ID;

/**
 * A custom key generator that prefixes with the current tenant id.
 * The resulting key includes the method name and stringified params.
 * For example, "CA_findAll".
 */
public class TenantKeyGenerator implements KeyGenerator {

    private final TenantIdResolver tenantIdResolver;

    public TenantKeyGenerator(final TenantIdResolver tenantIdResolver) {
        this.tenantIdResolver = tenantIdResolver;
    }

    @Override
    public Object generate(final Object target, final Method method, final Object... params) {
        return generate(method.getName(), params);
    }

    /**
     * This helper is broken out to help with integration tests.
     *
     * @param methodName method name, e.g. "findAll"
     * @param params method parameters
     * @return generated key
     */
    public Object generate(final String methodName, final Object... params) {
        final StringJoiner joiner = new StringJoiner("_");
        joiner.add(tenantIdResolver.getTenantId().orElse(NO_TENANT_ID));
        joiner.add(methodName);
        if (params != null && params.length > 0) {
            for (final Object param : params) {
                joiner.add(param.toString());
            }
        }
        return joiner.toString();
    }
}
