package org.opentestsystem.rdw.ingest.status;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.actuate.endpoint.mvc.AbstractNamedMvcEndpoint;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Endpoint for serving up web diagnostics.
 * <p>
 * TODO - break out StatusEndpoint that this just delegates to (that would allow for JMX usage)?
 * For example, see how Metrics/HealthMvcEndpoint uses Metrics/HealthEndpoint. There are some problems, e.g.
 * invoke() needs to take an argument, there needs to be a way to customize the content, etc.
 * </p>
 */
@Component
@ConfigurationProperties(prefix = "endpoints.status")
public class StatusMvcEndpoint extends AbstractNamedMvcEndpoint {

    @Value("${spring.application.name}")
    private String applicationName;

    public StatusMvcEndpoint() {
        super("status", "/status", true);
    }

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<?> invoke(@RequestParam(defaultValue = "0") int level) {
        return ResponseEntity.ok(generateStatus(level));
    }

    private SystemStatus generateStatus(final int level) {
        return SystemStatus.builder()
                .level(level)
                .unit(applicationName)
                // TODO - should system statusRating be based on other bits?
                .localSystem(generateLocalSystemStatus(level))
                .configuration(generateConfigurationStatus(level))
                .database(generateDatabaseStatus(level))
                .providers(generateProvidersStatus(level))
                .build();
    }

    // TODO - establish template pattern for fleshing out status
    // TODO - separate generation into individual helpers so we don't have a big ugly class here
    // TODO - hook into HealthIndicator classes for some of this?

    protected LocalSystemStatus generateLocalSystemStatus(final int level) {
        if (level < 1) return null;
        return LocalSystemStatus.builder().build();
    }

    protected ConfigurationStatus generateConfigurationStatus(final int level) {
        if (level < 2) return null;
        return ConfigurationStatus.builder().build();
    }

    protected DatabaseStatus generateDatabaseStatus(final int level) {
        if (level < 3) return null;
        // TODO - 3=readOnly, 4=write
        return DatabaseStatus.builder().build();
    }

    protected ProvidersStatus generateProvidersStatus(final int level) {
        if (level < 5) return null;
        return ProvidersStatus.builder().build();
    }
}
