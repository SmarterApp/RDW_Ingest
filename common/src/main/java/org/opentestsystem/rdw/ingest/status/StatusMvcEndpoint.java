package org.opentestsystem.rdw.ingest.status;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.actuate.endpoint.mvc.AbstractNamedMvcEndpoint;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

/**
 * Endpoint for serving up web diagnostics.
 * <p>
 * TODO - break out StatusEndpoint that this just delegates to (that would allow for JMX usage)?
 * For example, see how Metrics/HealthMvcEndpoint uses Metrics/HealthEndpoint. There are some problems, e.g.
 * invoke() needs to take an argument, there needs to be a way to customize the content, etc.
 * </p>
 */
@ConfigurationProperties(prefix = "endpoints.status")
public class StatusMvcEndpoint extends AbstractNamedMvcEndpoint {

    @Value("${spring.application.name}")
    private String applicationName;

    private List<StatusIndicator> statusIndicators;

    public StatusMvcEndpoint(final List<StatusIndicator> statusIndicators) {
        super("status", "/status", true);
        this.statusIndicators = statusIndicators;
    }

    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity<?> invoke(@RequestParam(defaultValue = "0") int level) {
        return ResponseEntity.ok(generateStatus(level));
    }

    private SystemStatus generateStatus(final int level) {
        // TODO - set overall Rating based on indicator ratings

        final SystemStatus.Builder builder = SystemStatus.builder()
                .level(level)
                .unit(applicationName);
        for (final StatusIndicator statusIndicator : statusIndicators) {
            if (level < statusIndicator.level()) continue;
            builder.sub(statusIndicator.name(), statusIndicator.status());
        }
        return builder.build();
    }
}
