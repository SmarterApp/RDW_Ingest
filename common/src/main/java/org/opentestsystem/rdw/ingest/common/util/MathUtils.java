package org.opentestsystem.rdw.ingest.common.util;

public final class MathUtils {

    /**
     * Return true if two double values are close to the same value. It supports both a relative
     * and absolute tolerance. If the magnitude of the values is not known, a relative tolerance
     * should be specified, e.g. 1e-06 leaving the absolute tolerance at 0. If both values are
     * close to zero, then an absolute tolerance can be useful.
     *
     * @param v1 value
     * @param v2 value
     * @param rel_tol relative tolerance, >=0; the maximum allowed difference between the values relative to the larger value
     * @param abs_tol absolute tolerance, >=0; the maximum allowed difference between the values
     * @return true if
     */
    public static boolean isClose(final double v1, final double v2, final double rel_tol, final double abs_tol) {
        return Math.abs(v1 - v2) <= Math.max(rel_tol * Math.max(Math.abs(v1), Math.abs(v2)), abs_tol);
    }

    /**
     * Compare two decimal values to the precision of {@link Float} values.
     * <p>
     * A float is 32-bits: 1 sign bit, 8 exp bits, 23 significand bits. So a float can store up to
     * 2^23 of precision = 10^6.9 so we'll call it 6 significant digits.
     * </p>
     *
     * @param v1 value
     * @param v2 value
     * @return true if values are the same to float significant digits
     */
    public static boolean isCloseFloat(final double v1, final double v2) {
        return isClose(v1, v2, Math.pow(2, -22), 0);
    }

    /**
     * Compare two decimal values to the precision of SQL float values.
     * <p>
     * Although the database should be storing 23 bits of precision, when it goes through the JDBC
     * call stack it seems to be rounded aggressively at 6 significant decimal digits.
     * </p>
     *
     * @param v1 value
     * @param v2 value
     * @return true if values are the same to SQL float precision
     */
    public static boolean isCloseSqlFloat(final double v1, final double v2) {
        return isClose(v1, v2, 1e-5, 0);
    }


    private MathUtils() {
    }
}
