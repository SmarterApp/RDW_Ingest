package org.opentestsystem.rdw.ingest.common.util;

import org.springframework.util.DigestUtils;
import org.springframework.util.MimeType;

import java.util.Arrays;
import java.util.Properties;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.LocationStrategy;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;

/**
 * Archiver for the transformed payload created during the pre-processor phase of one of the ingest processors.
 * The original payload is already archived as part of the import service, and this service will save the transformed
 * under the same name but with "-transform" added to it.
 *
 * If there is no transformation of the payload during pre-processing then no transformed file will be saved.
 */
public class TransformedPayloadArchiver {
    protected static final String CONTENT_TYPE_PROPERTY = "Content-Type";
    protected static final String CONTENT_LENGTH_PROPERTY = "Content-Length";
    protected static final String CONTENT_TYPE_HEADER = "originalContentType";
    protected static final String SUFFIX = "-transformed";

    public void archive(final RdwMessageHeaderAccessor accessor,
                        final byte[] originalPayload,
                        final byte[] transformedPayload,
                        final ByteArrayContentWriter archiveService) {

        if (!Arrays.equals(originalPayload, transformedPayload)) {
            final String digest = DigestUtils.md5DigestAsHex(originalPayload).toUpperCase();
            final ImportContent content = ImportContent.valueOf(accessor.getContent());

            final String location =
                    new LocationStrategy.ImportContentLocationStrategy(content).location(digest) + SUFFIX;

            final Properties properties = new Properties();
            properties.put(CONTENT_LENGTH_PROPERTY, transformedPayload.length);

            // Actual content type could be in "original" or regular content type header.
            String contentType = (String) accessor.getHeader(CONTENT_TYPE_HEADER);
            if (contentType == null) {
                final MimeType mimeType = accessor.getContentType();
                if (mimeType != null) {
                    contentType = mimeType.getType();
                }
            }
            if (contentType != null) {
                properties.setProperty(CONTENT_TYPE_PROPERTY, contentType);
            }

            archiveService.writeResource(location, transformedPayload, properties);
        }
    }
}
