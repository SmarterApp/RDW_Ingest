package org.opentestsystem.rdw.ingest.processor;


import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.processor.service.AccessibilityProcessor;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentPackageProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Processor;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.Message;


@EnableBinding(Sink.class)
public class AccessibilityProcessorConfiguration {
    private static final Logger logger = LoggerFactory.getLogger(AccessibilityProcessorConfiguration.class);

    private final ImportRepository importRepository;
    private final AccessibilityProcessor processor;

    @Autowired
    public AccessibilityProcessorConfiguration(final ImportRepository importRepository,
                                               final AccessibilityProcessor processor) {
        this.importRepository = importRepository;
        this.processor = processor;
    }

    @ServiceActivator(inputChannel = Processor.INPUT)
    public void process(final Message<?> message) {
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(message);
        final String payload = (String) message.getPayload();
        logger.info("received " + accessor.getContent());
        logger.info(accessor.getContentType() + ": " + (payload.length() > 80 ? payload.substring(0, 80) + "..." : payload));
        try {
            process(payload, accessor.getImportId());
        } catch (final Exception e) {
            logger.error("failed with an unexpected import error: " + e.getMessage());
        }
    }

    private void process(final String assessmentPackage, final long importId) {
        try {
            processor.process(assessmentPackage);
            importRepository.updateStatusAndMessageById(importId, ImportStatus.PROCESSED, null);
        } catch (final ImportException ie) {
            logger.error("failed with an import error: " + ie);
            importRepository.updateStatusAndMessageById(importId, ie.getStatus(), ie.getMessage());
        } catch (final Exception e) {
            logger.error("failed with an unexpected error: " + e);
            importRepository.updateStatusAndMessageById(importId, ImportStatus.BAD_DATA, e.getMessage());
        }
    }
}
