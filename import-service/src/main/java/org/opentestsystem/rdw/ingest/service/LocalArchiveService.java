package org.opentestsystem.rdw.ingest.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StreamUtils;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.nio.charset.Charset;
import java.util.Properties;

/**
 * An {@link ArchiveService} implementation that uses the local file system.
 */
public class LocalArchiveService implements ArchiveService {
    private static final Logger logger = LoggerFactory.getLogger(LocalArchiveService.class);
    private static final String FileSchemePrefix = "file://";

    private final String rootPath;

    /**
     * @param root root path, must start with "file://", e.g. "file:///tmp/"
     */
    LocalArchiveService(final String root) {
        if (!validRoot(root)) {
            throw new IllegalArgumentException("Invalid local file root " + root);
        }
        final String path = root.substring(FileSchemePrefix.length());
        rootPath = path.endsWith(File.separator) ? path : (path + File.separator);
    }

    @Override
    public void writeResource(final String location, final String content, final Properties properties) {
        final File file = realResourceFile(location);

        final File folder = file.getParentFile();
        if (!folder.exists()) {
            if (!folder.mkdirs()) {
                throw new IllegalArgumentException("Error creating local path " + folder.getPath());
            }
        }

        try (final OutputStream os = new BufferedOutputStream(new FileOutputStream(file, false))) {
            os.write(content.getBytes("UTF-8"));
        } catch (final IOException e) {
            final String msg = "Error writing content to " + file.getPath();
            logger.warn(msg, e);
            throw new RuntimeException(msg, e);
        }

        if (properties == null || properties.isEmpty()) {
            return;
        }

        try (final Writer writer = new BufferedWriter(new FileWriter(realPropertiesFile(location), false))) {
            properties.store(writer, null);
        } catch (final IOException e) {
            final String msg = "Error writing properties to " + realPropertiesFile(location).getPath();
            logger.warn(msg, e);
            throw new RuntimeException(msg, e);
        }
    }

    @Override
    public String readResource(final String location) {
        final File file = realResourceFile(location);
        if (!file.exists()) {
            return null;
        }

        try (final InputStream is = new BufferedInputStream(new FileInputStream(file))) {
            return StreamUtils.copyToString(is, Charset.forName("UTF-8"));
        } catch (final IOException e) {
            final String msg = "Error reading content from " + file.getPath();
            logger.warn(msg, e);
            throw new RuntimeException(msg, e);
        }
    }

    @Override
    public Properties readProperties(final String location) {
        final Properties properties = new Properties();

        final File file = realPropertiesFile(location);
        if (!file.exists()) {
            return properties;
        }

        try (final Reader reader = new BufferedReader(new FileReader(file))) {
            properties.load(reader);
        } catch (final IOException e) {
            final String msg = "Error reading properties from " + file.getPath();
            logger.warn(msg, e);
            throw new RuntimeException(msg, e);
        }

        return properties;
    }

    private File realResourceFile(final String location) {
        try {
            return new File(rootPath + location).getCanonicalFile();
        } catch (IOException e) {
            throw new IllegalArgumentException("Error with local file location " + location);
        }
    }

    private File realPropertiesFile(final String location) {
        try {
            return new File(rootPath + location + ".properties").getCanonicalFile();
        } catch (IOException e) {
            throw new IllegalArgumentException("Error with local file location " + location);
        }
    }

    static boolean validRoot(final String root) {
        return root != null && root.toLowerCase().startsWith(FileSchemePrefix);
    }
}
