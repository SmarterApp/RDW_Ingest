package org.opentestsystem.rdw.ingest.status;

import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.opentestsystem.rdw.ingest.auth.StubTokenServices;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;
import org.springframework.stereotype.Component;

import java.util.function.Supplier;

/**
 * A {@link StatusIndicator} for token service.
 */
@Component
public class TokenServicesStatusIndicator extends AbstractStatusIndicator {

    private final ResourceServerTokenServices tokenServices;

    @Autowired
    TokenServicesStatusIndicator(final ResourceServerTokenServices tokenServices) {
        this.tokenServices = tokenServices;
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ExternalDependencies.isLessThanOrEqualTo(level);
    }

    @Override
    public String name() {
        return "tokenServices";
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        if (tokenServices instanceof StubTokenServices) {
            builder.rating(Rating.Warning)
                   .detail("message", "Configured for stub implementation. This is only OK for testing.");
        } else {
            responseTime(builder, 200, (Supplier<Void>) () -> {
                try {
                    tokenServices.readAccessToken("status-probe");
                } catch (final InvalidTokenException e) {
                    // expected
                }
                return null;
            });
        }
    }
}
