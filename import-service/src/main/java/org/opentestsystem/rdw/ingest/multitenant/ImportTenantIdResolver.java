package org.opentestsystem.rdw.ingest.multitenant;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import java.util.Optional;
import org.opentestsystem.rdw.ingest.auth.SbacUser;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;

/**
 * The import {@link TenantIdResolver} gets the tenant id from current user.
 * TODO - multitenant; this doesn't really deal with actuator and status endpoints
 */
public class ImportTenantIdResolver implements TenantIdResolver {

    @Override
    public Optional<String> getTenantId() {
        try {
            return Optional.of(getCurrentUser().getTenantId());
        } catch (final IllegalStateException | ClassCastException e) {
            // expected exceptions, fall thru for no tenant handling
        }
        return Optional.of(TenantIdResolver.NO_TENANT_ID);
    }

    /**
     * Helper to get the current {@link SbacUser} from the security context.
     *
     * @return current SbacUser
     * @throws IllegalStateException if there is no current auth
     * @throws ClassCastException if current principal is not an SbacUser
     */
    public static SbacUser getCurrentUser() {
        final Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null) {
            throw new IllegalStateException("user not authenticated");
        }
        if (!(authentication.getPrincipal() instanceof SbacUser)) {
            throw new ClassCastException("authentication principal must be of type " + SbacUser.class.getName());
        }
        return (SbacUser) authentication.getPrincipal();
    }
}
