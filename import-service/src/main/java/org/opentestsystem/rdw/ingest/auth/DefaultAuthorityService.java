package org.opentestsystem.rdw.ingest.auth;

import com.google.common.collect.ImmutableSet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.opentestsystem.rdw.security.repository.OrganizationRepository;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.opentestsystem.rdw.security.service.PermissionServiceException;
import org.opentestsystem.rdw.utils.Grant;
import org.opentestsystem.rdw.utils.TenancyChain;

import static com.google.common.collect.Maps.newHashMap;
import static org.opentestsystem.rdw.ingest.auth.Authorities.permissionToAuthorityName;
import static org.opentestsystem.rdw.ingest.auth.Authorities.roleToAuthorityName;
import static org.opentestsystem.rdw.utils.Grant.Level.DISTRICT;
import static org.opentestsystem.rdw.utils.Grant.Level.DISTRICT_GROUP;
import static org.opentestsystem.rdw.utils.Grant.Level.INSTITUTION;
import static org.opentestsystem.rdw.utils.Grant.Level.INSTITUTION_GROUP;

/**
 * This service is responsible for converting tenancy chain grants to spring authorities.
 */
@Service
class DefaultAuthorityService implements AuthorityService {
    private final PermissionService permissionService;
    private final OrganizationRepository organizationRepository;

    @Autowired
    public DefaultAuthorityService(final PermissionService permissionService,
                                   final OrganizationRepository organizationRepository) {
        this.permissionService = permissionService;
        this.organizationRepository = organizationRepository;
    }

    @Override
    public Set<GrantedAuthority> getAuthorities(final TenancyChain tenancyChain) {
        final ImmutableSet.Builder<GrantedAuthority> authorities = ImmutableSet.builder();

        // filter grants to just those that apply to this component and have an associated tenant (state)
        final Map<String, Collection<String>> permissionsByRole = getPermissionsByRole();
        final List<Grant> grants = tenancyChain.filter(grant ->
                permissionsByRole.containsKey(grant.getRole()) && grant.getStateId() != null).getGrants();

        for (final Grant grant : grants) {
            authorities.add(simpleRoleAuthorityMapper.apply(grant.getRole()));
            for (final String permission : permissionsByRole.get(grant.getRole())) {
                authorities.add(simplePermissionAuthorityMapper.apply(permission));
            }
        }

        return authorities.build();
    }

    @Override
    public Set<Permission> getPermissions(final TenancyChain tenancyChain) {
        final Map<String, PermissionScope.Builder> builders = newHashMap();

        // filter grants to just those that apply to this component and have an associated tenant (state)
        final Map<String, Collection<String>> permissionsByRole = getPermissionsByRole();
        final List<Grant> grants = tenancyChain.filter(grant ->
                permissionsByRole.containsKey(grant.getRole()) && grant.getStateId() != null).getGrants();

        final Map<Grant.Level, Map<String, Long>> orgMap = getOrganizationsById(grants);

        Long id;
        for (final Grant grant : grants) {
            for (final String permission : permissionsByRole.get(grant.getRole())) {
                final PermissionScope.Builder builder = builders.computeIfAbsent(permission, p -> PermissionScope.builder());

                switch(grant.getLevel()) {
                    case CLIENT:
                    case STATE_GROUP:
                    case STATE:
                        builder.statewide(true);
                        break;
                    case DISTRICT_GROUP:
                        if ((id = orgMap.get(DISTRICT_GROUP).get(grant.getEntityId())) != null)
                            builder.addDistrictGroupId(id);
                        break;
                    case DISTRICT:
                        if ((id = orgMap.get(DISTRICT).get(grant.getEntityId())) != null)
                            builder.addDistrictId(id);
                        break;
                    case INSTITUTION_GROUP:
                        if ((id = orgMap.get(INSTITUTION_GROUP).get(grant.getEntityId())) != null)
                            builder.addSchoolGroupId(id);
                        break;
                    case INSTITUTION:
                        if ((id = orgMap.get(INSTITUTION).get(grant.getEntityId())) != null)
                            builder.addSchoolId(id);
                        break;
                    default:
                        break;
                }
            }
        }

        return builders.entrySet().stream()
                .filter(entry -> entry.getValue().isValid())
                .map(entry -> new Permission(entry.getKey(), entry.getValue().build()))
                .collect(Collectors.toSet());
    }

    /**
     * A role mapper that prepends "ROLE_" and creates a {@link SimpleGrantedAuthority}
     */
    private static final Function<String, SimpleGrantedAuthority> simpleRoleAuthorityMapper =
            role -> new SimpleGrantedAuthority(roleToAuthorityName(role));

    /**
     * A permission mapper that prepends "PERM_" and creates a {@link SimpleGrantedAuthority}
     */
    private static final Function<String, SimpleGrantedAuthority> simplePermissionAuthorityMapper =
            permission -> new SimpleGrantedAuthority(permissionToAuthorityName(permission));

    private Map<String, Collection<String>> getPermissionsByRole() {
        try {
            return permissionService.getPermissionsByRole();
        } catch (final PermissionServiceException exception) {
            throw new RuntimeException("Failed to get permissions", exception);
        }
    }

    private Map<Grant.Level, Map<String, Long>> getOrganizationsById(final List<Grant> grants) {
        final Map<Grant.Level, Map<String, Long>> orgMap = newHashMap();
        orgMap.put(DISTRICT_GROUP, organizationRepository.findAllDistrictGroupIds(grants.stream()
                .filter(grant -> DISTRICT_GROUP == grant.getLevel()).map(Grant::getEntityId).collect(Collectors.toSet())));
        orgMap.put(DISTRICT, organizationRepository.findAllDistrictIds(grants.stream()
                .filter(grant -> DISTRICT == grant.getLevel()).map(Grant::getEntityId).collect(Collectors.toSet())));
        orgMap.put(INSTITUTION_GROUP, organizationRepository.findAllSchoolGroupIds(grants.stream()
                .filter(grant -> INSTITUTION_GROUP == grant.getLevel()).map(Grant::getEntityId).collect(Collectors.toSet())));
        orgMap.put(INSTITUTION, organizationRepository.findAllSchoolIds(grants.stream()
                .filter(grant -> INSTITUTION == grant.getLevel()).map(Grant::getEntityId).collect(Collectors.toSet())));
        return orgMap;
    }
}
