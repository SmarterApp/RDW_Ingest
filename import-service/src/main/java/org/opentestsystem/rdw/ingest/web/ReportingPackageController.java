package org.opentestsystem.rdw.ingest.web;

import org.opentestsystem.rdw.ingest.auth.RdwUser;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.service.ImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import javax.validation.constraints.NotNull;
import java.util.List;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.net.HttpHeaders.CONTENT_TYPE;

;

/**
 * Controller for reporting package / assessments end-points
 * <p>
 * TODO - do we want a resource wrapper around a list of RdwImport's to provide the self link?<br/>
 * I played with doing it with Resources but that nests the content with "_embedded" and looks yucky.<pre>
 * final Link link = linkTo(methodOn(ExamController.class).getImports(batch, status)).withSelfRel();
 * return new Resources<>(assembler.toResources(service.getImports(batch, statusFromParam(status))), link);
 * </pre>
 * </p>
 */
@RestController
@RequestMapping({ "/packages", "/assessments" })
class ReportingPackageController {

    private final ImportService service;
    private final ReportingPackageImportResourceAssembler assembler = new ReportingPackageImportResourceAssembler();

    @Autowired
    public ReportingPackageController(@NotNull final ImportService service) {
        this.service = checkNotNull(service);
    }

    @PostMapping("/imports")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public RdwImportResource postImport(Authentication authentication,
                                        @RequestHeader(value = CONTENT_TYPE, required = false) String contentType,
                                        @RequestBody String body,
                                        @RequestParam(required = false) String batch) {
        return assembler.toResource(service.importContent((RdwUser) authentication.getPrincipal(), body, ImportContent.PACKAGE, contentType, batch));
    }

    @GetMapping("/imports/{id}")
    @ResponseStatus(HttpStatus.OK)
    public RdwImportResource getImport(@PathVariable Long id) {
        return assembler.toResource(service.getImport(id).get());
    }

    @GetMapping("/imports")
    @ResponseStatus(HttpStatus.OK)
    public List<RdwImportResource> getImports(final RdwImportQuery query) {
        return assembler.toResources(service.getImports(query.copy().content(ImportContent.PACKAGE).build()));
    }
}
