package org.opentestsystem.rdw.ingest.impsvc.service;

import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;

/**
 * Service for manipulating import content.
 */
public interface ImportService {

    /**
     * Accept the payload for import processing. This will check for submission duplicates, archive
     * the content, create an import record, and post a message on the appropriate processing queue.
     * The message will have the payload as the message body.
     * <p>
     * Implementations should pull user detail from the current context.
     * </p>
     * <p>
     * All metadata is optional, however some well-known keys include:<ul>
     *     <li>batch - this is stored in import record</li>
     *     <li>filename - useful for correlating requests</li>
     * </ul>
     * </p>
     *
     * @param payload payload to process
     * @param content import content
     * @param contentType content type, e.g. application/xml
     * @param metadata optional metadata key/values, may be null or empty
     * @return newly created import resource
     */
    RdwImport importContent(byte[] payload, final ImportContent content, String contentType, Map<String, String> metadata);

    /**
     * Accept the file for import processing. This will check for submission duplicates, archive
     * the content, create an import record, and post a message on the appropriate processing queue.
     * The message will have the digest as the message body. To get the file content as the message
     * body, the caller should read the file contents and call the other method, e.g.<pre>
     *   service.importContent(file.getBytes(), content, file.getContentType(), metadata)
     * </pre>
     * <p>
     * Implementations should pull user detail from the current context.
     * </p>
     * <p>
     * All metadata is optional, however some well-known keys include:<ul>
     *     <li>batch - this is stored in import record</li>
     *     <li>filename - useful for correlating requests</li>
     *     <li>Content-Length - if known in advance this saves calculating it</li>
     * </ul>
     * </p>
     *
     * @param file file to process
     * @param content import content
     * @param contentType content type, e.g. application/xml
     * @param metadata optional metadata key/values, may be null or empty
     * @return newly created import resource
     */
    RdwImport importContent(MultipartFile file, final ImportContent content, String contentType, Map<String, String> metadata);

    /**
     * @param id import resource id
     * @return the import resource, may be absent if id not found
     */
    Optional<RdwImport> getImport(long id);

    /**
     * Get a list of imports matching the query parameters
     *
     * @param query query parameters
     * @return list of imports matching criteria; may be empty, won't be null
     */
    List<RdwImport> getImports(RdwImportQuery query);

    /**
     * Using archived content, resubmit all the imports matching the query. For each import this
     * will push a message onto the message queue with the original content and user credentials.
     *
     * @param query query parameters; an empty query is invalid
     * @return number of imports resubmitted
     */
    long resubmitImports(RdwImportQuery query);

    /**
     * @param id import resource id
     * @return the import payload properties, absent if import not found
     */
    Optional<Properties> getPayloadProperties(long id);

    /**
     * @param id import resource id
     * @return the import payload data, absent if import not found
     */
    Optional<byte[]> getPayload(long id);
}
