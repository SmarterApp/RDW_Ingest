package org.opentestsystem.rdw.ingest.web;

import org.opentestsystem.rdw.ingest.auth.SbacUserDetails;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.service.ImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Properties;

import static com.google.common.net.HttpHeaders.CONTENT_TYPE;
import static java.util.Collections.singletonMap;

/**
 * Controller for accommodation code end-points
 */
@RestController
@RequestMapping({ "/accommodations" })
class AccommodationController extends ImportController {

    @Autowired
    public AccommodationController(final ImportService service) {
        super(service, ImportContent.CODES, new ImportResourceAssembler(AccommodationController.class));
    }

    @PostMapping(value = "/imports")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public RdwImportResource postImport(@AuthenticationPrincipal final SbacUserDetails sbacUser,
                                        @RequestHeader(value = CONTENT_TYPE, required = false) final String contentType,
                                        @RequestBody final byte[] body,
                                        @RequestParam(required = false) final String batch) {
        return super.postImport(sbacUser, contentType, body, singletonMap("batch", batch));
    }

    @PostMapping(value = "/imports", consumes = "multipart/form-data")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public RdwImportResource uploadImport(@AuthenticationPrincipal final SbacUserDetails sbacUser,
                                          final MultipartHttpServletRequest request) {
        return super.uploadImport(sbacUser, request);
    }

    @GetMapping("/imports/{id}/payload")
    public ResponseEntity<Void> downloadImportPayload(@PathVariable final long id, final HttpServletResponse response) {
        return super.downloadImportPayload(id, response);
    }

    @GetMapping("/imports/{id}/payload/properties")
    public Properties getImportPayloadProperties(@PathVariable final Long id) {
        return super.getImportPayloadProperties(id);
    }

    @GetMapping(value = "/imports/{id}")
    @ResponseStatus(HttpStatus.OK)
    public RdwImportResource getImport(@PathVariable final Long id) {
        return super.getImport(id);
    }

    @GetMapping(value = "/imports")
    @ResponseStatus(HttpStatus.OK)
    public List<RdwImportResource> getImports(final RdwImportQuery query) {
        return super.getImports(query);
    }

    @PostMapping("/imports/resubmit")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public ResponseEntity<Long> resubmitImports(final RdwImportQuery inputQuery) {
        return super.resubmitImports(inputQuery);
    }

}
