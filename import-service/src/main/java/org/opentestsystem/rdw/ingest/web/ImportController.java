package org.opentestsystem.rdw.ingest.web;

import org.opentestsystem.rdw.ingest.service.ImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Properties;

/**
 * Controller for import end-points.
 * <p>
 * These are end-points that are independent of the content.
 * </p>
 */
@SuppressWarnings("ConstantConditions")
@RestController
@RequestMapping({ "/imports" })
class ImportController {

    private final ImportService service;
    private final ImportResourceAssembler assembler;

    @Autowired
    public ImportController(final ImportService service) {
        this.service = service;
        this.assembler = new ImportResourceAssembler();
    }

    @GetMapping("/{id}")
    public RdwImportResource getImport(@PathVariable final Long id) {
        return assembler.toResource(service.getImport(id).get());
    }

    @GetMapping("/{id}/payload")
    public ResponseEntity<Void> downloadImportPayload(@PathVariable final long id, final HttpServletResponse response) {
        final byte[] payload = service.getPayload(id).get();
        final Properties properties = service.getPayloadProperties(id).get();

        final String filename = properties.containsKey("filename") ? properties.getProperty("filename") : (id + ".xml");
        final String contentType = properties.containsKey("Content-Type") ? properties.getProperty("Content-Type") : MediaType.APPLICATION_XML_VALUE;

        response.setContentType(contentType);
        response.addHeader("Content-Disposition", "attachment; filename=" + filename);
        try {
            response.getOutputStream().write(payload);
            response.getOutputStream().flush();
            return null;
        } catch (final IOException e) {
            throw new IllegalArgumentException("error writing payload", e);
        }
    }

    @GetMapping("/{id}/payload/properties")
    public Properties getImportPayloadProperties(@PathVariable final Long id) {
        return service.getPayloadProperties(id).get();
    }
}
