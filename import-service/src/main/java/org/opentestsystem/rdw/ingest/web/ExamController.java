package org.opentestsystem.rdw.ingest.web;

import org.opentestsystem.rdw.ingest.auth.SbacUserDetails;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.service.ImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

import static com.google.common.net.HttpHeaders.CONTENT_TYPE;

/**
 * Controller for exam end-points
 */
@RestController
@RequestMapping({ "/exams" })
class ExamController {

    private final ImportService service;
    private final ExamImportResourceAssembler assembler = new ExamImportResourceAssembler();

    @Autowired
    public ExamController(final ImportService service) {
        this.service = service;
    }

    @PostMapping("/imports")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public RdwImportResource postImport(@AuthenticationPrincipal final SbacUserDetails sbacUser,
                                        @RequestHeader(value = CONTENT_TYPE, required = false) final String contentType,
                                        @RequestBody final String body,
                                        @RequestParam(required = false) final String batch) {
        return assembler.toResource(service.importContent(sbacUser, body, ImportContent.EXAM, contentType, batch));
    }

    @GetMapping("/imports/{id}")
    @ResponseStatus(HttpStatus.OK)
    public RdwImportResource getImport(@PathVariable final Long id) {
        return assembler.toResource(service.getImport(id).get());
    }

    @GetMapping("/imports")
    @ResponseStatus(HttpStatus.OK)
    public List<RdwImportResource> getImports(final RdwImportQuery query) {
        if (query.isEmpty()) {
            throw new IllegalArgumentException("at least one query parameter must be specified");
        }
        return assembler.toResources(service.getImports(ensureQueryForExam(query)));
    }

    @GetMapping("/imports/by/{group}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<String> getImportsReport(@PathVariable final String group, final RdwImportQuery query) {
        return ResponseEntity.ok("report exam imports by " + group + " with query " + query.asParamString());
    }

    @PostMapping("/imports/resubmit")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public ResponseEntity<Long> resubmitImports(final RdwImportQuery inputQuery) {
        // if query is empty, use a reasonable default of ACCEPTED EXAMs
        final RdwImportQuery query = inputQuery.isEmpty()
                ? RdwImportQuery.builder()
                        .content(ImportContent.EXAM)
                        .status(ImportStatus.ACCEPTED)
                        .build()
                : ensureQueryForExam(inputQuery);

        return ResponseEntity.ok(service.resubmitImports(query));
    }

    private static RdwImportQuery ensureQueryForExam(final RdwImportQuery query) {
        return ImportContent.EXAM == query.getContent() ? query : query.copy().content(ImportContent.EXAM).build();
    }
}
