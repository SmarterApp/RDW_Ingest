package org.opentestsystem.rdw.ingest.web;

import org.opentestsystem.rdw.ingest.auth.SbacUserDetails;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.service.ImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import static com.google.common.collect.Maps.newHashMap;
import static com.google.common.net.HttpHeaders.CONTENT_TYPE;

/**
 * Controller for exam end-points
 */
@SuppressWarnings("ConstantConditions")
@RestController
@RequestMapping({ "/exams" })
class ExamController {

    private final ImportService service;
    private final ExamImportResourceAssembler assembler = new ExamImportResourceAssembler();

    @Autowired
    public ExamController(final ImportService service) {
        this.service = service;
    }

    @PostMapping(value = "/imports", consumes = "application/xml")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public RdwImportResource postImport(@AuthenticationPrincipal final SbacUserDetails sbacUser,
                                        @RequestHeader(value = CONTENT_TYPE, required = false) final String contentType,
                                        @RequestBody final byte[] body,
                                        @RequestParam final Map<String, String> requestParams) {
        return assembler.toResource(service.importContent(sbacUser, body, ImportContent.EXAM, contentType, requestParams));
    }

    @PostMapping(value = "/imports", consumes = "multipart/form-data")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public RdwImportResource uploadImport(@AuthenticationPrincipal final SbacUserDetails sbacUser,
                                          final MultipartHttpServletRequest request) {
        // get the best MultipartFile (either the only one or the one named "file")
        final MultipartFile file;
        final Map<String, MultipartFile> fileMap = request.getFileMap();
        if (fileMap.isEmpty()) {
            throw new IllegalArgumentException("missing multipart file");
        } else if (fileMap.size() == 1) {
            file = fileMap.values().iterator().next();
        } else {
            file = fileMap.get("file");
        }

        final String contentType = file.getContentType();
        final byte[] body;
        try {
            body = file.getBytes();
        } catch (final IOException e) {
            throw new IllegalArgumentException("error getting file content", e);
        }

        // extract parameter values from form data and request params
        // note that getParameterMap returns lists of values, so take just first value for each key
        final Map<String, String> metadata = newHashMap();
        metadata.put("filename", file.getOriginalFilename());
        request.getParameterMap().forEach((key, values) -> metadata.put(key, values[0]));

        return assembler.toResource(service.importContent(sbacUser, body, ImportContent.EXAM, contentType, metadata));
    }

    @GetMapping("/imports/{id}")
    @ResponseStatus(HttpStatus.OK)
    public RdwImportResource getImport(@PathVariable final Long id) {
        return assembler.toResource(service.getImport(id).get());
    }

    @GetMapping("/imports/{id}/payload")
    public ResponseEntity<Void> downloadImportPayload(@PathVariable final long id, final HttpServletResponse response) {
        final byte[] payload = service.getPayload(id).get();
        final Properties properties = service.getPayloadProperties(id).get();

        final String filename = properties.containsKey("filename") ? properties.getProperty("filename") : (id + ".xml");
        final String contentType = properties.containsKey("content-type") ? properties.getProperty("content-type") : MediaType.APPLICATION_XML_VALUE;

        response.setContentType(contentType);
        response.addHeader("Content-Disposition", "attachment; filename=" + filename);
        try {
            response.getOutputStream().write(payload);
            response.getOutputStream().flush();
            return null;
        } catch (final IOException e) {
            throw new IllegalArgumentException("error writing payload", e);
        }
    }

    @GetMapping("/imports/{id}/payload/properties")
    public Properties getImportPayloadProperties(@PathVariable final Long id) {
        return service.getPayloadProperties(id).get();
    }

    @GetMapping("/imports")
    @ResponseStatus(HttpStatus.OK)
    public List<RdwImportResource> getImports(final RdwImportQuery query) {
        if (query.isEmpty()) {
            throw new IllegalArgumentException("at least one query parameter must be specified");
        }
        return assembler.toResources(service.getImports(ensureQueryForExam(query)));
    }

    @GetMapping("/imports/by/{group}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<String> getImportsReport(@PathVariable final String group, final RdwImportQuery query) {
        return ResponseEntity.ok("report exam imports by " + group + " with query " + query.asParamString());
    }

    @PostMapping("/imports/resubmit")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public ResponseEntity<Long> resubmitImports(final RdwImportQuery inputQuery) {
        // if query is empty, use a reasonable default of ACCEPTED EXAMs
        final RdwImportQuery query = inputQuery.isEmpty()
                ? RdwImportQuery.builder()
                        .content(ImportContent.EXAM)
                        .status(ImportStatus.ACCEPTED)
                        .build()
                : ensureQueryForExam(inputQuery);

        return ResponseEntity.ok(service.resubmitImports(query));
    }

    private static RdwImportQuery ensureQueryForExam(final RdwImportQuery query) {
        return ImportContent.EXAM == query.getContent() ? query : query.copy().content(ImportContent.EXAM).build();
    }
}
