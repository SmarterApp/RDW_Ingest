package org.opentestsystem.rdw.ingest.web;

import org.opentestsystem.rdw.ingest.auth.RdwUser;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.service.ImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

import static com.google.common.net.HttpHeaders.CONTENT_TYPE;

/**
 * Controller for exam / testresults end-points
 * <p>
 * TODO - do we want a resource wrapper around a list of RdwImport's to provide the self link?<br/>
 * I played with doing it with Resources but that nests the content with "_embedded" and looks yucky.<pre>
 * final Link link = linkTo(methodOn(ExamController.class).getImports(batch, status)).withSelfRel();
 * return new Resources<>(assembler.toResources(service.getImports(batch, statusFromParam(status))), link);
 * </pre>
 * </p>
 */
@RestController
@RequestMapping({ "/exams", "/testresults" })
class ExamController {

    private final ImportService service;
    private final ExamImportResourceAssembler assembler = new ExamImportResourceAssembler();

    @Autowired
    public ExamController(final ImportService service) {
        this.service = service;
    }

    @PostMapping("/imports")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public RdwImportResource postImport(Authentication authentication,
                                        @RequestHeader(value = CONTENT_TYPE, required = false) String contentType,
                                        @RequestBody String body,
                                        @RequestParam(required = false) String batch) {
        return assembler.toResource(service.importContent((RdwUser) authentication.getPrincipal(), body, ImportContent.EXAM, contentType, batch));
    }

    @GetMapping("/imports/{id}")
    @ResponseStatus(HttpStatus.OK)
    public RdwImportResource getImport(@PathVariable Long id) {
        return assembler.toResource(service.getImport(id).get());
    }

    @GetMapping("/imports")
    @ResponseStatus(HttpStatus.OK)
    public List<RdwImportResource> getImports(final RdwImportQuery query) {
        if (query.isEmpty()) {
            throw new IllegalArgumentException("at least one query parameter must be specified");
        }
        return assembler.toResources(service.getImports(ensureQueryForExam(query)));
    }

    @GetMapping(value="/imports", headers="Accept=text/csv")
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    public RdwImportCsv getImportsAsCsv(final RdwImportQuery query) {
        if (query.isEmpty()) {
            throw new IllegalArgumentException("at least one query parameter must be specified");
        }

        RdwImportCsv csv = new RdwImportCsv();
        csv.setRdwImports(service.getImports(ensureQueryForExam(query)));

        return csv;
    }

    @GetMapping("/imports/by/{group}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<String> getImportsReport(@PathVariable final String group,
                                                   final RdwImportQuery query) {
        return ResponseEntity.ok("report exam imports by " + group + " with query " + query.asParamString());
    }

    @PostMapping("/imports/resubmit")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public ResponseEntity<Long> resubmitImports(final RdwImportQuery query) {
        // if query is empty, force to be ACCEPTED
        return ResponseEntity.ok(service.resubmitImports(query.isEmpty() ?
                RdwImportQuery.builder().content(ImportContent.EXAM).status(ImportStatus.ACCEPTED).build() :
                ensureQueryForExam(query)));
    }

    private static RdwImportQuery ensureQueryForExam(final RdwImportQuery query) {
        return ImportContent.EXAM == query.getContent() ? query : query.copy().content(ImportContent.EXAM).build();
    }
}
