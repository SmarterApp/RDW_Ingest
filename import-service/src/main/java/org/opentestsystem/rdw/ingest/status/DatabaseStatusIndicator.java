package org.opentestsystem.rdw.ingest.status;

import org.opentestsystem.rdw.ingest.model.ImportContent;
import org.opentestsystem.rdw.ingest.model.ImportStatus;
import org.opentestsystem.rdw.ingest.model.RdwImport;
import org.opentestsystem.rdw.ingest.repository.RdwImportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A {@link StatusIndicator} for database status.
 * <p>
 * Slightly different than web diagnostic spec this add "databaseOperations",
 * each being a Status with "schema", "type" (READ/WRITE), and "responseTime".
 * </p>
 */
@Component
public class DatabaseStatusIndicator extends AbstractStatusIndicator {

    private final RdwImportRepository repository;

    @Autowired
    public DatabaseStatusIndicator(final RdwImportRepository repository) {
        this.repository = repository;
    }

    @Override
    public String name() {
        return "database";
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return level >= 3;
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        final List<Status> databaseOperations = newArrayList();

        // import, READ
        if (level >= 3) {
            final Status.Builder opBuilder = Status.builder().detail("schema", "import").detail("type", "READ");
            final List<ImportStatus> importStatuses = responseTime(opBuilder, 50, repository::findAllStatuses);
            if (importStatuses.size() != ImportStatus.values().length) {
                opBuilder.rating(Rating.Warning);
                opBuilder.detail("error", "import_status table not loaded properly");
            }
            databaseOperations.add(opBuilder.build());
        }

        // import, WRITE
        if (level >= 4) {
            final Status.Builder opBuilder = Status.builder().detail("schema", "import").detail("type", "WRITE");
            final RdwImport rdwImport = responseTime(opBuilder, 200, () ->
                repository.create(RdwImport.builder()
                    .content(ImportContent.PROBE)
                    .contentType("text/plain+probe")
                    .digest("probe")
                    .status(ImportStatus.INVALID)
                    .build()));
            if (rdwImport.getId() == null) {
                opBuilder.rating(Rating.Warning);
            } else {
                repository.delete(rdwImport.getId());
            }
            databaseOperations.add(opBuilder.build());
        }

        builder.detail("databaseOperations", databaseOperations);
    }
}
