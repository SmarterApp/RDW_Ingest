package org.opentestsystem.rdw.ingest.service;

import org.apache.commons.codec.digest.DigestUtils;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.auth.SbacUserDetails;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.common.util.LocationStrategy;
import org.opentestsystem.rdw.ingest.repository.RdwImportRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;
import java.util.function.BiConsumer;

import static com.google.common.base.Preconditions.checkArgument;
import static org.opentestsystem.rdw.ingest.service.DuplicateContentAction.Ignore;
import static org.opentestsystem.rdw.ingest.service.DuplicateContentAction.Reprocess;

/**
 * Default implementation of ImportService
 */
@Service
class DefaultImportService implements ImportService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultImportService.class);

    private static final String ContentTypeProperty = "Content-Type";
    private static final String ContentLengthProperty = "Content-Length";
    private static final String UsernameProperty = "username";
    private static final String TenancyChainProperty = "tenancy-chain";

    private final RdwImportRepository repository;
    private final ArchiveService archiveService;
    private final ImportSource source;

    @Autowired
    DefaultImportService(final RdwImportRepository repository,
                         final ArchiveService archiveService,
                         final ImportSource source) {
        this.repository = repository;
        this.archiveService = archiveService;
        this.source = source;
    }

    @Override
    public RdwImport importContent(final SbacUserDetails user,
                                   final byte[] payload,
                                   final ImportContent content,
                                   final String contentType,
                                   final Map<String, String> metadata,
                                   final DuplicateContentAction action) {

        final String digest = DigestUtils.md5Hex(payload).toUpperCase();

        return importHelper(user, payload, content, contentType, metadata, action, digest, payload.length, (location, properties) ->
                archiveService.writeResource(location, payload, properties));
    }

    @Override
    public RdwImport importContent(final SbacUserDetails user,
                                   final MultipartFile file,
                                   final ImportContent content,
                                   final String contentType,
                                   final Map<String, String> metadata,
                                   final DuplicateContentAction action) {

        final String digest;
        try (final InputStream is = file.getInputStream()) {
            digest = DigestUtils.md5Hex(is).toUpperCase();
        } catch (final IOException e) {
            logger.warn("Error reading {} file {}: {}", content, file.getName(), e.getMessage());
            throw new IllegalArgumentException(e);
        }

        return importHelper(user, digest.getBytes(), content, contentType, metadata, action, digest, file.getSize(), (location, properties) -> {
            try (final InputStream is = file.getInputStream()) {
                archiveService.writeResource(location, is, properties);
            } catch (final IOException e) {
                logger.warn("Error archiving {} file {} to {}: {}", content, file.getName(), digest, e.getMessage());
                throw new IllegalArgumentException(e);
            }
        });
    }

    // helper to avoid code duplication
    private RdwImport importHelper(final SbacUserDetails user,
                                   final byte[] payload,
                                   final ImportContent content,
                                   final String contentType,
                                   final Map<String, String> metadata,
                                   final DuplicateContentAction action,
                                   final String digest,
                                   final long contentLength,
                                   final BiConsumer<String, Properties> archiver
                                   ) {

        // check for duplicate payload and act accordingly
        RdwImport rdwImport = repository.findOneByContentAndDigest(content, digest);
        if (rdwImport == null) {
            final String location = new LocationStrategy.ImportContentLocationStrategy(content).location(digest);
            final Properties properties = new Properties();
            properties.setProperty(ContentTypeProperty, contentType);
            properties.setProperty(UsernameProperty, user.getUsername());
            properties.setProperty(TenancyChainProperty, user.getTenancyChain().toString());
            properties.put(ContentLengthProperty, contentLength);
            if (metadata != null) {
                metadata.forEach((key, value) -> {
                    if (value != null) properties.setProperty(key, value);
                });
            }
            archiver.accept(location, properties);

            rdwImport = repository.create(RdwImport.builder()
                    .content(content)
                    .contentType(contentType)
                    .digest(digest)
                    .status(ImportStatus.ACCEPTED)
                    .creator(user.getUsername())
                    .batch(metadata == null ? null : metadata.get("batch"))
                    .build());
        } else if (action == Reprocess) {
            rdwImport = repository.update(rdwImport.copy().status(ImportStatus.ACCEPTED).build());
            logger.info("Reprocessing {} payload with digest {}", content, digest);
        } else if (action == Ignore) {
            logger.info("Ignoring {} payload with existing digest {}", content, digest);
            return rdwImport;
        }

        source.submitContent(payload, content, contentType, rdwImport.getId());

        return rdwImport;
    }

    @Override
    public Optional<RdwImport> getImport(final long id) {
        return Optional.ofNullable(repository.findOne(id));
    }

    @Override
    public List<RdwImport> getImports(final RdwImportQuery query) {
        return repository.findBy(query);
    }

    @Override
    public long resubmitImports(final RdwImportQuery query) {
        checkArgument(query != null && !query.isEmpty(), "resubmit requires a non-empty query");

        long count = 0;
        final List<RdwImport> imports = repository.findBy(query);
        for (final RdwImport rdwImport : imports) {
            try {
                final String location = location(rdwImport);
                final byte[] payload = archiveService.readResource(location);
                final Properties properties = archiveService.readProperties(location);
                final String contentType = properties.getProperty(ContentTypeProperty);

                source.submitContent(payload, rdwImport.getContent(), contentType, rdwImport.getId());

                ++count;
            } catch (final Exception e) {
                logger.warn("Stopping resubmit on import {}", rdwImport.getId());
                break;
            }
        }
        return count;
    }

    @Override
    public Optional<Properties> getPayloadProperties(final long id) {
        final RdwImport rdwImport = repository.findOne(id);
        if (rdwImport == null) {
            return Optional.empty();
        }
        return Optional.of(archiveService.readProperties(location(rdwImport)));
    }

    @Override
    public Optional<byte[]> getPayload(final long id) {
        final RdwImport rdwImport = repository.findOne(id);
        if (rdwImport == null) {
            return Optional.empty();
        }
        return Optional.of(archiveService.readResource(location(rdwImport)));
    }

    private static String location(final RdwImport rdwImport) {
        return new LocationStrategy.ImportContentLocationStrategy(rdwImport.getContent()).location(rdwImport.getDigest());
    }
}
