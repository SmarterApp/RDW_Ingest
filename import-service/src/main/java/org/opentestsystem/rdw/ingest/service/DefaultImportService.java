package org.opentestsystem.rdw.ingest.service;

import org.apache.commons.codec.digest.DigestUtils;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.ingest.auth.SbacUserDetails;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.repository.RdwImportRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;
import java.util.Random;

import static com.google.common.base.Preconditions.checkArgument;

/**
 * Default implementation of ImportService
 */
@Service
class DefaultImportService implements ImportService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultImportService.class);

    private static final String ContentTypeProperty = "content-type";
    private static final String UsernameProperty = "username";
    private static final String TenancyChainProperty = "tenancy-chain";

    private final RdwImportRepository repository;
    private final ArchiveService archiveService;
    private final ImportSource source;

    @Autowired
    DefaultImportService(final RdwImportRepository repository,
                         final ArchiveService archiveService,
                         final ImportSource source) {
        this.repository = repository;
        this.archiveService = archiveService;
        this.source = source;
    }

    @Override
    public RdwImport importContent(final SbacUserDetails user,
                                   final byte[] payload,
                                   final ImportContent content,
                                   final String contentType,
                                   final Map<String, String> metadata) {

        final String digest = DigestUtils.md5Hex(payload).toUpperCase();

        RdwImport rdwImport = repository.findOneByDigest(digest);
        if (rdwImport != null) {
            logger.info("Ignoring content payload with existing digest {}", digest);
            return rdwImport;
        }

        final String location = new LocationStrategy.ImportContentLocationStrategy(content).location(digest);
        final Properties properties = new Properties();
        properties.setProperty(ContentTypeProperty, contentType);
        properties.setProperty(UsernameProperty, user.getUsername());
        properties.setProperty(TenancyChainProperty, user.getTenancyChain().toString());
        if (metadata != null) {
            metadata.forEach((key, value) -> {
                if (value != null) properties.setProperty(key, value);
            });
        }

        archiveService.writeResource(location, payload, properties);

        rdwImport = repository.create(RdwImport.builder()
                .content(content)
                .contentType(contentType)
                .digest(digest)
                .status(ImportStatus.ACCEPTED)
                .creator(user.getUsername())
                .batch(metadata == null ? null : metadata.get("batch"))
                .build());

        source.submitContent(payload, content, contentType, rdwImport.getId());

        return rdwImport;
    }

    @Override
    public Optional<RdwImport> getImport(final long id) {
        return Optional.ofNullable(repository.findOne(id));
    }

    @Override
    public List<RdwImport> getImports(final RdwImportQuery query) {
        return repository.findBy(query);
    }

    @Override
    public long resubmitImports(final RdwImportQuery query) {
        checkArgument(query != null && !query.isEmpty(), "resubmit requires a non-empty query");
        return query.getStatus() == ImportStatus.ACCEPTED ? simplyReplay(query) : fullReplay(query);
    }

    /**
     * Helper to replay imports in place. This should be done only when replaying ACCEPTED imports.
     * It is okay in that case because we know that ACCEPTED imports block migration so we don't
     * need to introduce new import records. This assumes imports are queried in id order. Any
     * failure will stop processing at that point.
     *
     * @param query import query; must have status set to ImportStatus.ACCEPTED
     * @return number of imports resubmitted
     */
    private long simplyReplay(final RdwImportQuery query) {
        long count = 0;
        for (final RdwImport rdwImport : repository.findBy(query)) {
            try {
                final String location = location(rdwImport);
                final byte[] payload = archiveService.readResource(location);
                final Properties properties = archiveService.readProperties(location);
                final String contentType = properties.getProperty(ContentTypeProperty);

                source.submitContent(payload, rdwImport.getContent(), contentType, rdwImport.getId());
                ++count;
            } catch (final Exception e) {
                logger.warn("Stopping replay on import {}", rdwImport.getId());
                break;
            }
        }
        return count;
    }

    /**
     * Helper to replay imports by creating copies. This is the "proper" way to replay imports.
     *
     * @param query import query; must have status set to ImportStatus.ACCEPTED
     * @return number of imports resubmitted
     */
    private long fullReplay(final RdwImportQuery query) {
        // reserve some records using a random negative id
        final long batchId = (long)(Math.random() * Long.MIN_VALUE);
        final long reserved = repository.updateReplayId(query, batchId);
        if (reserved == 0) {
            return 0;
        }

        final String batch = "BATCH" + Long.toString(batchId);
        long count = 0;
        for (final RdwImport rdwImport : repository.findByReplayId(batchId)) {
            try {
                // get the payload
                final String location = location(rdwImport);
                final byte[] payload = archiveService.readResource(location);
                final Properties properties = archiveService.readProperties(location);
                final String contentType = properties.getProperty(ContentTypeProperty);

                // create the new import record; update the replay id on the original
                final RdwImport replayImport = repository.create(rdwImport.copy()
                        .id(null)
                        .replayId(null)
                        .batch(batch)
                        .status(ImportStatus.ACCEPTED)
                        .build());
                repository.updateReplayId(rdwImport.getId(), replayImport.getId());

                source.submitContent(payload, replayImport.getContent(), contentType, replayImport.getId());
                ++count;
            } catch (final Exception e) {
                logger.warn("Skipping failed replay on import {}", batch, rdwImport.getId());
            }
        }

        final long cleared = repository.clearReplayId(batchId);
        if (cleared > 0) {
            logger.warn("Replay {} failed to process {} records", batch, cleared);
        }

        return count;
    }

    @Override
    public Optional<Properties> getPayloadProperties(final long id) {
        final RdwImport rdwImport = repository.findOne(id);
        if (rdwImport == null) {
            return Optional.empty();
        }
        return Optional.of(archiveService.readProperties(location(rdwImport)));
    }

    @Override
    public Optional<byte[]> getPayload(final long id) {
        final RdwImport rdwImport = repository.findOne(id);
        if (rdwImport == null) {
            return Optional.empty();
        }
        return Optional.of(archiveService.readResource(location(rdwImport)));
    }

    private static String location(final RdwImport rdwImport) {
        return new LocationStrategy.ImportContentLocationStrategy(rdwImport.getContent()).location(rdwImport.getDigest());
    }
}
