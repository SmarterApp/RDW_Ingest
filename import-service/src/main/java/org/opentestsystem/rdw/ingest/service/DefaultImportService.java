package org.opentestsystem.rdw.ingest.service;

import org.apache.commons.codec.digest.DigestUtils;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.ingest.auth.RdwUser;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.repository.RdwImportRepository;
import org.opentestsystem.rdw.utils.TenancyChain;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;

import static com.google.common.collect.Maps.newHashMap;

/**
 * Default implementation of ImportService
 */
@Service
class DefaultImportService implements ImportService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultImportService.class);

    private static final String ContentTypeProperty = "content-type";
    private static final String UsernameProperty = "username";
    private static final String TenancyChainProperty = "tenancy-chain";

    private final RdwImportRepository repository;
    private final ArchiveService archiveService;
    private final ImportSource source;
    private final Charset utf8 = Charset.forName("UTF-8");

    @Autowired
    DefaultImportService(final RdwImportRepository repository,
                         final ArchiveService archiveService,
                         final ImportSource source) {
        this.repository = repository;
        this.archiveService = archiveService;
        this.source = source;
    }

    @Override
    public RdwImport importContent(final RdwUser user, final String payload, final ImportContent content, final String contentType, final String batch) {
        final String digest = DigestUtils.md5Hex(payload).toUpperCase();

        RdwImport rdwImport = repository.findOneByDigest(digest);
        if (rdwImport != null) {
            logger.info("Ignoring content payload with existing digest {}", digest);
            return rdwImport;
        }

        final String location = new LocationStrategy.ImportContentLocationStrategy(content).location(digest);
        final Properties properties = new Properties();
        properties.setProperty(ContentTypeProperty, contentType);
        properties.setProperty(UsernameProperty, user.getUsername());
        properties.setProperty(TenancyChainProperty, user.getTenancyChain().toString());
        if (batch != null) {
            properties.setProperty("batch", batch);
        }
        archiveService.writeResource(location, payload.getBytes(utf8), properties);

        rdwImport = repository.create(RdwImport.builder()
                .content(content)
                .contentType(contentType)
                .digest(digest)
                .status(ImportStatus.ACCEPTED)
                .creator(user.getUsername())
                .batch(batch)
                .build());

        source.submitContent(user.getUsername(), user.getTenancyChain(), payload, content, contentType, rdwImport.getId());

        return rdwImport;
    }

    @Override
    public Optional<RdwImport> getImport(final long id) {
        return Optional.ofNullable(repository.findOne(id));
    }

    @Override
    public List<RdwImport> getImports(final RdwImportQuery query) {
        return repository.findBy(query);
    }

    @Override
    public List<RdwImportContent> getImportContents(final RdwImportQuery query) {
        return repository.findContentBy(query);
    }

    @Override
    public long resubmitImports(RdwImportQuery query) {
        // if there is no query, resort to some reasonable default
        if (query == null || query.isEmpty()) {
            query = RdwImportQuery.builder()
                    .status(ImportStatus.ACCEPTED)
                    .after("-PT24H")
                    .before("-PT1H")
                    .build();
        }
        final Map<String, TenancyChain> userTenancyChains = newHashMap();
        long count = 0;
        for (final RdwImport rdwImport : repository.findBy(query)) {
            final ImportContent content = rdwImport.getContent();
            final String location = new LocationStrategy.ImportContentLocationStrategy(content).location(rdwImport.getDigest());

            final String payload = new String(archiveService.readResource(location), utf8);

            final Properties properties = archiveService.readProperties(location);
            final String contentType = properties.getProperty(ContentTypeProperty);
            final String username = properties.getProperty(UsernameProperty);
            // TODO - fetch current tenancy chain for user from authz service
            // TODO   skipping for now because authz is changing Real Soon Now ...
            final TenancyChain tenancyChain = userTenancyChains.computeIfAbsent(username, k ->
                    TenancyChain.fromString(properties.getProperty(TenancyChainProperty)));

            source.submitContent(username, tenancyChain, payload, content, contentType, rdwImport.getId());
            ++count;
        }
        return count;
    }
}
