package org.opentestsystem.rdw.ingest.service;

import org.opentestsystem.rdw.ingest.auth.RdwUser;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;

import java.util.List;
import java.util.Optional;

/**
 * Service for manipulating import content.
 */
public interface ImportService {

    /**
     * Accept the payload for import processing
     *
     * @param user user credentials
     * @param payload payload to process
     * @param content import content
     * @param contentType content type, e.g. application/xml
     * @param batch optional batch label
     * @return newly created import resource
     */
    RdwImport importContent(RdwUser user, String payload, final ImportContent content, String contentType, String batch);

    /**
     * @param id import resource id
     * @return the import resource, may be absent if id not found
     */
    Optional<RdwImport> getImport(long id);

    /**
     * Get a list of imports matching the query parameters
     *
     * @param query query parameters
     * @return list of imports matching criteria; may be empty, won't be null
     */
    List<RdwImport> getImports(RdwImportQuery query);

    /**
     *
     * @param query query parameters
     * @return list of import contents
     */
    List<RdwImportContent> getImportContents(RdwImportQuery query);

    /**
     * Using archived content, resubmit all the imports matching the query. For each import this
     * will push a message onto the message queue with the original content and user credentials.
     *
     * @param query query parameters
     * @return number of imports resubmitted
     */
    long resubmitImports(RdwImportQuery query);
}
