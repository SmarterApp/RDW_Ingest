package org.opentestsystem.rdw.ingest.service;

import org.opentestsystem.rdw.ingest.auth.SbacUserDetails;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Properties;

/**
 * Service for manipulating import content.
 */
public interface ImportService {

    /**
     * Accept the payload for import processing
     * <p>
     * All metadata is optional, however some well-known keys include:<ul>
     *     <li>batch - this is stored in import record</li>
     *     <li>filename - useful for correlating requests</li>
     * </ul>
     * </p>
     *
     * @param user user credentials
     * @param payload payload to process
     * @param content import content
     * @param contentType content type, e.g. application/xml
     * @param metadata optional metadata key/values, may be null or empty
     * @return newly created import resource
     */
    RdwImport importContent(SbacUserDetails user, byte[] payload, final ImportContent content, String contentType, Map<String, String> metadata);

    /**
     * @param id import resource id
     * @return the import resource, may be absent if id not found
     */
    Optional<RdwImport> getImport(long id);

    /**
     * Get a list of imports matching the query parameters
     *
     * @param query query parameters
     * @return list of imports matching criteria; may be empty, won't be null
     */
    List<RdwImport> getImports(RdwImportQuery query);

    /**
     * Using archived content, resubmit all the imports matching the query. For each import this
     * will push a message onto the message queue with the original content and user credentials.
     *
     * @param query query parameters; an empty query is invalid
     * @return number of imports resubmitted
     */
    long resubmitImports(RdwImportQuery query);

    /**
     * @param id import resource id
     * @return the import payload properties, absent if import not found
     */
    Optional<Properties> getPayloadProperties(long id);

    /**
     * @param id import resource id
     * @return the import payload data, absent if import not found
     */
    Optional<byte[]> getPayload(long id);

    /**
     * Delete the resource(s) created by the given import id.
     *
     * @param user      user credentials
     * @param importId  import resource id
     * @param content   the import content type
     */
    void deleteImport(SbacUserDetails user, long importId, ImportContent content);
}
