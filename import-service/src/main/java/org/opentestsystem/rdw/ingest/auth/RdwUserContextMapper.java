package org.opentestsystem.rdw.ingest.auth;

import org.springframework.ldap.core.ContextMapper;
import org.springframework.ldap.core.DirContextAdapter;
import org.springframework.ldap.core.DirContextOperations;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.ldap.userdetails.UserDetailsContextMapper;
import org.springframework.util.Assert;

import java.util.Collection;

import static org.opentestsystem.rdw.ingest.auth.SecurityConfigurer.DataLoadAuthority;

/**
 * A {@link ContextMapper} to map to/from RdwUser, which adds TenancyChain
 */
public class RdwUserContextMapper implements UserDetailsContextMapper {
    @Override
    public UserDetails mapUserFromContext(final DirContextOperations ctx, final String username, final Collection<? extends GrantedAuthority> authorities) {
        final RdwUser.Essence rdwUser = new RdwUser.Essence(ctx);

        rdwUser.setUsername(username);
        rdwUser.setAuthorities(authorities);
        if (rdwUser.getTenancyChain().hasRole(DataLoadAuthority)) {
            rdwUser.addAuthority(new SimpleGrantedAuthority(DataLoadAuthority));
        }

        return rdwUser.createUserDetails();
    }

    @Override
    public void mapUserToContext(final UserDetails user, final DirContextAdapter ctx) {
        Assert.isInstanceOf(RdwUser.class, user, "UserDetails must be a RdwUser instance");
        ((RdwUser)user).populateContext(ctx);
    }
}
