package org.opentestsystem.rdw.ingest.repository;

import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * Default implementation of {@link RdwImportRepository}.
 */
@Repository
class RdwImportRepositoryImpl implements RdwImportRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.import.count}")
    private String sqlImportCount;

    @Value("${sql.import.create}")
    private String sqlImportCreate;

    @Value("${sql.import.delete}")
    private String sqlImportDelete;

    @Value("${sql.import.exists}")
    private String sqlImportExists;

    @Value("${sql.import.findBy}")
    private String sqlImportFindBy;

    @Value("${sql.import.findOne}")
    private String sqlImportFindOne;

    @Value("${sql.import.findOneByDigest}")
    private String sqlImportFindOneByDigest;

    @Value("${sql.importStatus.findAll}")
    private String sqlImportStatusFindAll;

    @Autowired
    RdwImportRepositoryImpl(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public RdwImport create(final RdwImport rdwImport) {
        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("status", rdwImport.getStatus().getValue())
                .addValue("content", rdwImport.getContent().getValue())
                .addValue("contentType", rdwImport.getContentType())
                .addValue("digest", rdwImport.getDigest())
                .addValue("batch", rdwImport.getBatch())
                .addValue("creator", rdwImport.getCreator())
                .addValue("created", Timestamp.from(rdwImport.getCreated()))
                .addValue("message", rdwImport.getMessage())
                ;

        jdbcTemplate.update(sqlImportCreate, parameterSource, keyHolder);

        rdwImport.setId(keyHolder.getKey().longValue());
        return rdwImport;
    }

    @Override
    public RdwImport findOne(final long id) {
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource().addValue("id", id);
        try {
            return jdbcTemplate.queryForObject(sqlImportFindOne, parameterSource, new RdwImportRowMapper());
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

    @Override
    public RdwImport findOneByDigest(final String digest) {
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource().addValue("digest", digest);
        try {
            return jdbcTemplate.queryForObject(sqlImportFindOneByDigest, parameterSource, new RdwImportRowMapper());
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

    @Override
    public boolean exists(final long id) {
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource().addValue("id", id);
        return jdbcTemplate.queryForObject(sqlImportExists, parameterSource, Boolean.class);
    }

    @Override
    public long count() {
        return jdbcTemplate.getJdbcOperations().queryForObject(sqlImportCount, Long.class);
    }

    @Override
    public void delete(final long id) {
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource().addValue("id", id);
        jdbcTemplate.update(sqlImportDelete, parameterSource);
    }

    @Override
    public List<RdwImport> findBy(final RdwImportQuery query) {
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("content", query.getContent() == null ? null : query.getContent().getValue())
                .addValue("status", query.getStatus() == null ? null : query.getStatus().getValue())
                .addValue("batch", query.getBatch())
                .addValue("creator", query.getCreator())
                .addValue("before", query.getBefore() == null ? null : Timestamp.from(query.getBefore()))
                .addValue("after", query.getAfter() == null ? null : Timestamp.from(query.getAfter()));
        try {
            return jdbcTemplate.query(sqlImportFindBy, parameterSource, new RdwImportRowMapper());
        } catch (final EmptyResultDataAccessException ignored) {
            return newArrayList();
        }
    }

    @Override
    public List<ImportStatus> findAllStatuses() {
        try {
            return jdbcTemplate.query(sqlImportStatusFindAll, (rs, rowNum) -> {
                final ImportStatus status = ImportStatus.fromValue(rs.getInt("id"));
                if (!status.name().equals(rs.getString("name"))) {
                    throw new IllegalStateException("Bad ImportStatus name " + rs.getString("name"));
                }
                return status;
            });
        } catch (final EmptyResultDataAccessException ignored) {
            return newArrayList();
        }
    }

    private static class RdwImportRowMapper implements RowMapper<RdwImport> {
        @Override
        public RdwImport mapRow(final ResultSet rs, final int rowNum) throws SQLException {
            return RdwImport.builder()
                    .id(rs.getLong("id"))
                    .content(ImportContent.fromValue(rs.getInt("content")))
                    .contentType(rs.getString("contentType"))
                    .digest(rs.getString("digest"))
                    .status(ImportStatus.fromValue(rs.getInt("status")))
                    .batch(rs.getString("batch"))
                    .creator(rs.getString("creator"))
                    .created(rs.getTimestamp("created").toInstant())
                    .message(rs.getString("message"))
                    .build();
        }
    }
}
