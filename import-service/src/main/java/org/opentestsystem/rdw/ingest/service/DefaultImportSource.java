package org.opentestsystem.rdw.ingest.service;

import org.opentestsystem.rdw.ingest.auth.RdwUser;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.opentestsystem.rdw.utils.TenancyChain;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.binding.BinderAwareChannelResolver;
import org.springframework.context.annotation.Bean;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.integration.channel.DirectChannel;
import org.springframework.integration.router.AbstractMappingMessageRouter;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;

import static org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor.wrap;

/**
 * Default implementation of ImportSource
 */
@Service
@EnableBinding
class DefaultImportSource implements ImportSource {

    private BinderAwareChannelResolver resolver;
    private MessageChannel outputChannel;

    @Autowired
    public void setResolver(final BinderAwareChannelResolver resolver) {
        this.resolver = resolver;
    }

    @Autowired
    @Qualifier("sourceChannel")
    public void setOutputChannel(final MessageChannel outputChannel) {
        this.outputChannel = outputChannel;
    }

    @Override
    public void submitContent(final String username,
                              final TenancyChain tenancyChain,
                              final String body,
                              final ImportContent content,
                              final String contentType,
                              final Long importId) {
        final RdwMessageHeaderAccessor accessor = wrap(null)
                .setReceivedNow()
                .setContent(content.toString())
                .setUserLogin(username)
                .setUserTenancyChain(tenancyChain.toString())
                .setContentType(contentType)
                .setImportId(importId);
        outputChannel.send(MessageBuilder.createMessage(body, accessor.getMessageHeaders()));
    }

    @Bean(name = "sourceChannel")
    public MessageChannel outputChannel() {
        return new DirectChannel();
    }

    @Bean
    @ServiceActivator(inputChannel = "sourceChannel")
    public AbstractMappingMessageRouter router() {
        final AbstractMappingMessageRouter router = new AbstractMappingMessageRouter() {
            @Override
            protected List<Object> getChannelKeys(final Message<?> message) {
                final RdwMessageHeaderAccessor accessor = wrap(message);
                return Collections.singletonList(accessor.getContent());
            }
        };
        router.setChannelResolver(resolver);
        return router;
    }
}
