package org.opentestsystem.rdw.ingest.web;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.service.ImportService;

import static com.google.common.collect.Maps.newHashMap;

/**
 * All the controllers in this package do the same thing with slight configurable differences.
 * Although we could use pattern matching and other cleverness, it is fighting the way the Spring
 * framework likes to do things. So the common functionality is pulled into this base class.
 *
 * @see AccommodationController
 * @see ExamController
 * @see GroupController
 * @see NormsController
 * @see OrganizationController
 * @see PackageController
 * @see ImportResourceAssembler
 */
abstract class ScopedImportController {

    private final ImportService service;
    private final ImportContent content;
    private final ImportResourceAssembler assembler;

    /**
     * @param service import service
     * @param content import content type
     */
    protected ScopedImportController(final ImportService service,
                                     final ImportContent content) {
        this.service = service;
        this.content = content;
        this.assembler = new ImportResourceAssembler();
    }

    /**
     * Accept a post body for import.
     *
     * @param contentType content type
     * @param body post body
     * @param params post params, used as import metadata
     * @return import resource
     */
    protected RdwImportResource postImport(final String contentType,
                                           final byte[] body,
                                           final Map<String, String> params) {
        return assembler.toResource(service.importContent(body, content, contentType, params));
    }

    /**
     * Accept a file for import.
     *
     * @param request request with multipart file
     * @param importAsFile true to import as file, false to read and import file bytes instead
     * @return import resource
     */
    protected RdwImportResource uploadImport(final MultipartHttpServletRequest request,
                                             final boolean importAsFile) {
        // get the best MultipartFile (either the only one or the one named "file")
        final MultipartFile file;
        final Map<String, MultipartFile> fileMap = request.getFileMap();
        if (fileMap.isEmpty()) {
            throw new IllegalArgumentException("missing multipart file");
        } else if (fileMap.size() == 1) {
            file = fileMap.values().iterator().next();
        } else {
            file = fileMap.get("file");
        }

        // extract parameter values from form data and request params
        // note that getParameterMap returns lists of values, so take just first value for each key
        final Map<String, String> metadata = newHashMap();
        metadata.put("filename", file.getOriginalFilename());
        request.getParameterMap().forEach((key, values) -> metadata.put(key, values[0]));

        final RdwImport rdwImport;
        if (importAsFile) {
            rdwImport = service.importContent(file, content, file.getContentType(), metadata);
        } else {
            final byte[] body;
            try {
                body = file.getBytes();
            } catch (final IOException e) {
                throw new IllegalArgumentException("error getting file content", e);
            }
            rdwImport = service.importContent(body, content, file.getContentType(), metadata);
        }

        return assembler.toResource(rdwImport);
    }

    protected List<RdwImportResource> getImports(final RdwImportQuery query) {
        if (query.isEmpty()) {
            throw new IllegalArgumentException("at least one query parameter must be specified");
        }
        return assembler.toResources(service.getImports(ensureQueryForContent(query)));
    }

    protected ResponseEntity<Long> resubmitImports(final RdwImportQuery inputQuery) {
        final RdwImportQuery query = inputQuery.isEmpty()
                ? RdwImportQuery.builder()
                .content(content)
                .status(ImportStatus.ACCEPTED)
                .limit(100)
                .build()
                : ensureQueryForContent(inputQuery);
        return ResponseEntity.ok(service.resubmitImports(query));
    }

    private RdwImportQuery ensureQueryForContent(final RdwImportQuery query) {
        return content == query.getContent() ? query : query.copy().content(content).build();
    }
}
