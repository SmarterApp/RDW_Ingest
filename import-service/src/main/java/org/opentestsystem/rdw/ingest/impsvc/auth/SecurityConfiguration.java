package org.opentestsystem.rdw.ingest.impsvc.auth;

import org.opentestsystem.rdw.ingest.impsvc.multitenant.ImportTenantIdResolver;
import org.opentestsystem.rdw.ingest.impsvc.repository.PermissionRepository;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;

/**
 * Default security configuration uses the real ForgeRockTokenServices and Authority/Permission services.
 * Note that the (basic) PermissionService will be wrapped by the CachingPermissionService.
 */
@Configuration
@ConditionalOnMissingBean(StubSecurityConfiguration.class)
class SecurityConfiguration {
    private static final String OKTA_PROVIDER = "okta";

    @Bean
    @ConfigurationProperties(prefix = "security.oauth2")
    public ResourceServerTokenServices tokenServices(
            final SbacTokenConverter tokenConverter,
            @Value("${security.oauth2.provider:}") final String provider) {

        // For transition period, support both OpenAM and Okta, depending on configured provider.
        if (OKTA_PROVIDER.equalsIgnoreCase(provider)) {
            return new OktaTokenServices(tokenConverter);
        }
        return new ForgeRockTokenServices(tokenConverter);
    }

    @Bean
    public TenantIdResolver tenantIdResolver() {
        return new ImportTenantIdResolver();
    }

    @Bean
    public PermissionService basicPermissionService(final PermissionRepository permissionRepository,
                                                    final TenantIdResolver tenantIdResolver) {
        return new LocalPermissionService(permissionRepository, tenantIdResolver);
    }
}
