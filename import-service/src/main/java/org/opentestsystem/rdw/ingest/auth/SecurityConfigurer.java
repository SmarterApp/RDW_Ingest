package org.opentestsystem.rdw.ingest.auth;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager;

/**
 * Security configuration uses oauth2.
 * <p>
 * This isn't really using OAuth2, it is using grant tokens from OpenAM to extract user
 * attributes, then using the tenancy chain to create authorities. From the client point
 * of view, it looks like OAuth2 because they are getting a password grant token and
 * submitting it with the request. However the resource server (this app) isn't relying
 * on OAuth2 for resource permissions.
 * </p>
 * @see ForgeRockTokenServices
 */
@EnableWebSecurity
@EnableResourceServer
public class SecurityConfigurer extends WebSecurityConfigurerAdapter {
    private static final Logger logger = LoggerFactory.getLogger(SecurityConfigurer.class);

    final static String DataLoadAuthority = "ASMTDATALOAD";

    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        final OAuth2AuthenticationManager manager = new OAuth2AuthenticationManager();
        manager.setTokenServices(forgeRockTokenServices());
        return manager;
    }

    @Bean
    public AuthenticationManager authenticationManager(final AuthenticationManagerBuilder auth) throws Exception {
        // this disables spring boot's auto-configuration of the default authentication manager
        return auth.getOrBuild();
    }

    @Bean
    @ConditionalOnProperty(name = "security.oauth2.token-info-url", havingValue="local")
    public StubTokenServices stubTokenServices() {
        logger.warn("Configuring stub token services intended for testing and local development only!");
        return new StubTokenServices();
    }

    @Bean
    @ConditionalOnMissingBean(StubTokenServices.class)
    @ConfigurationProperties(prefix = "security.oauth2")
    public ForgeRockTokenServices forgeRockTokenServices() {
        return new ForgeRockTokenServices();
    }

    /**
     * This configurer will be wired into {@link ResourceServerConfiguration} to override which
     * resources require authentication. This doesn't quite play nicely with the actuator endpoints
     * so, for example, /health will not vary based on authenticated or anonymous.
     *
     * @return a ResourceServerConfigurer
     */
    @Bean
    public ResourceServerConfigurer configurer() {
        return new ResourceServerConfigurer() {
            @Override
            public void configure(final ResourceServerSecurityConfigurer resources) throws Exception {
                // no-op
            }

            @Override
            public void configure(final HttpSecurity http) throws Exception {
                http.authorizeRequests()
                    .antMatchers("/exams/imports/resubmit").authenticated()
                    .antMatchers("/exams/**").hasAuthority(DataLoadAuthority)
                    .antMatchers("/packages/imports/resubmit").authenticated()
                    .antMatchers("/packages/**").hasAuthority(DataLoadAuthority)
                    .antMatchers("/accommodations/imports/resubmit").authenticated()
                    .antMatchers("/accommodations/**").hasAuthority(DataLoadAuthority)
                    .antMatchers("/organizations/imports/resubmit").authenticated()
                    .antMatchers("/organizations/**").hasAuthority(DataLoadAuthority)
                    .antMatchers("/imports/**").hasAuthority(DataLoadAuthority)
                    .antMatchers("/status").authenticated()
                    .antMatchers("/**").permitAll();
            }
        };
    }
}
