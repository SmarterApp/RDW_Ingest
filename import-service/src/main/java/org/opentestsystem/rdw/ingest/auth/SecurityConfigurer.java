package org.opentestsystem.rdw.ingest.auth;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.autoconfigure.ldap.LdapProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpMethod;
import org.springframework.ldap.core.ContextSource;
import org.springframework.ldap.core.support.LdapContextSource;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.authority.mapping.NullAuthoritiesMapper;
import org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator;

import java.util.Collections;

/**
 * Security configuration uses LDAP for user authc / authz.
 */
@EnableWebSecurity
public class SecurityConfigurer extends WebSecurityConfigurerAdapter {
    final static String DataLoadAuthority = "ASMTDATALOAD";

    private ContextSource contextSource;

    @Autowired
    public void setContextSource(final ContextSource contextSource) {
        this.contextSource = contextSource;
    }

    @Override
    protected void configure(final AuthenticationManagerBuilder auth) throws Exception {
        auth.ldapAuthentication()
                // use our mapper to extract tenancy chain
                .userDetailsContextMapper(new RdwUserContextMapper())
                // disable any default manipulation of authorities
                .authoritiesMapper(new NullAuthoritiesMapper())
                .ldapAuthoritiesPopulator(new NullLdapAuthoritiesPopulator())
                // use Spring's context source
                .contextSource((LdapContextSource)contextSource)
                .userSearchFilter("(uid={0})")
                ;
    }

    @Bean
    public AuthenticationManager authenticationManager(final AuthenticationManagerBuilder auth) throws Exception {
        // this disables spring boot's auto-configuration of the default authentication manager
        return auth.getOrBuild();
    }

    @Bean
    @ConditionalOnProperty(prefix = "spring.ldap", name = "base")
    public ContextSource contextSource(final LdapProperties properties, final Environment environment) {
        // This inverts the auto-configure behavior of EmbeddedLdapAutoConfiguration and LdapAutoConfiguration,
        // favoring the external ldap over the embedded version. This is necessary because the spring classes
        // do the opposite, there is no way to clear a property once it has been set, and we want it to default
        // to embedded for unit tests and when running locally without a profile.

        // This code has been ripped from LdapAutoConfiguration.
        final LdapContextSource source = new LdapContextSource();
        source.setUserDn(properties.getUsername());
        source.setPassword(properties.getPassword());
        source.setBase(properties.getBase());
        source.setUrls(properties.determineUrls(environment));
        source.setBaseEnvironmentProperties(Collections.unmodifiableMap(properties.getBaseEnvironment()));
        return source;
    }

    @Override
    public void configure(final WebSecurity web) throws Exception {
        web.ignoring().antMatchers(HttpMethod.OPTIONS, "/**");
    }

    @Override
    protected void configure(final HttpSecurity http) throws Exception {
        http.csrf()
                .disable()
            .authorizeRequests()
                .antMatchers("/exams/**").hasAuthority(DataLoadAuthority)
                .antMatchers("/testresults/**").hasAuthority(DataLoadAuthority)
            .and().httpBasic()
            .and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
    }
}
