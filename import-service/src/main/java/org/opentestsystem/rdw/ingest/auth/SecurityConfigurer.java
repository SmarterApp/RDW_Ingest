package org.opentestsystem.rdw.ingest.auth;

import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager;

/**
 * Security configuration uses oauth2.
 * <p>
 * This isn't really using OAuth2, it is using grant tokens from OpenAM to extract user
 * attributes, then using the tenancy chain to create authorities. From the client point
 * of view, it looks like OAuth2 because they are getting a password grant token and
 * submitting it with the request. However the resource server (this app) isn't relying
 * on OAuth2 for resource permissions.
 * </p>
 * @see ForgeRockTokenServices
 */
@EnableWebSecurity
@EnableResourceServer
public class SecurityConfigurer extends WebSecurityConfigurerAdapter {
    final static String DataLoadAuthority = "ASMTDATALOAD";

    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        final OAuth2AuthenticationManager manager = new OAuth2AuthenticationManager();
        manager.setTokenServices(forgeRockTokenServices());
        return manager;
    }

    @Bean
    public AuthenticationManager authenticationManager(final AuthenticationManagerBuilder auth) throws Exception {
        // this disables spring boot's auto-configuration of the default authentication manager
        return auth.getOrBuild();
    }

    @Bean
//    @ConfigurationProperties(prefix = "security.oauth2")
    public ForgeRockTokenServices forgeRockTokenServices() {
        return new ForgeRockTokenServices();
    }

    @Override
    public void configure(final WebSecurity web) throws Exception {
        web.ignoring().antMatchers(HttpMethod.OPTIONS, "/**");
    }

    @Override
    public void configure(final HttpSecurity http) throws Exception {
        http.csrf()
                .disable()
            .authorizeRequests()
                .antMatchers("/exams/imports/reconciliation").authenticated()
                .antMatchers("/exams/imports/resubmit").authenticated()
                .antMatchers("/exams/**").hasAuthority(DataLoadAuthority)
                .antMatchers("/packages/**").hasAuthority(DataLoadAuthority)
            .and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
    }
}
