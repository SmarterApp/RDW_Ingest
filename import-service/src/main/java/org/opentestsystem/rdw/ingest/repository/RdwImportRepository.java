package org.opentestsystem.rdw.ingest.repository;

import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;

import java.util.List;

/**
 * A repository that manages {@link RdwImport}s
 */
public interface RdwImportRepository {

    /**
     * Create a new import record. This ignores any id on the import object; the returned
     * object will have a newly assigned id.
     *
     * @param rdwImport import object to save
     * @return newly saved import object
     */
    RdwImport create(RdwImport rdwImport);

    RdwImport findOne(long id);

    RdwImport findOneByDigest(String digest);

    boolean exists(long id);

    long count();

    void delete(long id);

    /**
     * Query for import records.
     *
     * @param query query parameters
     * @return list of matching records, may be empty, won't be null
     */
    List<RdwImport> findBy(RdwImportQuery query);

    /**
     * Return the list of import statuses defined in the system.
     * This list should not change except perhaps during software upgrades.
     * This method is provided mostly as a diagnostic hook.
     *
     * @return list of import statuses
     */
    List<ImportStatus> findAllStatuses();


    //********************************************************************************************
    // Replay support
    // If this expands or this repo is refactored to be shared it may be appropriate to break
    // these methods out into a separate interface.
    //********************************************************************************************

    /**
     * Sets the replay id for all import records matching the query.
     * NOTE: only records with null replay id are updated.
     *
     * @param query query parameters
     * @param replayId replay id to set
     * @return number of import records affected
     */
    long updateReplayId(RdwImportQuery query, long replayId);

    /**
     * Return all import records with the specified replay id.
     *
     * @param replayId replay id to search for
     * @return list of matching records, may be empty, won't be null
     */
    List<RdwImport> findByReplayId(long replayId);

    /**
     * Set the replay id for a specific import record.
     *
     * @param importId import id of record to update
     * @param replayId replay id to set
     */
    void updateReplayId(long importId, long replayId);

    /**
     * Sets the replay id to null for all import records that have the specified replay id.
     *
     * @param replayId replay id to search for
     * @return number of import records affected
     */
    long clearReplayId(long replayId);
}
