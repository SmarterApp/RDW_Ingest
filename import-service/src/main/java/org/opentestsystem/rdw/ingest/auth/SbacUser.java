package org.opentestsystem.rdw.ingest.auth;

import org.opentestsystem.rdw.utils.TenancyChain;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.User;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A user with SBAC details.
 */
public class SbacUser extends User implements SbacUserDetails {
    private final String uid;
    private final String sbacUuid;
    private final TenancyChain tenancyChain;

    public SbacUser(final String username,
                    final String password,
                    final Collection<? extends GrantedAuthority> authorities,
                    final String uid,
                    final String sbacUuid,
                    final TenancyChain tenancyChain) {
        super(username, password, authorities);
        this.uid = uid;
        this.sbacUuid = sbacUuid;
        this.tenancyChain = tenancyChain;
    }

    @Override
    public String getUid() {
        return uid;
    }

    @Override
    public String getSbacUuid() {
        return sbacUuid;
    }

    @Override
    public TenancyChain getTenancyChain() {
        return tenancyChain;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private String username;
        private String password = "N/A";
        private List<GrantedAuthority> authorities = newArrayList();
        private String uid;
        private String sbacUuid;
        private TenancyChain tenancyChain;

        public SbacUser build() {
            return new SbacUser(username, password, authorities, uid, sbacUuid, tenancyChain);
        }

        public Builder username(final String username) {
            this.username = username;
            return this;
        }

        public Builder password(final String password) {
            this.password = password;
            return this;
        }

        public Builder authorities(final Collection<? extends GrantedAuthority> authorities) {
            this.authorities = newArrayList(authorities);
            return this;
        }

        public Builder authority(final GrantedAuthority authority) {
            this.authorities.add(authority);
            return this;
        }

        public Builder uid(final String uid) {
            this.uid = uid;
            return this;
        }

        public Builder sbacUuid(final String sbacUuid) {
            this.sbacUuid = sbacUuid;
            return this;
        }

        public Builder tenancyChain(final TenancyChain tenancyChain) {
            this.tenancyChain = tenancyChain;
            return this;
        }

        public Builder tenancyChain(final String value) {
            return this.tenancyChain(TenancyChain.fromString(value));
        }
    }
}
