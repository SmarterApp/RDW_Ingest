# this application' security configurer doesn't play nice with the management web security auto configuration
# so disable that and, like the other apps, switch the actuator end-points to a less standard port
# (note that the server.port should still be set to the default 8080)
management:
  port: 8008
  security:
    enabled: false

# spring auto-configured aws defense
cloud:
  aws:
    # there must be a default region when running locally
    region:
      auto: false
      static: us-west-2
    # disable CloudFormation stuff
    stack:
      auto: false
    credentials:
      instance-profile: false

# use LocalArchiveService by default
archive:
  root: file:///tmp/

reporting:
  state:
    code: CA

security:
  # "local" causes stub services to be used
  oauth2:
    token-info-url: local
  permission-service:
    component: Reporting
    endpoint: local

# default values to give reasonable performance; adjust for tiny/huge configurations
server:
  tomcat:
    max-connections: 0
    max-threads: 10
    accept-count: 20

spring:
  cache:
    type: SIMPLE
    cache-names: permissionsByRole

  # Force the (rabbit) queues to be created when posting messages so, even if
  # there are no consumers running, the messages will not get lost. Routing is
  # dynamic based on content but there is no way to do that here so we must
  # explicitly declare all possible output channels here (EXAM, PACKAGE, etc.).
  # The group names must be coordinated with the consumer application configs.
  cloud:
    stream:
      bindings:
        CODES:
          producer:
            requiredGroups: default
        EXAM:
          producer:
            requiredGroups: default
        GROUPS:
          producer:
            requiredGroups: default
        NORMS:
          producer:
            requiredGroups: default
        ORGANIZATION:
          producer:
            requiredGroups: default
        PACKAGE:
          producer:
            requiredGroups: default
        SUBJECT:
          producer:
            requiredGroups: default

  http:
    multipart:
      max-file-size: 500MB
      max-request-size: 500MB

  jackson:
    default-property-inclusion: non_null
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false

datasources:
  warehouse_rw:
    url-parts:
      protocol: "jdbc:mysql:"
      hosts: "${datasources.warehouse_rw.url-server:localhost:3306}"
      database: "${datasources.warehouse_rw.url-schema:warehouse}"
      properties: "useSSL=${datasources.warehouse_rw.use-ssl:false}\
                   &useLegacyDatetimeCode=${datasources.warehouse_rw.use-legacy-datetime-code:false}\
                   &characterEncoding=${datasources.warehouse_rw.character-encoding:utf8}\
                   &connectTimeout=${datasources.warehouse_rw.connect-timeout:10000}\
                   &socketTimeout=${datasources.warehouse_rw.socket-timeout:40000}\
                   "
    url: "${datasources.warehouse_rw.url-parts.protocol}//${datasources.warehouse_rw.url-parts.hosts}/${datasources.warehouse_rw.url-parts.database}?${datasources.warehouse_rw.url-parts.properties}"
    jdbcInterceptors: "QueryTimeoutInterceptor(queryTimeout=${datasources.warehouse_rw.query-timeout:30})"
    username: root
    password:
    testWhileIdle: true
    validationQuery: SELECT 1
    validationQueryTimeout: 10000
    driverClassName: com.mysql.jdbc.Driver
    initialize: false
    initialSize: 4
    maxActive: 20
    minIdle: ${datasources.warehouse_rw.initialSize}
    maxIdle: ${datasources.warehouse_rw.maxActive}
    maxWait: 10000
    removeAbandoned: false
    removeAbandonedTimeout: 60
    logAbandoned: false
