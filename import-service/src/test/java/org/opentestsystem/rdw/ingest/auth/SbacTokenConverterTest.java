package org.opentestsystem.rdw.ingest.auth;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.utils.TenancyChain;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.common.OAuth2AccessToken;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.security.oauth2.provider.OAuth2Request;
import org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken;

import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.springframework.security.oauth2.common.OAuth2AccessToken.EXPIRES_IN;
import static org.springframework.security.oauth2.provider.token.AccessTokenConverter.GRANT_TYPE;

public class SbacTokenConverterTest {

    private SbacTokenConverter converter;

    @Before
    public void createConverter() {
        converter = new SbacTokenConverter();
    }

    @Test(expected = UnsupportedOperationException.class)
    public void itDoesNotSupportConvertAccessToken() {
        converter.convertAccessToken(mock(OAuth2AccessToken.class), mock(OAuth2Authentication.class));
    }

    @Test(expected = UnsupportedOperationException.class)
    public void itDoesNotSupportExtractAccessToken() {
        converter.extractAccessToken("value", passwordGrantTokenMap("value"));
    }

    @Test
    public void itShouldExtractAuthentication() {
        assertPasswordGrantAuth(converter.extractAuthentication(passwordGrantTokenMap("abc123")));
    }

    // typical return from getting token info for a password grant token
    static Map<String, Object> passwordGrantTokenMap(final String access_token) {
        final Map<String, Object> map = newHashMap();
        map.put("sbacUUID", "57e3ed3de4b0e3b75702f3a0");
        map.put("mail", "dwtest@example.com");
        map.put("scope", newArrayList("sbacUUID", "mail", "sbacTenancyChain"));
        map.put("grant_type", "password");
        map.put("realm", "/sbac");
        map.put("sbacTenancyChain", "|CA|ASMTDATALOAD|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||");
        map.put("token_type", "Bearer");
        map.put("expires_in", 34479);
        map.put("access_token", access_token);
        return map;
    }

    // asserts values from map
    static void assertPasswordGrantAuth(final OAuth2Authentication oauth2) {
        final Authentication authentication = oauth2.getUserAuthentication();
        assertThat(authentication).isInstanceOf(PreAuthenticatedAuthenticationToken.class);
        final SbacUser user = (SbacUser) authentication.getPrincipal();
        assertThat(user.getUsername()).isEqualTo("dwtest@example.com");
        assertThat(user.getSbacUuid()).isEqualTo("57e3ed3de4b0e3b75702f3a0");
        assertThat(user.getTenancyChain()).isEqualTo(TenancyChain.fromString("|CA|ASMTDATALOAD|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||"));

        final OAuth2Request request = oauth2.getOAuth2Request();
        assertThat(request.getRequestParameters().get(GRANT_TYPE)).isEqualTo("password");
        assertThat(request.getRequestParameters().get(EXPIRES_IN).compareTo(Long.toString(System.currentTimeMillis()))).isGreaterThan(0);
    }
}