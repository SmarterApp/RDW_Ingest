package org.opentestsystem.rdw.ingest.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.service.ImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Optional;

import static com.google.common.collect.Lists.newArrayList;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.core.StringEndsWith.endsWith;
import static org.mockito.BDDMockito.given;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.opentestsystem.rdw.ingest.web.TestAppConfig.AuthHeader;
import static org.opentestsystem.rdw.ingest.web.TestAppConfig.AuthHeaderForClient;
import static org.opentestsystem.rdw.ingest.web.TestAppConfig.AuthHeaderWithAuthority;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ReportingPackageController.class)
@ContextConfiguration(classes = TestAppConfig.class)
@WebAppConfiguration
public class PackageControllerIT {

    private final String ASSESSMENTS_URI = "/packages/assessments/imports";
    private final String ACCOMMODATIONS_URI = "/packages/accommodations/imports";

    @Autowired
    private MockMvc mvc;

    @MockBean
    private ImportService importService;

    @Test
    public void itShouldUseServiceToImportPackage() throws Exception {
        final byte[] body = "assessmentId,assessmentName".getBytes();
        given(importService.importContent(any(), eq(body), eq(ImportContent.PACKAGE), eq(MediaType.TEXT_PLAIN_VALUE), any())).willReturn(testImport(123L));
        for (String uri : new String[] {ASSESSMENTS_URI, ACCOMMODATIONS_URI}) {
            mvc.perform(post(uri).header(AuthHeader, AuthHeaderWithAuthority).contentType(MediaType.TEXT_PLAIN).content(body))
                    .andExpect(status().is2xxSuccessful())
                    .andExpect(content().string(containsString("123")))
                    .andExpect(jsonPath("$._links['self'].href", endsWith(uri + "/123")));
        }
    }

    @Test
    public void itShouldReturn4xxForUnsupportedOperation() throws Exception {
        final byte[] body = "assessmentId,assessmentName".getBytes();
        given(importService.importContent(any(), eq(body), eq(ImportContent.PACKAGE), eq(MediaType.APPLICATION_XML_VALUE), any())).willThrow(UnsupportedOperationException.class);
        for (String uri : new String[] {ASSESSMENTS_URI, ACCOMMODATIONS_URI}) {
            mvc.perform(post(uri).header(AuthHeader, AuthHeaderWithAuthority).contentType(MediaType.APPLICATION_XML).content(body))
                    .andExpect(status().is4xxClientError());
        }
    }

    @Test
    public void itShouldUseServiceToGetImport() throws Exception {
        final long id = 123;
        given(importService.getImport(id)).willReturn(Optional.of(testImport(id)));
        for (String uri : new String[] {ASSESSMENTS_URI, ACCOMMODATIONS_URI}) {
            mvc.perform(get(uri + "/" + id).header(AuthHeader, AuthHeaderWithAuthority))
                    .andExpect(status().isOk())
                    .andExpect(content().string(containsString("" + id)));
        }
    }

    @Test
    public void itShouldReturn404ForUnknownImport() throws Exception {
        final long id = 23;
        given(importService.getImport(id)).willReturn(Optional.empty());
        for (String uri : new String[] {ASSESSMENTS_URI, ACCOMMODATIONS_URI}) {
            mvc.perform(get(uri + "/" + id).header(AuthHeader, AuthHeaderWithAuthority))
                    .andExpect(status().isNotFound());
        }
    }

    @Test
    public void itShouldUseServiceToGetImportsByBatch() throws Exception {
        final String batch = "abc";
        given(importService.getImports(any(RdwImportQuery.class)))
                .willReturn(newArrayList(RdwImport.builder().id(123L).batch(batch).build()));
        for (String uri : new String[] {ASSESSMENTS_URI, ACCOMMODATIONS_URI}) {
            mvc.perform(get(uri + "?batch=" + batch).header(AuthHeader, AuthHeaderWithAuthority))
                    .andExpect(status().isOk())
                    .andExpect(content().string(containsString(batch)))
                    .andExpect(content().string(containsString("123")));
        }
    }

    @Test
    public void itShouldUseServiceToGetImportsByStatus() throws Exception {
        final ImportStatus status = ImportStatus.BAD_FORMAT;
        given(importService.getImports(any(RdwImportQuery.class)))
                .willReturn(newArrayList(RdwImport.builder().id(123L).status(status).build()));

        for (String uri : new String[] {ASSESSMENTS_URI, ACCOMMODATIONS_URI}) {
            mvc.perform(get(uri + "?status=" + status.toString()).header(AuthHeader, AuthHeaderWithAuthority))
                    .andExpect(status().isOk())
                    .andExpect(content().string(containsString(status.toString())))
                    .andExpect(content().string(containsString("123")));
        }
    }

    @Test
    public void itShouldReturn4xxForInvalidStatus() throws Exception {
        for (String uri : new String[] {ASSESSMENTS_URI, ACCOMMODATIONS_URI}) {
            mvc.perform(get(uri + "?status=fubar").header(AuthHeader, AuthHeaderWithAuthority))
                    .andExpect(status().is(HttpStatus.BAD_REQUEST.value()));
        }
    }

    @Test
    public void itShouldReturnUnauthorizedIfNoAuthToken() throws Exception {
        for (String uri : new String[] {ASSESSMENTS_URI, ACCOMMODATIONS_URI}) {
            mvc.perform(get(uri))
                    .andExpect(status().is(HttpStatus.UNAUTHORIZED.value()));
        }
    }

    @Test
    public void itShouldReturnForbiddenIfNoAuthority() throws Exception {
        for (String uri : new String[] {ASSESSMENTS_URI, ACCOMMODATIONS_URI}) {
            mvc.perform(get(uri).header(AuthHeader, AuthHeaderForClient))
                    .andExpect(status().is(HttpStatus.FORBIDDEN.value()));
        }
    }

    private RdwImport testImport(final long id) {
        return RdwImport.builder()
                .id(id)
                .build();
    }
}
