package org.opentestsystem.rdw.ingest.service;

import org.apache.commons.codec.digest.DigestUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.group.CsvValidationResult;
import org.opentestsystem.rdw.group.CsvValidationService;
import org.opentestsystem.rdw.ingest.auth.SbacUserDetails;
import org.opentestsystem.rdw.ingest.auth.SbacUserTest;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.repository.RdwImportRepository;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import java.io.InputStream;
import java.time.Instant;
import java.util.List;
import java.util.StringJoiner;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

public class GroupImportServiceTest {

    private RdwImportRepository repository;
    private ArchiveService archiveService;
    private ImportService service;
    private ImportSource importSource;
    private CsvValidationService validationService;

    @Before
    public void createService() {
        repository = mock(RdwImportRepository.class);
        when(repository.create(any(RdwImport.class))).thenAnswer(invocation -> {
            final RdwImport rdwImport = invocation.getArgument(0);
            return rdwImport.copy().id(123L).build();
        });
        when(repository.update(any(RdwImport.class))).thenAnswer(invocation -> {
            final RdwImport rdwImport = invocation.getArgument(0);
            return rdwImport.copy().updated(Instant.now()).build();
        });
        archiveService = mock(ArchiveService.class);
        importSource = mock(ImportSource.class);

        validationService = mock(CsvValidationService.class);
        when(validationService.toFailureMessage(any())).thenAnswer(invocation -> joinMessages(invocation.getArgument(0)));
        when(validationService.toSuccessMessage(any())).thenAnswer(invocation -> joinMessages(invocation.getArgument(0)));

        service = new GroupImportService(repository, archiveService, importSource, validationService);
    }

    private static String joinMessages(final List<CsvValidationResult> results) {
        final StringJoiner joiner = new StringJoiner("\n");
        results.stream().map(CsvValidationResult::getMessage).forEach(joiner::add);
        return joiner.toString();
    }

    @Test
    public void importFileReturnsImport() {
        when(validationService.validate(any(), any(), any())).thenAnswer(invocation -> {
            // we need to read the entire stream so digest is calculated properly
            final InputStream is = invocation.getArgument(0);
            is.read(new byte[1000]);
            return newArrayList();
        });

        final SbacUserDetails user = SbacUserTest.groupUser();
        final byte[] body = "group_name,school_natural_id,school_year,subject_code,student_ssid,group_user_login".getBytes();
        final String contentType = "text/csv";
        final MultipartFile file = new MockMultipartFile("test-group.csv", "test-group.csv", "text/csv", body);

        final RdwImport rdwImport = service.importContent(user, file, ImportContent.GROUPS, contentType, null);
        assertThat(rdwImport.getContent()).isEqualTo(ImportContent.GROUPS);
        assertThat(rdwImport.getBatch()).isEqualTo("test-group.csv");

        final byte[] expectedPayload = DigestUtils.md5Hex(body).toUpperCase().getBytes();
        verify(importSource).submitContent(expectedPayload, ImportContent.GROUPS, contentType, 123L);
    }

    @Test
    public void itShouldReprocessExistingDigest() {
        when(validationService.validate(any(), any(), any())).thenReturn(newArrayList());

        final SbacUserDetails user = SbacUserTest.groupUser();
        final byte[] body = "group_name,school_natural_id,school_year,subject_code,student_ssid,group_user_login".getBytes();
        final String contentType = "text/csv";

        final String digest = DigestUtils.md5Hex(body).toUpperCase();
        final RdwImport match = RdwImport.builder().id(42L).build();
        when(repository.findOneByContentAndDigest(ImportContent.GROUPS, digest)).thenReturn(match);

        final RdwImport rdwImport = service.importContent(user, body, ImportContent.GROUPS, contentType, null);
        assertThat(rdwImport.getId()).isEqualTo(42);
        assertThat(rdwImport.getBatch()).isNull();
        verify(importSource).submitContent(digest.getBytes(), ImportContent.GROUPS, contentType, 42L);
    }

    @Test
    public void itShouldHandleValidationFailures() {
        when(validationService.validate(any(), any(), any())).thenReturn(newArrayList(CsvValidationResult.failure(0, "oops")));

        final SbacUserDetails user = SbacUserTest.groupUser();
        final byte[] body = "group_name,school_natural_id,school_year,subject_code,student_ssid,group_user_login".getBytes();
        final String contentType = "text/csv";

        final RdwImport rdwImport = service.importContent(user, body, ImportContent.GROUPS, contentType, null);
        assertThat(rdwImport.getContent()).isEqualTo(ImportContent.GROUPS);
        assertThat(rdwImport.getStatus()).isEqualTo(ImportStatus.BAD_DATA);
        // verify archive was called but the message queue was not
        verify(archiveService).writeResource(any(), any(byte[].class), any());
        verifyZeroInteractions(importSource);
    }
}
