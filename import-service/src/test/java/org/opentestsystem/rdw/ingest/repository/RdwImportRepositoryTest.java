package org.opentestsystem.rdw.ingest.repository;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.RdwImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class RdwImportRepositoryTest {

    private RdwImportRepositoryImpl repository;

    @Before
    public void createRepository() {
        NamedParameterJdbcTemplate template = mock(NamedParameterJdbcTemplate.class);

        when(template.query(any(String.class), any(MapSqlParameterSource.class), any(RowMapper.class))).thenAnswer(invocation -> {
            final String query = invocation.getArgumentAt(0, String.class);
            return getExamMockData();
        });

        repository = new RdwImportRepositoryImpl(template);
    }

    @Test
    public void itShouldReturnImportContent() {
        List<RdwImportContent> contents = repository.findContentBy(new RdwImportQuery());

        // Two sql calls should be made to get the exams and iab_exams, so the result
        // should have double of what is mocked (since it'll return the mock data twice).
        assertThat(contents).hasSize(4);
    }

    private List<RdwImportContent> getExamMockData() {
        List<RdwImportContent> list = new ArrayList<>();

        list.add(RdwImportContent
                .builder()
                .studentId("Iab exam student 1")
                .assessmentNaturalId("AsmtNatId_Iab1")
                .completedAt(new Date())
                .build());

        list.add(RdwImportContent
                .builder()
                .studentId("Summative exam student 1")
                .assessmentNaturalId("AssmtNatId_Summative")
                .completedAt(new Date())
                .build());

        return list;
    }
}
