package org.opentestsystem.rdw.ingest.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.ingest.auth.WithMockRdwUser;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.service.ImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.time.Instant;
import java.util.Optional;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.core.StringEndsWith.endsWith;
import static org.mockito.BDDMockito.given;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ExamController.class)
@ContextConfiguration(classes = TestAppConfig.class)
@WebAppConfiguration
@WithMockRdwUser()
public class ExamControllerTest {
    @Autowired
    private MockMvc mvc;

    @Autowired
    private RdwImportCsvMessageConverter csvMessageConverter;

    @MockBean
    private ImportService importService;

    @Autowired
    private ExamController controller;

    @Test
    public void itShouldUseServiceToImportExam() throws Exception {
        final String body = "<TDSReport/>";
        given(importService.importContent(any(), eq(body), eq(ImportContent.EXAM), eq(MediaType.APPLICATION_XML_VALUE), any())).willReturn(testImport(123L));
        mvc.perform(post("/exams/imports").contentType(MediaType.APPLICATION_XML).content(body))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(containsString("123")))
                .andExpect(content().string(not(containsString("null"))))
                .andExpect(jsonPath("$._links['self'].href", endsWith("exams/imports/123")));
    }

    @Test
    public void itShouldReturn4xxForUnsupportedOperation() throws Exception {
        final String body = "<TDSReport/>";
        given(importService.importContent(any(), eq(body), eq(ImportContent.EXAM), eq(MediaType.APPLICATION_XML_VALUE), any())).willThrow(UnsupportedOperationException.class);
        mvc.perform(post("/exams/imports").contentType(MediaType.APPLICATION_XML).content(body))
                .andExpect(status().is4xxClientError());
    }

    @Test
    public void itShouldUseServiceToGetImport() throws Exception {
        final long id = 123;
        given(importService.getImport(id)).willReturn(Optional.of(testImport(id)));
        mvc.perform(get("/exams/imports/" + id))
                .andExpect(status().isOk())
                .andExpect(content().string(containsString("" + id)));
    }

    @Test
    public void itShouldReturn404ForUnknownImport() throws Exception {
        final long id = 23;
        given(importService.getImport(id)).willReturn(Optional.empty());
        mvc.perform(get("/exams/imports/" + id))
                .andExpect(status().isNotFound());
    }

    @Test
    public void itShouldUseServiceToGetImportsByBatch() throws Exception {
        final String batch = "abc";
        // TODO - make any() more specific
        given(importService.getImports(any(RdwImportQuery.class)))
                .willReturn(newArrayList(RdwImport.builder().id(123L).batch(batch).build()));
        mvc.perform(get("/exams/imports?batch=" + batch))
                .andExpect(status().isOk())
                .andExpect(content().string(containsString(batch)))
                .andExpect(content().string(containsString("123")));
    }

    @Test
    public void itShouldUseServiceToGetImportsByStatus() throws Exception {
        final ImportStatus status = ImportStatus.BAD_FORMAT;
        // TODO - make any() more specific
        given(importService.getImports(any(RdwImportQuery.class)))
                .willReturn(newArrayList(RdwImport.builder().id(123L).status(status).build()));
        mvc.perform(get("/exams/imports?status=" + status.toString()))
                .andExpect(status().isOk())
                .andExpect(content().string(containsString(status.toString())))
                .andExpect(content().string(containsString("123")));
    }

    @Test
    public void itShouldReturn4xxForInvalidStatus() throws Exception {
        mvc.perform(get("exams/imports?status=fubar"))
                .andExpect(status().is4xxClientError());
    }

    @Test
    public void itShouldReturn4xxWhenNoCriteria() throws Exception {
        mvc.perform(get("exams/imports"))
                .andExpect(status().is4xxClientError());
    }

    @Test
    public void itShouldResubmitImports() throws Exception {
        given(importService.resubmitImports(any(RdwImportQuery.class))).willReturn(1L);
        mvc.perform(post("/exams/imports/resubmit").param("status", "BAD_DATA"))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(equalTo("1")));
        final ArgumentCaptor<RdwImportQuery> argumentCaptor = ArgumentCaptor.forClass(RdwImportQuery.class);
        verify(importService).resubmitImports(argumentCaptor.capture());
        final RdwImportQuery query = argumentCaptor.getValue();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.BAD_DATA);
    }

    @Test
    public void itShouldResubmitImportsWithDefaultQuery() throws Exception {
        given(importService.resubmitImports(any(RdwImportQuery.class))).willReturn(1L);
        mvc.perform(post("/exams/imports/resubmit"))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(equalTo("1")));
        final ArgumentCaptor<RdwImportQuery> argumentCaptor = ArgumentCaptor.forClass(RdwImportQuery.class);
        verify(importService).resubmitImports(argumentCaptor.capture());
        final RdwImportQuery query = argumentCaptor.getValue();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.ACCEPTED);
    }

    @Test
    public void itShouldReturnImportContentAsCsv() throws Exception {
        // Setting up a different MockMvc for this test because @WebMvcTest
        // seems to filter out any custom message converters.  This test
        // requires the RdwImportCsvMessageConverter.
        given(importService.getImportContents(any(RdwImportQuery.class))).willReturn(newArrayList(
                RdwImportContent
                        .builder()
                        .studentId("TestStudentId")
                        .assessmentNaturalId("TestAssmtId")
                        .completedAt(Instant.now())
                        .build()
        ));

        MockMvc mockMvc = MockMvcBuilders.standaloneSetup(controller)
                .setMessageConverters(csvMessageConverter)
                .build();

        mockMvc.perform(get("/exams/imports/reconciliation")
                .header("Accept", "text/csv"))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().contentType("text/csv;charset=UTF-8"))
                .andExpect(content().string(containsString("student_id")))
                .andExpect(content().string(containsString("asmt_guid")))
                .andExpect(content().string(containsString("date_taken")))
                .andExpect(content().string(containsString("TestStudentId")))
                .andExpect(content().string(containsString("TestAssmtId")));
    }

    private RdwImport testImport(final long id) {
        return RdwImport.builder()
                .id(id)
                .build();
    }
}
