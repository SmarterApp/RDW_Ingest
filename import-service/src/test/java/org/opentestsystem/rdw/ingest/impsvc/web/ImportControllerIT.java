package org.opentestsystem.rdw.ingest.impsvc.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.impsvc.service.ImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Optional;
import java.util.Properties;

import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.core.StringEndsWith.endsWith;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.ingest.impsvc.web.TestAppConfig.AuthHeader;
import static org.opentestsystem.rdw.ingest.impsvc.web.TestAppConfig.AuthHeaderWithAuthority;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ImportController.class)
@ContextConfiguration(classes = TestAppConfig.class)
@WebAppConfiguration
public class ImportControllerIT {

    @Autowired
    private MockMvc mvc;

    @MockBean
    private ImportService importService;

    @Test
    public void itShouldReturn4xxForUnsupportedOperation() throws Exception {
        final long id = 123;
        when(importService.getImport(id)).thenThrow(UnsupportedOperationException.class);
        mvc.perform(get("/imports/" + id).header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().is4xxClientError());
    }

    @Test
    public void itShouldUseServiceToGetImport() throws Exception {
        final long id = 123;
        final RdwImport rdwImport = RdwImport.builder().id(id).build();
        when(importService.getImport(id)).thenReturn(Optional.of(rdwImport));
        mvc.perform(get("/imports/" + id).header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().isOk())
                .andExpect(content().string(containsString("" + id)))
                .andExpect(jsonPath("$._links['self'].href", endsWith("imports/123")))
                .andExpect(jsonPath("$._links['payload'].href", endsWith("imports/123/payload")))
                .andExpect(jsonPath("$._links['payload-properties'].href", endsWith("imports/123/payload/properties")))
        ;
    }

    @Test
    public void itShouldReturn404ForUnknownImport() throws Exception {
        final long id = 23;
        when(importService.getImport(id)).thenReturn(Optional.empty());
        mvc.perform(get("/imports/" + id).header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().isNotFound());
    }

    @Test
    public void itShouldUseServiceToGetPayload() throws Exception {
        final long id = 123L;
        final byte[] payload = "<TDSReport/>".getBytes();
        final Properties properties = new Properties();
        properties.setProperty("filename", "test.xml");
        properties.setProperty("Content-Type", "application/xml");

        when(importService.getPayload(id)).thenReturn(Optional.of(payload));
        when(importService.getPayloadProperties(id)).thenReturn(Optional.of(properties));
        mvc.perform(get("/imports/123/payload").header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/xml"))
                .andExpect(content().bytes(payload));
    }

    @Test
    public void itShouldUseServiceToGetPayloadProperties() throws Exception {
        final long id = 123L;
        final Properties properties = new Properties();
        properties.setProperty("filename", "test.xml");

        when(importService.getPayloadProperties(id)).thenReturn(Optional.of(properties));
        mvc.perform(get("/imports/123/payload/properties").header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().isOk())
                .andExpect(content().string(containsString("test.xml")));
    }

    @Test
    public void itShouldReflectCurrentUser() throws Exception {
        mvc.perform(get("/imports/user").header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.username", equalTo("dwtest@example.com")))
                .andExpect(jsonPath("$.authorities[0].authority", equalTo("ROLE_ASMTDATALOAD")));
    }

    @Test
    public void itShouldNotReflectUnauthenticatedUser() throws Exception {
        mvc.perform(get("/imports/user"))
                .andExpect(status().is4xxClientError());
    }
}
