package org.opentestsystem.rdw.ingest.status;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.repository.RdwImportRepository;

import java.util.Arrays;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DatabaseStatusIndicatorTest {

    private DatabaseStatusIndicator indicator;
    private RdwImportRepository repository;
    private ArchiveService archiveService;

    @Before
    public void createStatusIndicator() {
        repository = mock(RdwImportRepository.class);
        when(repository.findAllStatuses()).thenReturn(Arrays.asList(ImportStatus.values()));
        when(repository.create(any(RdwImport.class))).thenAnswer(invocation -> {
            final RdwImport rdwImport = (RdwImport) invocation.getArguments()[0];
            rdwImport.setId(123L);
            return rdwImport;
        });

        archiveService = mock(ArchiveService.class);
        when(archiveService.readResource("status")).thenReturn("status check".getBytes());

        indicator = new DatabaseStatusIndicator(repository, archiveService);
    }

    @Test
    public void itShouldReturnAName() {
        assertThat(indicator.name()).isEqualTo("database");
    }

    @Test
    public void itShouldDoLevelCheck() {
        assertThat(indicator.doLevelCheck(2)).isFalse();
        assertThat(indicator.doLevelCheck(3)).isTrue();
        assertThat(indicator.doLevelCheck(4)).isTrue();
    }

    @Test
    public void itShouldDoReadCheckAtLevel3() {
        final Status status = indicator.status(3);
        final List<Status> databaseOperations = (List<Status>) status.getDetails().get("databaseOperations");
        assertThat(databaseOperations).hasSize(2);
        assertThat(databaseOperations.get(0).getStatusRating()).isEqualTo(4);
        assertThat(databaseOperations.get(1).getStatusRating()).isEqualTo(4);
    }

    @Test
    public void itShouldDoWriteCheckAtLevel4() {
        final Status status = indicator.status(4);
        final List<Status> databaseOperations = (List<Status>) status.getDetails().get("databaseOperations");
        assertThat(databaseOperations).hasSize(4);
        assertThat(databaseOperations.get(0).getStatusRating()).isEqualTo(4);
        assertThat(databaseOperations.get(1).getStatusRating()).isEqualTo(4);
        assertThat(databaseOperations.get(2).getStatusRating()).isEqualTo(4);
        assertThat(databaseOperations.get(3).getStatusRating()).isEqualTo(4);
    }

    @Test
    public void itShouldWarnIfRepoReadFails() {
        doReturn(newArrayList()).when(repository).findAllStatuses();

        final Status status = indicator.status(3);
        final List<Status> databaseOperations = (List<Status>) status.getDetails().get("databaseOperations");
        assertThat(databaseOperations).hasSize(2);
        assertThat(databaseOperations.get(0).getStatusRating()).isEqualTo(2);
    }

    @Test
    public void itShouldWarnIfRepoWriteFails() {
        doAnswer(invocation -> invocation.getArguments()[0]).when(repository).create(any(RdwImport.class));

        final Status status = indicator.status(4);
        final List<Status> databaseOperations = (List<Status>) status.getDetails().get("databaseOperations");
        assertThat(databaseOperations).hasSize(4);
        assertThat(databaseOperations.get(0).getStatusRating()).isEqualTo(4);
        assertThat(databaseOperations.get(1).getStatusRating()).isEqualTo(2);
    }
}