package org.opentestsystem.rdw.ingest.service;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import java.util.Properties;

import static org.assertj.core.api.Assertions.assertThat;

public class LocalArchiveServiceTest {

    @Rule
    public TemporaryFolder temporaryFolder = new TemporaryFolder();
    private LocalArchiveService service;

    @Before
    public void createService() {
        service = new LocalArchiveService("file://" + temporaryFolder.getRoot().getAbsolutePath());
    }

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresAFileScheme() {
        new LocalArchiveService("/tmp");
    }

    @Test
    public void itShouldWriteAndReadContent() {
        service.writeResource("test", "TestyMcTestFace", null);
        assertThat(service.readResource("test")).isEqualTo("TestyMcTestFace");
        assertThat(service.readProperties("test")).isEmpty();
    }

    @Test
    public void itShouldWriteAndReadContentInLocation() {
        final Properties properties = new Properties();
        properties.setProperty("content-type", "text/plain");
        properties.setProperty("message", "hi");

        service.writeResource("f1/f2/test", "TestyMcTestFace", properties);
        assertThat(service.readResource("f1/f2/test")).isEqualTo("TestyMcTestFace");

        final Properties readProperties = service.readProperties("f1/f2/test");
        assertThat(readProperties).hasSize(2);
        assertThat(readProperties.getProperty("content-type")).isEqualTo("text/plain");
        assertThat(readProperties.getProperty("message")).isEqualTo("hi");
    }
}