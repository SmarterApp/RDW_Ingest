package org.opentestsystem.rdw.ingest.auth;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestOperations;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static java.lang.Thread.sleep;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.ingest.auth.SbacTokenConverterTest.assertPasswordGrantAuth;
import static org.opentestsystem.rdw.ingest.auth.SbacTokenConverterTest.passwordGrantTokenMap;
import static org.opentestsystem.rdw.ingest.auth.SbacTokenConverterTest.testConverter;
import static org.springframework.security.oauth2.common.OAuth2AccessToken.EXPIRES_IN;

public class ForgeRockTokenServicesTest {

    private ForgeRockTokenServices services;
    private RestOperations restOperations;

    @Before
    public void createServices() {
        restOperations = mock(RestOperations.class);

        services = new ForgeRockTokenServices(testConverter());
        services.setRestTemplate(restOperations);
    }

    @Test
    public void itShouldLoadAuthentication() {
        final String accessToken = "abc123";

        when(restOperations.getForObject(anyString(), any(), any(Map.class))).thenReturn(passwordGrantTokenMap(accessToken));

        assertPasswordGrantAuth(services.loadAuthentication(accessToken));
    }

    @Test
    public void itShouldCacheAuthentication() {
        final String accessToken = "abc123";

        when(restOperations.getForObject(anyString(), any(), any(Map.class))).thenReturn(passwordGrantTokenMap(accessToken));

        assertPasswordGrantAuth(services.loadAuthentication(accessToken));
        assertPasswordGrantAuth(services.loadAuthentication(accessToken));
        assertPasswordGrantAuth(services.loadAuthentication(accessToken));

        verify(restOperations, times(1)).getForObject(anyString(), any(), any(Map.class));
    }

    @Test
    public void itShouldInvalidateBasedOnExpiresInValue() throws InterruptedException {
        final String accessToken = "abc123";

        final Map<String, Object> map = passwordGrantTokenMap(accessToken);
        map.put(EXPIRES_IN, 1);
        when(restOperations.getForObject(anyString(), any(), any(Map.class))).thenReturn(map);

        assertPasswordGrantAuth(services.loadAuthentication(accessToken));
        assertPasswordGrantAuth(services.loadAuthentication(accessToken));

        verify(restOperations, times(1)).getForObject(anyString(), any(), any(Map.class));

        sleep(1200);
        assertPasswordGrantAuth(services.loadAuthentication(accessToken));

        verify(restOperations, times(2)).getForObject(anyString(), any(), any(Map.class));
    }

    @Test
    public void itShouldUseConfiguredUrl() {
        final String url = "http://myserver/tokenInfo";
        services.setTokenInfoUrl(url);

        when(restOperations.getForObject(any(), any(), any(Map.class))).thenReturn(newHashMap());

        services.loadAuthentication("abc123");
        final ArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);
        verify(restOperations).getForObject(captor.capture(), any(), any(Map.class));
        assertThat(captor.getValue()).isEqualTo(url);
    }

    @Test(expected = InvalidTokenException.class)
    public void itShouldDetectTokenError() {
        final Map<String, Object> map = newHashMap();
        map.put("error", "some error");
        when(restOperations.getForObject(anyString(), any(), any(Map.class))).thenReturn(map);

        services.loadAuthentication("abc123");
    }

    @Test(expected = InvalidTokenException.class)
    public void itShouldPropagateRuntimeException() {
        when(restOperations.getForObject(anyString(), any(), any(Map.class))).thenThrow(RestClientException.class);

        services.loadAuthentication("abc123");
    }

    @Test(expected = AuthenticationServiceException.class)
    public void itShouldPropagateCheckedException() {
        when(restOperations.getForObject(anyString(), any(), any(Map.class))).thenThrow(Exception.class);

        services.loadAuthentication("abc123");
    }

}