package org.opentestsystem.rdw.ingest.impsvc.repository;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.security.authentication.TestingAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import javax.sql.DataSource;
import java.sql.SQLException;
import org.opentestsystem.rdw.ingest.impsvc.auth.SbacUserTest;
import org.opentestsystem.rdw.multitenant.datasource.TenantDynamicRoutingDataSource;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
public class DataSourceIT {

    @Autowired
    private DataSource dataSource;

    @Autowired
    private NamedParameterJdbcTemplate template;

    @Before
    public void setTenantContext() {
        // avoid the No tenantKey fallback exception
        SecurityContextHolder.getContext()
                .setAuthentication(new TestingAuthenticationToken(SbacUserTest.testUser(), null));
    }

    @Test
    public void itShouldUseTenantAwareDataSource() throws SQLException {
        // just make sure it went through the correct wiring to get the tenant aware datasource
        // (unfortunately, we can't inspect any settings the way things are coded)
        assertThat(dataSource.isWrapperFor(TenantDynamicRoutingDataSource.class)).isTrue();
    }

    @Test
    public void characterSetShouldBeUtf8() {
        template.query("SELECT @@character_set_client, @@character_set_connection, @@collation_connection;", rs -> {
            assertThat(rs.getString(1).toLowerCase()).contains("utf8");
            assertThat(rs.getString(2).toLowerCase()).contains("utf8");
            assertThat(rs.getString(3).toLowerCase()).contains("utf8");
        });
    }
}
