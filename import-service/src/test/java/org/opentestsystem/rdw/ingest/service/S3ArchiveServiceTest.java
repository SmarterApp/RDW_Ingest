package org.opentestsystem.rdw.ingest.service;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Properties;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@TestPropertySource(properties = {
        "archive.root=s3://rdw-archive2/",
        "cloud.aws.credentials.accessKey: YourAccessKey",
        "cloud.aws.credentials.secretKey: YourSecretKey",
        "cloud.aws.region.auto: false",
        "cloud.aws.region.static: us-west-2"
})
@Import(ArchiveConfiguration.class)
public class S3ArchiveServiceTest {

    @Autowired
    private S3ArchiveService service;

    @Test(expected = IllegalArgumentException.class)
    public void itRequiresAS3Scheme() {
        new S3ArchiveService("/tmp");
    }

    @Ignore("must provide aws credentials")
    @Test
    public void itShouldWriteAndReadContent() {
        final String content = "TestyMcTestFace";
        service.writeResource("test", content, null);
        assertThat(service.readResource("test")).isEqualTo(content);
        assertThat(service.readProperties("test")).isEmpty();
    }

    @Ignore("must provide aws credentials")
    @Test
    public void itShouldWriteAndReadContentInLocation() {
        final String content = "TestyMcTestFace";
        final Properties properties = new Properties();
        properties.setProperty("content-type", "text/plain");
        properties.setProperty("message", "hi");

        service.writeResource("EXAM/f1/f2/test", content, properties);
        assertThat(service.readResource("EXAM/f1/f2/test")).isEqualTo(content);

        final Properties readProperties = service.readProperties("EXAM/f1/f2/test");
        assertThat(readProperties).hasSize(2);
        assertThat(readProperties.getProperty("content-type")).isEqualTo("text/plain");
        assertThat(readProperties.getProperty("message")).isEqualTo("hi");
    }
}