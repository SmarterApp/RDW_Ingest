package org.opentestsystem.rdw.ingest.web;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;

import static org.assertj.core.api.Assertions.assertThat;

public class ImportResourceAssemblerTest {

    @Before
    public void setupRequestContext() {
        // have to fake out the request context
        final HttpServletRequest request = new MockHttpServletRequest();
        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));
    }

    @After
    public void cleanupRequestContext() {
        RequestContextHolder.resetRequestAttributes();
    }

    @Test
    public void itShouldAddExamLinks() {
        final ImportResourceAssembler assembler = new ImportResourceAssembler(ExamController.class);
        final RdwImport rdwImport = RdwImport.builder()
                .content(ImportContent.EXAM)
                .id(123L)
                .build();

        final RdwImportResource resource = assembler.toResource(rdwImport);
        assertThat(resource.getLinks()).hasSize(3);
        assertThat(resource.getLinks().get(0).getHref()).endsWith("exams/imports/123");
    }

    @Test
    public void itShouldPassThroughNulls() {
        final ImportResourceAssembler assembler = new ImportResourceAssembler(ExamController.class);
        assertThat(assembler.toResource(null)).isNull();
    }
}
