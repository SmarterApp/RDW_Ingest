package org.opentestsystem.rdw.ingest.web;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.mock.web.MockMultipartFile;

import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.core.StringEndsWith.endsWith;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.ImportContent.SUBJECT;
import static org.opentestsystem.rdw.ingest.web.TestAppConfig.AuthHeader;
import static org.opentestsystem.rdw.ingest.web.TestAppConfig.AuthHeaderWithAuthority;
import static org.springframework.http.MediaType.APPLICATION_XML;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(SubjectController.class)
public class SubjectControllerIT extends ScopedControllerTestSuite {

    public SubjectControllerIT() {
        super("/subjects/imports", SUBJECT, AuthHeaderWithAuthority);
    }

    @Test
    public void itShouldUseServiceToImportSubject() throws Exception {
        final byte[] body = "<Subject/>".getBytes();
        final RdwImport rdwImport = RdwImport.builder().id(123L).build();
        final MockMultipartFile file = new MockMultipartFile("file", "sample_subject.xml", APPLICATION_XML.toString(), body);

        when(importService.importContent(any(), eq(file), eq(content), eq(APPLICATION_XML.toString()), any())).thenReturn(rdwImport);

        mvc.perform(fileUpload(uri).file(file).header(AuthHeader, authHeader))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(containsString("123")))
                .andExpect(content().string(not(containsString("null"))))
                .andExpect(jsonPath("$._links['self'].href", endsWith("imports/123")));
    }
}