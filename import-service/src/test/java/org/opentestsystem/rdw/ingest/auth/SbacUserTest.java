package org.opentestsystem.rdw.ingest.auth;

import org.junit.Test;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

public class SbacUserTest {

    // returns a test user with the same defaults as WithMockSbacUser
    public static SbacUser testUser() {
        return SbacUser.builder()
                .username("test@example.com")
                .password("password")
                .authorities(newArrayList(new SimpleGrantedAuthority("ASMTDATALOAD")))
                .tenancyChain("|SBAC|ASMTDATALOAD|CLIENT|SBAC||||||||||||||")
                .sbacUuid("57e3ed3de4b0e3b75702f3a0")
                .build();
    }

    @Test
    public void itShouldPreserveConstructorValues() {
        final SbacUser user = testUser();
        assertThat(user.getUsername()).isEqualTo("test@example.com");
        assertThat(user.getTenancyChain().toString()).isEqualTo("|SBAC|ASMTDATALOAD|CLIENT|SBAC||||||||||||||");
    }

    @Test
    public void itShouldRequireOnlyUsernameAndHaveADefaultPassword() {
        final SbacUser user = SbacUser.builder().username("alice").build();
        assertThat(user.getPassword()).isNotBlank();
        assertThat(user.getAuthorities()).isNotNull().isEmpty();
    }
}
