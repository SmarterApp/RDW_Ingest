package org.opentestsystem.rdw.ingest.auth;

import org.junit.Test;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.PermissionScope;
import org.opentestsystem.rdw.utils.TenancyChain;
import org.springframework.security.core.authority.SimpleGrantedAuthority;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

public class SbacUserTest {

    public static SbacUser testUser() {
        return new SbacUser.Builder()
                .username("test@example.com")
                .password("password")
                .authorities(newArrayList(new SimpleGrantedAuthority(Authorities.DataLoadAuthority)))
                .tenancyChain("|SBAC|ASMTDATALOAD|CLIENT|SBAC||||||||||||||")
                .sbacUuid("57e3ed3de4b0e3b75702f3a0")
                .permission(new Permission(Authorities.DataLoadRole, PermissionScope.STATEWIDE))
                .build();
    }

    public static SbacUser groupUser() {
        return new SbacUser.Builder()
                .username("test@example.com")
                .password("password")
                .authorities(newArrayList(new SimpleGrantedAuthority(Authorities.GroupWriteAuthority)))
                .tenancyChain("|CA|GROUP_ADMIN|STATE|SBAC||||CA||||||||||")
                .sbacUuid("57e3ed3de4b0e3b75702f3a0")
                .permission(new Permission(Authorities.GroupWritePermission, PermissionScope.STATEWIDE))
                .build();
    }

    @Test
    public void itShouldPreserveConstructorValues() {
        final SbacUser user = testUser();
        assertThat(user.getUsername()).isEqualTo("test@example.com");
        assertThat(user.getPassword()).isEqualTo("password");
        assertThat(user.getAuthorities().iterator().next().getAuthority()).isEqualTo(Authorities.DataLoadAuthority);
        assertThat(user.getTenancyChain().toString()).isEqualTo("|SBAC|ASMTDATALOAD|CLIENT|SBAC||||||||||||||");
        assertThat(user.getSbacUuid()).isEqualTo("57e3ed3de4b0e3b75702f3a0");
        assertThat(user.getPermissions()).hasSize(1);
        assertThat(user.getPermissionScope(Authorities.DataLoadRole).isStatewide()).isTrue();
    }

    @Test
    public void itShouldCopyValues() {
        final SbacUser user = testUser().copy().username("copy@example.com").build();
        assertThat(user.getUsername()).isEqualTo("copy@example.com");
        assertThat(user.getPassword()).isEqualTo("password");
        assertThat(user.getAuthorities().iterator().next().getAuthority()).isEqualTo(Authorities.DataLoadAuthority);
        assertThat(user.getTenancyChain()).isEqualTo(TenancyChain.fromString("|SBAC|ASMTDATALOAD|CLIENT|SBAC||||||||||||||"));
        assertThat(user.getSbacUuid()).isEqualTo("57e3ed3de4b0e3b75702f3a0");
        assertThat(user.getPermissionScope(Authorities.DataLoadRole).isStatewide()).isTrue();
    }

    @Test
    public void itShouldRequireOnlyUsernameAndHaveADefaultPassword() {
        final SbacUser user = new SbacUser.Builder().username("alice").build();
        assertThat(user.getPassword()).isNotBlank();
        assertThat(user.getAuthorities()).isNotNull().isEmpty();
    }

    @Test
    public void itShouldFindPermissionsOrNot() {
        final SbacUser user = testUser();
        assertThat(user.getPermissionScope(Authorities.DataLoadRole).isStatewide()).isTrue();
        // there is no isEmpty() method on PermissionScope, so go through the builder and use isValid() instead
        assertThat(user.getPermissionScope(Authorities.GroupWritePermission).copy().isValid()).isFalse();
    }
}
