package org.opentestsystem.rdw.ingest.status;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.ingest.auth.StubTokenServices;
import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
import org.springframework.security.oauth2.provider.token.AccessTokenConverter;
import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class TokenServicesStatusIndicatorTest {

    private TokenServicesStatusIndicator statusIndicator;
    private ResourceServerTokenServices tokenService;

    @Before
    public void createStatusIndicator() {
        tokenService = mock(ResourceServerTokenServices.class);
        when(tokenService.readAccessToken(anyString())).thenThrow(InvalidTokenException.class);

        statusIndicator = new TokenServicesStatusIndicator(tokenService);
    }

    @Test
    public void itShouldHaveAName() {
        assertThat(statusIndicator.name()).isEqualTo("tokenServices");
    }

    @Test
    public void itShouldBeAtExternalDependenciesLevel() {
        assertThat(statusIndicator.doLevelCheck(4)).isFalse();
        assertThat(statusIndicator.doLevelCheck(5)).isTrue();
    }

    @Test
    public void itShouldReturnIdealTimedStatus() {
        final Status status = statusIndicator.status(5);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());
        assertThat(status.getDetails().get("responseTime")).isNotNull();
    }

    @Test
    public void itShouldReturnFailedStatus() {
        doThrow(new RuntimeException("golly gee")).when(tokenService).readAccessToken(anyString());
        final Status status = statusIndicator.status(5);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Failed.value());
    }

    @Test
    public void itShouldWarnAboutStubService() {
        statusIndicator = new TokenServicesStatusIndicator(new StubTokenServices(mock(AccessTokenConverter.class)));
        final Status status = statusIndicator.status(5);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Warning.value());
        assertThat((String)status.getDetails().get("message")).contains("stub");

    }
}