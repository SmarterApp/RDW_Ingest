package org.opentestsystem.rdw.ingest.impsvc.auth;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.opentestsystem.rdw.security.service.PermissionServiceException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.interceptor.SimpleKey;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Collection;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        CachingPermissionService.class
})
@EnableCaching
@CachingTest
public class CachingPermissionServiceIT {

    @Autowired
    private PermissionService permissionService;

    @MockBean(name = "basicPermissionService")
    private PermissionService basicPermissionService;

    @Autowired
    private CacheManager cacheManager;

    @Before
    public void setup() throws Exception {
        final Map<String, Collection<String>> permissionsByRole =
                ImmutableMap.of(Authorities.DataLoadRole, ImmutableList.of(),
                        "GROUP_ADMIN", ImmutableList.of(Authorities.GroupWritePermission, "GROUP_READ"));

        when(basicPermissionService.getPermissionsByRole()).thenReturn(permissionsByRole);
    }

    @Test
    public void itShouldCacheResults() throws PermissionServiceException {
        final Cache cache = this.cacheManager.getCache("permissionsByRole");
        assertThat(cache.get(SimpleKey.EMPTY)).isNull();

        assertThat(permissionService.getPermissionsByRole()).isNotEmpty();

        assertThat(cache.get(SimpleKey.EMPTY).get()).isInstanceOf(Map.class);
    }
}
