package org.opentestsystem.rdw.ingest.repository;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@ActiveProfiles("test")
public class RdwImportRepositoryIT {

    @Autowired
    private RdwImportRepository repository;

    @Test
    public void itShouldCreateAndFindImports() {
        final long initialCount = repository.count();

        final Map<String, Long> map = createTestData();

        final RdwImport alice = repository.findOne(map.get("alice"));
        assertThat(alice.getCreator()).isEqualTo("alice");
        assertThat(alice.getDigest()).isEqualTo("alice");
        assertThat(alice.getMessage()).isEqualTo("Hi alice");

        assertThat(repository.findOneByContentAndDigest(ImportContent.EXAM, "bob").getCreator()).isEqualTo("bob");
        // but not if content doesn't match
        assertThat(repository.findOneByContentAndDigest(ImportContent.PACKAGE, "bob")).isNull();

        assertThat(repository.exists(map.get("alice"))).isTrue();
        assertThat(repository.exists(map.get("charlie") + 1234)).isFalse();

        assertThat(repository.count()).isEqualTo(initialCount+3);
    }

    @Test
    public void itShouldFindByBatch() {
        createTestData();
        final RdwImportQuery query = RdwImportQuery.builder().batch("abc").build();
        assertThat(repository.findBy(query)).hasSize(3);
    }

    @Test
    public void itShouldFindByStatus() {
        final RdwImportQuery query = RdwImportQuery.builder().status(ImportStatus.ACCEPTED).build();
        final int initialCount = repository.findBy(query).size();
        createTestData();
        assertThat(repository.findBy(query)).hasSize(initialCount+3);
    }

    @Test
    public void itShouldDelete() {
        final Map<String, Long> map = createTestData();
        final long count = repository.count();
        repository.delete(map.get("alice"));
        assertThat(repository.count()).isEqualTo(count-1);
    }

    @Test
    public void itShouldLetDatabaseSetCreated() {
        // this establishes that the database generates microsecond precision
        // and that the repo lets it do so, and preserves the result
        // (in theory, this test will fail 1/1000 times)
        final RdwImport alice = repository.findOne(createTestData().get("alice"));
        final Instant created = alice.getCreated();
        assertThat(created).isNotEqualTo(created.truncatedTo(ChronoUnit.MILLIS));
    }

    @Test
    public void itShouldNotFindUnknownImport() {
        assertThat(repository.findOne(-123)).isNull();
    }

    @Test
    public void itShouldNotFindUnknownImportByDigest() {
        assertThat(repository.findOneByContentAndDigest(ImportContent.EXAM, "probablyNotARealDigest")).isNull();
    }

    @Test
    public void itShouldFindAllStatuses() {
        final List<ImportStatus> statuses = repository.findAllStatuses();
        assertThat(statuses).contains(ImportStatus.values());
    }

    @Test(expected = IllegalStateException.class)
    @Sql(statements = {"INSERT INTO import_status (id, name) VALUES (-42, 'SKY_IS_FALLING')"})
    public void itShouldThrowIfUnknownStatus() {
        repository.findAllStatuses();
    }

    @Test(expected = IllegalStateException.class)
    @Sql(statements = {"UPDATE import_status SET name='SKY_IS_FALLING' WHERE id=-5"})
    public void itShouldThrowIfStatusNameIsWrong() {
        repository.findAllStatuses();
    }

    private Map<String, Long> createTestData() {
        final RdwImport.Builder builder = RdwImport.builder()
                .status(ImportStatus.ACCEPTED)
                .content(ImportContent.EXAM)
                .contentType("text/plain")
                .batch("abc");

        final Map<String, Long> result = newHashMap();
        for (final String creator : new String[]{"alice","bob","charlie"}) {
            final RdwImport saved = repository.create(builder
                    .creator(creator)
                    .digest(creator)
                    .message("Hi " + creator)
                    .build());
            result.put(creator, saved.getId());
        }
        return result;
    }
}
