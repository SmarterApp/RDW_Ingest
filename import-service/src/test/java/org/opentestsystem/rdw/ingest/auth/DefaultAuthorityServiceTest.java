package org.opentestsystem.rdw.ingest.auth;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.opentestsystem.rdw.security.service.PermissionServiceException;
import org.opentestsystem.rdw.utils.Grant;
import org.opentestsystem.rdw.utils.TenancyChain;
import org.springframework.security.core.GrantedAuthority;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DefaultAuthorityServiceTest {

    private AuthorityService service;

    private final TenancyChain BigOlTenancyChain = TenancyChain.fromString(
            "|SBAC|ASMTDATALOAD|CLIENT|SBAC||||CA|CALIFORNIA|||||||||," +
            "|CA|GROUP_ADMIN|STATE|SBAC||||CA|CALIFORNIA|||||||||," +
            "|CA|SUPER_ADMIN|STATE|SBAC||||CA|CALIFORNIA|||||||||," +
            "|CA|DL_ENDUSER|STATE|SBAC||||CA|CALIFORNIA|||||||||," +
            "|AP|DL_ENDUSER|STATE|SBAC||||AP||||||||||");

    @Before
    public void createService() throws PermissionServiceException {
        final PermissionService permissionService = mock(PermissionService.class);
        when(permissionService.getPermissionsByRole()).thenReturn(ImmutableMap.of(
                Authorities.DataLoadRole, ImmutableSet.of(),
                "GROUP_ADMIN", ImmutableSet.of(Authorities.GroupWritePermission),
                "SUPER_ADMIN", ImmutableSet.of(Authorities.GroupWritePermission)
        ));

        service = new DefaultAuthorityService(permissionService, "SBAC", "CA");
    }

    @Test
    public void itShouldGetGrants() {
        assertThat(service.getGrants(BigOlTenancyChain).stream().map(Grant::getRole))
                .hasSize(3)
                .contains("ASMTDATALOAD", "GROUP_ADMIN", "SUPER_ADMIN")
        ;
    }

    @Test
    public void itShouldGetAuthorities() {
        assertThat(service.getAuthorities(BigOlTenancyChain).stream().map(GrantedAuthority::getAuthority))
                .hasSize(4)
                .contains("ROLE_ASMTDATALOAD", "ROLE_GROUP_ADMIN", "ROLE_SUPER_ADMIN", "PERM_GROUP_WRITE")
        ;
    }

    @Test
    public void itShouldGetPermissions() {
        assertThat(service.getPermissions(BigOlTenancyChain)).hasSize(1);
    }
}
