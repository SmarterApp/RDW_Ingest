package org.opentestsystem.rdw.ingest.auth;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.springframework.security.core.GrantedAuthority;

import java.util.Set;
import org.opentestsystem.rdw.security.Permission;
import org.opentestsystem.rdw.security.repository.OrganizationRepository;
import org.opentestsystem.rdw.security.service.PermissionService;
import org.opentestsystem.rdw.security.service.PermissionServiceException;
import org.opentestsystem.rdw.utils.TenancyChain;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.ingest.auth.Authorities.GroupWritePermission;

public class DefaultAuthorityServiceTest {

    private AuthorityService service;

    private final TenancyChain BigOlTenancyChain = TenancyChain.fromString(
            "|SBAC|ASMTDATALOAD|CLIENT|SBAC||||CA|CALIFORNIA|||||||||," +
            "|12345678|GROUP_ADMIN|DISTRICT|SBAC||||CA|CALIFORNIA|||12345678|LAUSD|||||," +
            "|CA|SUPER_ADMIN|STATE|SBAC||||CA|CALIFORNIA|||||||||," +
            "|CA|DL_ENDUSER|STATE|SBAC||||CA|CALIFORNIA|||||||||," +
            "|AP|DL_ENDUSER|STATE|SBAC||||AP||||||||||");

    @Before
    public void createService() throws PermissionServiceException {
        final PermissionService permissionService = mock(PermissionService.class);
        when(permissionService.getPermissionsByRole()).thenReturn(ImmutableMap.of(
                Authorities.DataLoadRole, ImmutableSet.of(),
                "GROUP_ADMIN", ImmutableSet.of(GroupWritePermission),
                "SUPER_ADMIN", ImmutableSet.of(GroupWritePermission)
        ));

        final OrganizationRepository organizationRepository = mock(OrganizationRepository.class);
        when(organizationRepository.findAllDistrictGroupIds(any())).thenReturn(ImmutableMap.of());
        when(organizationRepository.findAllDistrictIds(any())).thenReturn(ImmutableMap.of("12345678", 42L));
        when(organizationRepository.findAllSchoolGroupIds(any())).thenReturn(ImmutableMap.of());
        when(organizationRepository.findAllSchoolIds(any())).thenReturn(ImmutableMap.of());

        service = new DefaultAuthorityService(permissionService, organizationRepository);
    }

    @Test
    public void itShouldGetAuthorities() {
        assertThat(service.getAuthorities(BigOlTenancyChain).stream().map(GrantedAuthority::getAuthority))
                .hasSize(4)
                .contains("ROLE_ASMTDATALOAD", "ROLE_GROUP_ADMIN", "ROLE_SUPER_ADMIN", "PERM_GROUP_WRITE");
    }

    @Test
    public void itShouldGetPermissions() {
        final Set<Permission> permissions = service.getPermissions(BigOlTenancyChain);
        assertThat(permissions).hasSize(1);
        final Permission permission = permissions.iterator().next();
        assertThat(permission.getId()).isEqualTo(GroupWritePermission);
        assertThat(permission.getScope().isStatewide()).isTrue();
        assertThat(permission.getScope().getDistrictIds()).containsOnly(42L);
    }
}
