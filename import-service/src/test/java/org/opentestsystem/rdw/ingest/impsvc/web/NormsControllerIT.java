package org.opentestsystem.rdw.ingest.impsvc.web;

import org.junit.Test;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.impsvc.repository.JdbcPermissionRepository;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;

import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.core.StringEndsWith.endsWith;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.ingest.impsvc.web.TestAppConfig.AuthHeader;
import static org.opentestsystem.rdw.ingest.impsvc.web.TestAppConfig.AuthHeaderWithAuthority;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(NormsController.class)
@Import(JdbcPermissionRepository.class)
public class NormsControllerIT extends ScopedControllerTestSuite {

    private static final String TextPlain = MediaType.TEXT_PLAIN_VALUE;

    public NormsControllerIT() {
        super("/norms/imports", ImportContent.NORMS, AuthHeaderWithAuthority);
    }

    @Test
    public void itShouldUseServiceToImportNorms() throws Exception {
        final byte[] body = "assessmentId,start_date".getBytes();
        final RdwImport rdwImport = RdwImport.builder().id(123L).build();

        when(importService.importContent(eq(body), eq(content), eq(TextPlain), any()))
                .thenReturn(rdwImport);

        mvc.perform(post(uri).header(AuthHeader, authHeader).contentType(TextPlain).content(body))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(containsString("123")))
                .andExpect(content().string(not(containsString("null"))))
                .andExpect(jsonPath("$._links['self'].href", endsWith("imports/123")));
    }

    @Test
    public void itShouldUseServiceToImportNormsUpload() throws Exception {
        final byte[] body = "assessmentId,start_date".getBytes();
        final RdwImport rdwImport = RdwImport.builder().id(123L).build();
        final MockMultipartFile file = new MockMultipartFile("file", "test.csv", "text/plain", body);

        when(importService.importContent(eq(body), eq(content), eq(TextPlain), any()))
                .thenReturn(rdwImport);

        mvc.perform(fileUpload(uri).file(file).header(AuthHeader, authHeader))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(containsString("123")))
                .andExpect(content().string(not(containsString("null"))))
                .andExpect(jsonPath("$._links['self'].href", endsWith("imports/123")));
    }
}
