package org.opentestsystem.rdw.ingest.service;

import org.apache.commons.codec.digest.DigestUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.ingest.auth.SbacUserDetails;
import org.opentestsystem.rdw.ingest.auth.SbacUserTest;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.repository.RdwImportRepository;

import java.util.List;
import java.util.Properties;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.Collections.singletonMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

public class DefaultImportServiceTest {

    private RdwImportRepository repository;
    private ArchiveService archiveService;
    private ImportService service;
    private ImportSource importSource;

    @Before
    public void createService() {
        repository = mock(RdwImportRepository.class);
        when(repository.create(any(RdwImport.class))).thenAnswer(invocation -> {
            final RdwImport rdwImport = invocation.getArgumentAt(0, RdwImport.class);
            if (rdwImport.getId() == null) rdwImport.setId(123L);
            return rdwImport;
        });
        archiveService = mock(ArchiveService.class);

        importSource = mock(ImportSource.class);
        service = new DefaultImportService(repository, archiveService, importSource);
    }

    @Test
    public void importExamReturnsImport() {
        final SbacUserDetails user = SbacUserTest.testUser();
        final byte[] body = "<TDSReport/>".getBytes();
        final String contentType = "application/xml";
        final String batch = "batch123";

        assertThat(service.importContent(user, body, ImportContent.EXAM, contentType, singletonMap("batch", batch)).getBatch())
                .isEqualTo(batch);

        verify(importSource).submitContent(body, ImportContent.EXAM, contentType, 123L);
    }

    @Test
    public void importShouldReturnExistingDigest() {
        final SbacUserDetails user = SbacUserTest.testUser();
        final byte[] body = "<TDSReport/>".getBytes();
        final String contentType = "application/xml";

        final String digest = DigestUtils.md5Hex(body).toUpperCase();
        final RdwImport match = RdwImport.builder().build();
        when(repository.findOneByDigest(digest)).thenReturn(match);

        assertThat(service.importContent(user, body, ImportContent.EXAM, contentType, null)).isSameAs(match);
    }

    @Test
    public void getImportShouldReturnEmptyForUnknown() {
        assertThat(service.getImport(23L).isPresent()).isFalse();
    }

    @Test
    public void itShouldGetImportsByQuery() {
        final RdwImportQuery query = RdwImportQuery.builder().batch("abc").build();
        final List<RdwImport> results = newArrayList(RdwImport.builder().build());
        when(repository.findBy(query)).thenReturn(results);

        assertThat(service.getImports(query)).isSameAs(results);
    }

    @Test
    public void itShouldResubmitAcceptedImports() {
        final RdwImportQuery query = RdwImportQuery.builder().status(ImportStatus.ACCEPTED).build();
        final RdwImport rdwImport = RdwImport.builder()
                .id(123L)
                .content(ImportContent.EXAM)
                .digest("12345678")
                .build();
        final String contentType = "text/plain";
        final List<RdwImport> rdwImports = newArrayList(rdwImport);

        final Properties properties = new Properties();
        properties.setProperty("content-type", contentType);

        when(repository.findBy(query)).thenReturn(rdwImports);
        final String location = "EXAM/12/34/12345678";
        final byte[] payload = "payload".getBytes();
        when(archiveService.readResource(location)).thenReturn(payload);
        when(archiveService.readProperties(location)).thenReturn(properties);

        assertThat(service.resubmitImports(query)).isEqualTo(1);

        verify(importSource).submitContent(eq(payload), eq(ImportContent.EXAM), eq(contentType), eq(123L));
    }

    @Test
    public void itShouldResubmitImports() {
        final RdwImportQuery query = RdwImportQuery.builder().status(ImportStatus.BAD_DATA).build();
        final RdwImport rdwImport = RdwImport.builder()
                .id(19L)
                .content(ImportContent.EXAM)
                .digest("12345678")
                .status(ImportStatus.BAD_DATA)
                .build();
        final List<RdwImport> rdwImports = newArrayList(rdwImport);

        final String contentType = "text/plain";
        final Properties properties = new Properties();
        properties.setProperty("content-type", contentType);
        final String location = "EXAM/12/34/12345678";
        final byte[] payload = "payload".getBytes();
        when(archiveService.readResource(location)).thenReturn(payload);
        when(archiveService.readProperties(location)).thenReturn(properties);

        when(repository.findByReplayId(anyLong())).thenReturn(rdwImports);
        when(repository.updateReplayId(eq(query), anyLong())).thenReturn(1L);
        when(repository.clearReplayId(anyLong())).thenReturn(0L);

        service.resubmitImports(query);

        verify(repository).updateReplayId(19L, 123L);
        verify(importSource).submitContent(eq(payload), eq(ImportContent.EXAM), eq(contentType), eq(123L));
    }

    @Test
    public void itShouldHandleNoResubmitRecords() {
        final RdwImportQuery query = RdwImportQuery.builder().status(ImportStatus.BAD_DATA).build();
        when(repository.updateReplayId(any(RdwImportQuery.class), anyLong())).thenReturn(0L);
        assertThat(service.resubmitImports(query)).isEqualTo(0);
        verify(repository).updateReplayId(any(RdwImportQuery.class), anyLong());
        verifyNoMoreInteractions(repository);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailWithAnEmptyQuery() {
        service.resubmitImports(RdwImportQuery.builder().build());
    }
}
