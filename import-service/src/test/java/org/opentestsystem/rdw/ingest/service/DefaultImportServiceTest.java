package org.opentestsystem.rdw.ingest.service;

import org.apache.commons.codec.digest.DigestUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.auth.SbacUserDetails;
import org.opentestsystem.rdw.ingest.auth.SbacUserTest;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.repository.RdwImportRepository;
import org.opentestsystem.rdw.utils.TenancyChain;

import java.time.Instant;
import java.util.List;
import java.util.Properties;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.Collections.singletonMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

public class DefaultImportServiceTest {

    private RdwImportRepository repository;
    private ArchiveService archiveService;
    private ImportService service;
    private ImportSource importSource;

    @Before
    public void createService() {
        repository = mock(RdwImportRepository.class);
        when(repository.create(any(RdwImport.class))).thenAnswer(invocation -> {
            final RdwImport rdwImport = invocation.getArgument(0);
            return rdwImport.copy().id(123L).build();
        });
        when(repository.update(any(RdwImport.class))).thenAnswer(invocation -> {
            final RdwImport rdwImport = invocation.getArgument(0);
            return rdwImport.copy().updated(Instant.now()).build();
        });
        archiveService = mock(ArchiveService.class);

        importSource = mock(ImportSource.class);
        service = new DefaultImportService(repository, archiveService, importSource);
    }

    @Test
    public void importBodyReturnsImport() {
        final SbacUserDetails user = SbacUserTest.testUser();
        final byte[] body = "<TDSReport/>".getBytes();
        final String contentType = "application/xml";
        final String batch = "batch123";

        assertThat(service.importContent(user, body, ImportContent.EXAM, contentType, singletonMap("batch", batch)).getBatch())
                .isEqualTo(batch);

        verify(importSource).submitContent(body, ImportContent.EXAM, contentType, 123L);
    }

    @Test
    public void importShouldIgnoreAndReturnExistingDigest() {
        final SbacUserDetails user = SbacUserTest.testUser();
        final byte[] body = "<TDSReport/>".getBytes();
        final String contentType = "application/xml";

        final String digest = DigestUtils.md5Hex(body).toUpperCase();
        final RdwImport match = RdwImport.builder().build();
        when(repository.findOneByContentAndDigest(ImportContent.EXAM, digest)).thenReturn(match);

        assertThat(service.importContent(user, body, ImportContent.EXAM, contentType, null)).isSameAs(match);
    }

    @Test
    public void importShouldIgnoreExistingDigestForDifferentContent() {
        final SbacUserDetails user = SbacUserTest.testUser();
        final byte[] body = "<TDSReport/>".getBytes();
        final String contentType = "application/xml";

        final String digest = DigestUtils.md5Hex(body).toUpperCase();
        final RdwImport match = RdwImport.builder().build();
        when(repository.findOneByContentAndDigest(ImportContent.PACKAGE, digest)).thenReturn(match);

        assertThat(service.importContent(user, body, ImportContent.EXAM, contentType, null).getId()).isEqualTo(123);
        verify(importSource).submitContent(body, ImportContent.EXAM, contentType, 123L);
    }

    @Test
    public void getImportShouldReturnEmptyForUnknown() {
        assertThat(service.getImport(23L).isPresent()).isFalse();
    }

    @Test
    public void itShouldGetImportsByQuery() {
        final RdwImportQuery query = RdwImportQuery.builder().batch("abc").build();
        final List<RdwImport> results = newArrayList(RdwImport.builder().build());
        when(repository.findBy(query)).thenReturn(results);

        assertThat(service.getImports(query)).isSameAs(results);
    }

    @Test
    public void itShouldResubmitImports() {
        final RdwImportQuery query = RdwImportQuery.builder().status(ImportStatus.ACCEPTED).build();
        final RdwImport rdwImport = RdwImport.builder()
                .id(123L)
                .content(ImportContent.EXAM)
                .digest("12345678")
                .build();
        final String contentType = "text/plain";
        final List<RdwImport> rdwImports = newArrayList(rdwImport);

        final Properties properties = new Properties();
        properties.setProperty("Content-Type", contentType);

        when(repository.findBy(query)).thenReturn(rdwImports);
        final String location = "EXAM/12/34/12345678";
        final byte[] payload = "payload".getBytes();
        when(archiveService.readResource(location)).thenReturn(payload);
        when(archiveService.readProperties(location)).thenReturn(properties);

        assertThat(service.resubmitImports(query)).isEqualTo(1);

        verify(importSource).submitContent(eq(payload), eq(ImportContent.EXAM), eq(contentType), eq(123L));
    }

    @Test
    public void itShouldHandleNoResubmitRecords() {
        final RdwImportQuery query = RdwImportQuery.builder().status(ImportStatus.BAD_DATA).build();
        when(repository.findBy(query)).thenReturn(newArrayList());
        assertThat(service.resubmitImports(query)).isEqualTo(0);
        verify(repository).findBy(query);
        verifyNoMoreInteractions(repository);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailWithAnEmptyQuery() {
        service.resubmitImports(RdwImportQuery.builder().build());
    }

    @Test
    public void itShouldReturnPayloadOrNot() {
        final byte[] payload = "payload".getBytes();
        final RdwImport rdwImport = RdwImport.builder()
                .id(123L)
                .content(ImportContent.EXAM)
                .digest("12345678")
                .build();

        when(repository.findOne(123L)).thenReturn(rdwImport);
        when(archiveService.readResource("EXAM/12/34/12345678")).thenReturn(payload);

        assertThat(service.getPayload(123L).orElse(null)).isEqualTo(payload);
        assertThat(service.getPayload(42L).isPresent()).isFalse();
    }

    @Test
    public void itShouldReturnPayloadPropertiesOrNot() {
        final Properties properties = new Properties();
        final RdwImport rdwImport = RdwImport.builder()
                .id(123L)
                .content(ImportContent.EXAM)
                .digest("12345678")
                .build();

        when(repository.findOne(123L)).thenReturn(rdwImport);
        when(archiveService.readProperties("EXAM/12/34/12345678")).thenReturn(properties);

        assertThat(service.getPayloadProperties(123L).orElse(null)).isSameAs(properties);
        assertThat(service.getPayloadProperties(42L).isPresent()).isFalse();
    }

    @Test
    public void itShouldReduceATenancyChain() {
        final TenancyChain tenancyChain = TenancyChain.fromString(
                "|02|GROUP_ADMIN|DISTRICT|1000|ART_DL|||NV|NEVADA|||02|Clark|||||," +
                "|1000|Support Tool Admin|CLIENT|1000|ART_DL|||||||||||||," +
                "|NV|PII|STATE|1000|ART_DL|||NV|NEVADA|||||||||," +
                "|9999999|GROUP_ADMIN|DISTRICT|1000|ART_DL|||MI|MICHIGAN|||9999999|Sample District|||||," +
                "|MI|ASMTDATALOAD|STATE|1000|ART_DL|||MI|MICHIGAN|||||||||," +
                "|AP|Administrator|STATE|1000|ART_DL|||AP|ARMED FORCES PACIFIC|||||||||," +
                "|MI|PII|STATE|1000|ART_DL|||MI|MICHIGAN|||||||||," +
                "|TS|ASMTDATALOAD|STATE|1000|ART_DL|||TS|TEST STATE|||||||||," +
                "|CA|DL_EndUser|STATE|1000|ART_DL|||CA|CALIFORNIA|||||||||," +
                "|TS|PII|STATE|1000|ART_DL|||TS|TEST STATE|||||||||," +
                "|CA|ASMTDATALOAD|STATE|1000|ART_DL|||CA|CALIFORNIA|||||||||," +
                "|CA|Test Administrator|STATE|1000|ART_DL|||CA|CALIFORNIA|||||||||," +
                "|CA|PII|STATE|1000|ART_DL|||CA|CALIFORNIA|||||||||," +
                "|1000|Item Bank Viewer|CLIENT|1000|ART_DL|||||||||||||," +
                "|1000|Client Coordinator|CLIENT|1000|ART_DL|||||||||||||," +
                "|1000|Administrator|CLIENT|1000|ART_DL|||||||||||||," +
                "|NV|ASMTDATALOAD|STATE|1000|ART_DL|||NV|NEVADA|||||||||");
        final String expected = "|02|GROUP_ADMIN|DISTRICT|1000|ART_DL|||NV|NEVADA|||02|Clark|||||," +
                "|9999999|GROUP_ADMIN|DISTRICT|1000|ART_DL|||MI|MICHIGAN|||9999999|Sample District|||||," +
                "|MI|ASMTDATALOAD|STATE|1000|ART_DL|||MI|MICHIGAN|||||||||," +
                "|TS|ASMTDATALOAD|STATE|1000|ART_DL|||TS|TEST STATE|||||||||," +
                "|CA|ASMTDATALOAD|STATE|1000|ART_DL|||CA|CALIFORNIA|||||||||," +
                "|NV|ASMTDATALOAD|STATE|1000|ART_DL|||NV|NEVADA|||||||||";

        assertThat(DefaultImportService.reducedImportTenancyChainString(tenancyChain)).isEqualTo(expected);
    }
}
