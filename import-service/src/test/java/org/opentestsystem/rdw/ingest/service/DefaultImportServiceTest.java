package org.opentestsystem.rdw.ingest.service;

import org.apache.commons.codec.digest.DigestUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.auth.RdwUser;
import org.opentestsystem.rdw.ingest.auth.RdwUserTest;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.repository.RdwImportRepository;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.*;

public class DefaultImportServiceTest {

    private RdwImportRepository repository;
    private DefaultImportService service;
    private ImportSource importSource;

    @Before
    public void createService() {
        repository = mock(RdwImportRepository.class);
        when(repository.create(any(RdwImport.class))).thenAnswer(invocation -> {
            final RdwImport rdwImport = invocation.getArgumentAt(0, RdwImport.class);
            if (rdwImport.getId() == null) rdwImport.setId(123L);
            return rdwImport;
        });

        importSource = mock(ImportSource.class);
        service = new DefaultImportService(repository, importSource);
    }

    @Test(expected = NullPointerException.class)
    public void itRequiresAnImportSource() {
        new DefaultImportService(repository, null);
    }

    @Test(expected = NullPointerException.class)
    public void itRequiresARepository() {
        new DefaultImportService(null, importSource);
    }

    @Test
    public void importExamReturnsImport() {
        final RdwUser user = RdwUserTest.testUser();
        final String body = "<TDSReport/>";
        final String contentType = "application/xml";
        final String batch = "batch123";

        assertThat(service.importContent(user, body, ImportContent.EXAM, contentType, batch).getBatch()).isEqualTo(batch);

        verify(importSource).submitContent(user, body, ImportContent.EXAM, contentType, 123L);
    }

    @Test
    public void importShouldReturnExistingDigest() {
        final RdwUser user = RdwUserTest.testUser();
        final String body = "<TDSReport/>";
        final String contentType = "application/xml";

        final String digest = DigestUtils.md5Hex(body).toUpperCase();
        final RdwImport match = RdwImport.builder().build();
        when(repository.findOneByDigest(digest)).thenReturn(match);

        assertThat(service.importContent(user, body, ImportContent.EXAM, contentType, null)).isSameAs(match);
    }

    @Test
    public void getImportShouldReturnEmptyForUnknown() {
        assertThat(service.getImport(23L).isPresent()).isFalse();
    }

    @Test
    public void itShouldGetImportsByQuery() {
        final RdwImportQuery query = RdwImportQuery.builder().batch("abc").build();
        final List<RdwImport> results = newArrayList(RdwImport.builder().build());
        when(repository.findBy(query)).thenReturn(results);

        assertThat(service.getImports(query)).isSameAs(results);
    }

    @Test(expected = IllegalArgumentException.class)
    public void getImportsRequiresAtLeastOneCriterium() {
        service.getImports(RdwImportQuery.builder().build());
    }
}
