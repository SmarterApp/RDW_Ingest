package org.opentestsystem.rdw.ingest.web;

import org.junit.Test;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;

import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.core.StringEndsWith.endsWith;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.ingest.web.TestAppConfig.AuthHeader;
import static org.opentestsystem.rdw.ingest.web.TestAppConfig.AuthHeaderWithAuthority;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(ExamController.class)
public class ExamControllerIT extends ScopedControllerTestSuite {

    private static final String ApplicationXml = MediaType.APPLICATION_XML_VALUE;

    public ExamControllerIT() {
        super("/exams/imports", ImportContent.EXAM, AuthHeaderWithAuthority);
    }

    @Test
    public void itShouldUseServiceToImportExamUpload() throws Exception {
        final byte[] body = "<TDSReport/>".getBytes();
        final RdwImport rdwImport = RdwImport.builder().id(123L).build();
        final MockMultipartFile file = new MockMultipartFile("file", "test.xml", "application/xml", body);

        when(importService.importContent(any(), eq(body), eq(content), eq(ApplicationXml), any()))
                .thenReturn(rdwImport);

        mvc.perform(fileUpload(uri).file(file).header(AuthHeader, authHeader))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(containsString("123")))
                .andExpect(content().string(not(containsString("null"))))
                .andExpect(jsonPath("$._links['self'].href", endsWith("imports/123")));
    }

    @Test
    public void itShouldUseServiceToImportExamRawBody() throws Exception {
        final byte[] body = "<TDSReport/>".getBytes();
        final RdwImport rdwImport = RdwImport.builder().id(123L).build();
        when(importService.importContent(any(), eq(body), eq(content), eq(ApplicationXml), any()))
                .thenReturn(rdwImport);

        mvc.perform(post(uri).header(AuthHeader, authHeader).contentType(ApplicationXml).content(body))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(containsString("123")))
                .andExpect(content().string(not(containsString("null"))))
                .andExpect(jsonPath("$._links['self'].href", endsWith("imports/123")));
    }
}
