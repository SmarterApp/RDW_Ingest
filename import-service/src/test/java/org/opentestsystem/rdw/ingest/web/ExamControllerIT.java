package org.opentestsystem.rdw.ingest.web;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.service.ImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.core.StringEndsWith.endsWith;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.ingest.web.TestAppConfig.AuthHeader;
import static org.opentestsystem.rdw.ingest.web.TestAppConfig.AuthHeaderForClient;
import static org.opentestsystem.rdw.ingest.web.TestAppConfig.AuthHeaderWithAuthority;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(ExamController.class)
@ContextConfiguration(classes = TestAppConfig.class)
@WebAppConfiguration
public class ExamControllerIT {

    private static final String EXAMS_URI = "/exams/imports";

    @Autowired
    private MockMvc mvc;

    @MockBean
    private ImportService importService;

    @Test
    public void itShouldUseServiceToImportExamUpload() throws Exception {
        final byte[] body = "<TDSReport/>".getBytes();
        final RdwImport rdwImport = RdwImport.builder().id(123L).build();
        final MockMultipartFile file = new MockMultipartFile("file", "test.xml", "application/xml", body);

        when(importService.importContent(any(), eq(body), eq(ImportContent.EXAM), eq(MediaType.APPLICATION_XML_VALUE), any())).thenReturn(rdwImport);
        mvc.perform(fileUpload(EXAMS_URI).file(file).header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(containsString("123")))
                .andExpect(content().string(not(containsString("null"))))
                .andExpect(jsonPath("$._links['self'].href", endsWith("imports/123")));
    }

    @Test
    public void itShouldReturnBadRequestForUploadWithNoFile() throws Exception {
        mvc.perform(fileUpload(EXAMS_URI).header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().is(HttpStatus.BAD_REQUEST.value()));
    }

    @Test
    public void itShouldUseServiceToImportExamRawBody() throws Exception {
        final byte[] body = "<TDSReport/>".getBytes();
        final RdwImport rdwImport = RdwImport.builder().id(123L).build();
        when(importService.importContent(any(), eq(body), eq(ImportContent.EXAM), eq(MediaType.APPLICATION_XML_VALUE), any())).thenReturn(rdwImport);
        mvc.perform(post(EXAMS_URI).header(AuthHeader, AuthHeaderWithAuthority).contentType(MediaType.APPLICATION_XML).content(body))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(containsString("123")))
                .andExpect(content().string(not(containsString("null"))))
                .andExpect(jsonPath("$._links['self'].href", endsWith("imports/123")));
    }

    @Test
    public void itShouldUseServiceToGetImportsByBatch() throws Exception {
        final String batch = "abc";
        when(importService.getImports(any(RdwImportQuery.class)))
                .thenReturn(newArrayList(RdwImport.builder().id(123L).batch(batch).build()));
        mvc.perform(get(EXAMS_URI + "?batch=" + batch).header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().isOk())
                .andExpect(content().string(containsString(batch)))
                .andExpect(content().string(containsString("123")));
    }

    @Test
    public void itShouldUseServiceToGetImportsByStatus() throws Exception {
        final ImportStatus status = ImportStatus.BAD_FORMAT;
        when(importService.getImports(any(RdwImportQuery.class)))
                .thenReturn(newArrayList(RdwImport.builder().id(123L).status(status).build()));
        mvc.perform(get(EXAMS_URI + "?status=" + status.toString()).header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().isOk())
                .andExpect(content().string(containsString(status.toString())))
                .andExpect(content().string(containsString("123")));
    }

    @Test
    public void itShouldReturnBadRequestForInvalidStatus() throws Exception {
        mvc.perform(get(EXAMS_URI + "?status=fubar").header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().is(HttpStatus.BAD_REQUEST.value()));
    }

    @Test
    public void itShouldReturnBadRequestWhenNoCriteria() throws Exception {
        mvc.perform(get(EXAMS_URI).header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().is(HttpStatus.BAD_REQUEST.value()));
    }

    @Test
    public void itShouldReturnUnauthorizedIfNoAuthToken() throws Exception {
        mvc.perform(get(EXAMS_URI + "?status=ACCEPTED"))
                .andExpect(status().is(HttpStatus.UNAUTHORIZED.value()));
    }

    @Test
    public void itShouldReturnForbiddenIfNoAuthority() throws Exception {
        mvc.perform(get(EXAMS_URI + "?status=ACCEPTED").header(AuthHeader, AuthHeaderForClient))
                .andExpect(status().is(HttpStatus.FORBIDDEN.value()));
    }

    @Test
    public void itShouldReturnForbiddenIfWrongAuthority() throws Exception {
        mvc.perform(get(EXAMS_URI + "?status=ACCEPTED").header(AuthHeader, "Bearer sbac;alice;|CA|GENERAL|STATE|98765|CA98765|||CA|CALIFORNIA|||||||||"))
                .andExpect(status().is(HttpStatus.FORBIDDEN.value()));
    }

    @Test
    public void itShouldResubmitImports() throws Exception {
        when(importService.resubmitImports(any(RdwImportQuery.class))).thenReturn(1L);
        mvc.perform(post(EXAMS_URI + "/resubmit").header(AuthHeader, AuthHeaderWithAuthority).param("status", "BAD_DATA"))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(equalTo("1")));
        final ArgumentCaptor<RdwImportQuery> argumentCaptor = ArgumentCaptor.forClass(RdwImportQuery.class);
        verify(importService).resubmitImports(argumentCaptor.capture());
        final RdwImportQuery query = argumentCaptor.getValue();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.BAD_DATA);
    }

    @Test
    public void itShouldAllowResubmitIfNoAuthority() throws Exception {
        when(importService.resubmitImports(any(RdwImportQuery.class))).thenReturn(1L);
        mvc.perform(post(EXAMS_URI + "/resubmit").header(AuthHeader, AuthHeaderForClient).param("status", "BAD_DATA"))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(equalTo("1")));
    }

    @Test
    public void itShouldDenyResubmitIfNoAuthToken() throws Exception {
        mvc.perform(post(EXAMS_URI + "/resubmit").param("status", "BAD_DATA"))
                .andExpect(status().is(HttpStatus.UNAUTHORIZED.value()));
    }

    @Test
    public void itShouldResubmitImportsWithDefaultQuery() throws Exception {
        when(importService.resubmitImports(any(RdwImportQuery.class))).thenReturn(1L);
        mvc.perform(post(EXAMS_URI + "/resubmit").header(AuthHeader, AuthHeaderWithAuthority))
                .andExpect(status().is2xxSuccessful())
                .andExpect(content().string(equalTo("1")));
        final ArgumentCaptor<RdwImportQuery> argumentCaptor = ArgumentCaptor.forClass(RdwImportQuery.class);
        verify(importService).resubmitImports(argumentCaptor.capture());
        final RdwImportQuery query = argumentCaptor.getValue();
        assertThat(query.getContent()).isEqualTo(ImportContent.EXAM);
        assertThat(query.getStatus()).isEqualTo(ImportStatus.ACCEPTED);
    }
}
