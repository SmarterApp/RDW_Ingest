buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("com.bmuschko:gradle-docker-plugin:3.0.5")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE")
        classpath('org.springframework.build.gradle:propdeps-plugin:0.0.7')
    }
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.DockerRegistryCredentials


allprojects {
    group = 'org.opentestsystem.rdw.ingest'
    version = '0.0.1-SNAPSHOT'

    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencyManagement {
        dependencies {
            dependency 'org.opentestsystem.rdw.common:rdw-common-messaging:0.0.1-SNAPSHOT'
            dependency 'org.opentestsystem.rdw.common:rdw-common-model:0.0.1-SNAPSHOT'
            dependency 'org.opentestsystem.rdw.common:rdw-common-utils:0.0.1-SNAPSHOT'

            dependency 'com.google.guava:guava:21.0'
        }
        imports {
            // spring cloud Camden.SR5 includes spring cloud stream Brooklyn.SR2
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.SR5'
        }
    }

    dependencies {
        // handy for creating metadata with @ConfigurationProperties
        optional "org.springframework.boot:spring-boot-configuration-processor"

        // every app is a microservice with actuator end-points
        compile('org.springframework.boot:spring-boot-starter-actuator')

        // every app is a spring cloud stream participant
        compile('org.springframework.cloud:spring-cloud-stream')
        compile('org.springframework.cloud:spring-cloud-starter-stream-rabbit')
        testCompile('org.springframework.cloud:spring-cloud-stream-test-support')

        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    // this is for creating metadata
    compileJava.dependsOn(processResources)

    // generate coverage report automatically (./build/reports/jacoco/test/html/index.html)
    test.finalizedBy(jacocoTestReport)


    // task to create Dockerfile
    // (http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/Dockerfile.html)
    task createDockerfile(type:Dockerfile) {
        destFile = project.file('build/docker/Dockerfile')
        from('java:8-jre-alpine')
        volume('/tmp')
        label([maintainer:'Fairway Technologies'])
        copyFile("${jar.archivePath.name}", "${jar.archivePath.name}")
        exposePort(8080)
        entryPoint("java", "-jar", "${jar.archivePath.name}")
    }

    // task to build the docker image
    task buildImage(type:DockerBuildImage, dependsOn:[build, createDockerfile]) {
        dockerFile = createDockerfile.destFile
        inputDir = project.file('build/docker/')
        tag = "fwsbac/${project.name}"
        doFirst {
            copy {
                from jar
                into inputDir
            }
        }
    }

    // to use this, you must use docker login to set up docker hub credentials
    task pushImage(type:Exec, dependsOn:[buildImage]) {
        commandLine("docker", "push", "fwsbac/${project.name}")
    }
}
