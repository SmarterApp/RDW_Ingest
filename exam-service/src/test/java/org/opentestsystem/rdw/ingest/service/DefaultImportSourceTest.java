package org.opentestsystem.rdw.ingest.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.ingest.auth.RdwUser;
import org.opentestsystem.rdw.ingest.auth.RdwUserTest;
import org.opentestsystem.rdw.ingest.model.ImportContent;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.springframework.http.MediaType;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.test.context.junit4.SpringRunner;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

@RunWith(SpringRunner.class)
public class DefaultImportSourceTest {

    private DefaultImportSource importSource;
    private MessageChannel channel;

    @Before
    public void createImportSource() {
        channel = mock(MessageChannel.class);

        importSource = new DefaultImportSource();
        importSource.setOutputChannel(channel);
    }

    @Test
    public void submitExamShouldSetHeadersAndSendMessage() {
        final RdwUser user = RdwUserTest.testUser();
        final String body = "<TDSReport/>";
        final long importId = 123L;

        importSource.submitContent(user, body, ImportContent.EXAM, "application/xml", importId);

        ArgumentCaptor<Message> messageArgumentCaptor = ArgumentCaptor.forClass(Message.class);
        verify(channel).send(messageArgumentCaptor.capture());
        final Message message = messageArgumentCaptor.getValue();
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(message);
        assertThat(message.getPayload()).isEqualTo(body);
        assertThat(accessor.getContentType()).isEqualTo(MediaType.APPLICATION_XML);
        assertThat(accessor.getImportId()).isEqualTo(importId);
        assertThat(accessor.getUserLogin()).isEqualTo(user.getUsername());
        assertThat(accessor.getUserTenancyChain()).isEqualTo(user.getTenancyChain().toString());
    }
}
