package org.opentestsystem.rdw.ingest.service;

import org.apache.commons.codec.digest.DigestUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.auth.RdwUser;
import org.opentestsystem.rdw.ingest.auth.RdwUserTest;
import org.opentestsystem.rdw.ingest.model.RdwImport;
import org.opentestsystem.rdw.ingest.repository.RdwImportRepository;

import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class DefaultExamServiceTest {

    private RdwImportRepository repository;
    private DefaultExamService service;
    private ExamSource examSource;

    @Before
    public void createService() {
        repository = mock(RdwImportRepository.class);
        when(repository.create(any(RdwImport.class))).thenAnswer(invocation -> invocation.getArgumentAt(0, RdwImport.class));

        examSource = mock(ExamSource.class);
        service = new DefaultExamService(repository, examSource);
    }

    @Test(expected = NullPointerException.class)
    public void itRequiresAnExamSource() {
        new DefaultExamSource(null);
    }

    @Test
    public void importExamReturnsImport() {
        final RdwUser user = RdwUserTest.testUser();
        final String body = "<TDSReport/>";
        final String contentType = "application/xml";
        final String batch = "batch123";

        assertThat(service.importExam(user, body, contentType, batch).getBatch()).isEqualTo(batch);

        verify(examSource).submitExam(user, body, contentType);
    }

    @Test
    public void importShouldReturnExistingDigest() {
        final RdwUser user = RdwUserTest.testUser();
        final String body = "<TDSReport/>";
        final String contentType = "application/xml";

        final String digest = DigestUtils.md5Hex(body).toUpperCase();
        final RdwImport match = RdwImport.builder().build();
        when(repository.findOneByDigest(digest)).thenReturn(match);

        assertThat(service.importExam(user, body, contentType, null)).isSameAs(match);
    }

    @Test
    public void importIabCsvShouldSubmitMultipleExams() throws URISyntaxException, IOException {
        assertCsvImport("iab.csv", 7, 1);
    }

    @Test
    public void importIcaCsvShouldSubmitMultipleExams() throws URISyntaxException, IOException {
        assertCsvImport("ica.csv", 4, 0);
    }

    private void assertCsvImport(final String resource, final int accepted, final int invalid) throws IOException {
        final RdwUser user = RdwUserTest.testUser();
        try (final InputStream is = DefaultExamServiceTest.class.getResourceAsStream("/" + resource)) {
            assertThat(service.importExamCsv(user, is)).hasSize(accepted + invalid);
        }
        verify(examSource, times(accepted)).submitExam(eq(user), any(), eq("application/xml"));
    }

    @Test
    public void getImportShouldReturnEmptyForUnknown() {
        assertThat(service.getImport(23L).isPresent()).isFalse();
    }
}
