package org.opentestsystem.rdw.ingest.repository;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.model.ImportContent;
import org.opentestsystem.rdw.ingest.model.ImportStatus;
import org.opentestsystem.rdw.ingest.model.RdwImport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class RdwImportRepositoryIT {

    @Autowired
    private RdwImportRepository repository;

    @Test
    public void itShouldCreateAndFindImports() {
        final long initialCount = repository.count();

        final Map<String, Long> map = createTestData();

        final RdwImport alice = repository.findOne(map.get("alice"));
        assertThat(alice.getCreator()).isEqualTo("alice");
        assertThat(alice.getDigest()).isEqualTo("alice");
        assertThat(alice.getMessage()).isEqualTo("Hi alice");

        assertThat(repository.findOneByDigest("bob").getCreator()).isEqualTo("bob");

        assertThat(repository.findByBatch("abc")).hasSize(3);

        assertThat(repository.exists(map.get("alice"))).isTrue();
        assertThat(repository.exists(map.get("charlie") + 1234)).isFalse();

        assertThat(repository.count()).isEqualTo(initialCount+3);
    }

    private Map<String, Long> createTestData() {
        final RdwImport.Builder builder = RdwImport.builder()
                .status(ImportStatus.ACCEPTED)
                .content(ImportContent.EXAM)
                .contentType("text/plain")
                .batch("abc");

        final Map<String, Long> result = newHashMap();
        for (final String creator : new String[]{"alice","bob","charlie"}) {
            final RdwImport saved = repository.create(builder
                    .creator(creator)
                    .digest(creator)
                    .message("Hi " + creator)
                    .build());
            result.put(creator, saved.getId());
        }
        return result;
    }
}
