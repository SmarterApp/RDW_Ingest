package org.opentestsystem.rdw.ingest.auth;

import org.opentestsystem.rdw.utils.TenancyChain;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static org.opentestsystem.rdw.ingest.auth.SecurityConfigurer.DataLoadAuthority;

/**
 * Extend user to store tenancy chain.
 */
public class RdwUser extends User {

    private final TenancyChain tenancyChain;

    static RdwUser copy(final RdwUser user) {
        return new RdwUser(user.getUsername(), user.getPassword(), user.getAuthorities(), user.getTenancyChain());
    }

    static RdwUser from(final String username, final String password, final TenancyChain chain) {
        if (chain.isEmpty()) {
            throw new IllegalArgumentException("empty SBAC tenancy chain");
        }

        // extract roles from tenancy chain
        final List<GrantedAuthority> authorities = new ArrayList<>();
        if (chain.hasRole(DataLoadAuthority)) {
            authorities.add(new SimpleGrantedAuthority(DataLoadAuthority));
        }

        return new RdwUser(username, password, authorities, chain);
    }

    public RdwUser(final String username,
                   final String password,
                   final Collection<? extends GrantedAuthority> authorities,
                   final TenancyChain tenancyChain) {
        super(username, password, authorities);
        this.tenancyChain = tenancyChain;
    }

    public TenancyChain getTenancyChain() {
        return tenancyChain;
    }
}
