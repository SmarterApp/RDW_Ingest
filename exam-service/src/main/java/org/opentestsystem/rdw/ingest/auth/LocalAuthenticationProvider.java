package org.opentestsystem.rdw.ingest.auth;

import org.opentestsystem.rdw.utils.TenancyChain;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.util.ResourceUtils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;
import java.util.stream.Collectors;

import static com.google.common.collect.Lists.newArrayList;

/**
 * This auth provider reads user credentials from a user-info file.
 * NOTE: we need to ensure this doesn't get out in the wild.
 */
public class LocalAuthenticationProvider implements AuthenticationProvider, InitializingBean {
    private static final Logger logger = LoggerFactory.getLogger(LocalAuthenticationProvider.class);

    @Value("${auth.user-info-uri:classpath:user-info}")
    private String userInfoUri;

    private List<RdwUser> userInfo = newArrayList();

    @Override
    public void afterPropertiesSet() throws Exception {
        try {
            // format of file lines is expected to be:
            // username, password, tenancyChain
            final File userInfoFile = ResourceUtils.getFile(userInfoUri);
            try (final BufferedReader reader = new BufferedReader(new FileReader(userInfoFile))) {
                userInfo = reader.lines()
                        .map(String::trim)
                        .filter(s -> !s.isEmpty())
                        .filter(s -> !s.startsWith("#"))
                        .map(s -> {
                            final String[] fields = s.split(",");
                            return RdwUser.from(fields[0].trim(), fields[1].trim(), TenancyChain.fromString(fields[2]));
                        })
                        .collect(Collectors.toList());
            }
        } catch (final FileNotFoundException e) {
            logger.warn("Invalid user-info-uri " + userInfoUri);
        }
    }

    @Override
    public Authentication authenticate(final Authentication authentication) throws AuthenticationException {
        if (!supports(authentication.getClass())) return authentication;

        final UsernamePasswordAuthenticationToken auth = (UsernamePasswordAuthenticationToken) authentication;

        final String username = auth.getName();
        final String password = (String) auth.getCredentials();
        for (final RdwUser user : userInfo) {
            if (user.getUsername().equalsIgnoreCase(username) && user.getPassword().equals(password)) {
                final UsernamePasswordAuthenticationToken result = new UsernamePasswordAuthenticationToken(
                        RdwUser.copy(user), user.getPassword(), user.getAuthorities());
                result.setDetails(auth.getDetails());
                return result;
            }
        }
        logger.info(username + " not authenticated");
        throw new BadCredentialsException(auth.getName());
    }

    @Override
    public boolean supports(final Class<?> aClass) {
        return UsernamePasswordAuthenticationToken.class.isAssignableFrom(aClass);
    }
}
