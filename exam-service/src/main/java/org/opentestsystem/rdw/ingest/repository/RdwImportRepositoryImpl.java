package org.opentestsystem.rdw.ingest.repository;

import org.opentestsystem.rdw.ingest.model.ImportContent;
import org.opentestsystem.rdw.ingest.model.ImportStatus;
import org.opentestsystem.rdw.ingest.model.RdwImport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;

/**
 * Default implementation of {@link RdwImportRepository}.
 */
@Repository
class RdwImportRepositoryImpl implements RdwImportRepository {

    @Autowired
    private NamedParameterJdbcTemplate jdbcTemplate;

    @Override
    public RdwImport create(final RdwImport rdwImport) {
        final String sql = "INSERT INTO import (status, content, digest, batch, creator, created) VALUES (:status, :content, :digest, :batch, :creator, :created)";

        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("status", rdwImport.getStatus().getValue())
                .addValue("content", rdwImport.getContent().getValue())
                .addValue("digest", rdwImport.getDigest())
                .addValue("batch", rdwImport.getBatch())
                .addValue("creator", rdwImport.getCreator())
                .addValue("created", Timestamp.from(rdwImport.getCreated()));

        jdbcTemplate.update(sql, parameterSource, keyHolder);

        rdwImport.setId(keyHolder.getKey().longValue());
        return rdwImport;
    }

    @Override
    public RdwImport findOne(final long id) {
        final String sql = "SELECT id, status, content, digest, batch, creator, created FROM import WHERE id=:id";

        try {
            return jdbcTemplate.queryForObject(sql, new MapSqlParameterSource().addValue("id", id), new RdwImportRowMapper());
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

    @Override
    public RdwImport findOneByDigest(final String digest) {
        final String sql = "SELECT id, status, content, digest, batch, creator, created FROM import WHERE digest=:digest";

        try {
            return jdbcTemplate.queryForObject(sql, new MapSqlParameterSource().addValue("digest", digest), new RdwImportRowMapper());
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

    @Override
    public boolean exists(final long id) {
        final String sql = "SELECT (CASE WHEN EXISTS (SELECT 1 FROM import WHERE id=:id) THEN true ELSE false END) exist";

        return jdbcTemplate.queryForObject(sql, new MapSqlParameterSource().addValue("id", id), Boolean.class);
    }

    @Override
    public long count() {
        final String sql = "SELECT count(*) from import";

        return jdbcTemplate.getJdbcOperations().queryForObject(sql, Long.class);
    }

    private static class RdwImportRowMapper implements RowMapper<RdwImport> {
        @Override
        public RdwImport mapRow(final ResultSet rs, final int rowNum) throws SQLException {
            return RdwImport.builder()
                    .id(rs.getLong("id"))
                    .content(ImportContent.fromValue(rs.getInt("content")))
                    .digest(rs.getString("digest"))
                    .status(ImportStatus.fromValue(rs.getInt("status")))
                    .batch(rs.getString("batch"))
                    .creator(rs.getString("creator"))
                    .created(rs.getTimestamp("created").toInstant())
                    .build();
        }
    }
}
