package org.opentestsystem.rdw.ingest.web;

import org.opentestsystem.rdw.ingest.auth.RdwUser;
import org.opentestsystem.rdw.ingest.model.RdwImport;
import org.opentestsystem.rdw.ingest.service.ExamService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.constraints.NotNull;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.net.HttpHeaders.CONTENT_TYPE;

/**
 * Controller for exam / testresults end-points
 */
@RestController
@RequestMapping({ "/exams", "/testresults" })
class ExamController {

    private final ExamService service;

    @Autowired
    public ExamController(@NotNull final ExamService service) {
        this.service = checkNotNull(service);
    }

    @PostMapping(value = "/imports", consumes = "text/csv")
    public ResponseEntity<RdwImport> postCsvImport(Authentication authentication,
                                                   @RequestBody String body) {
        try (final InputStream is = new ByteArrayInputStream(body.getBytes("UTF-8"))) {
            return ResponseEntity.accepted()
                    .body(service.importExamCsv((RdwUser) authentication.getPrincipal(), is));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @PostMapping(value = "/imports", consumes = "multipart/form-data")
    public ResponseEntity<RdwImport> postImportFile(Authentication authentication,
                                                    @RequestParam("file") MultipartFile file) {
        if (file.isEmpty()) {
            return new ResponseEntity<>(null, new HttpHeaders(), HttpStatus.BAD_REQUEST);
        }

        try (final InputStream is = file.getInputStream()) {
            return ResponseEntity.accepted()
                    .body(service.importExamCsv((RdwUser) authentication.getPrincipal(), is));
        } catch (final Exception e) {
            throw new RuntimeException(e);
        }
    }

    @PostMapping("/imports")
    public ResponseEntity<RdwImport> postImport(Authentication authentication,
                                                @RequestHeader(value = CONTENT_TYPE, required = false) String contentType,
                                                @RequestBody String body,
                                                @RequestParam(required = false) String batch) {
        return ResponseEntity.accepted()
                .body(service.importExam((RdwUser) authentication.getPrincipal(), body, contentType, batch));
    }

    @GetMapping("/imports/{id}")
    public ResponseEntity<RdwImport> getImport(@PathVariable Long id) {
        return ResponseEntity.ok(service.getImport(id).get());
    }
}
