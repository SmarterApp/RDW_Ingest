package org.opentestsystem.rdw.ingest.web;

import com.google.common.base.Strings;
import org.opentestsystem.rdw.ingest.auth.RdwUser;
import org.opentestsystem.rdw.ingest.model.ImportStatus;
import org.opentestsystem.rdw.ingest.service.ExamService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.constraints.NotNull;
import java.util.List;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.net.HttpHeaders.CONTENT_TYPE;

/**
 * Controller for exam / testresults end-points
 * <p>
 * TODO - do we want a resource wrapper around a list of RdwImport's to provide the self link?<br/>
 * I played with doing it with Resources but that nests the content with "_embedded" and looks yucky.<pre>
 * final Link link = linkTo(methodOn(ExamController.class).getImports(batch, status)).withSelfRel();
 * return new Resources<>(assembler.toResources(service.getImports(batch, statusFromParam(status))), link);
 * </pre>
 * </p>
 */
@RestController
@RequestMapping({ "/exams", "/testresults" })
class ExamController {

    private final ExamService service;
    private final RdwImportResourceAssembler assembler = new RdwImportResourceAssembler();

    @Autowired
    public ExamController(@NotNull final ExamService service) {
        this.service = checkNotNull(service);
    }

    @PostMapping("/imports")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public RdwImportResource postImport(Authentication authentication,
                                        @RequestHeader(value = CONTENT_TYPE, required = false) String contentType,
                                        @RequestBody String body,
                                        @RequestParam(required = false) String batch) {
        return assembler.toResource(service.importExam((RdwUser) authentication.getPrincipal(), body, contentType, batch));
    }

    @GetMapping("/imports/{id}")
    @ResponseStatus(HttpStatus.OK)
    public RdwImportResource getImport(@PathVariable Long id) {
        return assembler.toResource(service.getImport(id).get());
    }

    @GetMapping("/imports")
    @ResponseStatus(HttpStatus.OK)
    public List<RdwImportResource> getImports(@RequestParam(required = false) String batch,
                                              @RequestParam(required = false) String status) {
        return assembler.toResources(service.getImports(batch, statusFromParam(status)));
    }

    private static ImportStatus statusFromParam(final String param) {
        if (Strings.isNullOrEmpty(param)) return null;
        return ImportStatus.valueOf(param.toUpperCase());
    }
}
