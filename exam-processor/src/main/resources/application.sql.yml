sql:
  # JdbcAssessmentTypeRepository
  asmtType:
    findCodeById: >-
        SELECT code FROM asmt_type WHERE id= :id

  # JdbcEthnicityRepository
  ethnicity:
    findIdByCode: >-
        SELECT id FROM ethnicity WHERE code= :code

    findAllCodes: >-
        SELECT code FROM ethnicity

  # JdbcGenderRepository
  gender:
    findIdByCode: >-
        SELECT id FROM gender WHERE code= :code

  # JdbcGenderRepository
  subject:
    findIdByCode: >-
        SELECT id FROM subject WHERE code= :code

  # JdbcGradeRepository
  grade:
    findIdByCode: >-
        SELECT id FROM grade WHERE code= :code

  # JdbcAdminConditionRepository
  administrationCondition:
    findIdByCode: >-
        SELECT id FROM administration_condition WHERE code= :code

  # JdbcCompletenessRepository
  completeness:
    findIdByCode: >-
        SELECT id FROM completeness WHERE code= :code

  # ItemTraitRepository
  itemTraitScore:
    findAll: >-
        SELECT * from item_trait_score

  # JdbcAccommodationRepository
  accommodation:
    findIdByCode: >-
        SELECT id FROM accommodation WHERE code= :code

    findIdsByCodes: >-
        SELECT id FROM accommodation WHERE code in (:codes)

  # JdbcAssessmentRepository
  assessment:
    findOneByNaturalId: >-
        SELECT a.id, a.natural_id, g.code as grade_code, a.type_id, a.subject_id, s.code as subject_code
          FROM asmt a
            JOIN subject s ON s.id = a.subject_id
            JOIN grade g ON g.id = a.grade_id
          WHERE a.natural_id= :natural_id

    subjectClaimScore:
      findBySubjectAndAsmtType: >-
        SELECT id, code FROM subject_claim_score WHERE subject_id = :subject_id and asmt_type_id =:asmt_type_id

    item:
      findAllForAssessment: >-
        SELECT id, natural_id from item where asmt_id = :asmt_id order by natural_id asc

  # JdbcExamRepository
  exam:
    create: >-
       INSERT INTO exam (type_id, exam_student_id, school_year, import_id, update_import_id, asmt_id, asmt_version, opportunity, oppId, completeness_id, administration_condition_id, session_id, scale_score, scale_score_std_err, performance_level, completed_at) VALUES
                       (:type_id, :exam_student_id, :school_year, :import_id, :update_import_id, :asmt_id, :asmt_version, :opportunity, :oppId, :completeness_id, :administration_condition_id, :session_id, :scale_score, :scale_score_std_err, :performance_level, :completed_at)
    examClaimScore:
      create: >-
        INSERT INTO exam_claim_score (exam_id, subject_claim_score_id, scale_score, scale_score_std_err, category) VALUES
                                    (:exam_id, :subject_claim_score_id, :scale_score, :scale_score_std_err, :category)
    examItem:
      create: >-
        INSERT INTO exam_item (exam_id, item_id, score, score_status, response, position,
                                  trait_evidence_elaboration_score, trait_evidence_elaboration_score_status,
                                  trait_organization_purpose_score, trait_organization_purpose_score_status,
                                  trait_conventions_score, trait_conventions_score_status) VALUES
                            (:exam_id, :item_id, :score, :score_status, :response, :position,
                                  :trait_evidence_elaboration_score, :trait_evidence_elaboration_score_status,
                                  :trait_organization_purpose_score, :trait_organization_purpose_score_status,
                                  :trait_conventions_score, :trait_conventions_score_status)
                           
    examStudent:
      create: >-
        INSERT INTO exam_student (grade_id, student_id, school_id, iep, lep, section504, economic_disadvantage, migrant_status, eng_prof_lvl, t3_program_type, language_code, prim_disability_type) VALUES
                              (:grade_id, :student_id, :school_id, :iep, :lep, :section504, :economic_disadvantage, :migrant_status, :eng_prof_lvl, :t3_program_type, :language_code, :prim_disability_type)

    accommodation:
      create: >-
        INSERT INTO exam_available_accommodation (exam_id, accommodation_id) VALUES (:exam_id, :accommodation_id)

  school:
    findIdByNaturalId: >-
      SELECT id FROM school WHERE natural_id = :natural_id

  studentEthnicity:
    findAllIds:
      SELECT ethnicity_id from student_ethnicity where student_id = :student_id

    create: >-
        INSERT INTO student_ethnicity (student_id, ethnicity_id) VALUES (:student_id, :ethnicity_id)

    delete: >-
        DELETE FROM student_ethnicity where student_id = :student_id

  student:
    updateImportId:
        UPDATE student SET update_import_id = :update_import_id WHERE id = :student_id

  studentGroup:
    findIdByNameAndSchoolAndYear: >-
      SELECT id FROM student_group
        WHERE name=:name AND school_id=:school_id AND school_year=:school_year

    addStudentMembership: >-
      INSERT IGNORE INTO student_group_membership (student_group_id, student_id) VALUES (?, ?)

    updateImportId:
      UPDATE student_group SET update_import_id = ? WHERE id = ?

    existsStudentInGroup:
      SELECT (CASE WHEN EXISTS (SELECT 1 FROM student_group_membership WHERE student_group_id = :student_group_id and student_id = :student_id) THEN true ELSE false END) exist