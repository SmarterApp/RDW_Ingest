sql:
  # AssessmentTypeRepository
  asmtType:
    findCodeById: >-
        SELECT code FROM asmt_type WHERE id= :id

  # EthnicityRepositoryImpl
  ethnicity:
    findIdByName: >-
        SELECT id FROM ethnicity WHERE name= :name

    findAllNames: >-
        SELECT name FROM ethnicity

  # GenderRepositoryImpl
  gender:
    findIdByName: >-
        SELECT id FROM gender WHERE name= :name

  # GenderRepositoryImpl
  subject:
    findIdByName: >-
        SELECT id FROM subject WHERE name= :name

  # GradeRepositoryImpl
  grade:
    findIdByCode: >-
        SELECT id FROM grade WHERE code= :code

 # AdminConditionRepositoryImpl
  administrationCondition:
    findIdByName: >-
        SELECT id FROM administration_condition WHERE name= :name

 # CompletenessnRepositoryImpl
  completeness:
    findIdByName: >-
        SELECT id FROM completeness WHERE name= :name

  # AssessmentRepository
  assessment:
    findOneByNaturalId: >-
        SELECT id, natural_id, grade_id,type_id, subject_id, academic_year FROM asmt WHERE natural_id= :natural_id

    create: >-
        INSERT INTO asmt (natural_id, grade_id,type_id, subject_id, academic_year) VALUES
                       (:natural_id, :grade_id, :type_id, :subject_id, :academic_year)
    subjectClaimScore:
      findBySubjectAndAsmtType: >-
        SELECT id, code FROM subject_claim_score WHERE subject_id = :subject_id and asmt_type_id =:asmt_type_id

  # ExamRepository
  exam:
    create: >-
       INSERT INTO exam (exam_student_id, asmt_id, asmt_version, opportunity, status, completeness_id, administration_condition_id, session_id, scale_score, scale_score_std_err, achievement_level, completed_at) VALUES
                       (:exam_student_id, :asmt_id, :asmt_version, :opportunity, :status, :completeness_id, :administration_condition_id, :session_id, :scale_score, :scale_score_std_err, :achievement_level, :completed_at)
    examClaimScore:
      create: >-
        INSERT INTO exam_claim_score (exam_id, subject_claim_score_id, scale_score, scale_score_std_err, category) VALUES
                                    (:exam_id, :subject_claim_score_id, :scale_score, :scale_score_std_err, :category)
    examItem:
      create: >-
        INSERT INTO exam_item (exam_id, item_key, bank_key, score, score_status, response) VALUES
                            (:exam_id, :item_key, :bank_key, :score, :score_status, :response)
    examStudent:
      create: >-
        INSERT INTO exam_student (grade_id, student_id, school_id, iep, lep, section504, economic_disadvantage, migrant_status, eng_prof_lvl, t3_program_type, language_code, prim_disability_type) VALUES
                              (:grade_id, :student_id, :school_id, :iep, :lep, :section504, :economic_disadvantage, :migrant_status, :eng_prof_lvl, :t3_program_type, :language_code, :prim_disability_type)

  # IabExamRepository
  iabExam:
    create: >-
      INSERT INTO iab_exam (iab_exam_student_id, asmt_id, asmt_version, opportunity, status, completeness_id, administration_condition_id, session_id, scale_score, scale_score_std_err, category, completed_at) VALUES
                           (:iab_exam_student_id, :asmt_id, :asmt_version, :opportunity, :status, :completeness_id, :administration_condition_id, :session_id, :scale_score, :scale_score_std_err, :category, :completed_at)

    iabExamItem:
      create: >-
        INSERT INTO iab_exam_item (iab_exam_id, item_key, bank_key, score, score_status, response) VALUES
                                 (:iab_exam_id, :item_key, :bank_key, :score, :score_status, :response)

    iabExamStudent:
      create: >-
        INSERT INTO iab_exam_student (grade_id, student_id, school_id, iep, lep, section504, economic_disadvantage, migrant_status, eng_prof_lvl, t3_program_type, language_code, prim_disability_type) VALUES
                                  (:grade_id, :student_id, :school_id, :iep, :lep, :section504, :economic_disadvantage, :migrant_status, :eng_prof_lvl, :t3_program_type, :language_code, :prim_disability_type)

  studentEthnicity:
    create: >-
        INSERT INTO student_ethnicity (student_id, ethnicity_id) VALUES (:student_id, :ethnicity_id)

    delete: >-
        DELETE FROM student_ethnicity where student_id = :student_id