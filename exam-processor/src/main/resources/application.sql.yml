sql:
  # JdbcAccommodationRepository
  accommodation:
    findIdByCode: >-
      SELECT id FROM accommodation WHERE code = :code

    findIdsByCodes: >-
      SELECT id FROM accommodation WHERE code in (:codes)

  # JdbcAdminConditionRepository
  administrationCondition:
    findIdByCode: >-
      SELECT id FROM administration_condition WHERE code = :code

  # JdbcAssessmentTypeRepository
  asmtType:
    findCodeById: >-
      SELECT code FROM asmt_type WHERE id= :id

  # JdbcCompletenessRepository
  completeness:
    findIdByCode: >-
      SELECT id FROM completeness WHERE code = :code

  # JdbcElasRepository
  elas:
    findIdByCode: >-
      SELECT id FROM elas WHERE code = :code

  # JdbcEthnicityRepository
  ethnicity:
    findIdByCode: >-
      SELECT id FROM ethnicity WHERE code = :code

    findAllCodes: >-
      SELECT code FROM ethnicity

  # JdbcGenderRepository
  gender:
    findIdByCode: >-
      SELECT id FROM gender WHERE code = :code

  militaryConnected:
    findIdByCode: >-
      SELECT id FROM military_connected WHERE code = :code

  # ItemTraitRepository
  itemTraitScore:
    findAll: >-
        SELECT * from item_trait_score

  # JdbcResponseTypeRepository
  responseType:
    findIdByCode: >-
        SELECT id FROM response_type WHERE code = :code

  # JdbcGenderRepository
  subject:
    findIdByCode: >-
        SELECT id FROM subject WHERE code = :code

  # JdbcAssessmentRepository
  assessment:
    findOneByNaturalId: >-
        SELECT a.id, a.natural_id, g.code as grade_code, a.type_id, a.subject_id, s.code as subject_code
          FROM asmt a
            JOIN subject s ON s.id = a.subject_id
            JOIN grade g ON g.id = a.grade_id
          WHERE a.natural_id = :natural_id

    score:
      # for OVERALL, only the asmt_score table will have an entry (no subject-specific info for overall)
      # for ALTs, both tables will have entries
      # for CLAIMs, likely only the subject_score table has entries (no assessment-specific info for scorable CLAIMS)
      findAllForAssessment: >-
        SELECT 1 as score_type_id, NULL as subject_score_id, 'OVERALL' as code, min_score, max_score
          FROM asmt_score
          WHERE subject_score_id IS NULL and asmt_id = :asmt_id
        UNION ALL
        SELECT s.score_type_id, s.id as subject_score_id, s.code, a.min_score, a.max_score
          FROM subject_score s
            JOIN asmt ON s.subject_id = asmt.subject_id AND s.asmt_type_id = asmt.type_id
            LEFT JOIN asmt_score a ON s.id = a.subject_score_id AND asmt.id = a.asmt_id
          WHERE asmt.id = :asmt_id

    item:
      findAllForAssessment: >-
        SELECT i.id, i.natural_id, i.target_id, CONCAT(c.code, '|', t.natural_id) AS target_code
         FROM item i JOIN target t ON t.id = i.target_id JOIN claim c ON t.claim_id = c.id
        WHERE asmt_id = :asmt_id ORDER BY natural_id ASC

  # JdbcExamRepository
  exam:
    create: >-
      INSERT INTO exam (type_id, school_year, import_id, update_import_id, asmt_id, asmt_version, opportunity, oppId, completeness_id, administration_condition_id, military_connected_id, session_id, scale_score, scale_score_std_err, performance_level, completed_at, grade_id, student_id, school_id, iep, lep, section504, economic_disadvantage, migrant_status, eng_prof_lvl, t3_program_type, language_id, prim_disability_type, status_date, deleted,
                        examinee_id, elas_id, elas_start_at, deliver_mode, hand_score_project, contract, test_reason, assessment_admin_started_at, started_at, force_submitted_at, status, item_count, field_test_count, pause_count, grace_period_restarts, abnormal_starts, test_window_id, test_administrator_id, responsible_organization_name, test_administrator_name, session_platform_user_agent, test_delivery_server, test_delivery_db,
                        window_opportunity_count, theta_score, theta_score_std_err) VALUES
                       (:type_id, :school_year, :import_id, :update_import_id, :asmt_id, :asmt_version, :opportunity, :oppId, :completeness_id, :administration_condition_id, :military_connected_id, :session_id, :scale_score, :scale_score_std_err, :performance_level, :completed_at, :grade_id, :student_id, :school_id, :iep, :lep, :section504, :economic_disadvantage, :migrant_status, :eng_prof_lvl, :t3_program_type, :language_id, :prim_disability_type, :status_date, :deleted,
                        :examinee_id, :elas_id, :elas_start_at, :deliver_mode, :hand_score_project, :contract, :test_reason, :assessment_admin_started_at, :started_at, :force_submitted_at, :status, :item_count, :field_test_count, :pause_count, :grace_period_restarts, :abnormal_starts, :test_window_id, :test_administrator_id, :responsible_organization_name, :test_administrator_name, :session_platform_user_agent, :test_delivery_server, :test_delivery_db,
                        :window_opportunity_count, :theta_score, :theta_score_std_err)

    update: >-
      UPDATE exam
      SET
        type_id = :type_id,
        school_year = :school_year,
        update_import_id = :update_import_id,
        asmt_id = :asmt_id,
        asmt_version = :asmt_version,
        opportunity = :opportunity,
        oppId = :oppId,
        completeness_id = :completeness_id,
        administration_condition_id = :administration_condition_id,
        military_connected_id = :military_connected_id,
        session_id = :session_id,
        scale_score = :scale_score,
        scale_score_std_err = :scale_score_std_err,
        performance_level = :performance_level,
        completed_at = :completed_at,
        grade_id = :grade_id,
        student_id = :student_id,
        school_id = :school_id,
        iep = :iep,
        lep = :lep,
        section504 = :section504,
        economic_disadvantage = :economic_disadvantage,
        migrant_status = :migrant_status,
        eng_prof_lvl = :eng_prof_lvl,
        t3_program_type = :t3_program_type,
        language_id = :language_id,
        prim_disability_type = :prim_disability_type,
        status_date = :status_date,
        deleted = :deleted,
        examinee_id = :examinee_id,
        elas_id = :elas_id,
        elas_start_at = :elas_start_at,
        deliver_mode = :deliver_mode,
        hand_score_project = :hand_score_project,
        contract = :contract,
        test_reason = :test_reason,
        assessment_admin_started_at = :assessment_admin_started_at,
        started_at = :started_at,
        force_submitted_at = :force_submitted_at,
        status_date = :status_date,
        status = :status,
        item_count = :item_count,
        field_test_count = :field_test_count,
        pause_count = :pause_count,
        grace_period_restarts = :grace_period_restarts,
        abnormal_starts = :abnormal_starts,
        test_window_id = :test_window_id,
        test_administrator_id = :test_administrator_id,
        responsible_organization_name = :responsible_organization_name,
        test_administrator_name = :test_administrator_name,
        session_platform_user_agent = :session_platform_user_agent,
        test_delivery_server = :test_delivery_server,
        test_delivery_db = :test_delivery_db,
        window_opportunity_count = :window_opportunity_count,
        theta_score = :theta_score,
        theta_score_std_err = :theta_score_std_err
      WHERE id = :id

    delete: >-
        UPDATE exam
        SET
          deleted = 1,
          update_import_id = :update_import_id
        WHERE id = :id

    findOne: >-
      SELECT
        id,
        type_id,
        school_year,
        asmt_id,
        asmt_version,
        opportunity,
        oppId,
        completeness_id,
        administration_condition_id,
        military_connected_id,
        session_id,
        scale_score,
        scale_score_std_err,
        performance_level,
        completed_at,
        grade_id,
        student_id,
        school_id,
        iep,
        lep,
        section504,
        economic_disadvantage,
        migrant_status,
        eng_prof_lvl,
        t3_program_type,
        language_id,
        prim_disability_type,
        status_date,
        deleted,
        examinee_id,
        elas_id,
        elas_start_at,
        deliver_mode,
        hand_score_project,
        contract,
        test_reason,
        assessment_admin_started_at,
        started_at,
        force_submitted_at,
        status,
        item_count,
        field_test_count,
        pause_count,
        grace_period_restarts,
        abnormal_starts,
        test_window_id,
        test_administrator_id,
        responsible_organization_name,
        test_administrator_name,
        session_platform_user_agent,
        test_delivery_server,
        test_delivery_db,
        window_opportunity_count,
        theta_score,
        theta_score_std_err        
      FROM exam
      WHERE asmt_id = :asmt_id
        AND oppId = :opportunity_id

    examClaimScore:
      create: >-
        INSERT INTO exam_score (exam_id, subject_score_id, scale_score, scale_score_std_err, performance_level, theta_score, theta_score_std_err) VALUES
                               (:exam_id, :subject_score_id, :scale_score, :scale_score_std_err, :performance_level, :theta_score, :theta_score_std_err)

      update: >-
        UPDATE exam_score
        SET
          subject_score_id = :subject_score_id,
          scale_score = :scale_score,
          scale_score_std_err = :scale_score_std_err,
          performance_level = :performance_level,
          theta_score = :theta_score,
          theta_score_std_err = :theta_score_std_err
        WHERE id = :id

      delete: >-
        DELETE FROM exam_score
        WHERE id IN (:ids)

      findByExamId: >-
        SELECT
          id,
          subject_score_id,
          scale_score,
          scale_score_std_err,
          performance_level,
          theta_score,
          theta_score_std_err
        FROM exam_score
        WHERE exam_id = :exam_id

    examTargetScore:
      create: >-
        INSERT INTO exam_target_score (exam_id, target_id, student_relative_residual_score, standard_met_relative_residual_score) VALUES
                                      (:exam_id, :target_id, :student_relative_residual_score, :standard_met_relative_residual_score)

      update: >-
        UPDATE exam_target_score
        SET
          target_id = :target_id,
          student_relative_residual_score = :student_relative_residual_score,
          standard_met_relative_residual_score = :standard_met_relative_residual_score
        WHERE id = :id

      delete: >-
        DELETE FROM exam_target_score WHERE id IN (:ids)

      findByExamId: >-
        SELECT id, target_id, student_relative_residual_score, standard_met_relative_residual_score
        FROM exam_target_score
        WHERE exam_id = :exam_id

    examItem:
      create: >-
        INSERT INTO exam_item (exam_id, item_id, score, score_status, response, position,
                                  trait_evidence_elaboration_score, trait_evidence_elaboration_score_status,
                                  trait_organization_purpose_score, trait_organization_purpose_score_status,
                                  trait_conventions_score, trait_conventions_score_status,
                                  administered_at, submitted_at, number_of_visits,
                                  response_duration, response_content_type, page_number,
                                  page_visits, page_time, response_type_id, submitted) VALUES
                            (:exam_id, :item_id, :score, :score_status, :response, :position,
                                  :trait_evidence_elaboration_score, :trait_evidence_elaboration_score_status,
                                  :trait_organization_purpose_score, :trait_organization_purpose_score_status,
                                  :trait_conventions_score, :trait_conventions_score_status,
                                  :administered_at, :submitted_at, :number_of_visits,
                                  :response_duration, :response_content_type, :page_number,
                                  :page_visits, :page_time, :response_type_id, :submitted)

      update: >-
        UPDATE exam_item
        SET
          score = :score,
          score_status = :score_status,
          response = :response,
          position = :position,
          trait_evidence_elaboration_score = :trait_evidence_elaboration_score,
          trait_evidence_elaboration_score_status = :trait_evidence_elaboration_score_status,
          trait_organization_purpose_score = :trait_organization_purpose_score,
          trait_organization_purpose_score_status = :trait_organization_purpose_score_status,
          trait_conventions_score = :trait_conventions_score,
          trait_conventions_score_status = :trait_conventions_score_status,
          administered_at = :administered_at,
          submitted_at = :submitted_at,
          number_of_visits = :number_of_visits,
          response_duration = :response_duration,
          response_content_type = :response_content_type,
          page_number = :page_number,
          page_visits = :page_visits,
          page_time = :page_time,
          response_type_id = :response_type_id,
          submitted = :submitted
        WHERE id = :id

      delete: >-
        DELETE FROM exam_item
        WHERE id IN (:ids)

      findByExamId: >-
        SELECT
          id,
          exam_id,
          item_id,
          score,
          score_status,
          response,
          position,
          trait_evidence_elaboration_score,
          trait_evidence_elaboration_score_status,
          trait_organization_purpose_score,
          trait_organization_purpose_score_status,
          trait_conventions_score,
          trait_conventions_score_status,
          administered_at,
          submitted_at,
          number_of_visits,
          response_duration,
          response_content_type,
          page_number,
          page_visits,
          page_time,
          response_type_id,
          submitted
        FROM exam_item
        WHERE exam_id = :exam_id

    accommodation:
      create: >-
        INSERT INTO exam_available_accommodation (exam_id, accommodation_id) VALUES (:exam_id, :accommodation_id)

      delete: >-
        DELETE FROM exam_available_accommodation
        WHERE exam_id = :exam_id
          AND accommodation_id IN (:accommodation_ids)

      findByExamId: >-
        SELECT accommodation_id
        FROM exam_available_accommodation
        WHERE exam_id = :exam_id

  school:
    findIdByNaturalId: >-
      SELECT id FROM school WHERE natural_id = :natural_id

  studentEthnicity:
    findAllIds:
      SELECT ethnicity_id from student_ethnicity where student_id = :student_id

    create: >-
        INSERT INTO student_ethnicity (student_id, ethnicity_id) VALUES (:student_id, :ethnicity_id)

    delete: >-
        DELETE FROM student_ethnicity where ethnicity_id = :ethnicity_id and student_id = :student_id

  student:
    updateImportId:
        UPDATE student SET update_import_id = :update_import_id WHERE id = :student_id

  studentGroup:
    findIdByNameAndSchoolAndYear: >-
      SELECT id FROM student_group
        WHERE name=:name AND school_id=:school_id AND school_year=:school_year

    addStudentMembership: >-
      INSERT IGNORE INTO student_group_membership (student_group_id, student_id) VALUES (?, ?)

    updateImportId:
      UPDATE student_group SET update_import_id = ? WHERE id = ?

    existsStudentInGroup:
      SELECT (CASE WHEN EXISTS (SELECT 1 FROM student_group_membership WHERE student_group_id = :student_group_id and student_id = :student_id) THEN true ELSE false END) exist
