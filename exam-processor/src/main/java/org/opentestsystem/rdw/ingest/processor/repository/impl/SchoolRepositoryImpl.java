package org.opentestsystem.rdw.ingest.processor.repository.impl;

import javax.validation.constraints.NotNull;
import org.opentestsystem.rdw.ingest.processor.model.District;
import org.opentestsystem.rdw.ingest.processor.model.School;
import org.opentestsystem.rdw.ingest.processor.repository.SchoolRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

@Repository
class SchoolRepositoryImpl implements SchoolRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    private final String districtFindIdByNaturalIdSql;
    private final String createDistrictSql;
    private final String findIdByNaturalIdSql;
    private final String createSql;

    @Autowired
    public SchoolRepositoryImpl(final NamedParameterJdbcTemplate jdbcTemplate,
                                @NotNull @Value("${district.findIdByNaturalId.sql}") final String districtFindIdByNaturalIdSql,
                                @NotNull @Value("${district.create.sql}") final String createDistrictSql,
                                @NotNull @Value("${school.findIdByNaturalId.sql}") final String findIdByNaturalIdSql,
                                @NotNull @Value("${school.create.sql}") final String createSql) {
        this.jdbcTemplate = jdbcTemplate;
        this.districtFindIdByNaturalIdSql = districtFindIdByNaturalIdSql;
        this.createDistrictSql = createDistrictSql;
        this.createSql = createSql;
        this.findIdByNaturalIdSql = findIdByNaturalIdSql;
    }

    //TODO: discuss no transaction here
    @Override
    public int findOrCreateByNaturalId(final School school) {
        final Integer districtId = findOrCreate(school.getDistrict());

        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("natural_id", school.getNaturalId())
                .addValue("name", school.getName())
                .addValue("district_id", districtId);

        jdbcTemplate.update(createSql, parameterSource, keyHolder);

        final Number id = keyHolder.getKey();
        if (id != null) return id.intValue();
        return jdbcTemplate.queryForObject(findIdByNaturalIdSql, new MapSqlParameterSource("natural_id", school.getNaturalId()), Integer.class);
    }

    private int findOrCreate(final District district) {

        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("natural_id", district.getNaturalId())
                .addValue("name", district.getName());

        jdbcTemplate.update(createDistrictSql, parameterSource, keyHolder);

        final Number id = keyHolder.getKey();
        if (id != null) return id.intValue();
        return jdbcTemplate.queryForObject(districtFindIdByNaturalIdSql, new MapSqlParameterSource("natural_id", district.getNaturalId()), Integer.class);
    }
}
