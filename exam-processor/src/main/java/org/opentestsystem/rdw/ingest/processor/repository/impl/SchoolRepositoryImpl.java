package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.model.District;
import org.opentestsystem.rdw.ingest.processor.model.School;
import org.opentestsystem.rdw.ingest.processor.repository.SchoolRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

@Repository
class SchoolRepositoryImpl implements SchoolRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.school.create}")
    private String sqlCreate;

    @Value("${sql.school.findIdByNaturalId}")
    private String sqlFindIdByNaturalId;

    @Value("${sql.school.district.findIdByNaturalId}")
    private String sqlDistirctFindIdByNaturalId;

    @Value("${sql.school.district.create}")
    private String sqlDistrictCreate;


    @Autowired
    public SchoolRepositoryImpl(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public int findOrCreateByNaturalId(final School school) {
        final Integer districtId = findOrCreate(school.getDistrict());

        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("natural_id", school.getNaturalId())
                .addValue("name", school.getName())
                .addValue("district_id", districtId);

        jdbcTemplate.update(sqlCreate, parameterSource, keyHolder);

        final Number id = keyHolder.getKey();
        if (id != null) return id.intValue();
        return jdbcTemplate.queryForObject(sqlFindIdByNaturalId, new MapSqlParameterSource("natural_id", school.getNaturalId()), Integer.class);
    }

    private int findOrCreate(final District district) {

        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("natural_id", district.getNaturalId())
                .addValue("name", district.getName());

        jdbcTemplate.update(sqlDistrictCreate, parameterSource, keyHolder);

        final Number id = keyHolder.getKey();
        if (id != null) return id.intValue();
        return jdbcTemplate.queryForObject(sqlDistirctFindIdByNaturalId, new MapSqlParameterSource("natural_id", district.getNaturalId()), Integer.class);
    }
}
