package org.opentestsystem.rdw.ingest.processor.model;

import java.util.Objects;
import javax.validation.constraints.NotNull;

import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.checkNotBlank;


/**
 * A district
 */
public class District {
    private final String name;
    private final String naturalId;
    //TODO: this needs to be revisited for multi-state installation
    private final String stateCode;

    /**
     * Constructor
     *
     * @param naturalId the natural id of the district
     * @param name      the name of the district
     * @param stateCode the sate code for the district
     */
    private District(@NotNull final String naturalId, @NotNull final String name, @NotNull final String stateCode) {
        this.naturalId = naturalId;
        this.name = name;
        this.stateCode = stateCode;
    }

    public String getName() {
        return name;
    }

    public String getStateCode() {
        return stateCode;
    }

    public String getNaturalId() {
        return naturalId;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (!(o instanceof District)) return false;

        final District that = (District) o;
        return Objects.equals(name, that.name)
                && Objects.equals(naturalId, that.naturalId)
                && Objects.equals(stateCode, that.stateCode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(District.class, name, naturalId, stateCode);
    }

    /**
     * The builder for the {@link District}
     */
    public static class Builder {
        private String name;
        private String naturalId;
        private String stateCode;

        public District build() {
            return new District(naturalId, name, stateCode);
        }

        public Builder withName(@NotNull final String name) {
            this.name = checkNotBlank(name, "district name");
            return this;
        }

        public Builder withNaturalId(@NotNull final String naturalId) {
            this.naturalId = checkNotBlank(naturalId, "district natural id");
            return this;
        }

        public Builder withStateCode(@NotNull final String stateCode) {
            this.stateCode = checkNotBlank(stateCode, "state code");
            return this;
        }
    }
}
