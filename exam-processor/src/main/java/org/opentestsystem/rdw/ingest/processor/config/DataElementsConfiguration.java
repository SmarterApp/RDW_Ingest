package org.opentestsystem.rdw.ingest.processor.config;


import com.google.common.collect.ImmutableList;
import org.apache.commons.lang3.EnumUtils;
import org.opentestsystem.rdw.ingest.processor.model.ConfigurableDataElement;
import org.opentestsystem.rdw.multitenant.validation.ExamProcessorValidationProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Set;

/**
 * Configuration for the required {@link ConfigurableDataElement}s.
 */
public class DataElementsConfiguration {

    private static final Logger logger = LoggerFactory.getLogger(DataElementsConfiguration.class);

    private final ExamProcessorValidationProperties examProcessorValidationProperties;

    public DataElementsConfiguration(ExamProcessorValidationProperties examProcessorValidationProperties) {
        this.examProcessorValidationProperties = examProcessorValidationProperties;
    }

    public List<ConfigurableDataElement> getRequiredDataElements() {
        final ImmutableList.Builder<ConfigurableDataElement> configurableDataElementBuilder
                = new ImmutableList.Builder<>();
        examProcessorValidationProperties.getRequiredDataElements().forEach(requiredDataElement -> {
            //closer to spring beans relaxed binding style
            ConfigurableDataElement configurableDataElement =
                    EnumUtils.getEnumIgnoreCase(ConfigurableDataElement.class, requiredDataElement);
            if (configurableDataElement == null) {
                logger.warn("validation.requiredDataElement {} has no matching Enum in ConfigurableDataElement, please correct configuration", requiredDataElement);
            } else {
                configurableDataElementBuilder.add(configurableDataElement);
            }
        });
        return configurableDataElementBuilder.build();
    }

    public Set<ConfigurableDataElement> getOptionalDataElements() {
        final Set<ConfigurableDataElement> optionalDataElements = ConfigurableDataElement.getAll();
        optionalDataElements.removeAll(getRequiredDataElements());
        return optionalDataElements;
    }
}
