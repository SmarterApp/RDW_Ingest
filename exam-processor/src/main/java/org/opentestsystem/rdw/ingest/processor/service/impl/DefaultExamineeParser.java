package org.opentestsystem.rdw.ingest.processor.service.impl;

import java.text.ParseException;
import java.util.List;
import org.opentestsystem.rdw.ingest.processor.model.District;
import org.opentestsystem.rdw.ingest.processor.model.School;
import org.opentestsystem.rdw.ingest.processor.model.School.Builder;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.service.EthnicityService;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeParser;
import org.opentestsystem.rdw.ingest.processor.service.GenderService;
import org.opentestsystem.rdw.ingest.processor.service.GradeService;
import org.opentestsystem.rdw.ingest.processor.service.ParsedExaminee;
import org.opentestsystem.rdw.model.Examinee;
import org.opentestsystem.rdw.model.Examinee.ExamineeAttribute;
import org.opentestsystem.rdw.model.Examinee.ExamineeRelationship;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import static com.google.common.base.Strings.isNullOrEmpty;


@Service
public class DefaultExamineeParser implements ExamineeParser {

    private final static String finalContext = "FINAL";
    private final static String yes = "YES";

    private final GenderService genderService;
    private final EthnicityService ethnicityService;
    private final GradeService gradeService;


    /**
     * Constructor
     *
     * @param genderService    the {@link GenderService}
     * @param ethnicityService the {@link EthnicityService}
     * @param gradeService     the {@link GradeService}
     */
    @Autowired
    public DefaultExamineeParser(final GenderService genderService,
                                 final EthnicityService ethnicityService,
                                 final GradeService gradeService) {
        this.genderService = genderService;
        this.ethnicityService = ethnicityService;
        this.gradeService = gradeService;
    }

    @Override
    public ParsedExaminee parse(final Examinee examinee) {
        try {
            return parseExaminee(examinee);
        } catch (final ParseException e) {
            //TODO: Handle error conditions
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Examinee section includes data for {@link School}, {@link District}, {@link Student}, and {@link StudentExamAttributes}
     *
     * @param examinee the {@link Examinee} to be parsed into objects
     * @return the map of the extracted objects
     */
    private ParsedExaminee parseExaminee(final Examinee examinee) throws ParseException {
        final List<Object> objects = examinee.getExamineeAttributeOrExamineeRelationship();

        final Student.Builder studentBuilder = Student.builder();
        final StudentExamAttributes.Builder studentAttributesBuilder = StudentExamAttributes.builder();
        final Builder schoolBuilder = School.builder();
        final District.Builder districtBuilder = District.builder();

        for (final Object object : objects) {
            if (object instanceof ExamineeRelationship) {
                parseExamineeRelationship((ExamineeRelationship) object, schoolBuilder, districtBuilder);

            } else if (object instanceof ExamineeAttribute) {
                parseExamineeAttribute((ExamineeAttribute) object, studentBuilder, studentAttributesBuilder);
            }
        }
        return new ParsedExaminee(schoolBuilder.withDistrict(districtBuilder.build()).build(), studentBuilder.build(), studentAttributesBuilder);
    }

    private void parseExamineeAttribute(final ExamineeAttribute attribute,
                                        final Student.Builder studentBuilder,
                                        final StudentExamAttributes.Builder studentAttributesBuilder) throws ParseException {
        //TODO: need to confirm that this is correct
        if (!finalContext.equals(attribute.getContext().value())) return;

        final String value = attribute.getValue();
        if (isNullOrEmpty(value)) return;

        final String attributeName = attribute.getName();
        switch (attributeName) {
            case "FirstName":
                studentBuilder.withFirstName(value);
                break;
            case "LastOrSurname":
                studentBuilder.withLastOrSurname(value);
                break;
            case "MiddleName":
                studentBuilder.withMiddleName(value);
                break;
            case "StudentIdentifier":
                studentBuilder.withSsid(value);
                break;
            case "Birthdate":
                studentBuilder.withBirthday(value);
                break;
            case "Sex":
                studentBuilder.withGenderId(genderService.toId(value));
                break;
            case "FirstEntryDateIntoUSSchool":
                studentBuilder.withFirsEntryIntoUSSchoolAt(value);
                break;
            case "LimitedEnglishProficiencyEntryDate":
                studentBuilder.withLepEntryAt(value);
                break;
            case "LEPExitDate":
                studentBuilder.withLepExitAt(value);
                break;
            case "GradeLevelWhenAssessed":
                studentAttributesBuilder.withGradeId(gradeService.toId(value));
                break;

            case "HispanicOrLatinoEthnicity":
            case "AmericanIndianOrAlaskaNative":
            case "Asian":
            case "BlackOrAfricanAmerican":
            case "White":
            case "NativeHawaiianOrOtherPacificIslander":
            case "DemographicRaceTwoOrMoreRaces":
                if (yes.equals(value)) studentBuilder.withEthnicityId(ethnicityService.toId(attributeName));
                break;

            case "IDEAIndicator":
                if (yes.equals(value)) studentAttributesBuilder.withIdeaIndicator(true);
                break;
            case "LEPStatus":
                if (yes.equals(value)) studentAttributesBuilder.withLep(true);
                break;
            case "Section504Status":
                if (yes.equals(value)) studentAttributesBuilder.withSection504(true);
                break;
            case "EconomicDisadvantageStatus":
                if (yes.equals(value)) studentAttributesBuilder.withEconomicDisadvantage(true);
                break;
            case "MigrantStatus":
                if (yes.equals(value)) studentAttributesBuilder.withMigrantStatus(true);
                break;
            case "LanguageCode":
                studentAttributesBuilder.withLanguageCode(value);
                break;
            case "EnglishLanguageProficiencLevel":
                studentAttributesBuilder.withEngProfLvl(value);
                break;
            case "TitleIIILanguageInstructionProgramType":
                studentAttributesBuilder.withT3ProgramType(value);
                break;
            case "PrimaryDisabilityType":
                studentAttributesBuilder.withPrimDisabilityType(value);
                break;

            default:
                break;
        }
    }

    private void parseExamineeRelationship(final ExamineeRelationship attribute,
                                           final Builder schoolBuilder,
                                           final District.Builder districtBuilder) {
        //TODO: need to confirm that this is correct
        if (!finalContext.equals(attribute.getContext().value())) return;

        final String value = attribute.getValue();
        if (isNullOrEmpty(value)) return;

        final String attributeName = attribute.getName();
        switch (attributeName) {
            case "ResponsibleDistrictIdentifier":
                districtBuilder.withNaturalId(value);
                break;
            case "OrganizationName":
                districtBuilder.withName(value);
                break;
            case "ResponsibleInstitutionIdentifier":
                schoolBuilder.withNaturalId(value);
                break;
            case "NameOfInstitution":
                schoolBuilder.withName(value);
            case "StateName":
            case "StateAbbreviation":
                //TODO: do we need to do anything about it?
                break;
            default:
                break;
        }
    }
}
