package org.opentestsystem.rdw.ingest.processor;

import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.Message;

import java.io.ByteArrayInputStream;

import static org.opentestsystem.rdw.common.model.trt.XmlUtils.tdsReportFromXml;


@EnableBinding(Sink.class)
public class ExamProcessorConfiguration {
    private static final Logger logger = LoggerFactory.getLogger(ExamProcessorConfiguration.class);

    private final TDSReportProcessor reportProcessor;
    private final ImportRepository importRepository;

    @Autowired
    public ExamProcessorConfiguration(final TDSReportProcessor reportProcessor,
                                      final ImportRepository importRepository) {
        this.reportProcessor = reportProcessor;
        this.importRepository = importRepository;
    }

    @ServiceActivator(inputChannel = Sink.INPUT)
    public void process(final Message<?> message) {
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(message);
        final byte[] payload = (byte[]) message.getPayload();
        final long importId = accessor.getImportId();

        logger.debug("received {} import {}", accessor.getContent(), importId);

        try {
            final TDSReport report = toTDSReport(new ByteArrayInputStream(payload), importId);
            if (report == null) {
                importRepository.updateStatusAndMessageById(importId, ImportStatus.INVALID, "no data");
                return;
            }

            process(report, importId);
        } catch (final Exception e) {
            logger.warn("failed with an unexpected import error: " + e.getMessage());
            importRepository.updateStatusAndMessageById(importId, ImportStatus.INVALID, e.getMessage());
        }
    }

    private void process(final TDSReport tdsReport, final long importId) {
        try {
            reportProcessor.process(tdsReport, importId);
            importRepository.updateStatusAndMessageById(importId, ImportStatus.PROCESSED, null);

        } catch (final ImportException e) {
            logger.info("failed with an import error: " + e.getMessage());
            importRepository.updateStatusAndMessageById(importId, e.getStatus(), e.getMessage());
        } catch (final Exception e) {
            logger.warn("failed with an unexpected import error: " + e.getMessage());
            importRepository.updateStatusAndMessageById(importId, ImportStatus.BAD_DATA, e.getMessage());
        }
    }

    private TDSReport toTDSReport(final ByteArrayInputStream xml, final long importId) {
        try {
            return tdsReportFromXml(xml);
        } catch (final RuntimeException e) {
            logger.info("failed to convert xml to tds report with error: " + e.getMessage());
            importRepository.updateStatusAndMessageById(importId, ImportStatus.BAD_DATA, e.getMessage());
        }
        return null;
    }
}
