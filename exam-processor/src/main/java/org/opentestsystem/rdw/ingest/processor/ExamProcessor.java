package org.opentestsystem.rdw.ingest.processor;

import com.google.common.base.Charsets;
import com.google.common.io.CharStreams;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.Message;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;

import static org.opentestsystem.rdw.common.model.trt.XmlUtils.tdsReportFromXml;

@EnableBinding(Sink.class)
public class ExamProcessor {
    private static final Logger logger = LoggerFactory.getLogger(ExamProcessor.class);

    private final TDSReportProcessor reportProcessor;
    private final ImportRepository importRepository;
    private final String transformation;

    @Autowired
    public ExamProcessor(final TDSReportProcessor reportProcessor,
                         final ImportRepository importRepository,
                         final ResourceLoader resourceLoader,
                         @Value("${transformations.exam:}") final String transformationResource) {
        this.reportProcessor = reportProcessor;
        this.importRepository = importRepository;
        this.transformation = loadTransformation(resourceLoader, transformationResource);
    }

    @ServiceActivator(inputChannel = Sink.INPUT)
    public void process(final Message<?> message) {
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(message);
        final byte[] payload = (byte[]) message.getPayload();
        final long importId = accessor.getImportId();

        logger.debug("received {} import {}", accessor.getContent(), importId);

        final TDSReport report;
        try {
            final InputStream xml = new ByteArrayInputStream(payload);
            report = transformation == null ? tdsReportFromXml(xml)
                    : tdsReportFromXml(xml, new ByteArrayInputStream(transformation.getBytes(Charsets.UTF_8)));
        } catch (final RuntimeException e) {
            logger.info("failed to convert xml to tds report with error: " + e.getMessage());
            importRepository.updateStatusAndMessageById(importId, ImportStatus.BAD_DATA, e.getMessage());
            return;
        }

        try {
            reportProcessor.process(report, importId);
            importRepository.updateStatusAndMessageById(importId, ImportStatus.PROCESSED, null);
        } catch (final ImportException e) {
            logger.warn("failed with an import error: " + e.getMessage());
            importRepository.updateStatusAndMessageById(importId, e.getStatus(), e.getMessage());
        } catch (final Exception e) {
            logger.warn("failed with an unexpected error: " + e.getMessage());
            importRepository.updateStatusAndMessageById(importId, ImportStatus.BAD_DATA, e.getMessage());
        }
    }

    private String loadTransformation(final ResourceLoader resourceLoader, final String transformationResource) {
        if (transformationResource == null || transformationResource.isEmpty()) {
            return null;
        }

        final Resource resource = resourceLoader.getResource(transformationResource);
        if (resource == null || !resource.exists()) {
            logger.warn("Failed to find transformation {}", transformationResource);
            return null;
        }

        try (final Reader reader = new InputStreamReader(resource.getInputStream(), Charsets.UTF_8)) {
            return CharStreams.toString(reader);

        } catch (final IOException e) {
            logger.warn("Failed to read transformation {}", transformationResource);
            return null;
        }
    }
}
