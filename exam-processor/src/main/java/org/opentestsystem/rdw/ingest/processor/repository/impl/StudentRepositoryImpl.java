package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.util.List;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.stereotype.Repository;

import static com.google.common.collect.Lists.newArrayList;

@Repository
class StudentRepositoryImpl implements StudentRepository {

    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    private final JdbcTemplate jdbcTemplate;

    @Value("${sql.studentEthnicity.create}")
    private String createStudentEthnicitySql;

    @Value("${sql.studentEthnicity.delete}")
    private String deleteStudentEthnicitySql;

    @Autowired
    StudentRepositoryImpl(final NamedParameterJdbcTemplate namedParameterJdbcTemplate, final JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.namedParameterJdbcTemplate = namedParameterJdbcTemplate;
    }

    @Override
    public long upsert(final Student student) {
        final Long studentId = (long) new SimpleJdbcCall(jdbcTemplate)
                .withProcedureName("student_upsert")
                .execute(new MapSqlParameterSource()
                        .addValue("p_ssid", student.getSsid())
                        .addValue("p_last_or_surname", student.getLastOrSurname())
                        .addValue("p_first_name", student.getFirstName())
                        .addValue("p_middle_name", student.getMiddleName())
                        .addValue("p_gender_id", student.getGenderId())
                        .addValue("p_first_entry_into_us_school_at", student.getFirsEntryIntoUSSchoolAt())
                        .addValue("p_lep_entry_at", student.getLepEntryAt())
                        .addValue("p_lep_exit_at", student.getLepExitAt())
                        .addValue("p_birthday", student.getBirthday()))
                .get("p_id");

        updateEthnicity(student.getEthnicityIds(), studentId);

        return studentId;
    }

    private void updateEthnicity(final List<Integer> ethnicity, final long studentId) {
        namedParameterJdbcTemplate.update(deleteStudentEthnicitySql, new MapSqlParameterSource("student_id", studentId));
        if (ethnicity.isEmpty()) return;

        final List<SqlParameterSource> batchParameters = newArrayList();
        for (int ethnicityVal : ethnicity) {
            batchParameters.add(new MapSqlParameterSource("student_id", studentId).addValue("ethnicity_id", ethnicityVal));
        }
        namedParameterJdbcTemplate.batchUpdate(createStudentEthnicitySql, batchParameters.toArray(new SqlParameterSource[batchParameters.size()]));
    }
}
