package org.opentestsystem.rdw.ingest.processor.service.impl;

import java.util.List;
import org.opentestsystem.rdw.ingest.processor.model.IabExam;
import org.opentestsystem.rdw.ingest.processor.model.SubjectClaimScore;
import org.opentestsystem.rdw.ingest.processor.repository.IabExamRepository;
import org.opentestsystem.rdw.ingest.processor.service.AnyExamProcessor;
import org.opentestsystem.rdw.model.Opportunity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.parseOptionalDouble;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.parseOptionalInteger;

@Service
class IabExamProcessor extends AnyExamProcessor<IabExam, IabExam.Builder, IabExamRepository> {

    /**
     * Constructor
     *
     * @param repository the {@link IabExamRepository}
     */

    @Autowired
    IabExamProcessor(final IabExamRepository repository) {
        super(repository);
    }

    @Override
    public String[] getTypes() {
        return new String[]{"iab"};
    }

    @Override
    protected IabExam.Builder buildExam(final Opportunity opportunity, final List<SubjectClaimScore> claims, final List<String> elementErrors) {
        final IabExam.Builder examBuilder = IabExam.builder();
        opportunity.getScore()
                .stream()
                .filter(score -> overallScore.equals(score.getMeasureOf()))
                .forEach(score -> {
                    switch (score.getMeasureLabel()) {
                        case scoreMeasureLabel:
                            examBuilder
                                    .withScaleScore(parseOptionalDouble(score.getValue(), overallScore + "," + scoreMeasureLabel, elementErrors))
                                    .withScaleScoreStdErr(parseOptionalDouble(score.getStandardError(), overallScore + "," + scoreMeasureLabel + ", StdErr", elementErrors));
                            break;
                        case performanceLevelMeasureLabel:
                            examBuilder
                                    .withCategory(parseOptionalInteger(score.getValue(), overallScore + "," + performanceLevelMeasureLabel + ", Category", elementErrors));
                            break;
                        default:
                            break;
                    }
                });

        return examBuilder;
    }
}