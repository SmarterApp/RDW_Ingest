package org.opentestsystem.rdw.ingest.processor.model;


/**
 * An {@link Exam}'s alt/claim scoring data.
 * <p>
 * Note: the overall score is part of the Exam itself, this class is for
 * storing additional (and optional) alt-scores and claim scores.
 * </p>
 */
public class ExamScore {

    private Long id;
    private int subjectScoreId;
    private Double scaleScore;
    private Double scaleScoreStdErr;
    private Double thetaScore;
    private Double thetaScoreStdErr;
    private Integer performanceLevel;

    public Long getId() {
        return id;
    }

    public int getSubjectScoreId() {
        return subjectScoreId;
    }

    public Double getScaleScore() {
        return scaleScore;
    }

    public Double getScaleScoreStdErr() {
        return scaleScoreStdErr;
    }

    /**
     * The performance level for a score is a mapping from the score to the
     * assessment cut-points. For claims this is often referred to as "category".
     *
     * @return performance level for this score, e.g. 3
     */
    public Integer getPerformanceLevel() {
        return performanceLevel;
    }

    public Double getThetaScore() {
        return thetaScore;
    }

    public Double getThetaScoreStdErr() {
        return thetaScoreStdErr;
    }

    public Builder copy() {
        return builder().copy(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * Builder for the {@link ExamScore}
     */
    public static class Builder {
        private Long id;
        private int subjectScoreId;
        private Double scaleScore;
        private Double scaleScoreStdErr;
        private Double thetaScore;
        private Double thetaScoreStdErr;
        private Integer performanceLevel;

        public ExamScore build() {
            final ExamScore claim = new ExamScore();
            claim.id = id;
            claim.subjectScoreId = subjectScoreId;
            claim.scaleScore = scaleScore;
            claim.scaleScoreStdErr = scaleScoreStdErr;
            claim.performanceLevel = performanceLevel;
            claim.thetaScore = thetaScore;
            claim.thetaScoreStdErr = thetaScoreStdErr;
            return claim;
        }

        public Builder copy(final ExamScore claim) {
            id = claim.id;
            subjectScoreId = claim.subjectScoreId;
            scaleScore = claim.scaleScore;
            scaleScoreStdErr = claim.scaleScoreStdErr;
            performanceLevel = claim.performanceLevel;
            thetaScore = claim.thetaScore;
            thetaScoreStdErr = claim.thetaScoreStdErr;
            return this;
        }

        public Builder id(final Long id) {
            this.id = id;
            return this;
        }

        public Builder subjectScoreId(final int claimId) {
            this.subjectScoreId = claimId;
            return this;
        }

        public Builder scaleScore(final Double scaleScore) {
            this.scaleScore = scaleScore;
            return this;
        }

        public Builder scaleScoreStdErr(final Double scaleScoreStdErr) {
            this.scaleScoreStdErr = scaleScoreStdErr;
            return this;
        }

        public Builder thetaScore(final Double thetaScore) {
            this.thetaScore = thetaScore;
            return this;
        }

        public Builder thetaScoreStdErr(final Double thetaScoreStdErr) {
            this.thetaScoreStdErr = thetaScoreStdErr;
            return this;
        }

        public Builder performanceLevel(final Integer performanceLevel) {
            this.performanceLevel = performanceLevel;
            return this;
        }
    }
}
