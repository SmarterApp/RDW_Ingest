package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Claim;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Profile;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

@Repository
@Profile("production")
class AssessmentRepositoryImpl implements AssessmentRepository {

    protected final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.assessment.findOneByNaturalId}")
    private String slqFindOneByNaturalId;

    @Value("${sql.assessment.create}")
    private String sqlCreate;

    @Value("${sql.assessment.claim.findForAsmt}")
    private String sqlClaimFindForAsmt;


    @Autowired
    public AssessmentRepositoryImpl(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Assessment findOneByNaturalId(final String id) {

        final List<Assessment.Builder> assessmentList = jdbcTemplate.query(slqFindOneByNaturalId, new MapSqlParameterSource("natural_id", id), new AssessmentRowMapper());
        if (assessmentList.size() == 1) {
            return assessmentList
                    .get(0)
                    .withClaims(findClaims(assessmentList.get(0).build().getId()))
                    .build();

        }
        return null;
    }

    protected List<Claim> findClaims(final int asmtId) {
        return jdbcTemplate.query(sqlClaimFindForAsmt,
                new MapSqlParameterSource("asmt_id", asmtId),
                new ClaimRowMapper());
    }

    private static class AssessmentRowMapper implements RowMapper<Assessment.Builder> {
        @Override
        public Assessment.Builder mapRow(final ResultSet rs, final int rowNum) throws SQLException {
            return Assessment.builder()
                    .withId(rs.getInt("id"))
                    .withNaturalId(rs.getString("natural_id"))
                    .withGradeId(rs.getInt("grade_id"))
                    .withTypeId(rs.getInt("type_id"))
                    .withSubjectId(rs.getInt("subject_id"))
                    .withAcademicYear(rs.getInt("academic_year"))
                    .withName(rs.getString("name"))
                    .withLabel(rs.getString("label"))
                    .withVersion(rs.getString("version"));

        }
    }

    private static class ClaimRowMapper implements RowMapper<Claim> {
        @Override
        public Claim mapRow(final ResultSet rs, final int rowNum) throws SQLException {
            return Claim.builder()
                    .withCode(rs.getString("code"))
                    .withMaxScore(rs.getFloat("max_score"))
                    .withMinScore(rs.getFloat("min_score"))
                    .withId(rs.getInt("id"))
                    .build();

        }
    }
}
