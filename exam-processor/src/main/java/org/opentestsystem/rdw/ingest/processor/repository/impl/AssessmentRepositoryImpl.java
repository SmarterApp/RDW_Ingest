package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.SubjectClaimScore;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import static com.google.common.collect.Maps.newHashMap;

@Repository
class AssessmentRepositoryImpl implements AssessmentRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.assessment.findOneByNaturalId}")
    private String slqFindOneByNaturalId;

    @Value("${sql.assessment.subjectClaimScore.findBySubjectAndAsmtType}")
    private String sqlfindSubjectClaimScores;

    @Value("${sql.assessment.item.findAllForAssessment}")
    private String sqlfindAllItemsForAssessment;

    @Autowired
    AssessmentRepositoryImpl(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Transactional(readOnly = true)
    @Override
    //TODO: consider caching here
    public Assessment findOneByNaturalId(final String id) {

        final List<Assessment.Builder> assessmentList = jdbcTemplate.query(slqFindOneByNaturalId, new MapSqlParameterSource("natural_id", id), new AssessmentRowMapper());
        if (assessmentList.size() == 1) {
            final Assessment partiallyBuiltAssessment = assessmentList.get(0).build();
            return assessmentList
                    .get(0)
                    .claims(findSubjectClaimScores(partiallyBuiltAssessment))
                    .items(newHashMap(findItems(partiallyBuiltAssessment)))
                    .build();
        }
        return null;
    }

    private List<SubjectClaimScore> findSubjectClaimScores(final Assessment assessment) {
        return jdbcTemplate.query(sqlfindSubjectClaimScores,
                new MapSqlParameterSource()
                        .addValue("subject_id", assessment.getSubjectId())
                        .addValue("asmt_type_id", assessment.getTypeId()),
                new ClaimRowMapper());
    }

    private Map<String, Integer> findItems(final Assessment assessment) {
        final Map<String, Integer> items = newHashMap();
        for (final Item item : jdbcTemplate.query(sqlfindAllItemsForAssessment,
                new MapSqlParameterSource()
                        .addValue("asmt_id", assessment.getId()),
                new ItemRowMapper())) {
            items.put(item.getNaturalId(), item.getId());


        }
        return items;
    }

    private static class AssessmentRowMapper implements RowMapper<Assessment.Builder> {
        @Override
        public Assessment.Builder mapRow(final ResultSet rs, final int rowNum) throws SQLException {
            return Assessment.builder()
                    .id(rs.getInt("id"))
                    .naturalId(rs.getString("natural_id"))
                    .gradeId(rs.getInt("grade_id"))
                    .typeId(rs.getInt("type_id"))
                    .subjectId(rs.getInt("subject_id"))
                    .schoolYear(rs.getInt("school_year"));
        }
    }

    private static class ClaimRowMapper implements RowMapper<SubjectClaimScore> {
        @Override
        public SubjectClaimScore mapRow(final ResultSet rs, final int rowNum) throws SQLException {
            return new SubjectClaimScore(rs.getString("code"), rs.getInt("id"));
        }
    }

    private static class ItemRowMapper implements RowMapper<Item> {
        @Override
        public Item mapRow(final ResultSet rs, final int rowNum) throws SQLException {
            return new Item(rs.getString("natural_id"), rs.getInt("id"));
        }
    }

    /**
     * Local helper to extract item data from datbase call
     */
    private static class Item {
        final String naturalId;
        final Integer id;

        public String getNaturalId() {
            return naturalId;
        }

        public Integer getId() {
            return id;
        }

        public Item(final String naturalId, final Integer id) {
            this.naturalId = naturalId;
            this.id = id;
        }
    }
}
