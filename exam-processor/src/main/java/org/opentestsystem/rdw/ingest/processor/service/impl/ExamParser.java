package org.opentestsystem.rdw.ingest.processor.service.impl;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.opentestsystem.rdw.ingest.processor.model.Claim;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.Exam.Builder;
import org.opentestsystem.rdw.ingest.processor.model.ExamClaim;
import org.opentestsystem.rdw.ingest.processor.service.AnyExamParser;
import org.opentestsystem.rdw.model.Opportunity;
import org.opentestsystem.rdw.model.Opportunity.Score;
import org.springframework.stereotype.Component;

import static java.lang.Double.parseDouble;
import static java.lang.Float.parseFloat;
import static java.util.stream.Collectors.toMap;

@Component
class ExamParser extends AnyExamParser<Exam, Builder> {

    @Override
    protected Exam.Builder buildExam(final Opportunity opportunity, final List<Claim> claims) throws NumberFormatException {
        final Exam.Builder examBuilder = Exam.builder();

        final Map<String, ExamClaim.Builder> claimBuilders = claims.stream()
                .collect(toMap(Claim::getCode, c -> ExamClaim.builder().withClaimId(c.getId())));

        for (final Score score : opportunity.getScore()) {
            final String scoreOf = score.getMeasureOf();
            final String label = score.getMeasureLabel();

            if (overallScore.equals(scoreOf)) {
                if (scoreMeasureLabel.equals(label)) {
                    examBuilder
                            .withScaleScore(parseFloat(score.getValue()))
                            .withScaleScoreStdErr(parseFloat(score.getStandardError()));
                } else if (performanceLevelMeasureLabel.equals(label)) {
                    examBuilder
                            .withAchievementLevel(Integer.parseInt(score.getValue()));
                }
            } else if (claimBuilders.containsKey(scoreOf)) {
                if (scoreMeasureLabel.equals(label)) {
                    claimBuilders.get(scoreOf)
                            .withScaleScore(parseDouble(score.getValue()))
                            .withScaleScoreStdErr(parseDouble(score.getStandardError()));
                } else if (performanceLevelMeasureLabel.equals(label)) {
                    claimBuilders.get(scoreOf)
                            .withCategory(Integer.parseInt(score.getValue()));
                }
            }
        }
        return examBuilder.withExamClaims(claimBuilders.values().stream().map(ExamClaim.Builder::build).collect(Collectors.toList()));
    }
}