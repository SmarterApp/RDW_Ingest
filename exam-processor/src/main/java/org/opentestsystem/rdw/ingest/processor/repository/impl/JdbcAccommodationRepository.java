package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;
import org.opentestsystem.rdw.ingest.processor.repository.AccommodationRepository;
import org.opentestsystem.rdw.multitenant.cache.TenantCacheable;

import static com.google.common.collect.Lists.newArrayList;

/**
 * JdbcAccommodationRepository - repository for dealing with accommodations made available in an exam
 */
@Repository
public class JdbcAccommodationRepository implements AccommodationRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.accommodation.findIdByCode}")
    private String sqlFindIdByCode;

    @Value("${sql.accommodation.findIdsByCodes}")
    private String sqlFindIdsByCodes;

    @Autowired
    JdbcAccommodationRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * Finds an id of the accommodation by its code
     *
     * @param code the code of the accommodation
     * @return the id or null if the given code is not found
     */
    @Override
    @TenantCacheable("accCode")
    public Integer findIdByCode(final String code) {
        try {
            return jdbcTemplate.queryForObject(sqlFindIdByCode, new MapSqlParameterSource("code", code), Integer.class);
        } catch (final EmptyResultDataAccessException ignore) {
            return null;
        }
    }

    /**
     * Finds the ids of the accommodations by their codes
     *
     * @param codes the accommodation codes
     * @return the ids or an empty list if not found
     */
    @Override
    public List<Integer> findIdsByCodes(final List<String> codes) {
        try {
            return jdbcTemplate.queryForList(sqlFindIdsByCodes, new MapSqlParameterSource("codes", codes), Integer.class);
        } catch (final EmptyResultDataAccessException ignore) {
            return newArrayList();
        }
    }
}
