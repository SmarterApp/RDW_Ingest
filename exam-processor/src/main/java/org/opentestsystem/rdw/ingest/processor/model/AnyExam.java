package org.opentestsystem.rdw.ingest.processor.model;

import java.time.Instant;
import java.util.List;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Lists.newArrayList;


/**
 * This class represents common attributes share by all types of exams
 */
public abstract class AnyExam {
    //TODO: add support for accessibility accommodations
    private Instant completedAt;
    private long importId;
    private long assessmentId;
    private String asmtVersion;
    private Long schoolYear;
    private Long opportunity;
    private Integer completenessId;
    private Integer administrationConditionId;
    private String sessionId;
    private StudentExamAttributes studentExamAttributes;
    private List<ExamItem> examItems;
    private Double scaleScore;
    private Double scaleScoreStdErr;

    public Double getScaleScore() {
        return scaleScore;
    }

    public Double getScaleScoreStdErr() {
        return scaleScoreStdErr;
    }

    public Instant getCompletedAt() {
        return completedAt;
    }

    public long getImportId() { return importId; }

    public long getAssessmentId() {
        return assessmentId;
    }

    public String getAsmtVersion() {
        return asmtVersion;
    }

    public Long getSchoolYear() {
        return schoolYear;
    }

    public Long getOpportunity() {
        return opportunity;
    }

    public Integer getCompletenessId() {
        return completenessId;
    }

    public Integer getAdministrationConditionId() {
        return administrationConditionId;
    }

    public String getSessionId() {
        return sessionId;
    }

    public StudentExamAttributes getStudentExamAttributes() {
        return studentExamAttributes;
    }

    public List<ExamItem> getExamItems() {
        return examItems == null ? newArrayList() : examItems;
    }


    /**
     * The builder for the {@link AnyExam}
     */
    @SuppressWarnings("unchecked")
    public static abstract class Builder<B extends Builder<B, E>, E extends AnyExam> {
        private Instant completedAt;
        private long importId;
        private long assessmentId;
        private String asmtVersion;
        private Long opportunity;
        private Long schoolYear;
        private Integer completenessId;
        private Integer administrationConditionId;
        private String sessionId;
        private StudentExamAttributes studentExamAttributes;
        private List<ExamItem> examItems;
        private Double scaleScore;
        private Double scaleScoreStdErr;

        public E build() {
            final E exam = createExam();
            return (E) init(exam);
        }

        private AnyExam init(final AnyExam exam) {
            checkArgument(administrationConditionId != null, "administrationConditionId may not be null");
            checkArgument(completenessId != null, "completenessId may not be null");

            exam.administrationConditionId = administrationConditionId;
            exam.completedAt = completedAt;
            exam.assessmentId = assessmentId;
            exam.importId = importId;
            exam.asmtVersion = asmtVersion;
            exam.opportunity = opportunity;
            exam.schoolYear = schoolYear;
            exam.completenessId = completenessId;
            exam.administrationConditionId = administrationConditionId;
            exam.sessionId = sessionId;
            exam.studentExamAttributes = studentExamAttributes;
            exam.scaleScore = scaleScore;
            exam.scaleScoreStdErr = scaleScoreStdErr;
            exam.examItems = examItems;

            return exam;
        }

        protected abstract E createExam();

        public B schoolYear(final Long schoolYear) {
            this.schoolYear = schoolYear;
            return (B) this;
        }

        public B completedAt(final Instant completedAt) {
            this.completedAt = completedAt;
            return (B) this;
        }

        public B importId(final long importId) {
            this.importId = importId;
            return (B) this;
        }

        public B assessmentId(final long assessmentId) {
            this.assessmentId = assessmentId;
            return (B) this;
        }

        public B asmtVersion(final String asmtVersion) {
            this.asmtVersion = asmtVersion;
            return (B) this;
        }

        public B opportunity(final Long opportunity) {
            this.opportunity = opportunity;
            return (B) this;
        }

        public B completenessId(final Integer completenessId) {
            this.completenessId = completenessId;
            return (B) this;
        }

        public B scaleScore(final Double scaleScore) {
            this.scaleScore = scaleScore;
            return (B) this;
        }

        public B scaleScoreStdErr(final Double scaleScoreStdErr) {
            this.scaleScoreStdErr = scaleScoreStdErr;
            return (B) this;
        }

        public B administrationConditionId(final Integer administrationConditionId) {
            this.administrationConditionId = administrationConditionId;
            return (B) this;
        }

        public B sessionId(final String sessionId) {
            this.sessionId = sessionId;
            return (B) this;
        }

        public B studentAttributes(final StudentExamAttributes studentExamAttributes) {
            this.studentExamAttributes = studentExamAttributes;
            return (B) this;
        }

        public B examItems(final List<ExamItem> examItems) {
            this.examItems = examItems;
            return (B) this;
        }
    }
}
