package org.opentestsystem.rdw.ingest.processor;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint;
import org.springframework.cache.CacheManager;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.EnableScheduling;

import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.opentestsystem.rdw.ingest.common.repository.PipelineRepository;
import org.opentestsystem.rdw.ingest.common.script.DefaultPipelineService;
import org.opentestsystem.rdw.ingest.common.script.PipelineService;
import org.opentestsystem.rdw.ingest.processor.config.DataElementsConfiguration;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.configprops.ConfigpropsProcessor;
import org.opentestsystem.rdw.multitenant.configprops.ConfigpropsUpdatePublisher;
import org.opentestsystem.rdw.multitenant.configprops.ConfigurationChangeCacheClearer;
import org.opentestsystem.rdw.script.PipelineFactory;
import org.opentestsystem.rdw.script.ScriptPipelineConfiguration;
import org.opentestsystem.rdw.utils.ResourceLoaderConfiguration;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;

@Configuration
@Import({
        ResourceLoaderConfiguration.class,
        ExamProcessor.class,
        YamlPropertiesConfigurator.class,
        StatusConfiguration.class,
        DataElementsConfiguration.class,
        ScriptPipelineConfiguration.class,
})
@EnableBinding(ConfigpropsProcessor.class)
@EnableScheduling
public class ApplicationConfiguration {

    @Bean
    public PipelineService pipelineService(final TenantIdResolver tenantIdResolver,
                                           final PipelineFactory pipelineFactory,
                                           final PipelineRepository pipelineRepository,
                                           @Value("${pipeline.cache.versions:maximumSize=100,expireAfterWrite=300s}") final String cacheConfig) {
        return new DefaultPipelineService(tenantIdResolver, pipelineFactory, pipelineRepository, cacheConfig);
    }

    @Bean
    public ConfigpropsUpdatePublisher configpropsUpdatePublisher(final @Value("${spring.application.name}") String serviceName,
                                                                 final ConfigpropsProcessor configpropsProcessor,
                                                                 final ConfigurationPropertiesReportEndpoint configurationPropertiesReportEndpoint,
                                                                 final ObjectMapper objectMapper) {
        return new ConfigpropsUpdatePublisher(serviceName,
                configpropsProcessor,
                configurationPropertiesReportEndpoint,
                objectMapper);
    }

    @Bean
    public ConfigurationChangeCacheClearer configurationChangeCacheClearer(final CacheManager cacheManager) {
        return new ConfigurationChangeCacheClearer(cacheManager);
    }
}
