package org.opentestsystem.rdw.ingest.processor.repository;

import org.springframework.aop.support.AbstractPointcutAdvisor;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;

/**
 * Spring EnableTransactionManagement are implemented via AOP proxies with the default
 * {@link Order} = {@link Ordered#LOWEST_PRECEDENCE} = {@link Integer#MAX_VALUE}
 * <p>
 * Retry needs to be executed AFTER the transaction is committed.
 * This requires the explicit order of this Aspect to be lower than Transactions Aspect.
 * <p>
 * Without the explicit order it uses {@link AbstractPointcutAdvisor#getOrder()} that returns the
 * hardcoded value that is equal to {@link Integer#MAX_VALUE} and then the order becomes random
 */
@Configuration
public class JdbcRetryConfiguration extends org.springframework.retry.annotation.RetryConfiguration {

    @Override
    public int getOrder() {
        return Integer.MAX_VALUE - 1;
    }
}