package org.opentestsystem.rdw.ingest.processor.repository;

import org.springframework.aop.support.AbstractPointcutAdvisor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.retry.annotation.EnableRetry;
import org.springframework.retry.annotation.RetryConfiguration;

import javax.annotation.PostConstruct;

/**
 * Spring EnableTransactionManagement are implemented via AOP proxies with the default
 * {@link Order} = {@link Ordered#LOWEST_PRECEDENCE} = {@link Integer#MAX_VALUE}
 * <p>
 * Retry needs to be executed AFTER the transaction is committed.
 * This requires the explicit order of this Aspect to be lower than Transactions Aspect.
 * <p>
 * Without the explicit order it uses {@link AbstractPointcutAdvisor#getOrder()} that returns the
 * hardcoded value that is equal to {@link Integer#MAX_VALUE} and then the order becomes random
 *<p>
 * NOTE: In order to set the order, the @PostConstruct method of this configuration MUST be executed
 * before any bean containing a @Backoff or @Recover annotation is instantiated by the Spring
 * application context.
 * This is currently accomplished via a @DependsOn this bean in the {@link DataSourceConfiguration}
 */
@Configuration
@Order(Ordered.HIGHEST_PRECEDENCE)
@EnableRetry
public class JdbcRetryConfiguration {

    @Autowired
    public RetryConfiguration retryConfiguration;

    @PostConstruct
    public void postConstruct() {
        this.retryConfiguration.setOrder(Ordered.LOWEST_PRECEDENCE - 1);
    }
}