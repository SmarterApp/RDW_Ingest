package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.util.List;
import org.opentestsystem.rdw.ingest.processor.model.ExamItem;
import org.opentestsystem.rdw.ingest.processor.model.IabExam;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.repository.IabExamRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;


@Repository
public class IabExamRepositoryImpl implements IabExamRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.iabExam.iabExamStudent.create}")
    private String sqlExamStudentCreate;

    @Value("${sql.iabExam.iabExamItem.create}")
    private String sqlExamItemCreate;

    @Value("${sql.iabExam.create}")
    private String sqlCreate;

    @Autowired
    public IabExamRepositoryImpl(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Transactional
    @Override
    public long create(final IabExam exam) {
        final long studentExamId = create(exam.getStudentExamAttributes());

        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("iab_exam_student_id", studentExamId)
                .addValue("asmt_id", exam.getAssessmentId())
                .addValue("asmt_version", exam.getAsmtVersion())
                .addValue("opportunity", exam.getOpportunity())
                .addValue("status", exam.getStatus())
                .addValue("completeness_id", exam.getCompleteness())
                .addValue("administration_condition_id", exam.getAdministrationConditionId())
                .addValue("session_id", exam.getSessionId())
                .addValue("scale_score", exam.getScaleScore())
                .addValue("scale_score_std_err", exam.getScaleScoreStdErr())
                .addValue("category", exam.getCategory())
                .addValue("completed_at", exam.getCompletedAt());

        jdbcTemplate.update(sqlCreate, parameterSource, keyHolder);
        final Long id = keyHolder.getKey().longValue();
        batchCreateExamItems(exam.getExamItems(), id);
        return id;
    }

    private long create(final StudentExamAttributes studentExamAttributes) {
        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("grade_id", studentExamAttributes.getGradeId())
                .addValue("student_id", studentExamAttributes.getStudentId())
                .addValue("school_id", studentExamAttributes.getResponsibleSchoolId())
                .addValue("iep", studentExamAttributes.getIdeaIndicator())
                .addValue("lep", studentExamAttributes.getLep())
                .addValue("section504", studentExamAttributes.getSection504())
                .addValue("economic_disadvantage", studentExamAttributes.getEconomicDisadvantage())
                .addValue("migrant_status", studentExamAttributes.getMigrantStatus())
                .addValue("eng_prof_lvl", studentExamAttributes.getEngProfLvl())
                .addValue("t3_program_type", studentExamAttributes.getT3ProgramType())
                .addValue("language_code", studentExamAttributes.getLanguageCode())
                .addValue("prim_disability_type", studentExamAttributes.getPrimDisabilityType());

        jdbcTemplate.update(sqlExamStudentCreate, parameterSource, keyHolder);
        return keyHolder.getKey().longValue();
    }

    private void batchCreateExamItems(final List<ExamItem> examItems, final long examId) {
        if (examItems.isEmpty()) return;

        final SqlParameterSource[] batchParameters = examItems.stream()
                .map(examItem -> new MapSqlParameterSource("iab_exam_id", examId)
                        .addValue("item_natural_id", examItem.getNaturalId())
                        .addValue("response", examItem.getResponse())
                        .addValue("score_status", examItem.getScoreStatus())
                        .addValue("score", examItem.getScore()))
                .toArray(MapSqlParameterSource[]::new);

        jdbcTemplate.batchUpdate(sqlExamItemCreate, batchParameters);
    }
}
