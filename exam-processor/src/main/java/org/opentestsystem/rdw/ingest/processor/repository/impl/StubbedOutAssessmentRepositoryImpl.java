package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentRepository;
import org.opentestsystem.rdw.ingest.processor.repository.StubbedOutAssessmentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;


@Repository
class StubbedOutAssessmentRepositoryImpl implements StubbedOutAssessmentRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private AssessmentRepository assessmentRepository;

    @Value("${sql.assessment.create}")
    private String sqlCreate;

    @Autowired
    StubbedOutAssessmentRepositoryImpl(final NamedParameterJdbcTemplate jdbcTemplate,
                                              final AssessmentRepository assessmentRepository) {
        this.jdbcTemplate = jdbcTemplate;
        this.assessmentRepository = assessmentRepository;
    }

    @Transactional
    @Override
    public Assessment create(final Assessment assessment) {

        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("natural_id", assessment.getNaturalId())
                .addValue("grade_id", assessment.getGradeId())
                .addValue("type_id", assessment.getTypeId())
                .addValue("subject_id", assessment.getSubjectId())
                .addValue("school_year", assessment.getSchoolYear());

        jdbcTemplate.update(sqlCreate, parameterSource, keyHolder);
        return assessmentRepository.findOneByNaturalId(assessment.getNaturalId());
    }
}
