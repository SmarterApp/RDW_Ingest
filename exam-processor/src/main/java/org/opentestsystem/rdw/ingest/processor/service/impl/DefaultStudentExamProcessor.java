package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.common.model.trt.Opportunity;
import org.opentestsystem.rdw.common.model.trt.Opportunity.Score;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.common.model.trt.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.util.DataElementError;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.ExamClaim;
import org.opentestsystem.rdw.ingest.processor.model.ExamClaim.Builder;
import org.opentestsystem.rdw.ingest.processor.model.SubjectClaimScore;
import org.opentestsystem.rdw.ingest.processor.repository.AccommodationRepository;
import org.opentestsystem.rdw.ingest.processor.repository.AdminConditionRepository;
import org.opentestsystem.rdw.ingest.processor.repository.CompletenessRepository;
import org.opentestsystem.rdw.ingest.processor.service.ExamItemProcessor;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static com.google.common.base.Strings.isNullOrEmpty;
import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.parseOptionalDouble;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.parseOptionalInteger;

@Service
class DefaultStudentExamProcessor implements StudentExamProcessor {
    private static final Logger logger = LoggerFactory.getLogger(DefaultStudentExamProcessor.class);

    private final static String ScoreMeasureLabel = "ScaleScore";
    private final static String PerformanceLevelMeasureLabel = "PerformanceLevel";
    private final static String OverallScore = "Overall";

    private final AdminConditionRepository adminConditionRepository;
    private final CompletenessRepository completenessRepository;
    private final ExamItemProcessor examItemProcessor;
    private final AccommodationRepository accommodationRepository;
    private final ExamineeProcessor examineeProcessor;

    @Autowired
    DefaultStudentExamProcessor(final ExamItemProcessor examItemProcessor,
                                final AdminConditionRepository adminConditionRepository,
                                final CompletenessRepository completenessRepository,
                                final AccommodationRepository accommodationRepository,
                                final ExamineeProcessor examineeProcessor) {
        this.examItemProcessor = examItemProcessor;
        this.adminConditionRepository = adminConditionRepository;
        this.completenessRepository = completenessRepository;
        this.accommodationRepository = accommodationRepository;
        this.examineeProcessor = examineeProcessor;
    }

    @Override
    public Exam parseExam(final TDSReport report, final int schoolId, final Assessment assessment) throws ImportException {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        final Test test = report.getTest();
        final Opportunity opportunity = report.getOpportunity();

        final Exam.Builder builder = parseScoreData(opportunity, assessment.getSubjectClaimScores(), errorCollector)
                .typeId(assessment.getTypeId())
                .examItems(examItemProcessor.parseExamItems(opportunity.getItem(), assessment, errorCollector))
                .studentExamAttributes(examineeProcessor.parseStudentExamAttributes(report.getExaminee(), schoolId, errorCollector))
                .schoolYear(test.getAcademicYear())
                .assessmentId(assessment.getId())
                .asmtVersion(test.getAssessmentVersion())
                .opportunity(opportunity.getOpportunity())
                .sessionId(opportunity.getSessionId());

        final List<String> accommodationCodes = new ArrayList<>();
        for (final Opportunity.Accommodation acc : opportunity.getAccommodation()) {
            accommodationCodes.add(acc.getCode());
        }

        if (!accommodationCodes.isEmpty()) {
            final List<Integer> accommodationIds = accommodationRepository.findIdsByCodes(accommodationCodes);

            if (accommodationCodes.size() > accommodationIds.size())
                logger.warn("Not all accommodation codes [" + accommodationCodes.toString() + "] passed validation, invalid [" + Math.abs(accommodationCodes.size() - accommodationIds.size()) + "] codes");

            builder.accommodationIds(accommodationIds);
        }

        if (opportunity.getDateCompleted() == null) errorCollector.add(new DataElementError("DateCompleted", null, "must not be null"));
        else builder.completedAt(opportunity.getDateCompleted());

        if (isNullOrEmpty(opportunity.getBestCompleteness())) errorCollector.add(new DataElementError("completeness", null, "must not be null or empty"));
        else builder.completenessId(completenessRepository.findIdByCode(opportunity.getBestCompleteness()));

        if (isNullOrEmpty(opportunity.getAdministrationCondition())) errorCollector.add(new DataElementError("AdministrationCondition", null, "must not be null or empty"));
        else builder.administrationConditionId(adminConditionRepository.findIdByCode(opportunity.getAdministrationCondition()));

        if (errorCollector.isEmpty()) return builder.build();
        else throw new ImportException(ImportStatus.BAD_DATA, errorCollector.toJson());
    }

    private Exam.Builder parseScoreData(final Opportunity opportunity, final List<SubjectClaimScore> claims, final DataElementErrorCollector errorCollector) {
        final Exam.Builder examBuilder = Exam.builder();
        final Map<String, Builder> claimBuilders = getClaimBuilders(claims);

        for (final Score score : opportunity.getScore()) {
            final String scoreOf = score.getMeasureOf();
            final String label = score.getMeasureLabel();

            if (OverallScore.equals(scoreOf)) {
                if (ScoreMeasureLabel.equals(label)) {
                    examBuilder
                            .scaleScore(parseOptionalDouble(score.getValue(), scoreOf + "," + ScoreMeasureLabel, errorCollector))
                            .scaleScoreStdErr(parseOptionalDouble(score.getStandardError(), scoreOf + "," + ScoreMeasureLabel + ", StdErr", errorCollector));
                } else if (PerformanceLevelMeasureLabel.equals(label)) {
                    examBuilder
                            .performanceLevel(parseOptionalInteger(score.getValue(), scoreOf + "," + ScoreMeasureLabel + ", PerformanceLevel", errorCollector));
                }
            } else if (claimBuilders.containsKey(scoreOf)) {
                if (ScoreMeasureLabel.equals(label)) {
                    claimBuilders.get(scoreOf)
                            .scaleScore(parseOptionalDouble(score.getValue(), scoreOf + "," + ScoreMeasureLabel, errorCollector))
                            .scaleScoreStdErr(parseOptionalDouble(score.getStandardError(), scoreOf + "," + ScoreMeasureLabel + ", StdErr", errorCollector));
                } else if (PerformanceLevelMeasureLabel.equals(label)) {
                    claimBuilders.get(scoreOf)
                            .category(parseOptionalInteger(score.getValue(), scoreOf + "," + PerformanceLevelMeasureLabel + ", Category", errorCollector));
                }
            }
        }

        final List<ExamClaim> examClaims = newArrayList();
        for (final ExamClaim.Builder claimBuilder : claimBuilders.values()) {
            //TODO: add handling of the un-scored claims
            examClaims.add(claimBuilder.build());
        }

        return examBuilder.examClaims(examClaims);
    }

    private Map<String, Builder> getClaimBuilders(final List<SubjectClaimScore> claims) {

        final Map<String, Builder> claimBuilders = newHashMap();

        for (final SubjectClaimScore subjectClaimScore : claims) {
            claimBuilders.put(subjectClaimScore.getCode(), ExamClaim.builder().claimId(subjectClaimScore.getId()));
        }
        return claimBuilders;
    }
}

