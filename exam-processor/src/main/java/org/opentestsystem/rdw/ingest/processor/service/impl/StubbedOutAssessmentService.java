package org.opentestsystem.rdw.ingest.processor.service.impl;

import java.util.List;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Claim;
import org.opentestsystem.rdw.ingest.processor.repository.StubbedOutAssessmentRepository;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentService;
import org.opentestsystem.rdw.ingest.processor.service.SubjectService;
import org.opentestsystem.rdw.model.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;

import static com.google.common.collect.Lists.newArrayList;

@Service
@Profile("dev")
public class StubbedOutAssessmentService implements AssessmentService {
    private final StubbedOutAssessmentRepository assessmentRepository;

    private final SubjectService subjectService;

    private final List<Claim> elaClaims = newArrayList();
    private final List<Claim> mathClaims = newArrayList();

    @Autowired
    StubbedOutAssessmentService(final StubbedOutAssessmentRepository assessmentRepository, final SubjectService subjectService) {
        this.assessmentRepository = assessmentRepository;
        this.subjectService = subjectService;

        elaClaims.add(Claim.builder().withCode("SOCK_R").build());
        elaClaims.add(Claim.builder().withCode("SOCK_LS").build());
        elaClaims.add(Claim.builder().withCode("2-W").build());
        elaClaims.add(Claim.builder().withCode("4-CR").build());

        mathClaims.add(Claim.builder().withCode("1").build());
        mathClaims.add(Claim.builder().withCode("SOCK_2").build());
        mathClaims.add(Claim.builder().withCode("3").build());
    }

    @Override
    public Assessment findOneByNaturalId(final Test test) {
        final Assessment assessment = assessmentRepository.findOneByNaturalId(test.getName());
        if (assessment != null) return assessment;

        final boolean iab = test.getTestId().contains("IAB");
        return assessmentRepository.create(Assessment.builder()
                .withAcademicYear((int) test.getAcademicYear())
                .withGradeId(3)
                .withNaturalId(test.getName())
                .withSubjectId(subjectService.toId(test.getSubject()))
                .withTypeId(iab ? 2 : 1)
                .withClaims(iab ? null : (test.getSubject().equalsIgnoreCase("ela")) ? elaClaims : mathClaims)
                .build());
    }
}
