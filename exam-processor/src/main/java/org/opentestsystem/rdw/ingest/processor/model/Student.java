package org.opentestsystem.rdw.ingest.processor.model;

import com.google.common.collect.ImmutableList;
import java.util.Date;
import java.util.List;
import javax.validation.constraints.Null;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.ingest.common.util.Precondition.checkNotBlank;

/**
 * A Student
 */
public class Student {
    private String lastOrSurname;
    private String firstName;
    private String middleName;
    private int genderId;
    private List<Integer> ethnicityIds;
    private String ssid;

    @Null
    private Date firsEntryIntoUSSchoolAt;
    @Null
    private Date lepEntryAt;
    @Null
    private Date lepExitAt;
    private Date birthday;

    public String getSsid() {
        return ssid;
    }

    public String getLastOrSurname() {
        return lastOrSurname;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getMiddleName() {
        return middleName;
    }

    public int getGenderId() {
        return genderId;
    }

    public List<Integer> getEthnicityIds() {
        return ethnicityIds == null ? newArrayList() : ethnicityIds;
    }

    public Date getFirsEntryIntoUSSchoolAt() {
        return firsEntryIntoUSSchoolAt;
    }

    public Date getLepEntryAt() {
        return lepEntryAt;
    }

    public Date getLepExitAt() {
        return lepExitAt;
    }

    public Date getBirthday() {
        return birthday;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * The builder for the {@link Student}
     */
    public static class Builder {
        private String ssid;
        private String lastOrSurname;
        private String firstName;
        private String middleName;
        private Integer genderId;
        private List<Integer> ethnicityIds = newArrayList();
        private Date firsEntryIntoUSSchoolAt;
        private Date lepEntryAt;
        private Date lepExitAt;
        private Date birthday;

        public Student build() {
            checkArgument(genderId != null, "genderId may not be null");

            final Student student = new Student();
            student.ssid = checkNotBlank(ssid);
            student.lastOrSurname = lastOrSurname;
            student.firstName = firstName;
            student.middleName = middleName;
            student.genderId = genderId;
            student.ethnicityIds = ethnicityIds;
            student.firsEntryIntoUSSchoolAt = firsEntryIntoUSSchoolAt;
            student.lepEntryAt = lepEntryAt;
            student.lepExitAt = lepExitAt;
            student.birthday = birthday;
            return student;
        }

        public Builder ssid(final String ssid) {
            this.ssid = ssid;
            return this;
        }

        public Builder lastOrSurname(final String lastOrSurname) {
            this.lastOrSurname = lastOrSurname;
            return this;
        }

        public Builder firstName(final String firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder middleName(final String middleName) {
            this.middleName = middleName;
            return this;
        }

        public Builder genderId(final Integer genderId) {
            this.genderId = genderId;
            return this;
        }

        public Builder ethnicityIds(final List<Integer> ethnicityIds) {
            this.ethnicityIds = (ethnicityIds != null) ? ImmutableList.copyOf(ethnicityIds) : newArrayList();
            return this;
        }

        public Builder firsEntryIntoUSSchoolAt(final Date firsEntryIntoUSSchoolAt) {
            this.firsEntryIntoUSSchoolAt = firsEntryIntoUSSchoolAt;
            return this;
        }

        public Builder lepEntryAt(final Date lepEntryAt) {
            this.lepEntryAt = lepEntryAt;
            return this;
        }

        public Builder lepExitAt(final Date lepExitAt) {
            this.lepExitAt = lepExitAt;
            return this;
        }

        public Builder birthday(final Date birthday) {
            this.birthday = birthday;
            return this;
        }
    }
}
