package org.opentestsystem.rdw.ingest.processor.utils;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.validation.constraints.NotNull;
import org.opentestsystem.rdw.ingest.processor.service.DataElementError;

import static org.opentestsystem.rdw.ingest.util.Precondition.checkNotBlank;

/**
 * Helper methods for parsing
 */
public abstract class ParseUtil {

    /**
     * Converts the given string value into a {@link Boolean}
     *
     * @param value the value to convert
     * @return the parsed {@link Boolean}
     * @throws IllegalArgumentException
     */
    public static Boolean toBoolean(final String value) throws IllegalArgumentException {

        if ("Yes".equalsIgnoreCase(value) || "y".equalsIgnoreCase(value)) return true;
        if ("No".equalsIgnoreCase(value) || "n".equalsIgnoreCase(value)) return false;

        throw new IllegalArgumentException("an invalid value [" + value + "]");
    }

    /**
     * Converts the given string value into a {@link Date}
     *
     * @param value the value to convert
     * @return the parsed {@link Date}
     * @throws ParseException
     */
    public static Date toDate(final String value) throws ParseException {
        return new SimpleDateFormat("yyyyy-mm-dd").parse(value);
    }


    /**
     * Parsed the given rawValue into {@link Date}
     *
     * @param rawValue      the value to parse
     * @param valueName     the name of the given value to be used in case of error
     * @param elementErrors the collection of errors to add to if an error happens
     * @return the parsed value or null in case of the error
     */
    public static Date parseMandatoryDate(final String rawValue,
                                          final String valueName,
                                          @NotNull final List<String> elementErrors) {
        try {
            return toDate(rawValue);
        } catch (final ParseException e) {
            elementErrors.add(new DataElementError(valueName, rawValue, e.getMessage()).toJson());
        }
        return null;
    }

    /**
     * Parsed the given rawValue into {@link String}
     *
     * @param rawValue      the value to parse
     * @param valueName     the name of the given value to be used in case of error
     * @param elementErrors the collection of errors to add to if an error happens
     * @return the parsed value or null in case of the error
     */
    public static String parseMandatoryString(final String rawValue,
                                              final String valueName,
                                              @NotNull final List<String> elementErrors) {
        try {
            return checkNotBlank(rawValue.trim());
        } catch (IllegalArgumentException e) {
            elementErrors.add(new DataElementError(valueName, rawValue, e.getMessage()).toJson());
        }
        return null;
    }

    /**
     * Parsed the given rawValue into {@link Boolean}
     *
     * @param rawValue      the value to parse
     * @param valueName     the name of the given value to be used in case of error
     * @param elementErrors the collection of errors to add to if an error happens
     * @return the parsed value or null in case of the error
     */
    public static Boolean parseMandatoryBoolean(final String rawValue,
                                                final String valueName,
                                                @NotNull final List<String> elementErrors) {
        try {
            return toBoolean(rawValue);
        } catch (final IllegalArgumentException e) {
            elementErrors.add(new DataElementError(valueName, rawValue, e.getMessage()).toJson());
        }
        return null;
    }
}
