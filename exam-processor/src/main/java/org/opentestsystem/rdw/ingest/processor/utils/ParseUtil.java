package org.opentestsystem.rdw.ingest.processor.utils;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Strings.isNullOrEmpty;

/**
 * Helper methods for parsing
 */
public abstract class ParseUtil {

    /**
     * Converts the given string value into a {@link Boolean}
     *
     * @param value       the value to convert
     * @param parsedField the name of the fields being parsed
     * @return the parsed {@link Boolean}
     * @throws ParseException
     */
    public static Boolean toBoolean(final String value, final String parsedField) throws ParseException {
        if (isNullOrEmpty(value)) return null;

        if ("Yes" .equalsIgnoreCase(value) || "y" .equalsIgnoreCase(value)) return true;
        if ("No" .equalsIgnoreCase(value) || "n" .equalsIgnoreCase(value)) return false;

        throw new ParseException("an invalid value [" + value + "], field " + parsedField, 0);
    }

    /**
     * Converts the given string value into a {@link Date}
     *
     * @param value       the value to convert
     * @param parsedField the name of the fields being parsed
     * @return the parsed {@link Date}
     * @throws ParseException
     */
    public static Date toDate(final String value, final String parsedField) throws ParseException {
        if (isNullOrEmpty(value)) return null;
        try {
            return new SimpleDateFormat("yyyyy-mm-dd").parse(value);
        } catch (final ParseException e) {
            throw new ParseException(e.getMessage() + " , field " + parsedField, e.getErrorOffset());
        }
    }
}
