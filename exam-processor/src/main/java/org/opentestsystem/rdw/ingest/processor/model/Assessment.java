package org.opentestsystem.rdw.ingest.processor.model;

import com.google.common.collect.Lists;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;

/**
 * An assessment definition
 */
public class Assessment {
    private Integer id;
    private String naturalId;
    private String gradeCode;
    private int typeId;
    private int subjectId;
    private String subjectCode;
    private List<SubjectClaimScore> claims;
    // This is a target with the fully qualified claim+target code, e.g. "3|G-SRT|A"
    private Map<String, Integer> targetCodeToId;
    private Map<String, Integer> items;

    public List<SubjectClaimScore> getSubjectClaimScores() {
        return claims == null ? newArrayList() : Lists.newArrayList(claims);
    }

    @NotNull
    public Map<String, Integer> getItems() {
        return items == null ? newHashMap() : newHashMap(items);
    }

    public Map<String, Integer> getTargetCodeToId() {
        return targetCodeToId == null ? newHashMap() : newHashMap(targetCodeToId);
    }

    public Integer getId() {
        return id;
    }

    public String getNaturalId() {
        return naturalId;
    }

    public int getTypeId() {
        return typeId;
    }

    public int getSubjectId() {
        return subjectId;
    }

    public String getGradeCode() {
        return gradeCode;
    }

    public String getSubjectCode() {
        return subjectCode;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * The Builder for the {@link Assessment}
     */
    public static class Builder {
        private Integer id;
        private String naturalId;
        private String gradeCode;
        private int typeId;
        private String subjectCode;
        private int subjectId;
        private List<SubjectClaimScore> claims;
        private Map<String, Integer> items;
        private Map<String, Integer> targetCodeToId;

        public Assessment build() {
            final Assessment assessment = new Assessment();
            assessment.naturalId = naturalId;
            assessment.gradeCode = gradeCode;
            assessment.typeId = typeId;
            assessment.subjectCode = subjectCode;
            assessment.subjectId = subjectId;
            assessment.id = id;
            assessment.claims = claims;
            assessment.items = items;
            assessment.targetCodeToId = targetCodeToId;
            return assessment;
        }

        public Builder id(final Integer id) {
            this.id = id;
            return this;
        }

        public Builder naturalId(final String naturalId) {
            this.naturalId = naturalId;
            return this;
        }

        public Builder gradeCode(final String gradeCode) {
            this.gradeCode = gradeCode;
            return this;
        }

        public Builder typeId(final int typeId) {
            this.typeId = typeId;
            return this;
        }

        public Builder subjectId(final int subjectId) {
            this.subjectId = subjectId;
            return this;
        }

        public Builder subjectCode(final String subjectCode) {
            this.subjectCode = subjectCode;
            return this;
        }

        public Builder claims(final List<SubjectClaimScore> claims) {
            this.claims = claims;
            return this;
        }

        public Builder items(final Map<String, Integer> items) {
            this.items = items;
            return this;
        }

        public Builder targetCodeToId(final Map<String, Integer> targetCodeToId) {
            this.targetCodeToId = targetCodeToId;
            return this;
        }
    }
}
