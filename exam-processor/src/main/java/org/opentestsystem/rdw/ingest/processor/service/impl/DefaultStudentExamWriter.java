package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.model.StudentGroup;
import org.opentestsystem.rdw.ingest.processor.repository.ExamRepository;
import org.opentestsystem.rdw.ingest.processor.repository.StudentGroupRepository;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Service
class DefaultStudentExamWriter implements StudentExamWriter {
    private final ExamRepository examRepository;
    private final StudentGroupRepository studentGroupRepository;
    private final StudentRepository studentRepository;

    @Autowired
    DefaultStudentExamWriter(final ExamRepository examRepository,
                             final StudentGroupRepository studentGroupRepository,
                             final StudentRepository studentRepository) {
        this.examRepository = examRepository;
        this.studentGroupRepository = studentGroupRepository;
        this.studentRepository = studentRepository;

    }

    @Override
    @Transactional
    public void saveNewExam(final Student student, final Exam exam, final long importId) {

        final int studentId = studentRepository.upsert(student, importId);
        exam.setStudentId(studentId);
        examRepository.create(exam, importId);

        final List<Integer> groupIds = newArrayList();
        // deal with student groups: create groups if they don't already exist then add student to them
        for (final StudentGroup group : student.getGroups()) {
            //do not want to update an existing group since this is just for the testing
            Integer groupId = studentGroupRepository.findIdByNameAndSchoolAndYear(group.getName(), group.getSchoolId(), group.getSchoolYear());
            if (groupId == null) {
                groupId = studentGroupRepository.upsert(group, importId).getId();
            }
            groupIds.add(groupId);
        }
        if (!groupIds.isEmpty()) studentGroupRepository.addStudentToGroups(studentId, groupIds, importId);
    }
}


