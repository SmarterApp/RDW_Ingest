package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.InferredSchool;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.model.StudentGroup;
import org.opentestsystem.rdw.ingest.processor.repository.ExamRepository;
import org.opentestsystem.rdw.ingest.processor.repository.StudentGroupRepository;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Service
class DefaultStudentExamWriter implements StudentExamWriter {
    private final ExamRepository examRepository;
    private final StudentGroupRepository studentGroupRepository;
    private final StudentRepository studentRepository;

    @Autowired
    DefaultStudentExamWriter(final ExamRepository examRepository,
                             final StudentGroupRepository studentGroupRepository,
                             final StudentRepository studentRepository) {
        this.examRepository = examRepository;
        this.studentGroupRepository = studentGroupRepository;
        this.studentRepository = studentRepository;

    }

    @Override
    public void upsert(final Student student, final Exam exam, final long importId) {
        if (exam.isDeleted()) {
            // let upsert infer school from the student's exams.
            // in order for this to work, the exam has to be deleted first.
            examRepository.delete(exam, importId);
            studentRepository.upsert(student, importId);
        } else {
            // infer school from the given exam
            student.setSchool(new InferredSchool(exam.getStudentExamAttributes().getResponsibleSchoolId(), exam.getCompletedAt()));
            final int studentId = studentRepository.upsert(student, importId);
            exam.getStudentExamAttributes().setStudentId(studentId);
            examRepository.upsert(exam, importId);

            final List<Integer> groupIds = newArrayList();
            // deal with student groups: create and add student to them if needed
            for (final StudentGroup group : student.getGroups()) {
                final Integer groupId = studentGroupRepository.findIdByNameAndSchoolAndYear(group.getName(), group.getSchoolId(), group.getSchoolYear());
                if (groupId == null) groupIds.add(studentGroupRepository.upsert(group, importId).getId());
                else if (!studentGroupRepository.existsStudentInGroup(studentId, groupId)) groupIds.add(groupId);
            }
            if (!groupIds.isEmpty()) studentGroupRepository.addStudentToGroups(studentId, groupIds, importId);
        }
    }
}