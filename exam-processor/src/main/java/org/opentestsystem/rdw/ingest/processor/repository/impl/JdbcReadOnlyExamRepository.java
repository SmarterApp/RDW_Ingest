package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.stereotype.Repository;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDate;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.repository.ReadOnlyExamRepository;

import static org.opentestsystem.rdw.ingest.common.util.JdbcUtil.getNullable;

@Repository
class JdbcReadOnlyExamRepository implements ReadOnlyExamRepository {
    protected final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.exam.findOne}")
    private String sqlFindOne;

    @Autowired
    JdbcReadOnlyExamRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Exam findOne(final long assessmentId, final String opportunityId) {
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("asmt_id", assessmentId)
                .addValue("opportunity_id", opportunityId);
        try {
            return jdbcTemplate.queryForObject(sqlFindOne, parameterSource, ExamRowMapper);
        } catch (final EmptyResultDataAccessException e) {
            return null;
        }
    }

    private static final RowMapper<Exam> ExamRowMapper = (row, rowNum) -> {
        final StudentExamAttributes attributes = StudentExamAttributes.builder()
                .gradeId(row.getInt("grade_id"))
                .studentId(row.getInt("student_id"))
                .responsibleSchoolId(row.getInt("school_id"))
                .ideaIndicator(row.getBoolean("iep"))
                .lep(getNullable(row, row.getBoolean("lep")))
                .section504(getNullable(row, row.getBoolean("section504")))
                .economicDisadvantage(row.getBoolean("economic_disadvantage"))
                .migrantStatus(getNullable(row, row.getBoolean("migrant_status")))
                .engProfLvl(row.getString("eng_prof_lvl"))
                .t3ProgramType(row.getString("t3_program_type"))
                .languageId(getNullable(row, row.getInt("language_id")))
                .militaryConnectedId(getNullable(row, row.getInt("military_connected_id")))
                .primDisabilityType(row.getString("prim_disability_type"))
                .examineeId(getNullable(row, row.getLong("examinee_id")))
                .elasId(getNullable(row, row.getInt("elas_id")))
                .elasStartDate(getNullableLocalDate(row, row.getDate("elas_start_at")))
                .build();
        return Exam.builder()
                .studentExamAttributes(attributes)
                .id(row.getLong("id"))
                .typeId(row.getInt("type_id"))
                .schoolYear(row.getInt("school_year"))
                .assessmentId(row.getInt("asmt_id"))
                .asmtVersion(row.getString("asmt_version"))
                .opportunity(row.getLong("opportunity"))
                .oppId(row.getString("oppId"))
                .completenessId(row.getInt("completeness_id"))
                .administrationConditionId(row.getInt("administration_condition_id"))
                .sessionId(row.getString("session_id"))
                .scaleScore(getNullable(row, row.getDouble("scale_score")))
                .scaleScoreStdErr(getNullable(row, row.getDouble("scale_score_std_err")))
                .performanceLevel(getNullable(row, row.getInt("performance_level")))
                .completedAt(row.getTimestamp("completed_at").toInstant())
                .statusDate(toInstantOrNull(row.getTimestamp("status_date")))
                .deleted(row.getBoolean("deleted"))
                .deliverMode(row.getString("deliver_mode"))
                .handScoreProject(getNullable(row, row.getLong("hand_score_project")))
                .contract(row.getString("contract"))
                .testReason(row.getString("test_reason"))
                .assessmentAdminStartedAt(getNullableLocalDate(row, row.getDate("assessment_admin_started_at")))
                .startedAt(toInstantOrNull(row.getTimestamp("started_at")))
                .forceSubmittedAt(toInstantOrNull(row.getTimestamp("force_submitted_at")))
                .status(row.getString("status"))
                .itemCount(getNullable(row, row.getLong("item_count")))
                .fieldTestCount(getNullable(row, row.getLong("field_test_count")))
                .pauseCount(getNullable(row, row.getLong("pause_count")))
                .gracePeriodRestarts(getNullable(row, row.getLong("grace_period_restarts")))
                .abnormalStarts(getNullable(row, row.getLong("abnormal_starts")))
                .testWindowId(row.getString("test_window_id"))
                .testAdministratorId(row.getString("test_administrator_id"))
                .responsibleOrganizationName(row.getString("responsible_organization_name"))
                .testAdministratorName(row.getString("test_administrator_name"))
                .sessionPlatformUserAgent(row.getString("session_platform_user_agent"))
                .testDeliveryServer(row.getString("test_delivery_server"))
                .testDeliveryDb(row.getString("test_delivery_db"))
                .windowOpportunityCount(row.getString("window_opportunity_count"))
                .thetaScore(getNullable(row, row.getDouble("theta_score")))
                .thetaScoreStdErr(getNullable(row, row.getDouble("theta_score_std_err")))
                .build();
    };

    // ************************************************************************
    // Helpers for dealing with exam items
    // ************************************************************************
    protected static Instant toInstantOrNull(final Timestamp timestamp) {
        return timestamp == null ? null : timestamp.toInstant();
    }

    private static LocalDate getNullableLocalDate(final ResultSet rs, final Date localDate) throws SQLException {
        return rs.wasNull() ? null : localDate.toLocalDate();
    }
}
