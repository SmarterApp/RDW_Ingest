package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.retry.annotation.Backoff;
import org.springframework.retry.annotation.Retryable;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Repository
class JdbcStudentRepository implements StudentRepository {

    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    private final JdbcTemplate jdbcTemplate;

    @Value("${sql.studentEthnicity.create}")
    private String createStudentEthnicitySql;

    @Value("${sql.studentEthnicity.delete}")
    private String deleteStudentEthnicitySql;

    @Value("${sql.studentEthnicity.findAllIds}")
    private String findlAllStudentEthnicityIdsSql;

    @Value("${sql.student.updateImportId}")
    private String updateStudentImportIdSql;

    @Autowired
    JdbcStudentRepository(final NamedParameterJdbcTemplate namedParameterJdbcTemplate, final JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.namedParameterJdbcTemplate = namedParameterJdbcTemplate;
    }

    @Override
    @Retryable(maxAttemptsExpression = "${jdbc.retry.default.max-attempts}", backoff = @Backoff(delayExpression = "${jdbc.retry.default.delay}"))
    @Transactional
    public int upsert(final Student student, final long importId) {
        final int studentId = (int) new SimpleJdbcCall(jdbcTemplate)
                .withProcedureName("student_upsert")
                .execute(new MapSqlParameterSource()
                        .addValue("p_ssid", student.getSsid())
                        .addValue("p_last_or_surname", student.getLastOrSurname())
                        .addValue("p_first_name", student.getFirstName())
                        .addValue("p_middle_name", student.getMiddleName())
                        .addValue("p_gender_id", student.getGenderId())
                        .addValue("p_first_entry_into_us_school_at", student.getFirsEntryIntoUSSchoolAt())
                        .addValue("p_lep_entry_at", student.getLepEntryAt())
                        .addValue("p_lep_exit_at", student.getLepExitAt())
                        .addValue("p_birthday", student.getBirthday())
                        .addValue("p_import_id", importId))
                .get("p_id");

        updateEthnicity(student.getEthnicityIds(), studentId, importId);

        return studentId;
    }

    private void updateEthnicity(final List<Integer> newIds, final int studentId, final long importId) {

        if (!ethnicityIdsChanged(newIds, studentId)) return;

        namedParameterJdbcTemplate.update(deleteStudentEthnicitySql, new MapSqlParameterSource("student_id", studentId));
        if (!newIds.isEmpty()) {
            final List<SqlParameterSource> batchParameters = newArrayList();
            for (final int newId : newIds) {
                batchParameters.add(new MapSqlParameterSource("student_id", studentId).addValue("ethnicity_id", newId));
            }
            namedParameterJdbcTemplate.batchUpdate(createStudentEthnicitySql, batchParameters.toArray(new SqlParameterSource[batchParameters.size()]));
        }
        namedParameterJdbcTemplate.update(updateStudentImportIdSql, new MapSqlParameterSource("student_id", studentId).addValue("update_import_id", importId));
    }

    private boolean ethnicityIdsChanged(final List<Integer> newIds, final int studentId) {
        final List<Integer> existingIds = namedParameterJdbcTemplate.queryForList(findlAllStudentEthnicityIdsSql, new MapSqlParameterSource("student_id", studentId), Integer.class);
        if (existingIds.size() != newIds.size()) return true;

        for (final Integer existingId : existingIds) {
            if (!newIds.contains(existingId)) return true;
        }
        return false;
    }
}
