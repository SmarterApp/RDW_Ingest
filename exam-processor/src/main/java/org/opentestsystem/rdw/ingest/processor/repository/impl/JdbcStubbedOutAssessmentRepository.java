package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.util.Set;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentRepository;
import org.opentestsystem.rdw.ingest.processor.repository.StubbedOutAssessmentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;


@Repository
class JdbcStubbedOutAssessmentRepository implements StubbedOutAssessmentRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final AssessmentRepository assessmentRepository;

    @Value("${sql.assessment.create}")
    private String sqlCreate;

    @Value("${sql.assessment.createItems}")
    private String sqlCreateItems;

    @Autowired
    JdbcStubbedOutAssessmentRepository(final NamedParameterJdbcTemplate jdbcTemplate,
                                       final AssessmentRepository assessmentRepository) {
        this.jdbcTemplate = jdbcTemplate;
        this.assessmentRepository = assessmentRepository;
    }

    @Transactional
    @Override
    public Assessment create(final Assessment assessment) {

        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("natural_id", assessment.getNaturalId())
                .addValue("grade_id", assessment.getGradeId())
                .addValue("type_id", assessment.getTypeId())
                .addValue("subject_id", assessment.getSubjectId())
                .addValue("school_year", assessment.getSchoolYear());

        jdbcTemplate.update(sqlCreate, parameterSource, keyHolder);

        batchCreateItems(assessment.getItems().keySet(), keyHolder.getKey().longValue());

        return assessmentRepository.findOneByNaturalId(assessment.getNaturalId());
    }

    private void batchCreateItems(final Set<String> items, final long assessmentId) {
        if (items.isEmpty()) return;
        int batchParam = 0;

        final MapSqlParameterSource[] batchParameters = new MapSqlParameterSource[items.size()];
        for (final String item : items) {
            batchParameters[batchParam++] = new MapSqlParameterSource("natural_id", item)
                    .addValue("asmt_id", assessmentId);
        }
        jdbcTemplate.batchUpdate(sqlCreateItems, batchParameters);
    }
}