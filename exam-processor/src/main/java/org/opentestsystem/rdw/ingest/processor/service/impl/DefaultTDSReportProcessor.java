package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.trt.Examinee;
import org.opentestsystem.rdw.common.model.trt.Opportunity;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.common.model.trt.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.repository.SchoolRepository;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.repository.StubbedOutAssessmentRepository;
import org.opentestsystem.rdw.ingest.processor.repository.SubjectRepository;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentService;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamWriter;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static org.opentestsystem.rdw.ingest.common.model.ImportStatus.BAD_DATA;

@Service
class DefaultTDSReportProcessor implements TDSReportProcessor {

    private final StudentExamProcessor studentExamProcessor;
    private final AssessmentService assessmentService;
    private final ExamineeProcessor examineeProcessor;
    private final SchoolRepository schoolRepository;
    private final StudentExamWriter writer;
    //TODO: remove the stubbed out repository dependency once we can ingest assessment packages
    private final StubbedOutAssessmentRepository stubbedOutAssessmentRepository;
    private final SubjectRepository subjectRepository;

    @Autowired
    DefaultTDSReportProcessor(final StudentExamProcessor studentExamProcessor,
                              final AssessmentService assessmentService,
                              final ExamineeProcessor examineeProcessor,
                              final StudentExamWriter writer,
                              final SchoolRepository schoolRepository,
                              final SubjectRepository subjectRepository,
                              final StubbedOutAssessmentRepository stubbedOutAssessmentRepository) {
        this.studentExamProcessor = studentExamProcessor;
        this.assessmentService = assessmentService;
        this.examineeProcessor = examineeProcessor;
        this.schoolRepository = schoolRepository;
        this.writer = writer;

        this.subjectRepository = subjectRepository;
        this.stubbedOutAssessmentRepository = stubbedOutAssessmentRepository;

    }

    @Override
    //TODO: remove transactional annotation once stabbed out school/group/asmt creation is removed and clean up this method
    @Transactional
    public void process(final TDSReport report, final long importId) throws ImportException {
        try {
            final Examinee examinee = report.getExaminee();
            if (examinee == null) throw new IllegalArgumentException("Examinee may not be null");

            Assessment assessment = assessmentService.findOneForTest(report.getTest());
            if (assessment == null) assessment = createAssessment(report, importId);

            final int schoolId = schoolRepository.upsert(examineeProcessor.parseExamineeRelationship(examinee), importId);

            writer.save(studentExamProcessor.parseExam(report, schoolId, assessment), importId);

        } catch (final IllegalArgumentException e) {
            throw new ImportException(BAD_DATA, e.getMessage());
        }
    }

    private Assessment createAssessment(final TDSReport report, final long importId) {
        final Test test = report.getTest();

        final Map<String, Integer> items = newHashMap();
        for (final Opportunity.Item item : report.getOpportunity().getItem()) {
            final String naturalId = Long.toString(item.getBankKey()) + "-" + item.getKey();
            items.put(naturalId, null);
        }
        return stubbedOutAssessmentRepository.create(Assessment.builder()
                .naturalId(test.getName())
                .name(test.getTestId())
                .label(test.getTestId())
                .schoolYear((int) test.getAcademicYear())
                .gradeId(3)
                .subjectId(subjectRepository.findIdByCode(test.getSubject()))
                .typeId(test.getTestId().contains("IAB") ? AssessmentType.IAB.id() : AssessmentType.ICA.id())
                .items(items)
                .build(), importId);
    }
}
