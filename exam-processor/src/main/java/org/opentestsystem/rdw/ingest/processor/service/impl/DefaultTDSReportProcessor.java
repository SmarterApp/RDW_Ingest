package org.opentestsystem.rdw.ingest.processor.service.impl;

import java.text.ParseException;
import org.opentestsystem.rdw.ingest.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.School;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentService;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeParser;
import org.opentestsystem.rdw.ingest.processor.service.ParsedExaminee;
import org.opentestsystem.rdw.ingest.processor.service.ParsedExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.model.TDSReport;
import org.opentestsystem.rdw.utils.TenancyChain;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import static org.opentestsystem.rdw.ingest.model.ImportStatus.BAD_DATA;
import static org.opentestsystem.rdw.ingest.model.ImportStatus.UNAUTHORIZED;

@Service
public class DefaultTDSReportProcessor implements TDSReportProcessor {

    private final ExamineeParser examineeParser;
    private final StudentExamProcessor studentExamProcessor;
    private final AssessmentService assessmentService;
    private final ParsedExamineeProcessor studentProcessor;

    @Autowired
    public DefaultTDSReportProcessor(final ExamineeParser examineeParser,
                                     final StudentExamProcessor studentExamProcessor,
                                     final AssessmentService assessmentService,
                                     final ParsedExamineeProcessor studentProcessor) {

        this.examineeParser = examineeParser;
        this.studentExamProcessor = studentExamProcessor;
        this.assessmentService = assessmentService;
        this.studentProcessor = studentProcessor;
    }

    @Override
    public void process(final TDSReport report, final TenancyChain tenancyChain) throws ImportException {
        try {
            final ParsedExaminee parsedExaminee = examineeParser.parse(report.getExaminee());

            authorize(tenancyChain, parsedExaminee.getSchool());

            studentExamProcessor.process(report.getTest(),
                    report.getOpportunity(),
                    studentProcessor.process(parsedExaminee),
                    assessmentService.findOneByNaturalId(report.getTest()));

        } catch (final ParseException e) {
            throw new ImportException(BAD_DATA, e.getMessage());
        } catch (final IllegalArgumentException e) {
            throw new ImportException(BAD_DATA, e.getMessage());
        }
    }

    private void authorize(final TenancyChain tenancyChain, final School school) {
        if (tenancyChain.hasRole("ASMTDATALOAD", school.getDistrict().getStateCode(), school.getDistrict().getNaturalId(), school.getNaturalId())) return;

        throw new ImportException(UNAUTHORIZED, "user is not authorized for load data for school id [" + school.getNaturalId() + "]");
    }
}
