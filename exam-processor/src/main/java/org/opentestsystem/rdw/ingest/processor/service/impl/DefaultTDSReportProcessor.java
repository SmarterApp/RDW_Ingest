package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.ingest.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.School;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentService;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.model.Examinee;
import org.opentestsystem.rdw.model.TDSReport;
import org.opentestsystem.rdw.utils.TenancyChain;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import static org.opentestsystem.rdw.ingest.model.ImportStatus.BAD_DATA;
import static org.opentestsystem.rdw.ingest.model.ImportStatus.UNAUTHORIZED;

@Service
class DefaultTDSReportProcessor implements TDSReportProcessor {

    private final StudentExamProcessor studentExamProcessor;
    private final AssessmentService assessmentService;
    private final ExamineeProcessor examineeProcessor;

    @Autowired
    public DefaultTDSReportProcessor(final StudentExamProcessor studentExamProcessor,
                                     final AssessmentService assessmentService,
                                     final ExamineeProcessor examineeProcessor) {
        this.studentExamProcessor = studentExamProcessor;
        this.assessmentService = assessmentService;
        this.examineeProcessor = examineeProcessor;
    }

    @Override
    public void process(final TDSReport report, final TenancyChain tenancyChain) throws ImportException {
        try {
            final Examinee examinee = report.getExaminee();
            if (examinee == null) throw new IllegalArgumentException("Examinee may not be null");

            //the sequence of event is important here

            //first - authorize
            final School school = examineeProcessor.parseExamineeRelationship(examinee);
            authorize(tenancyChain, school);

            //then check if there is a matching assessment
            final Assessment assessment = assessmentService.findOneByNaturalId(report.getTest());
            //TODO: add comparison of the assessment subject, grade, year and type to the incoming test

            //now it is okay to start processing
            studentExamProcessor.process(report.getTest(), report.getOpportunity(), examineeProcessor.process(examinee, school), assessment);

        } catch (final IllegalArgumentException e) {
            throw new ImportException(BAD_DATA, e.getMessage());
        }
    }

    private void authorize(final TenancyChain tenancyChain, final School school) {
        if (tenancyChain.hasRole("ASMTDATALOAD", school.getDistrict().getStateCode(), school.getDistrict().getNaturalId(), school.getNaturalId())) return;

        throw new ImportException(UNAUTHORIZED, "user is not authorized for load data for school id [" + school.getNaturalId() + "]");
    }
}
