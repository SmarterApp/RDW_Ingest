package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentService;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.common.model.trt.Examinee;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.common.model.trt.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import static org.opentestsystem.rdw.ingest.common.model.ImportStatus.BAD_DATA;

@Service
class DefaultTDSReportProcessor implements TDSReportProcessor {

    private final StudentExamProcessor studentExamProcessor;
    private final AssessmentService assessmentService;
    private final ExamineeProcessor examineeProcessor;

    @Autowired
    DefaultTDSReportProcessor(final StudentExamProcessor studentExamProcessor,
                              final AssessmentService assessmentService,
                              final ExamineeProcessor examineeProcessor) {
        this.studentExamProcessor = studentExamProcessor;
        this.assessmentService = assessmentService;
        this.examineeProcessor = examineeProcessor;
    }

    @Override
    public void process(final TDSReport report, final long importId) throws ImportException {
        try {
            final Examinee examinee = report.getExaminee();
            if (examinee == null) throw new IllegalArgumentException("Examinee may not be null");

            // the sequence of events is important here

            // first - authorize
            final School school = examineeProcessor.parseExamineeRelationship(examinee);

            // then check if there is a matching assessment
            final Assessment assessment = assessmentService.findOneByNaturalId(report);
            //TODO: add comparison of the assessment subject, grade, year and type to the incoming test

            // now it is okay to start processing
            final Test test = report.getTest();
            final StudentExamAttributes studentExamAttributes = examineeProcessor.process(examinee, test, school, importId);
            studentExamProcessor.process(test, report.getOpportunity(), studentExamAttributes, assessment, importId);

        } catch (final IllegalArgumentException e) {
            throw new ImportException(BAD_DATA, e.getMessage());
        }
    }
}
