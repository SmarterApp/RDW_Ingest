package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.common.model.trt.Examinee;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentService;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamWriter;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import static org.opentestsystem.rdw.ingest.common.model.ImportStatus.BAD_DATA;

@Service
class DefaultTDSReportProcessor implements TDSReportProcessor {

    private final StudentExamProcessor studentExamProcessor;
    private final AssessmentService assessmentService;
    private final ExamineeProcessor examineeProcessor;
    private final StudentExamWriter writer;


    @Autowired
    DefaultTDSReportProcessor(final StudentExamProcessor studentExamProcessor,
                              final AssessmentService assessmentService,
                              final ExamineeProcessor examineeProcessor,
                              final StudentExamWriter writer) {
        this.studentExamProcessor = studentExamProcessor;
        this.assessmentService = assessmentService;
        this.examineeProcessor = examineeProcessor;
        this.writer = writer;
    }

    @Override
    public void process(final TDSReport report, final long importId) throws ImportException {
        try {
            final Examinee examinee = report.getExaminee();
            if (examinee == null) throw new IllegalArgumentException("Examinee may not be null");

            final int schoolId = examineeProcessor.parseSchoolId(examinee);
            final Exam exam = studentExamProcessor.parseExam(report, schoolId, assessmentService.findOneForTest(report.getTest()));
            final Student student = examineeProcessor.parseStudent(examinee, exam.getSchoolYear(), schoolId);

            writer.upsertExam(student, exam, importId);

        } catch (final IllegalArgumentException e) {
            throw new ImportException(BAD_DATA, e.getMessage());
        }
    }
}
