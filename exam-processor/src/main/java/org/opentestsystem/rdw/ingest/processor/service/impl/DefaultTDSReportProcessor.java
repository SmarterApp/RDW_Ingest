package org.opentestsystem.rdw.ingest.processor.service.impl;

import java.text.ParseException;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.School;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentService;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeParser;
import org.opentestsystem.rdw.ingest.processor.service.ParsedExaminee;
import org.opentestsystem.rdw.ingest.processor.service.ParsedExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.model.TDSReport;
import org.opentestsystem.rdw.utils.TenancyChain;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class DefaultTDSReportProcessor implements TDSReportProcessor {

    private final ExamineeParser examineeParser;
    private final StudentExamProcessor studentExamProcessor;
    private final AssessmentService assessmentService;
    private final ParsedExamineeProcessor studentProcessor;

    @Autowired
    public DefaultTDSReportProcessor(final ExamineeParser examineeParser,
                                     final StudentExamProcessor studentExamProcessor,
                                     final AssessmentService assessmentService,
                                     final ParsedExamineeProcessor studentProcessor) {

        this.examineeParser = examineeParser;
        this.studentExamProcessor = studentExamProcessor;
        this.assessmentService = assessmentService;
        this.studentProcessor = studentProcessor;
    }

    @Override
    public void process(final TDSReport report, final TenancyChain tenancyChain, long importId) {
        final Integer status = null;
        try {
            final ParsedExaminee parsedExaminee = examineeParser.parse(report.getExaminee());
            final School school = parsedExaminee.getSchool();

            if (!tenancyChain.hasRole("ASMTDATALOAD", school.getDistrict().getStateCode(), school.getDistrict().getNaturalId(), school.getNaturalId())) {
                //TODO: set status to an "authorization failure"
                throw new RuntimeException();
            }

            final Assessment assessment = assessmentService.findOneByNaturalId(report.getTest());
            if (assessment == null) {
                //TODO: set status to a "no assessment package failure"
                throw new RuntimeException();
            }

            studentExamProcessor.process(report.getTest(), report.getOpportunity(), studentProcessor.process(parsedExaminee), assessment);

        } catch (final ParseException e) {
            //TODO: set status to a" parse failure"
        } catch (Exception e) {
            //TODO: set status to a "generic failure" unless it is already not null
        }
        //TODO: need to update the import status and error message if needed
    }
}
