package org.opentestsystem.rdw.ingest.processor.model;

import org.opentestsystem.rdw.common.model.AssessmentType;

import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import static com.google.common.collect.Lists.newArrayList;

/**
 * An Exam representing an outcome of {@link Student} taking a test.
 * It could be of any {@link AssessmentType}
 */
public class Exam {

    private Long id;
    private int typeId;
    private Integer performanceLevel;
    private List<ExamClaim> examClaims;
    private Instant completedAt;
    private long assessmentId;
    private String asmtVersion;
    private int schoolYear;
    private Long opportunity;
    private String oppId;
    private Integer completenessId;
    private Integer administrationConditionId;
    private String sessionId;
    private List<ExamItem> examItems;
    private Double scaleScore;
    private Double scaleScoreStdErr;
    private List<Integer> accommodationIds;
    private StudentExamAttributes studentExamAttributes;
    private Instant statusDate;
    private boolean deleted;
    private String deliverMode;
    private Long handScoreProject;
    private String contract;
    private String testReason;
    private Date assessmentAdminStartedAt;
    private Instant startedAt;
    private Instant forceSubmittedAt;
    private String status;
    private Long itemCount;
    private Long fieldTestCount;
    private Long pauseCount;
    private Long gracePeriodRestarts;
    private Long abnormalStarts;
    private String testWindowId;
    private String testAdministratorId;
    private String responsibleOrganizationName;
    private String testAdministratorName;
    private String sessionPlatformUserAgent;
    private String testDeliveryServer;
    private String testDeliveryDb;
    private String windowOpportunityCount;
    private Double thetaScore;
    private Double thetaScoreStdErr;

    public Long getId() {
        return id;
    }

    public Integer getPerformanceLevel() {
        return performanceLevel;
    }

    /**
     * @return list of claims, may be empty (IAB) but won't be null
     */
    public List<ExamClaim> getExamClaims() {
        return examClaims == null ? newArrayList() : newArrayList(examClaims);
    }

    /**
     * @return a type id of the exam: IAB, ICA or Summative
     */
    public int getTypeId() {
        return typeId;
    }

    public StudentExamAttributes getStudentExamAttributes() {
        return studentExamAttributes;
    }

    public Double getScaleScore() {
        return scaleScore;
    }

    public Double getScaleScoreStdErr() {
        return scaleScoreStdErr;
    }

    public Instant getCompletedAt() {
        return completedAt;
    }

    public long getAssessmentId() {
        return assessmentId;
    }

    public String getAsmtVersion() {
        return asmtVersion;
    }

    public int getSchoolYear() {
        return schoolYear;
    }

    public Long getOpportunity() {
        return opportunity;
    }

    /**
     * @return the "oppId" value, this is a natural id from the TRT, not a db id
     */
    public String getOppId() {
        return oppId;
    }

    public Integer getCompletenessId() {
        return completenessId;
    }

    public Integer getAdministrationConditionId() {
        return administrationConditionId;
    }

    public String getSessionId() {
        return sessionId;
    }

    public List<ExamItem> getExamItems() {
        return examItems == null ? newArrayList() : examItems;
    }

    public List<Integer> getAccommodationIds() {
        return accommodationIds == null ? newArrayList() : accommodationIds;
    }

    public Instant getStatusDate() {
        return statusDate;
    }

    public boolean isDeleted() {
        return deleted;
    }

    public String getDeliverMode() {
        return deliverMode;
    }

    public Long getHandScoreProject() {
        return handScoreProject;
    }

    public String getContract() {
        return contract;
    }

    public String getTestReason() {
        return testReason;
    }

    public Date getAssessmentAdminStartedAt() {
        return assessmentAdminStartedAt;
    }

    public Instant getStartedAt() {
        return startedAt;
    }

    public Instant getForceSubmittedAt() {
        return forceSubmittedAt;
    }

    public String getStatus() {
        return status;
    }

    public Long getItemCount() {
        return itemCount;
    }

    public Long getFieldTestCount() {
        return fieldTestCount;
    }

    public Long getPauseCount() {
        return pauseCount;
    }

    public Long getGracePeriodRestarts() {
        return gracePeriodRestarts;
    }

    public Long getAbnormalStarts() {
        return abnormalStarts;
    }

    public String getTestWindowId() {
        return testWindowId;
    }

    public String getTestAdministratorId() {
        return testAdministratorId;
    }

    public String getResponsibleOrganizationName() {
        return responsibleOrganizationName;
    }

    public String getTestAdministratorName() {
        return testAdministratorName;
    }

    public String getSessionPlatformUserAgent() {
        return sessionPlatformUserAgent;
    }

    public String getTestDeliveryServer() {
        return testDeliveryServer;
    }

    public String getTestDeliveryDb() {
        return testDeliveryDb;
    }

    public String getWindowOpportunityCount() {
        return windowOpportunityCount;
    }

    public Double getThetaScore() {
        return thetaScore;
    }

    public Double getThetaScoreStdErr() {
        return thetaScoreStdErr;
    }

    /**
     * Test for shallow intrinsic-value equivalence with the given `
     * This does not test child models.
     *
     * @param other An Exam
     * @return True if the other Exam has identical intrinsic values
     */
    public boolean equivalent(final Exam other) {
        return other != null &&
                Objects.equals(typeId, other.typeId) &&
                Objects.equals(assessmentId, other.assessmentId) &&
                Objects.equals(schoolYear, other.schoolYear) &&
                Objects.equals(performanceLevel, other.performanceLevel) &&
                Objects.equals(completedAt, other.completedAt) &&
                Objects.equals(asmtVersion, other.asmtVersion) &&
                Objects.equals(opportunity, other.opportunity) &&
                Objects.equals(oppId, other.oppId) &&
                Objects.equals(completenessId, other.completenessId) &&
                Objects.equals(administrationConditionId, other.administrationConditionId) &&
                Objects.equals(sessionId, other.sessionId) &&
                Objects.equals(scaleScore, other.scaleScore) &&
                Objects.equals(scaleScoreStdErr, other.scaleScoreStdErr) &&
                studentExamAttributes.equivalent(other.studentExamAttributes) &&
                Objects.equals(statusDate, other.statusDate) &&
                Objects.equals(deleted, other.deleted) &&
                Objects.equals(deliverMode, other.deliverMode) &&
                Objects.equals(handScoreProject, other.handScoreProject) &&
                Objects.equals(contract, other.contract) &&
                Objects.equals(testReason, other.testReason) &&
                Objects.equals(assessmentAdminStartedAt, other.assessmentAdminStartedAt) &&
                Objects.equals(startedAt, other.startedAt) &&
                Objects.equals(forceSubmittedAt, other.forceSubmittedAt) &&
                Objects.equals(status, other.status) &&
                Objects.equals(itemCount, other.itemCount) &&
                Objects.equals(fieldTestCount, other.fieldTestCount) &&
                Objects.equals(pauseCount, other.pauseCount) &&
                Objects.equals(gracePeriodRestarts, other.gracePeriodRestarts) &&
                Objects.equals(abnormalStarts, other.abnormalStarts) &&
                Objects.equals(testWindowId, other.testWindowId) &&
                Objects.equals(testAdministratorId, other.testAdministratorId) &&
                Objects.equals(responsibleOrganizationName, other.responsibleOrganizationName) &&
                Objects.equals(testAdministratorName, other.testAdministratorName) &&
                Objects.equals(sessionPlatformUserAgent, other.sessionPlatformUserAgent) &&
                Objects.equals(testDeliveryServer, other.testDeliveryServer) &&
                Objects.equals(testDeliveryDb, other.testDeliveryDb) &&
                Objects.equals(windowOpportunityCount, other.windowOpportunityCount) &&
                Objects.equals(thetaScore, other.thetaScore) &&
                Objects.equals(thetaScoreStdErr, other.thetaScoreStdErr);
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * The builder for the {@link Assessment}
     */
    public static class Builder {
        private Long id;
        private int typeId;
        private Integer performanceLevel;
        private List<ExamClaim> examClaims;
        private Instant completedAt;
        private long assessmentId;
        private String asmtVersion;
        private Long opportunity;
        private String oppId;
        private Integer schoolYear;
        private Integer completenessId;
        private Integer administrationConditionId;
        private String sessionId;
        private List<ExamItem> examItems;
        private Double scaleScore;
        private Double scaleScoreStdErr;
        private List<Integer> accommodationIds;
        private StudentExamAttributes studentExamAttributes;
        private Instant statusDate;
        private boolean deleted;
        private String deliverMode;
        private Long handScoreProject;
        private String contract;
        private String testReason;
        private Date assessmentAdminStartedAt;
        private Instant startedAt;
        private Instant forceSubmittedAt;
        private String status;
        private Long itemCount;
        private Long fieldTestCount;
        private Long pauseCount;
        private Long gracePeriodRestarts;
        private Long abnormalStarts;
        private String testWindowId;
        private String testAdministratorId;
        private String responsibleOrganizationName;
        private String testAdministratorName;
        private String sessionPlatformUserAgent;
        private String testDeliveryServer;
        private String testDeliveryDb;
        private String windowOpportunityCount;
        private Double thetaScore;
        private Double thetaScoreStdErr;


        public Exam build() {
            final Exam exam = new Exam();
            exam.id = id;
            exam.typeId = typeId;
            exam.performanceLevel = performanceLevel;
            exam.examClaims = examClaims;
            exam.administrationConditionId = administrationConditionId;
            exam.completedAt = completedAt;
            exam.assessmentId = assessmentId;
            exam.asmtVersion = asmtVersion;
            exam.opportunity = opportunity;
            exam.oppId = oppId;
            exam.schoolYear = schoolYear;
            exam.completenessId = completenessId;
            exam.administrationConditionId = administrationConditionId;
            exam.sessionId = sessionId;
            exam.scaleScore = scaleScore;
            exam.scaleScoreStdErr = scaleScoreStdErr;
            exam.examItems = examItems;
            exam.accommodationIds = accommodationIds;
            exam.studentExamAttributes = studentExamAttributes;
            exam.statusDate = statusDate;
            exam.deleted = deleted;
            exam.deliverMode = deliverMode;
            exam.handScoreProject = handScoreProject;
            exam.contract = contract;
            exam.testReason = testReason;
            exam.assessmentAdminStartedAt = assessmentAdminStartedAt;
            exam.startedAt = startedAt;
            exam.forceSubmittedAt = forceSubmittedAt;
            exam.status = status;
            exam.itemCount = itemCount;
            exam.fieldTestCount = fieldTestCount;
            exam.pauseCount = pauseCount;
            exam.gracePeriodRestarts = gracePeriodRestarts;
            exam.abnormalStarts = abnormalStarts;
            exam.testWindowId = testWindowId;
            exam.testAdministratorId = testAdministratorId;
            exam.responsibleOrganizationName = responsibleOrganizationName;
            exam.testAdministratorName = testAdministratorName;
            exam.sessionPlatformUserAgent = sessionPlatformUserAgent;
            exam.testDeliveryServer = testDeliveryServer;
            exam.testDeliveryDb = testDeliveryDb;
            exam.windowOpportunityCount = windowOpportunityCount;
            exam.thetaScore = thetaScore;
            exam.thetaScoreStdErr = thetaScoreStdErr;
            return exam;
        }

        public Builder id(final Long id) {
            this.id = id;
            return this;
        }

        public Builder performanceLevel(final Integer performanceLevel) {
            this.performanceLevel = performanceLevel;
            return this;
        }

        public Builder typeId(final int typeId) {
            this.typeId = typeId;
            return this;
        }

        public Builder examClaims(final List<ExamClaim> claims) {
            this.examClaims = claims;
            return this;
        }

        public Builder schoolYear(final Integer schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder completedAt(final Instant completedAt) {
            this.completedAt = completedAt;
            return this;
        }

        public Builder assessmentId(final long assessmentId) {
            this.assessmentId = assessmentId;
            return this;
        }

        public Builder asmtVersion(final String asmtVersion) {
            this.asmtVersion = asmtVersion;
            return this;
        }

        public Builder opportunity(final Long opportunity) {
            this.opportunity = opportunity;
            return this;
        }

        public Builder oppId(final String oppId) {
            this.oppId = oppId;
            return this;
        }

        public Builder completenessId(final Integer completenessId) {
            this.completenessId = completenessId;
            return this;
        }

        public Builder scaleScore(final Double scaleScore) {
            this.scaleScore = scaleScore;
            return this;
        }

        public Builder scaleScoreStdErr(final Double scaleScoreStdErr) {
            this.scaleScoreStdErr = scaleScoreStdErr;
            return this;
        }

        public Builder administrationConditionId(final Integer administrationConditionId) {
            this.administrationConditionId = administrationConditionId;
            return this;
        }

        public Builder sessionId(final String sessionId) {
            this.sessionId = sessionId;
            return this;
        }

        public Builder examItems(final List<ExamItem> examItems) {
            this.examItems = examItems;
            return this;
        }

        public Builder accommodationIds(final Iterable<Integer> accommodationIds) {
            this.accommodationIds = newArrayList(accommodationIds);
            return this;
        }

        public Builder studentExamAttributes(final StudentExamAttributes studentExamAttributes) {
            this.studentExamAttributes = studentExamAttributes;
            return this;
        }

        public Builder statusDate(final Instant statusDate) {
            this.statusDate = statusDate;
            return this;
        }

        public Builder deleted(final boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        public Builder deliverMode(final String deliverMode) {
            this.deliverMode = deliverMode;
            return this;
        }

        public Builder handScoreProject(final Long handScoreProject) {
            this.handScoreProject = handScoreProject;
            return this;
        }

        public Builder contract(final String contract) {
            this.contract = contract;
            return this;
        }

        public Builder testReason(final String testReason) {
            this.testReason = testReason;
            return this;
        }

        public Builder assessmentAdminStartedAt(final Date assessmentAdminStartedAt) {
            this.assessmentAdminStartedAt = assessmentAdminStartedAt;
            return this;
        }

        public Builder startedAt(final Instant startedAt) {
            this.startedAt = startedAt;
            return this;
        }

        public Builder forceSubmittedAt(final Instant forceSubmittedAt) {
            this.forceSubmittedAt = forceSubmittedAt;
            return this;
        }

        public Builder status(final String status) {
            this.status = status;
            return this;
        }

        public Builder itemCount(final Long itemCount) {
            this.itemCount = itemCount;
            return this;
        }

        public Builder fieldTestCount(final Long fieldTestCount) {
            this.fieldTestCount = fieldTestCount;
            return this;
        }

        public Builder pauseCount(final Long pauseCount) {
            this.pauseCount = pauseCount;
            return this;
        }

        public Builder gracePeriodRestarts(final Long gracePeriodRestarts) {
            this.gracePeriodRestarts = gracePeriodRestarts;
            return this;
        }

        public Builder abnormalStarts(final Long abnormalStarts) {
            this.abnormalStarts = abnormalStarts;
            return this;
        }

        public Builder testWindowId(final String testWindowId) {
            this.testWindowId = testWindowId;
            return this;
        }

        public Builder testAdministratorId(final String testAdministratorId) {
            this.testAdministratorId = testAdministratorId;
            return this;
        }

        public Builder responsibleOrganizationName(final String responsibleOrganizationName) {
            this.responsibleOrganizationName = responsibleOrganizationName;
            return this;
        }

        public Builder testAdministratorName(final String testAdministratorName) {
            this.testAdministratorName = testAdministratorName;
            return this;
        }

        public Builder sessionPlatformUserAgent(final String sessionPlatformUserAgent) {
            this.sessionPlatformUserAgent = sessionPlatformUserAgent;
            return this;
        }

        public Builder testDeliveryServer(final String testDeliveryServer) {
            this.testDeliveryServer = testDeliveryServer;
            return this;
        }

        public Builder testDeliveryDb(final String testDeliveryDb) {
            this.testDeliveryDb = testDeliveryDb;
            return this;
        }

        public Builder windowOpportunityCount(final String windowOpportunityCount) {
            this.windowOpportunityCount = windowOpportunityCount;
            return this;
        }

        public Builder thetaScore(final Double thetaScore) {
            this.thetaScore = thetaScore;
            return this;
        }

        public Builder thetaScoreStdErr(final Double thetaScoreStdErr) {
            this.thetaScoreStdErr = thetaScoreStdErr;
            return this;
        }
    }
}
