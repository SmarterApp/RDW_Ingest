package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.model.StudentGroup;
import org.opentestsystem.rdw.ingest.processor.repository.StudentGroupRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.retry.annotation.Backoff;
import org.springframework.retry.annotation.Retryable;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

/**
 * JDBC implementation of {@link StudentGroupRepository}.
 */
@Repository
class JdbcStudentGroupRepository implements StudentGroupRepository {

    private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    private final JdbcTemplate jdbcTemplate;

    @Value("${sql.studentGroup.updateImportId}")
    private String sqlUpdateImportId;

    @Value("${sql.studentGroup.findIdByNameAndSchoolAndYear}")
    private String sqlFindIdByNameAndSchoolAndYear;

    @Value("${sql.studentGroup.addStudentMembership}")
    private String sqlAddStudentMembership;

    @Value("${sql.studentGroup.existsStudentInGroup}")
    private String sqlExistsStudentInGroup;

    @Autowired
    JdbcStudentGroupRepository(final NamedParameterJdbcTemplate namedParameterJdbcTemplate, final JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.namedParameterJdbcTemplate = namedParameterJdbcTemplate;
    }

    @Override
    @Retryable(maxAttemptsExpression = "${jdbc.retry.default.max-attempts}", backoff = @Backoff(delayExpression = "${jdbc.retry.default.delay}"))
    @Transactional
    public StudentGroup upsert(final StudentGroup group, final long importId) {
        final int studentId = (int) new SimpleJdbcCall(jdbcTemplate)
                .withProcedureName("student_group_upsert")
                .execute(new MapSqlParameterSource()
                        .addValue("p_name", group.getName())
                        .addValue("p_school_id", group.getSchoolId())
                        .addValue("p_school_year", group.getSchoolYear())
                        .addValue("p_subject_id", group.getSubjectId())
                        .addValue("p_active", group.isActive())
                        .addValue("p_creator", group.getCreator())
                        .addValue("p_import_id", importId))
                .get("p_id");

        group.setId(studentId);
        return group;
    }

    @Override
    public boolean existsStudentInGroup(final long studentId, final int groupId) {
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("student_group_id", groupId)
                .addValue("student_id", studentId);
        return namedParameterJdbcTemplate.queryForObject(sqlExistsStudentInGroup, parameterSource, Boolean.class);

    }

    @Override
    public Integer findIdByNameAndSchoolAndYear(final String name, final int schoolId, final int schoolYear) {
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("name", name)
                .addValue("school_id", schoolId)
                .addValue("school_year", schoolYear);
        try {
            return namedParameterJdbcTemplate.queryForObject(sqlFindIdByNameAndSchoolAndYear, parameterSource, Integer.class);
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

    @Override
    @Retryable(maxAttemptsExpression = "${jdbc.retry.default.max-attempts}", backoff = @Backoff(delayExpression = "${jdbc.retry.default.delay}"))
    @Transactional
    public void addStudentToGroups(final long studentId, final List<Integer> groupIds, long importId) {
        jdbcTemplate.batchUpdate(sqlAddStudentMembership, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(final PreparedStatement ps, final int i) throws SQLException {
                ps.setInt(1, groupIds.get(i));
                ps.setLong(2, studentId);
            }

            @Override
            public int getBatchSize() {
                return groupIds.size();
            }
        });

        jdbcTemplate.batchUpdate(sqlUpdateImportId, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(final PreparedStatement ps, final int i) throws SQLException {
                ps.setLong(1, importId);
                ps.setInt(2, groupIds.get(i));
            }

            @Override
            public int getBatchSize() {
                return groupIds.size();
            }
        });
    }
}
