package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.model.StudentGroup;
import org.opentestsystem.rdw.ingest.processor.repository.StudentGroupRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * JDBC implementation of {@link StudentGroupRepository}.
 */
@Repository
class JdbcStudentGroupRepository implements StudentGroupRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.studentGroup.create}")
    private String sqlCreate;

    @Value("${sql.studentGroup.updateImportId}")
    private String sqlUpdateImportId;

    @Value("${sql.studentGroup.findIdByNameAndSchoolAndYear}")
    private String sqlFindIdByNameAndSchoolAndYear;

    @Value("${sql.studentGroup.addStudentMembership}")
    private String sqlAddStudentMembership;

    @Autowired
    JdbcStudentGroupRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public StudentGroup create(final StudentGroup group, final long importId) {
        final KeyHolder keyHolder = new GeneratedKeyHolder();
        final SqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("name", group.getName())
                .addValue("school_id", group.getSchoolId())
                .addValue("school_year", group.getSchoolYear())
                .addValue("subject_id", group.getSubjectId())
                .addValue("active", group.isActive())
                .addValue("creator", group.getCreator())
                .addValue("created", Timestamp.from(group.getCreated()))
                .addValue("import_id", importId)
                .addValue("update_import_id", importId);

        jdbcTemplate.update(sqlCreate, parameterSource, keyHolder);

        group.setId(keyHolder.getKey().intValue());
        return group;
    }

    @Override
    public Integer findIdByNameAndSchoolAndYear(final String name, final int schoolId, final int schoolYear) {
        final MapSqlParameterSource parameterSource = new MapSqlParameterSource()
                .addValue("name", name)
                .addValue("school_id", schoolId)
                .addValue("school_year", schoolYear);
        try {
            return jdbcTemplate.queryForObject(sqlFindIdByNameAndSchoolAndYear, parameterSource, Integer.class);
        } catch (final EmptyResultDataAccessException ignored) {
            return null;
        }
    }

    @Override
    @Transactional
    public void addStudentToGroups(final long studentId, final List<Integer> groupIds, long importId) {
        jdbcTemplate.getJdbcOperations().batchUpdate(sqlAddStudentMembership, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(final PreparedStatement ps, final int i) throws SQLException {
                ps.setInt(1, groupIds.get(i));
                ps.setLong(2, studentId);
            }

            @Override
            public int getBatchSize() {
                return groupIds.size();
            }
        });

        final List<MapSqlParameterSource> batchParameters = newArrayList();
        for (final Integer groupId : groupIds) {
            batchParameters.add(new MapSqlParameterSource("update_import_id", importId)
                    .addValue("id", groupId));
        }
        jdbcTemplate.batchUpdate(sqlUpdateImportId, batchParameters.toArray(new MapSqlParameterSource[batchParameters.size()]));
    }
}
