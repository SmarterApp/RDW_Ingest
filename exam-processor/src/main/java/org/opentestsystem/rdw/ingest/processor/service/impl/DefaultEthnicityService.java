package org.opentestsystem.rdw.ingest.processor.service.impl;

import config.DataElementsConfiguration;
import org.opentestsystem.rdw.common.model.trt.Examinee;
import org.opentestsystem.rdw.common.model.trt.Examinee.ExamineeAttribute;
import org.opentestsystem.rdw.ingest.common.util.DataElementError;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.model.DataElement;
import org.opentestsystem.rdw.ingest.processor.repository.EthnicityRepository;
import org.opentestsystem.rdw.ingest.processor.service.EthnicityService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import utils.ExamParserHelper;

import java.util.List;
import java.util.Set;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.ingest.common.util.ParserHelper.toBoolean;

@Service
class DefaultEthnicityService implements EthnicityService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultEthnicityService.class);

    private final EthnicityRepository repository;
    private final Set<DataElement> optionalDataElements;

    /**
     * Constructor
     *
     * @param repository the {@link EthnicityRepository}
     */
    @Autowired
    DefaultEthnicityService(final EthnicityRepository repository,
                            final DataElementsConfiguration requiredDataElementsConfiguration) {
        this.repository = repository;
        this.optionalDataElements = requiredDataElementsConfiguration.getOptionalDataElements();
    }

    @Override
    public List<Integer> getEthnicity(final Examinee examinee, final DataElementErrorCollector errorCollector) {
        final List<Integer> ethnicityIds = newArrayList();
        final ExamParserHelper parserHelper = new ExamParserHelper(errorCollector, optionalDataElements);

        for (final String ethnicity : repository.findAllCodes()) {

            final ExamineeAttribute attribute = examinee.getBestAttribute(ethnicity);
            final DataElement dataElement = DataElement.valueOf(ethnicity);
            if (attribute == null) {
                if (!optionalDataElements.contains(dataElement)) {
                    errorCollector.add(new DataElementError(ethnicity, null, "missing " + ethnicity));
                }
                continue;
            }

            if (Boolean.TRUE == parserHelper.validate(dataElement, attribute.getValue(), toBoolean)) {
                final Integer ethnicityId = repository.findIdByCode(ethnicity);
                if (ethnicityId != null) {
                    ethnicityIds.add(ethnicityId);
                } else {
                    logger.warn("Error resolving ethnicityId for [" + ethnicity + "]");
                }
            }
        }
        return ethnicityIds;
    }
}

