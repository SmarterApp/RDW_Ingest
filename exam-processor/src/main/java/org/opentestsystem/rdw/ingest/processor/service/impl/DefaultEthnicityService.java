package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.common.model.trt.Examinee;
import org.opentestsystem.rdw.common.model.trt.Examinee.ExamineeAttribute;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.common.util.ParserHelper;
import org.opentestsystem.rdw.ingest.processor.repository.EthnicityRepository;
import org.opentestsystem.rdw.ingest.processor.service.EthnicityService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Service
class DefaultEthnicityService implements EthnicityService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultEthnicityService.class);

    private final EthnicityRepository repository;
    private final List<String> ethnicityNames;

    /**
     * Constructor
     *
     * @param repository the {@link EthnicityRepository}
     */
    @Autowired
    DefaultEthnicityService(final EthnicityRepository repository) {
        this.repository = repository;

        ethnicityNames = repository.findAllCodes();
        if (ethnicityNames.isEmpty()) logger.error("Ethnicity name list may not be empty.");
    }

    @Override
    public List<Integer> getEthnicity(final Examinee examinee, final DataElementErrorCollector errorCollector) {
        final List<Integer> ethnicityIds = newArrayList();
        final ParserHelper parserHelper = new ParserHelper(errorCollector);

        for (final String ethnicity : ethnicityNames) {
            final ExamineeAttribute attribute = examinee.getBestAttribute(ethnicity);
            if (attribute == null) {
                logger.warn("Missing ExamineeAttribute [" + ethnicity + "]");
                continue;
            }

            final Boolean value = parserHelper.parseMandatory(ethnicity, attribute.getValue(), ParserHelper::toBoolean);
            if (value == null || !value) continue;

            final Integer ethnicityId = parserHelper.validate("ethnicity", ethnicity, repository::findIdByCode);
            if (ethnicityId != null) ethnicityIds.add(ethnicityId);
        }
        return ethnicityIds;
    }
}

