package org.opentestsystem.rdw.ingest.processor.model;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;


/**
 * An item's score for an {@link AnyExam}
 */
public class ExamItem {
    // the exam item sub-scores db id (aka trait scores), these values must matched the one in the db
    private final static int EvidenceAndElaboration = 1;
    private final static int OrganizationAndPurpose = 2;
    private final static int Conventions = 3;

    private String naturalId;
    private Double score;
    private String scoreStatus;
    private String response;
    private Double maxScore;
    private Long position;
    private List<ExamItemSubScore> subScoreList;

    public String getNaturalId() {
        return naturalId;
    }

    public Double getScore() {
        return score;
    }

    public Double getMaxScore() {
        return maxScore;
    }

    public Long getPosition() {
        return position;
    }

    public String getScoreStatus() {
        return scoreStatus;
    }

    public String getResponse() {
        return response;
    }

    public ExamItemSubScore getEvidenceAndElaborationSubScore() {
        return getByTraitId(EvidenceAndElaboration);
    }

    public ExamItemSubScore getOrganizationAndPurposeSubScore() {
        return getByTraitId(OrganizationAndPurpose);
    }

    public ExamItemSubScore getConventionsSubScore() {
        return getByTraitId(Conventions);
    }

    /**
     * A quick performance test showed that using a {@link List} in this case performs better than a map
     */
    private ExamItemSubScore getByTraitId(final int traitId) {
        for (final ExamItemSubScore subScore : subScoreList) {
            if (subScore.getTraitId() == traitId) {
                return subScore;
            }
        }
        return null;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * The builder for {@link ExamItem}
     */
    public static class Builder {
        private String naturalId;
        private Double score;
        private String scoreStatus;
        private String response;
        private Double maxScore;
        private Long position;
        private List<ExamItemSubScore> subScoreList = newArrayList();

        public ExamItem build() {
            final ExamItem examItem = new ExamItem();
            examItem.naturalId = naturalId;
            examItem.score = score;
            examItem.scoreStatus = scoreStatus;
            examItem.response = response;
            examItem.maxScore = maxScore;
            examItem.position = position;
            examItem.subScoreList = subScoreList;
            return examItem;
        }

        public Builder naturalId(final String naturalId) {
            this.naturalId = naturalId;
            return this;
        }

        public Builder score(final Double score) {
            this.score = score;
            return this;
        }

        public Builder scoreStatus(final String scoreStatus) {
            this.scoreStatus = scoreStatus;
            return this;
        }

        public Builder response(final String response) {
            this.response = response;
            return this;
        }

        public Builder maxScore(final Double maxScore) {
            this.maxScore = maxScore;
            return this;
        }

        public Builder position(final Long position) {
            this.position = position;
            return this;
        }

        public Builder subScoreList(final List<ExamItemSubScore> subScoreList) {
            this.subScoreList = subScoreList == null ? newArrayList() : newArrayList(subScoreList);
            return this;
        }
    }
}
