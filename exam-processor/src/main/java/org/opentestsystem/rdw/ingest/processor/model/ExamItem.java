package org.opentestsystem.rdw.ingest.processor.model;

import java.time.Instant;
import java.util.List;
import java.util.Objects;

import static com.google.common.collect.Lists.newArrayList;

/**
 * An item's score for an {@link Exam}
 */
public class ExamItem {
    // the exam item sub-scores db id (aka trait scores), these values must matched the one in the db
    public final static int EvidenceAndElaboration = 1;
    public final static int OrganizationAndPurpose = 2;
    public final static int Conventions = 3;

    private Long id;
    private Integer itemId;
    private Double score;
    private String scoreStatus;
    private String response;
    private Integer position;
    private List<ExamItemSubScore> subScoreList;
    private Instant administeredAt;
    private Instant submittedAt;
    private Long numberOfVisits;
    private Double responseDuration;
    private String responseContentType;
    private String clientId;
    private Long pageNumber;
    private Long pageVisits;
    private Integer pageTime;
    private Integer responseTypeId;
    private Integer submitted;

    public Long getId() {
        return id;
    }

    public Integer getItemId() {
        return itemId;
    }

    public Double getScore() {
        return score;
    }

    public Integer getPosition() {
        return position;
    }

    public String getScoreStatus() {
        return scoreStatus;
    }

    public String getResponse() {
        return response;
    }

    public ExamItemSubScore getEvidenceAndElaborationSubScore() {
        return getByTraitId(EvidenceAndElaboration);
    }

    public ExamItemSubScore getOrganizationAndPurposeSubScore() {
        return getByTraitId(OrganizationAndPurpose);
    }

    public ExamItemSubScore getConventionsSubScore() {
        return getByTraitId(Conventions);
    }

    public Instant getAdministeredAt() {
        return administeredAt;
    }

    public Integer getSubmitted() {
        return submitted;
    }

    public Instant getSubmittedAt() {
        return submittedAt;
    }

    public Long getNumberOfVisits() {
        return numberOfVisits;
    }

    public Double getResponseDuration() {
        return responseDuration;
    }

    public String getResponseContentType() {
        return responseContentType;
    }

    public String getClientId() {
        return clientId;
    }

    public Long getPageNumber() {
        return pageNumber;
    }

    public Long getPageVisits() {
        return pageVisits;
    }

    public Integer getPageTime() {
        return pageTime;
    }

    public Integer getResponseTypeId() {
        return responseTypeId;
    }

    /**
     * A quick performance test showed that using a {@link List} in this case performs better than a map
     */
    private ExamItemSubScore getByTraitId(final int traitId) {
        for (final ExamItemSubScore subScore : subScoreList) {
            if (subScore.getTraitId() == traitId) {
                return subScore;
            }
        }
        return new ExamItemSubScore(traitId, null, null);
    }

    /**
     * Test for intrinsic-value equivalence with the given StudentExamAttributes.
     *
     * @param other A StudentExamAttributes
     * @return True if the other StudentExamAttributes has identical intrinsic values
     */
    public boolean equivalent(final ExamItem other) {
        return Objects.equals(itemId, other.itemId) &&
                Objects.equals(score, other.score) &&
                Objects.equals(scoreStatus, other.scoreStatus) &&
                Objects.equals(response, other.response) &&
                Objects.equals(position, other.position) &&
                Objects.equals(administeredAt, other.administeredAt) &&
                Objects.equals(submitted, other.submitted) &&
                Objects.equals(submittedAt, other.submittedAt) &&
                Objects.equals(numberOfVisits, other.numberOfVisits) &&
                Objects.equals(responseDuration, other.responseDuration) &&
                Objects.equals(responseContentType, other.responseContentType) &&
                Objects.equals(clientId, other.clientId) &&
                Objects.equals(pageNumber, other.pageNumber) &&
                Objects.equals(pageVisits, other.pageVisits) &&
                Objects.equals(pageTime, other.pageTime) &&
                Objects.equals(responseTypeId, other.responseTypeId) &&
                Objects.equals(getConventionsSubScore(), other.getConventionsSubScore()) &&
                Objects.equals(getEvidenceAndElaborationSubScore(), other.getEvidenceAndElaborationSubScore()) &&
                Objects.equals(getOrganizationAndPurposeSubScore(), other.getOrganizationAndPurposeSubScore());
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * The builder for {@link ExamItem}
     */
    public static class Builder {
        private Long id;
        private Integer itemId;
        private Double score;
        private String scoreStatus;
        private String response;
        private Integer position;
        private List<ExamItemSubScore> subScoreList = newArrayList();

        private Instant administeredAt;
        private Integer submitted;
        private Instant submittedAt;
        private Long numberOfVisits;
        private Double responseDuration;
        private String responseContentType;
        private String clientId;
        private Long pageNumber;
        private Long pageVisits;
        private Integer pageTime;
        private Integer responseTypeId;

        public ExamItem build() {
            final ExamItem examItem = new ExamItem();
            examItem.id = id;
            examItem.itemId = itemId;
            examItem.score = score;
            examItem.scoreStatus = scoreStatus;
            examItem.response = response;
            examItem.position = position;
            examItem.subScoreList = subScoreList;
            examItem.administeredAt = administeredAt;
            examItem.submitted = submitted;
            examItem.submittedAt = submittedAt;
            examItem.numberOfVisits = numberOfVisits;
            examItem.responseDuration = responseDuration;
            examItem.responseContentType = responseContentType;
            examItem.clientId = clientId;
            examItem.pageNumber = pageNumber;
            examItem.pageVisits = pageVisits;
            examItem.pageTime = pageTime;
            examItem.responseTypeId = responseTypeId;

            return examItem;
        }

        public Builder id(final Long id) {
            this.id = id;
            return this;
        }

        public Builder itemId(final Integer itemId) {
            this.itemId = itemId;
            return this;
        }

        public Builder score(final Double score) {
            this.score = score;
            return this;
        }

        public Builder scoreStatus(final String scoreStatus) {
            this.scoreStatus = scoreStatus;
            return this;
        }

        public Builder response(final String response) {
            this.response = response;
            return this;
        }

        public Builder position(final Integer position) {
            this.position = position;
            return this;
        }

        public Builder subScoreList(final List<ExamItemSubScore> subScoreList) {
            this.subScoreList = subScoreList == null ? newArrayList() : newArrayList(subScoreList);
            return this;
        }

        public Builder administeredAt(final Instant administeredAt) {
            this.administeredAt = administeredAt;
            return this;
        }

        public Builder submitted(final Integer submitted) {
            this.submitted = submitted;
            return this;
        }

        public Builder submittedAt(final Instant submittedAt) {
            this.submittedAt = submittedAt;
            return this;
        }

        public Builder numberOfVisits(final Long numberOfVisits) {
            this.numberOfVisits = numberOfVisits;
            return this;
        }

        public Builder responseDuration(final Double responseDuration) {
            this.responseDuration = responseDuration;
            return this;
        }

        public Builder responseContentType(final String responseContentType) {
            this.responseContentType = responseContentType;
            return this;
        }

        public Builder clientId(final String clientId) {
            this.clientId = clientId;
            return this;
        }

        public Builder pageNumber(final Long pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }

        public Builder pageVisits(final Long pageVisits) {
            this.pageVisits = pageVisits;
            return this;
        }

        public Builder pageTime(final Integer pageTime) {
            this.pageTime = pageTime;
            return this;
        }

        public Builder responseTypeId(final Integer responseTypeId) {
            this.responseTypeId = responseTypeId;
            return this;
        }
    }
}
