package org.opentestsystem.rdw.ingest.processor.model;

import java.util.List;
import java.util.Objects;

import static com.google.common.collect.Lists.newArrayList;

/**
 * An item's score for an {@link Exam}
 */
public class ExamItem {
    // the exam item sub-scores db id (aka trait scores), these values must matched the one in the db
    public final static int EvidenceAndElaboration = 1;
    public final static int OrganizationAndPurpose = 2;
    public final static int Conventions = 3;

    private Long id;
    private Integer itemId;
    private Double score;
    private String scoreStatus;
    private String response;
    private Integer position;
    private List<ExamItemSubScore> subScoreList;

    public Long getId() {
        return id;
    }

    public Integer getItemId() {
        return itemId;
    }

    public Double getScore() {
        return score;
    }

    public Integer getPosition() {
        return position;
    }

    public String getScoreStatus() {
        return scoreStatus;
    }

    public String getResponse() {
        return response;
    }

    public ExamItemSubScore getEvidenceAndElaborationSubScore() {
        return getByTraitId(EvidenceAndElaboration);
    }

    public ExamItemSubScore getOrganizationAndPurposeSubScore() {
        return getByTraitId(OrganizationAndPurpose);
    }

    public ExamItemSubScore getConventionsSubScore() {
        return getByTraitId(Conventions);
    }

    /**
     * A quick performance test showed that using a {@link List} in this case performs better than a map
     */
    private ExamItemSubScore getByTraitId(final int traitId) {
        for (final ExamItemSubScore subScore : subScoreList) {
            if (subScore.getTraitId() == traitId) {
                return subScore;
            }
        }
        return null;
    }

    /**
     * Test for intrinsic-value equivalence with the given StudentExamAttributes.
     *
     * @param other A StudentExamAttributes
     * @return True if the other StudentExamAttributes has identical intrinsic values
     */
    public boolean equivalent(final ExamItem other) {
        if (subScoreList.size() != other.subScoreList.size()) return false;
        for (final ExamItemSubScore subScore : subScoreList) {
            if (!other.subScoreList.contains(subScore)) return false;
        }

        return Objects.equals(itemId, other.itemId) &&
                Objects.equals(score, other.score) &&
                Objects.equals(scoreStatus, other.scoreStatus) &&
                Objects.equals(response, other.response) &&
                Objects.equals(position, other.position);
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * The builder for {@link ExamItem}
     */
    public static class Builder {
        private Long id;
        private Integer itemId;
        private Double score;
        private String scoreStatus;
        private String response;
        private Integer position;
        private List<ExamItemSubScore> subScoreList = newArrayList();

        public ExamItem build() {
            final ExamItem examItem = new ExamItem();
            examItem.id = id;
            examItem.itemId = itemId;
            examItem.score = score;
            examItem.scoreStatus = scoreStatus;
            examItem.response = response;
            examItem.position = position;
            examItem.subScoreList = subScoreList;
            return examItem;
        }

        public Builder id(final Long id) {
            this.id = id;
            return this;
        }

        public Builder itemId(final Integer itemId) {
            this.itemId = itemId;
            return this;
        }

        public Builder score(final Double score) {
            this.score = score;
            return this;
        }

        public Builder scoreStatus(final String scoreStatus) {
            this.scoreStatus = scoreStatus;
            return this;
        }

        public Builder response(final String response) {
            this.response = response;
            return this;
        }

        public Builder position(final Integer position) {
            this.position = position;
            return this;
        }

        public Builder subScoreList(final List<ExamItemSubScore> subScoreList) {
            this.subScoreList = subScoreList == null ? newArrayList() : newArrayList(subScoreList);
            return this;
        }
    }
}
