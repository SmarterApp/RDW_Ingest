package org.opentestsystem.rdw.ingest.processor.config;

import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.cache.TenantKeyGenerator;
import org.opentestsystem.rdw.multitenant.validation.ExamProcessorValidationPropertiesResolver;
import org.opentestsystem.rdw.multitenant.validation.ExamProcessorValidationPropertiesRoot;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cache.interceptor.KeyGenerator;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.Optional;

/**
 * Configuration for tenant resolution, including key generator for {@link org.opentestsystem.rdw.multitenant.cache.TenantCacheable}
 * Note that tenant resolution for messages is handled directly in {@link org.opentestsystem.rdw.ingest.processor.ExamProcessor}
 * and not via an interceptor.
 */
@Configuration
public class TenantConfiguration {

    @Bean
    public TenantIdResolver tenantIdResolver() {
        return () -> Optional.ofNullable(TenantContextHolder.getTenantId());
    }

    @Bean
    @ConfigurationProperties("tenantProperties")
    @RefreshScope
    public TenantProperties tenantProperties() {
        return new TenantProperties();
    }

    @Bean
    @RefreshScope
    public TenantKeyResolver tenantKeyResolver(final TenantProperties tenantProperties,
                                               final TenantIdResolver tenantIdResolver) {
        return new TenantKeyResolver(tenantProperties, tenantIdResolver);
    }

    @Bean
    public KeyGenerator tenantKeyGenerator(final TenantIdResolver tenantIdResolver) {
        return new TenantKeyGenerator(tenantIdResolver);
    }

    @Bean
    @ConfigurationProperties("validation")
    @RefreshScope
    ExamProcessorValidationPropertiesRoot examProcessorValidationPropertiesRoot() {
        return new ExamProcessorValidationPropertiesRoot();
    }

    @Bean
    @RefreshScope
    ExamProcessorValidationPropertiesResolver examProcessorValidationProperties(TenantKeyResolver tenantKeyResolver,
                                                                                ExamProcessorValidationPropertiesRoot aggregateReportingPropertiesRoot) {
        return new ExamProcessorValidationPropertiesResolver(tenantKeyResolver, aggregateReportingPropertiesRoot);
    }

    @Bean
    public DataElementsConfiguration dataElementsConfiguration(ExamProcessorValidationPropertiesResolver examProcessorValidationProperties) {
        return new DataElementsConfiguration(examProcessorValidationProperties);
    }
}
