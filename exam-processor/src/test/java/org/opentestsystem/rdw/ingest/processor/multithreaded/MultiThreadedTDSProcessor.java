package org.opentestsystem.rdw.ingest.processor.multithreaded;

import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.common.model.trt.XmlUtils;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.concurrent.ExecutorService;

@Component
public class MultiThreadedTDSProcessor extends MultiThreadedTest {
    private static final Logger logger = LoggerFactory.getLogger(MultiThreadedTDSProcessor.class);

    @Autowired
    private TDSReportProcessor processor;

    @Override
    protected Runnable newRunnable(ExecutorService pool) {
        return () -> {
            for (final String sample : new String[]{
                    "TDSReport.iab.sample.xml",
                    "TDSReport.ica.sample.xml",
                    "SBAC-IAB-FIXED-G4M-G-MATH-4.xml",
                    "SBAC-IAB-FIXED-G6E-LangVocab-ELA-6.xml",
                    "SBAC-IAB-FIXED-G6E-ReadLit-ELA-6.xml",
                    "SBAC-IAB-FIXED-G6M-EE.xml",
                    "SBAC-ICA-FIXED-G4M-COMBINED-2017.xml",
                    "SBAC-ICA-FIXED-G6E-COMBINED-2017.xml",
                    "SBAC-ICA-FIXED-G6M-COMBINED-2017.xml"
            }) {
                final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/" + sample));
                try {
                    processor.process(tdsReport, 1);
                } catch (Exception ex) {
                    logger.info("Exception:" + ex.getMessage());
                    if (passed) passed = false;
                    try {
                        processor.process(tdsReport, 1);
                        logger.info("Second try success");
                    } catch (Exception e) {
                        logger.info("Second try failed, exception:" + e.getMessage());
                    }
                }
            }
            pool.shutdown();
        };
    }
}
