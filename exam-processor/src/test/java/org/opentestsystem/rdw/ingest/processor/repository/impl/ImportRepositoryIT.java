package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.model.ImportStatus;
import org.opentestsystem.rdw.ingest.processor.repository.ImportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@Sql(statements = {
        "DELETE FROM import WHERE id = 99 or id = 1",
        "INSERT INTO import (id, status, content, contentType, digest) VALUES ( 99, 0, 1, 'type', 'digest')"
})
public class ImportRepositoryIT {

    @Autowired
    private ImportRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    public void itShouldUpdateImportStatusAndMessageById() {
        assertThat(countRowsInTableWhere(jdbcTemplate, "import", "id = 99 and status =  " + ImportStatus.BAD_DATA.getValue() + " and message = 'sample message'")).isZero();
        repository.updateStatusAndMessageById(99, ImportStatus.BAD_DATA, "sample message");

        assertThat(countRowsInTableWhere(jdbcTemplate, "import", "id = 99 and status =  " + ImportStatus.BAD_DATA.getValue() + " and message = 'sample message'")).isEqualTo(1);
    }

    @Test
    public void itShouldUpdateImportStatusAndNullMessageById() {
        assertThat(countRowsInTableWhere(jdbcTemplate, "import", "id = 99 and status =  " + ImportStatus.BAD_DATA.getValue() + " and message is null")).isZero();
        repository.updateStatusAndMessageById(99, ImportStatus.BAD_DATA, null);

        assertThat(countRowsInTableWhere(jdbcTemplate, "import", "id = 99 and status =  " + ImportStatus.BAD_DATA.getValue() + " and message is null")).isEqualTo(1);
    }


    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowExceptionWhenIdIsUnknown() {
        repository.updateStatusAndMessageById(1, ImportStatus.BAD_DATA, "sample message");
    }
}