package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.common.model.trt.XmlUtils;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.ExamProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@ContextConfiguration(classes = {ExamProcessorApplication.class})
@SqlGroup({
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:/examStudentAudit/PreloadSetupData.sql"})
})
public class DefaultTDSReportProcessorAuditIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private TDSReportProcessor processor;

    /**
     * The same test results used for example query output in  See <a href="http://github.com/SmarterApp/RDW/blob/develop/docs/Audit.md">Audit.md</a> are
     * used here for an integration test.  In addition to running as an integration test setup and submit scripts are provided to process into
     * a running ingest.
     * <p>
     * The objective of this test validating expected updates and auditing.
     * File format: Batch-SSID-TestType-OppId-UpdateVersion.
     * Batch is for submission order.  Files with the same batch could process in any order in the logical batch.
     * <p>
     * Each test result has comments on what is changed if it is a new version.
     * <p>
     * Expected outcomes for student changes: todo need additional details from exam child tables.
     * <p>
     * SSID001  (ethnicity=1 +3 -1 +1 sum=4  Deleted=1)  Student-update=5   exam=5  update=4
     * SSID002  (ethnicity=1 +1 -1    sum=1  Deleted=1)  Student-update=1   exam=1  update=1
     * SSID003  (ethnicity=1 +2 -1    sum=2  Deleted=1)  Student-update=1   exam=1  update=1
     * SSID004  (ethnicity=1          sum=1           )  Student-update=0   exam=2  update=0
     * -----------------------------------------------------------------------------------------
     * Student=4(                     sum=8  Deleted=3)  Student-update=7   exam=9  update=6
     */
    @Test
    public void itShouldProcessExamsAndAuditChanges() {

        final int importId = -1;
        final String[] testResults = {
                "B001-SSID001-IAB-010-V01.xml",
                "B001-SSID001-ICA-030-V01.xml",
                "B001-SSID002-IAB-040-V01.xml",
                "B001-SSID003-ICA-050-V01.xml",
                "B002-SSID001-IAB-010-V02.xml",
                "B002-SSID001-ICA-030-V02.xml",
                "B003-SSID001-ICA-035-V01.xml",
                "B004-SSID001-ICA-030-V03.xml",
                "B004-SSID002-IAB-040-V02.xml",
                "B005-SSID001-ICA-030-V04.xml",
                "B006-SSID001-ICA-060-V01.xml",
                "B006-SSID003-ICA-050-V02.xml",
                "B006-SSID004-IAB-070-V01.xml",
                "B007-SSID001-IAB-020-V01.xml",
                "B007-SSID004-ICA-080-V01.xml"};

        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(3);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(1);
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(2);

        assertThat(countRowsInTable(jdbcTemplate, "exam")).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "student")).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "student_ethnicity")).isEqualTo(0);

        assertThat(countRowsInTable(jdbcTemplate, "audit_student")).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "audit_student_ethnicity")).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "audit_exam")).isEqualTo(0);

        for (final String testResult : testResults) {
            final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/examStudentAudit/trt/" + testResult));
            processor.process(tdsReport, importId);
        }

        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(3);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(1);
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(2);

        assertThat(countRowsInTable(jdbcTemplate, "exam")).isEqualTo(9);
        assertThat(countRowsInTable(jdbcTemplate, "student")).isEqualTo(4);
        assertThat(countRowsInTable(jdbcTemplate, "student_ethnicity")).isEqualTo(8);

        assertThat(countRowsInTable(jdbcTemplate, "audit_student")).isEqualTo(7);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_student", "action='update' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID001')) " )).isEqualTo(5);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_student", "action='update' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID002')) " )).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_student", "action='update' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID003')) " )).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_student", "action='update' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID004')) " )).isEqualTo(0);

        assertThat(countRowsInTable(jdbcTemplate, "audit_student_ethnicity")).isEqualTo(3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_student_ethnicity", "action='delete' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID001')) " )).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_student_ethnicity", "action='delete' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID002')) " )).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_student_ethnicity", "action='delete' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID003')) " )).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_student_ethnicity", "action='delete' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID004')) " )).isEqualTo(0);

        assertThat(countRowsInTable(jdbcTemplate, "audit_exam")).isEqualTo(6);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_exam", "action='update' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID001')) " )).isEqualTo(4);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_exam", "action='update' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID002')) " )).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_exam", "action='update' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID003')) " )).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "audit_exam", "action='update' and student_id IN (SELECT id FROM student WHERE ssid IN ('SSID004')) " )).isEqualTo(0);
    }

}