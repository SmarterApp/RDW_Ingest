package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.common.test.TenantCacheableIT;
import org.opentestsystem.rdw.ingest.processor.repository.CompletenessRepository;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO completeness (id, code) VALUES (-99, 'test1');",
        "INSERT INTO completeness (id, code) VALUES (-88, 'test2');",
        "INSERT INTO completeness (id, code) VALUES (-55, 'test55');"
})
public class CompletenessRepositoryIT extends TenantCacheableIT {

    @Autowired
    private CompletenessRepository repository;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findIdByCode("test1")).isEqualTo(-99);
        assertThat(repository.findIdByCode("test2")).isEqualTo(-88);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowExceptionWhenNameIsUnknown() {
        repository.findIdByCode("something");
    }

    @Test
    public void itShouldCacheReturnedId() {
        assertThat(getCachedValue("completeness", "findIdByCode", "test55")).isNull();
        assertThat(repository.findIdByCode("test55")).isEqualTo(-55);
        assertThat(getCachedValue("completeness", "findIdByCode", "test55").get()).isEqualTo(-55);
    }
}
