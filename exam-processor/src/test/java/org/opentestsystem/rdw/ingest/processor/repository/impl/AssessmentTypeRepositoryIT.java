package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentTypeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Sql(statements = {
        "INSERT INTO asmt_type (id, code, name) VALUES (99, 'Code1', 'test1');",
        "INSERT INTO asmt_type (id, code, name) VALUES (88, 'Code2', 'test2');"
})
public class AssessmentTypeRepositoryIT {

    @Autowired
    private AssessmentTypeRepository repository;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldReturnCode() {
        assertThat(repository.findCodeById(99)).isEqualTo("Code1");
        assertThat(repository.findCodeById(88)).isEqualTo("Code2");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowExceptionWhenCodeIsUnknown() {
        repository.findCodeById(77);
    }

    @Test
    public void itShouldCacheReturnedCode() {
        final Cache codes = this.cacheManager.getCache("assessmentType");
        assertThat(codes.get(99)).isNull();

        assertThat(repository.findCodeById(99)).isEqualTo("Code1");

        assertThat(codes.get(99, String.class)).isEqualTo("Code1");
    }
}