package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.trt.Opportunity;
import org.opentestsystem.rdw.common.model.trt.Opportunity.Accommodation;
import org.opentestsystem.rdw.common.model.trt.Opportunity.Score;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.ingest.common.config.SbacScoreConfiguration;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.ExamClaim;
import org.opentestsystem.rdw.ingest.processor.model.ExamItem;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.model.SubjectClaimScore;
import org.opentestsystem.rdw.ingest.processor.repository.AccommodationRepository;
import org.opentestsystem.rdw.ingest.processor.repository.AdminConditionRepository;
import org.opentestsystem.rdw.ingest.processor.repository.CompletenessRepository;
import org.opentestsystem.rdw.ingest.processor.service.ExamItemProcessor;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;

import java.time.Instant;
import java.time.Year;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.springframework.test.util.AssertionErrors.fail;

public class DefaultStudentExamProcessorTest {
    private final Instant dateComplete = Instant.now();

    private TDSReport tdsReport;
    private Opportunity opportunity;

    private StudentExamProcessor examProcessor;
    private final List<ExamItem> examItems = newArrayList(mock(ExamItem.class));
    private final StudentExamAttributes studentExamAttributes = mock(StudentExamAttributes.class);

    @Before
    public void setUp() {
        final SbacScoreConfiguration.Score scaleScore = new SbacScoreConfiguration.Score();
        scaleScore.setMin(0.0);
        scaleScore.setMax(3000.0);

        final SbacScoreConfiguration scoreConfiguration = new SbacScoreConfiguration();
        scoreConfiguration.setScaleScore(scaleScore);

        final AdminConditionRepository adminConditionRepository = mock(AdminConditionRepository.class);
        final CompletenessRepository completenessRepository = mock(CompletenessRepository.class);
        final ExamItemProcessor examItemProcessor = mock(ExamItemProcessor.class);
        final AccommodationRepository accommodationRepository = mock(AccommodationRepository.class);
        final ExamineeProcessor examineeProcessor = mock(ExamineeProcessor.class);

        examProcessor = new DefaultStudentExamProcessor(scoreConfiguration, examItemProcessor, adminConditionRepository, completenessRepository, accommodationRepository, examineeProcessor);

        when(examItemProcessor.parseExamItems(any(), any(), any())).thenReturn(examItems);
        when(examineeProcessor.parseStudentExamAttributes(any(), any(Integer.class), any())).thenReturn(studentExamAttributes);
        when(adminConditionRepository.findIdByCode("NS")).thenReturn(77);
        when(completenessRepository.findIdByCode("Complete")).thenReturn(44);

        tdsReport = new TDSReport();
        final org.opentestsystem.rdw.common.model.trt.Test test = new org.opentestsystem.rdw.common.model.trt.Test();
        test.setAcademicYear(2017);
        test.setAssessmentVersion("asmtVersion");

        tdsReport.setTest(test);
        opportunity = new Opportunity();
        opportunity.setOpportunity(33);
        opportunity.setOppId("OptId33");
        opportunity.setSessionId("SessionId33");
        opportunity.setCompleteness("Complete");
        opportunity.setAdministrationCondition("NS");
        opportunity.setDateCompleted(dateComplete);

        final List<Score> scores = opportunity.getScore();
        final Score overallScore = new Score();
        overallScore.setMeasureOf("Overall");
        overallScore.setMeasureLabel("ScaleScore");
        overallScore.setValue("2033.33");
        overallScore.setStandardError("20.33");
        scores.add(overallScore);

        final Score perfLevel = new Score();
        perfLevel.setMeasureOf("Overall");
        perfLevel.setMeasureLabel("PerformanceLevel");
        perfLevel.setValue("11");
        scores.add(perfLevel);

        final Score claimScore = new Score();
        claimScore.setMeasureOf("Claim1");
        claimScore.setMeasureLabel("ScaleScore");
        claimScore.setValue("2055.55");
        claimScore.setStandardError("20.55");
        scores.add(claimScore);

        final Score claimPerfLevel = new Score();
        claimPerfLevel.setMeasureOf("Claim1");
        claimPerfLevel.setMeasureLabel("PerformanceLevel");
        claimPerfLevel.setValue("22");
        scores.add(claimPerfLevel);

        final Opportunity.Accommodation acc1 = new Accommodation();
        final Opportunity.Accommodation acc2 = new Accommodation();
        acc1.setCode("code1");
        acc2.setCode("code2");
        final List<Accommodation> accommodations = opportunity.getAccommodation();
        accommodations.add(acc1);
        accommodations.add(acc2);

        tdsReport.setOpportunity(opportunity);

        when(accommodationRepository.findIdsByCodes(newArrayList("code1", "code2"))).thenReturn(newArrayList(33));
    }

    @Test
    public void itShouldParseExamWithNoClaims() {
        final Exam exam = examProcessor.parseExam(tdsReport, 4, Assessment.builder().id(99).typeId(1).build());
        assertThat(exam.getStudentExamAttributes()).isEqualTo(studentExamAttributes);
        assertThat(exam.getAccommodationIds()).containsExactly(33);
        assertThat(exam.getAsmtVersion()).isEqualTo("asmtVersion");
        assertThat(exam.getAdministrationConditionId()).isEqualTo(77);
        assertThat(exam.getAssessmentId()).isEqualTo(99);
        assertThat(exam.getCompletedAt()).isEqualTo(dateComplete);
        assertThat(exam.getCompletenessId()).isEqualTo(44);
        assertThat(exam.getExamClaims()).isEmpty();
        assertThat(exam.getOppId()).isEqualTo("OptId33");
        assertThat(exam.getOpportunity()).isEqualTo(33);
        assertThat(exam.getPerformanceLevel()).isEqualTo(11);
        assertThat(exam.getScaleScore()).isEqualTo(2033.33);
        assertThat(exam.getScaleScoreStdErr()).isEqualTo(20.33);
        assertThat(exam.getSchoolYear()).isEqualTo(2017);
        assertThat(exam.getTypeId()).isEqualTo(1);
        assertThat(exam.getSessionId()).isEqualTo("SessionId33");
    }

    @Test
    public void itShouldParseExamWithClaims() {
        final Exam exam = examProcessor.parseExam(tdsReport, 4, Assessment.builder().claims(newArrayList(new SubjectClaimScore("Claim1", 27))).id(99).typeId(2).build());
        assertThat(exam.getExamClaims().size()).isEqualTo(1);
        final ExamClaim examClaim = exam.getExamClaims().get(0);
        assertThat(examClaim.getClaimId()).isEqualTo(27);
        assertThat(examClaim.getCategory()).isEqualTo(22);
        assertThat(examClaim.getScaleScore()).isEqualTo(2055.55);
        assertThat(examClaim.getScaleScoreStdErr()).isEqualTo(20.55);
    }

    @Test
    public void itShouldReturnErrors() {
        try {
            tdsReport.getTest().setAssessmentVersion("0123456789012345678901234567891");
            tdsReport.getTest().setAcademicYear(Year.MAX_VALUE + 1);
            opportunity.setOppId("0123456789012345678901234567890123456789012345678901234567891");
            opportunity.setSessionId("longSessionId01234567890123456789012345678901234567890123456789012345678910123456789012345678901234567890123456789012345678901234567891");
            opportunity.setCompleteness("");
            opportunity.setAdministrationCondition("");
            for (final Score score : opportunity.getScore()) {
                score.setStandardError("-1");
                score.setValue("-2000.00");
            }

            examProcessor.parseExam(tdsReport, 4, Assessment.builder().claims(newArrayList(new SubjectClaimScore("Claim1", 27))).id(99).typeId(2).build());
            fail("It should have thrown an exception");
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"Overall ScaleScore\",\"value\":\"-2000.00\",\"error\":\"invalid value, must be 0.0 - 3000.0\"}," +
                    "{\"elementName\":\"Overall ScaleScore StandardError\",\"value\":\"-1\",\"error\":\"invalid value, must be a positive number\"}," +
                    "{\"elementName\":\"Overall ScaleScore PerformanceLevel\",\"value\":\"-2000.00\",\"error\":\"For input string: \\\"-2000.00\\\"\"}," +
                    "{\"elementName\":\"Claim1 ScaleScore\",\"value\":\"-2000.00\",\"error\":\"invalid value, must be 0.0 - 3000.0\"}," +
                    "{\"elementName\":\"Claim1 ScaleScore StandardError\",\"value\":\"-1\",\"error\":\"invalid value, must be a positive number\"}," +
                    "{\"elementName\":\"Claim1 PerformanceLevel Category\",\"value\":\"-2000.00\",\"error\":\"For input string: \\\"-2000.00\\\"\"}," +
                    "{\"elementName\":\"Test AcademicYear\",\"value\":\"1000000000\",\"error\":\"invalid year\"}," +
                    "{\"elementName\":\"Test AssessmentVersion\",\"value\":\"0123456789012345678901234567891\",\"error\":\"string is too long, max length is 30\"}," +
                    "{\"elementName\":\"Opportunity oppId\",\"value\":\"0123456789012345678901234567890123456789012345678901234567891\",\"error\":\"string is too long, max length is 60\"}," +
                    "{\"elementName\":\"sessionId\",\"value\":\"longSessionId01234567890123456789012345678901234567890123456789012345678910123456789012345678901234567890123456789012345678901234567891\",\"error\":\"string is too long, max length is 128\"}" +
                    "]}");
        }
    }
}
