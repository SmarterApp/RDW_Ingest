package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;

import java.time.Instant;
import java.time.LocalDate;
import java.time.Year;
import java.util.List;
import org.opentestsystem.rdw.common.model.ScoreType;
import org.opentestsystem.rdw.common.model.trt.Opportunity;
import org.opentestsystem.rdw.common.model.trt.Opportunity.Accommodation;
import org.opentestsystem.rdw.common.model.trt.Opportunity.Score;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.config.DataElementsConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.AssessmentScore;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.ExamItem;
import org.opentestsystem.rdw.ingest.processor.model.ExamScore;
import org.opentestsystem.rdw.ingest.processor.model.ExamTarget;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.repository.AccommodationRepository;
import org.opentestsystem.rdw.ingest.processor.repository.AdminConditionRepository;
import org.opentestsystem.rdw.ingest.processor.repository.CompletenessRepository;
import org.opentestsystem.rdw.ingest.processor.service.ExamItemProcessor;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Sets.newHashSet;
import static java.time.temporal.ChronoUnit.SECONDS;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DefaultStudentExamProcessorTest {
    private final Instant dateComplete = Instant.now();
    private final Instant statusDate = dateComplete.plus(1, SECONDS);

    private TDSReport tdsReport;
    private Opportunity opportunity;

    private StudentExamProcessor examProcessor;
    private final List<ExamItem> examItems = newArrayList(mock(ExamItem.class));
    private final StudentExamAttributes studentExamAttributes = mock(StudentExamAttributes.class);
    private Score overallScaleScore;
    private Score overallThetaScore;
    private Score claimScaleScore;
    private Score claimThetaScore;
    private Score perfLevel;
    private Score claimPerfLevel;

    @Before
    public void setUp() {
        final AdminConditionRepository adminConditionRepository = mock(AdminConditionRepository.class);
        final CompletenessRepository completenessRepository = mock(CompletenessRepository.class);
        final ExamItemProcessor examItemProcessor = mock(ExamItemProcessor.class);
        final AccommodationRepository accommodationRepository = mock(AccommodationRepository.class);
        final ExamineeProcessor examineeProcessor = mock(ExamineeProcessor.class);
        final DataElementsConfiguration requiredDataElementsConfiguration = new DataElementsConfiguration();

        when(examItemProcessor.parseExamItems(any(), any(), any())).thenReturn(examItems);
        when(examineeProcessor.parseStudentExamAttributes(any(), any(Integer.class), any())).thenReturn(studentExamAttributes);
        when(adminConditionRepository.findIdByCode("NS")).thenReturn(3);
        when(completenessRepository.findIdByCode("Complete")).thenReturn(44);

        examProcessor = new DefaultStudentExamProcessor(examItemProcessor, adminConditionRepository, completenessRepository, accommodationRepository, examineeProcessor, requiredDataElementsConfiguration);

        tdsReport = new TDSReport();
        final org.opentestsystem.rdw.common.model.trt.Test test = new org.opentestsystem.rdw.common.model.trt.Test();
        test.setAcademicYear(2017);
        test.setAssessmentVersion("asmtVersion");
        test.setMode("mode");
        test.setHandScoreProject(7L);
        test.setContract("contract");

        tdsReport.setTest(test);
        opportunity = new Opportunity();
        opportunity.setOpportunity(33L);
        opportunity.setOppId("OptId33");
        opportunity.setSessionId("SessionId33");
        opportunity.setCompleteness("Complete");
        opportunity.setAdministrationCondition("NS");
        opportunity.setDateCompleted(dateComplete);
        opportunity.setStatusDate(statusDate);
        opportunity.setTestReason("reason");
        opportunity.setEffectiveDate(LocalDate.of(2006, 9, 1));
        opportunity.setStartDate(Instant.parse("2007-05-02T14:30:00Z"));
        opportunity.setDateForceCompleted(Instant.parse("2007-06-02T14:30:00Z"));
        opportunity.setStatus("status");
        opportunity.setItemCount(17L);
        opportunity.setFtCount(7L);
        opportunity.setPauseCount(5L);
        opportunity.setGracePeriodRestarts(3L);
        opportunity.setAbnormalStarts(2L);
        opportunity.setWindowId("windowId");
        opportunity.setTaId("taid");
        opportunity.setClientName("client");
        opportunity.setTaName("taName");
        opportunity.setAssessmentParticipantSessionPlatformUserAgent("assessmentParticipantSessionPlatformUserAgent");
        opportunity.setServer("server");
        opportunity.setDatabase("db");
        opportunity.setWindowOpportunity("windowOpportunity");

        final List<Score> scores = opportunity.getScore();
        overallScaleScore = createScore("Overall", "ScaleScore", "2033.33", "20.33");
        scores.add(overallScaleScore);
        overallThetaScore = createScore("Overall", "ThetaScore", "1.1", "0.33");
        scores.add(overallThetaScore);
        perfLevel = createScore("Overall", "PerformanceLevel", "11", null);
        scores.add(perfLevel);
        claimScaleScore = createScore("Claim1", "ScaleScore", "2055.55", "20.55");
        scores.add(claimScaleScore);
        claimThetaScore = createScore("Claim1", "ThetaScore", "3.55", "0.55");
        scores.add(claimThetaScore);
        claimPerfLevel = createScore("Claim1", "PerformanceLevel", "22", null);
        scores.add(claimPerfLevel);

        final Opportunity.Accommodation acc1 = new Accommodation();
        final Opportunity.Accommodation acc2 = new Accommodation();
        acc1.setCode("code1");
        acc2.setCode("code2");
        final List<Accommodation> accommodations = opportunity.getAccommodation();
        accommodations.add(acc1);
        accommodations.add(acc2);

        tdsReport.setOpportunity(opportunity);

        when(accommodationRepository.findIdsByCodes(newArrayList("code1", "code2"))).thenReturn(newArrayList(33));
    }

    @Test
    public void itShouldParseExamWithNoClaims() {
        final Assessment assessment = Assessment.builder().id(99).typeId(1).subjectId(1).build();
        final Exam exam = examProcessor.parseExam(tdsReport, 4, assessment);
        assertThat(exam.getStudentExamAttributes()).isEqualTo(studentExamAttributes);
        assertThat(exam.getAccommodationIds()).containsExactly(33);
        assertThat(exam.getAsmtVersion()).isEqualTo("asmtVersion");
        assertThat(exam.getAdministrationConditionId()).isEqualTo(3);
        assertThat(exam.getAssessmentId()).isEqualTo(99);
        assertThat(exam.getCompletedAt()).isEqualTo(dateComplete);
        assertThat(exam.getCompletenessId()).isEqualTo(44);
        assertThat(exam.getExamScores()).isEmpty();
        assertThat(exam.getOppId()).isEqualTo("OptId33");
        assertThat(exam.getOpportunity()).isEqualTo(33);
        assertThat(exam.getPerformanceLevel()).isEqualTo(11);
        assertThat(exam.getScaleScore()).isEqualTo(2033.33);
        assertThat(exam.getThetaScore()).isEqualTo(1.1);
        assertThat(exam.getScaleScoreStdErr()).isEqualTo(20.33);
        assertThat(exam.getThetaScoreStdErr()).isEqualTo(0.33);
        assertThat(exam.getSchoolYear()).isEqualTo(2017);
        assertThat(exam.getTypeId()).isEqualTo(1);
        assertThat(exam.getSessionId()).isEqualTo("SessionId33");
        assertThat(exam.getStatusDate()).isEqualTo(statusDate);
        assertThat(exam.isDeleted()).isFalse();
        assertThat(exam.getDeliverMode()).isEqualTo("mode");
        assertThat(exam.getHandScoreProject()).isEqualTo(7);
        assertThat(exam.getContract()).isEqualTo("contract");
        assertThat(exam.getTestReason()).isEqualTo("reason");
        assertThat(exam.getAssessmentAdminStartedAt()).isEqualTo(LocalDate.of(2006, 9, 1));
        assertThat(exam.getStartedAt()).isEqualTo(Instant.parse("2007-05-02T14:30:00Z"));
        assertThat(exam.getForceSubmittedAt()).isEqualTo(Instant.parse("2007-06-02T14:30:00Z"));
        assertThat(exam.getStatus()).isEqualTo("status");
        assertThat(exam.getItemCount()).isEqualTo(17);
        assertThat(exam.getFieldTestCount()).isEqualTo(7);
        assertThat(exam.getPauseCount()).isEqualTo(5);
        assertThat(exam.getGracePeriodRestarts()).isEqualTo(3);
        assertThat(exam.getAbnormalStarts()).isEqualTo(2);
        assertThat(exam.getTestWindowId()).isEqualTo("windowId");
        assertThat(exam.getTestAdministratorId()).isEqualTo("taid");
        assertThat(exam.getResponsibleOrganizationName()).isEqualTo("client");
        assertThat(exam.getTestAdministratorName()).isEqualTo("taName");
        assertThat(exam.getSessionPlatformUserAgent()).isEqualTo("assessmentParticipantSessionPlatformUserAgent");
        assertThat(exam.getTestDeliveryServer()).isEqualTo("server");
        assertThat(exam.getTestDeliveryDb()).isEqualTo("db");
        assertThat(exam.getWindowOpportunityCount()).isEqualTo("windowOpportunity");
    }

    @Test
    public void itShouldAllowNullScores() {
        overallScaleScore.setValue(null);
        overallScaleScore.setStandardError(null);
        perfLevel.setValue(null);

        overallThetaScore.setValue(null);
        overallThetaScore.setStandardError(null);

        final Assessment assessment = Assessment.builder().id(99).typeId(1).subjectId(1).build();
        final Exam exam = examProcessor.parseExam(tdsReport, 4, assessment);
        assertThat(exam.getScaleScore()).isNull();
        assertThat(exam.getScaleScoreStdErr()).isNull();
        assertThat(exam.getThetaScore()).isNull();
        assertThat(exam.getThetaScoreStdErr()).isNull();
        assertThat(exam.getPerformanceLevel()).isNull();
    }

    @Test
    public void itShouldParseExamWithClaims() {
        final Assessment assessment = Assessment.builder().id(99).typeId(2).subjectId(1)
                .scores(asmtScores()).build();
        final Exam exam = examProcessor.parseExam(tdsReport, 4, assessment);
        assertThat(exam.getExamScores().size()).isEqualTo(1);
        final ExamScore examScore = exam.getExamScores().get(0);
        assertThat(examScore.getSubjectScoreId()).isEqualTo(27);
        assertThat(examScore.getPerformanceLevel()).isEqualTo(22);
        assertThat(examScore.getScaleScore()).isEqualTo(2055.55);
        assertThat(examScore.getScaleScoreStdErr()).isEqualTo(20.55);
        assertThat(examScore.getThetaScore()).isEqualTo(3.55);
        assertThat(examScore.getThetaScoreStdErr()).isEqualTo(0.55);
    }

    @Test
    public void itShouldAllowNullClaimScores() {
        claimScaleScore.setValue(null);
        claimScaleScore.setStandardError(null);
        claimPerfLevel.setValue(null);
        claimThetaScore.setValue(null);
        claimThetaScore.setStandardError(null);

        final Assessment assessment = Assessment.builder().id(99).typeId(2).subjectId(1)
                .scores(asmtScores()).build();
        final Exam exam = examProcessor.parseExam(tdsReport, 4, assessment);
        assertThat(exam.getExamScores().size()).isEqualTo(1);
        final ExamScore examScore = exam.getExamScores().get(0);
        assertThat(examScore.getScaleScore()).isNull();
        assertThat(examScore.getScaleScoreStdErr()).isNull();
        assertThat(examScore.getThetaScore()).isNull();
        assertThat(examScore.getThetaScoreStdErr()).isNull();
        assertThat(examScore.getPerformanceLevel()).isNull();
    }

    @Test
    public void itShouldParseTargetScore() {
        opportunity.getScore().add(createScore("3|G-SRT|A", "StudentRelativeResidualScore", "0.2", null));
        opportunity.getScore().add(createScore("3|G-SRT|A", "StandardMetRelativeResidualScore", "0.5", null));

        final Assessment assessment = Assessment.builder().id(99).typeId(1).targetCodeToId(ImmutableMap.of("3|G-SRT|A", 42)).subjectId(1).build();
        final Exam exam = examProcessor.parseExam(tdsReport, 4, assessment);
        assertThat(exam.getExamTargets()).hasSize(1);
        final ExamTarget target = exam.getExamTargets().get(0);
        assertThat(target.getTargetId()).isEqualTo(42);
        assertThat(target.getStudentRelativeResidualScore()).isEqualTo(0.2);
        assertThat(target.getStandardMetRelativeResidualScore()).isEqualTo(0.5);
    }

    @Test(expected = ImportException.class)
    public void itShouldNotIgnoreUnknownTargetScore() {
        opportunity.getScore().add(createScore("3|G-SRT|A", "StudentRelativeResidualScore", "0.2", ""));
        opportunity.getScore().add(createScore("3|G-SRT|A", "StandardMetRelativeResidualScore", "0.5", ""));

        final Assessment assessment = Assessment.builder().id(99).typeId(1).subjectId(2).build();
        examProcessor.parseExam(tdsReport, 4, assessment);
    }

    @Test
    public void itShouldDeleteAResetOpportunity() {
        opportunity.setStatus("reset");
        final Assessment assessment = Assessment.builder().id(99).typeId(1).subjectId(1).build();
        final Exam exam = examProcessor.parseExam(tdsReport, 4, assessment);

        assertThat(exam.isDeleted()).isTrue();
    }

    @Test
    public void itShouldReturnErrors() {
        try {
            tdsReport.getTest().setAssessmentVersion("0123456789012345678901234567891");
            tdsReport.getTest().setAcademicYear(Year.MAX_VALUE + 1);
            tdsReport.getTest().setMode(null);
            tdsReport.getTest().setHandScoreProject(null);
            tdsReport.getTest().setContract(null);

            opportunity.setOppId("0123456789012345678901234567890123456789012345678901234567891");
            opportunity.setSessionId("longSessionId01234567890123456789012345678901234567890123456789012345678910123456789012345678901234567890123456789012345678901234567891");
            opportunity.setCompleteness("");
            opportunity.setAdministrationCondition("");
            opportunity.setTestReason(null);
            opportunity.setEffectiveDate(null);
            opportunity.setStartDate(null);
            opportunity.setDateForceCompleted(null);
            opportunity.setStatus(null);
            opportunity.setWindowId(null);
            opportunity.setTaId(null);
            opportunity.setClientName(null);
            opportunity.setTaName(null);
            opportunity.setAssessmentParticipantSessionPlatformUserAgent(null);
            opportunity.setServer(null);
            opportunity.setDatabase(null);
            opportunity.setWindowOpportunity(null);

            for (final Score score : opportunity.getScore()) {
                score.setStandardError("-1");
                score.setValue("-2000.00");
            }

            final Assessment assessment = Assessment.builder().id(99).typeId(2).subjectId(1).scores(asmtScores()).build();
            examProcessor.parseExam(tdsReport, 4, assessment);
            fail("It should have thrown an exception");
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"Overall ScaleScore\",\"value\":\"-2000.00\",\"error\":\"invalid value, must be 0.0 - 3000.0\"}," +
                    "{\"elementName\":\"Overall ScaleScore StandardError\",\"value\":\"-1\",\"error\":\"invalid value, must be a positive number\"}," +
                    "{\"elementName\":\"Overall ThetaScore StandardError\",\"value\":\"-1\",\"error\":\"invalid value, must be a positive number\"}," +
                    "{\"elementName\":\"Overall PerformanceLevel\",\"value\":\"-2000.00\",\"error\":\"For input string: \\\"-2000.00\\\"\"}," +
                    "{\"elementName\":\"Claim1 ScaleScore\",\"value\":\"-2000.00\",\"error\":\"invalid value, must be 0.0 - 3000.0\"}," +
                    "{\"elementName\":\"Claim1 ScaleScore StandardError\",\"value\":\"-1\",\"error\":\"invalid value, must be a positive number\"}," +
                    "{\"elementName\":\"Claim1 ThetaScore StandardError\",\"value\":\"-1\",\"error\":\"invalid value, must be a positive number\"}," +
                    "{\"elementName\":\"Claim1 PerformanceLevel\",\"value\":\"-2000.00\",\"error\":\"For input string: \\\"-2000.00\\\"\"}," +
                    "{\"elementName\":\"Test AcademicYear\",\"value\":\"1000000000\",\"error\":\"invalid year\"}," +
                    "{\"elementName\":\"Test AssessmentVersion\",\"value\":\"0123456789012345678901234567891\",\"error\":\"string is too long, max length is 30\"}," +
                    "{\"elementName\":\"OppId\",\"value\":\"0123456789012345678901234567890123456789012345678901234567891\",\"error\":\"string is too long, max length is 60\"}," +
                    "{\"elementName\":\"SessionId\",\"value\":\"longSessionId01234567890123456789012345678901234567890123456789012345678910123456789012345678901234567890123456789012345678901234567891\",\"error\":\"string is too long, max length is 128\"}" +
                    "]}");
        }
    }

    @Test
    public void itShouldReturnErrorsForMissingMandatoryElementsOnly() {

        tdsReport = new TDSReport();
        final org.opentestsystem.rdw.common.model.trt.Test test = new org.opentestsystem.rdw.common.model.trt.Test();
        test.setAcademicYear(2017);
        tdsReport.setTest(test);
        opportunity = new Opportunity();
        tdsReport.setOpportunity(opportunity);

        try {
            final Assessment assessment = Assessment.builder().id(99).typeId(2).subjectId(1).scores(asmtScores()).build();
            examProcessor.parseExam(tdsReport, 4, assessment);
            fail("It should have thrown an exception");
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"OppId\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"DateCompleted\",\"error\":\"invalid value\"}" +
                    "]}");
        }
    }

    @Test
    public void itShouldReturnErrorsForConfiguredRequiredElements() {
        final ExamItemProcessor examItemProcessor = mock(ExamItemProcessor.class);
        when(examItemProcessor.parseExamItems(any(), any(), any())).thenReturn(newArrayList());

        final AdminConditionRepository adminConditionRepository = mock(AdminConditionRepository.class);
        when(adminConditionRepository.findIdByCode(any())).thenReturn(null);

        final CompletenessRepository completenessRepository = mock(CompletenessRepository.class);
        when(completenessRepository.findIdByCode(any())).thenReturn(null);

        final DataElementsConfiguration requiredDataElementsConfiguration = mock(DataElementsConfiguration.class);
        when(requiredDataElementsConfiguration.getOptionalDataElements()).thenReturn(newHashSet());

        final DefaultStudentExamProcessor examProcessor =
                new DefaultStudentExamProcessor(examItemProcessor, adminConditionRepository, completenessRepository,
                        mock(AccommodationRepository.class), mock(ExamineeProcessor.class),
                        requiredDataElementsConfiguration);

        tdsReport = new TDSReport();
        final org.opentestsystem.rdw.common.model.trt.Test test = new org.opentestsystem.rdw.common.model.trt.Test();
        test.setAcademicYear(2017);

        tdsReport.setTest(test);
        opportunity = new Opportunity();
        tdsReport.setOpportunity(opportunity);

        try {
            final Assessment assessment = Assessment.builder().id(99).typeId(2).subjectId(1).scores(asmtScores()).build();
            examProcessor.parseExam(tdsReport, 4, assessment);
            fail("It should have thrown an exception");
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"ExamItems\",\"value\":\"none\",\"error\":\"must provide at least one value for ExamItems\"}," +
                    "{\"elementName\":\"OppId\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"SessionId\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"Completeness\",\"error\":\"invalid value\"}," +
                    "{\"elementName\":\"AdministrationCondition\",\"error\":\"invalid value\"}," +
                    "{\"elementName\":\"DateCompleted\",\"error\":\"invalid value\"}" +
                    "]}");
        }
    }

    @Test
    public void itShouldDefaultAdminConditionForSummative() {
        setUpWithNoOptionalDataElements();
        final Assessment assessment = Assessment.builder().id(99).typeId(3).subjectId(1).build();
        tdsReport.getOpportunity().setAdministrationCondition("");
        final Exam exam = examProcessor.parseExam(tdsReport, 4, assessment);
        assertThat(exam.getAdministrationConditionId()).isEqualTo(1);
    }

    @Test
    public void itShouldDefaultAdminConditionForInterim() {
        setUpWithNoOptionalDataElements();
        final Assessment assessment = Assessment.builder().id(99).typeId(1).subjectId(1).build();
        tdsReport.getOpportunity().setAdministrationCondition("");
        final Exam exam = examProcessor.parseExam(tdsReport, 4, assessment);
        assertThat(exam.getAdministrationConditionId()).isEqualTo(2);
    }

    private void setUpWithNoOptionalDataElements() {
        final AdminConditionRepository adminConditionRepository = mock(AdminConditionRepository.class);
        final CompletenessRepository completenessRepository = mock(CompletenessRepository.class);
        final ExamItemProcessor examItemProcessor = mock(ExamItemProcessor.class);
        final AccommodationRepository accommodationRepository = mock(AccommodationRepository.class);
        final ExamineeProcessor examineeProcessor = mock(ExamineeProcessor.class);

        final DataElementsConfiguration dataElementsConfiguration = mock(DataElementsConfiguration.class);
        when(dataElementsConfiguration.getOptionalDataElements()).thenReturn(ImmutableSet.of());

        when(examItemProcessor.parseExamItems(any(), any(), any())).thenReturn(examItems);
        when(examineeProcessor.parseStudentExamAttributes(any(), any(Integer.class), any())).thenReturn(studentExamAttributes);
        when(adminConditionRepository.findIdByCode("Valid")).thenReturn(1);
        when(adminConditionRepository.findIdByCode("SD")).thenReturn(2);
        when(adminConditionRepository.findIdByCode("NS")).thenReturn(3);
        when(completenessRepository.findIdByCode("Complete")).thenReturn(44);

        examProcessor = new DefaultStudentExamProcessor(examItemProcessor, adminConditionRepository, completenessRepository, accommodationRepository, examineeProcessor, dataElementsConfiguration);
    }

    private static List<AssessmentScore> asmtScores() {
        return newArrayList(
                AssessmentScore.builder()
                    .subjectScoreId(null)
                    .scoreType(ScoreType.OVERALL)
                    .code("OVERALL")
                    .minScore(0.0)
                    .maxScore(3000.0)
                    .build(),
                AssessmentScore.builder()
                    .subjectScoreId(27)
                    .scoreType(ScoreType.CLAIM)
                    .code("Claim1")
                    .minScore(0.0)
                    .maxScore(3000.0)
                    .build());
    }

    private static Score createScore(final String measure, final String label, final String value, final String stderr) {
        final Score score = new Score();
        score.setMeasureOf(measure);
        score.setMeasureLabel(label);
        score.setValue(value);
        score.setStandardError(stderr);
        return score;
    }
}
