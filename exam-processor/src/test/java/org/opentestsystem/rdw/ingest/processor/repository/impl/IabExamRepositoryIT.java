package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.text.ParseException;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.model.ExamItem;
import org.opentestsystem.rdw.ingest.processor.model.IabExam;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.repository.IabExamRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Sql(statements = {
        "INSERT IGNORE INTO district (id, name, natural_id) VALUES\n" +
                "  (-11, 'Sample District 1', '01247430000000');",
        "INSERT IGNORE INTO school (id, district_id, name, natural_id) VALUES\n" +
                "  (-12, -11, 'Sample School 1', '30664640124743');",
        "INSERT INTO student (id, ssid, last_or_surname, first_name, middle_name, gender_id, ethnicity_id, first_entry_into_us_school_at, lep_entry_at, lep_exit_at, birthday) VALUES\n" +
                "  (-11, '6666666666', 'LastName6', 'FirstName6', 'MiddleName6', 1, 4, '2015-09-01', null, null, '2006-01-01');",
        "INSERT INTO asmt (id, natural_id, grade_id,type_id, subject_id, academic_year, name, label, version) VALUES\n" +
                "  (-1, 'SBAC)SBAC-ICA-FIXED-G5E-COMBINED-2017-Winter-2016-2017', 5, 1, 2, 2016, 'SBAC-ICA-FIXED-G5E-COMBINED-2017', 'Grade 5 ELA', '9831');\n",
})
public class IabExamRepositoryIT {

    @Autowired
    private IabExamRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private final String examStudentWhereSql = "student_id = -11 and " +
            "economic_disadvantage = 1 and " +
            "eng_prof_lvl = 'engl prof' and " +
            "grade_id = 1 and " +
            "iep = 1 and " +
            "language_code = 'CDE' and " +
            "lep = 0 and " +
            "migrant_status = 0 and " +
            "prim_disability_type = 'PD' and " +
            "school_id = -12 and " +
            "section504 = 1 and " +
            "t3_program_type = 't3'";

    private final String examWhereSql = "category = 5 and " +
            "administration_condition_id = 1 and " +
            "asmt_version = '345' and " +
            "asmt_id = -1 and " +
            "completed_at = '2007-01-02' and " +
            "completeness_id = 1 and " +
            "opportunity = 7 and " +
            "cast(scale_score as decimal(5,2)) =  77.7 and " +
            "cast(scale_score_std_err as decimal(5,2)) =  6.6 and " +
            "session_id =  'session' and " +
            "status =  'status' and " +
            "validity = 0 ";

    private final String examItem1WhereSql = "item_key = 37 and bank_key = '375' and cast(score as decimal(5,2)) = 3.7 and score_status = 'status A' and response = 'test response A'";
    private final String examItem2WhereSql = "item_key = 38 and bank_key = '378' and cast(score as decimal(5,2)) = 7.8 and score_status = 'status B' and response = 'test response B'";

    private IabExam.Builder builder;

    @Before
    public void setUp() throws ParseException {

        builder = IabExam.builder()
                .withCategory(5)
                .withAdministrationConditionId(1)
                .withAsmtVersion("345")
                .withAssessmentId(-1)
                .withAvailableAccommodations(null) //TODO: add test when accomodation conditions are implemented
                .withCompletedAt("2007-01-02")
                .withCompleteness(1)
                .withOpportunity(7)
                .withScaleScore(77.7f)
                .withScaleScoreStdErr(6.6f)
                .withSessionId("session")
                .withStatus("status")
                .withValid(false)
                .withStudentAttributes(
                        StudentExamAttributes.builder()
                                .withStudentId(-11L)
                                .withEconomicDisadvantage(true)
                                .withEngProfLvl("engl prof")
                                .withGradeId(1)
                                .withIdeaIndicator(true)
                                .withLanguageCode("CDE")
                                .withLep(false)
                                .withMigrantStatus(false)
                                .withPrimDisabilityType("PD")
                                .withResponsibleSchoolId(-12)
                                .withSection504(true)
                                .withT3ProgramType("t3").build());

        final List<ExamItem> items = newArrayList();
        items.add(new ExamItem(37L, "375", 3.7, "status A", "test response A"));
        items.add(new ExamItem(38L, "378", 7.8, "status B", "test response B"));

        builder.withExamItems(items);
    }

    @Test
    public void itShouldCreateExamsWithNoItems() {

        builder.withExamItems(null);

        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam_student", examStudentWhereSql)).isEqualTo(0);
        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam", examWhereSql)).isEqualTo(0);

        final long examId = repository.create(builder.build());
        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam_student", examStudentWhereSql)).isEqualTo(1);

        final long examStudentId = jdbcTemplate.queryForObject("select id from iab_exam_student where " + examStudentWhereSql, Long.class);
        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam", examWhereSql + " and iab_exam_student_id =  " + examStudentId)).isEqualTo(1);

        assertThat(countRowsInTable(jdbcTemplate, "iab_exam_item")).isEqualTo(0);

        // verify that another request to create the same exam will insert a new record
        assertThat(repository.create(builder.build())).isNotEqualTo(examId);
        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam_student", examStudentWhereSql)).isEqualTo(2);
    }

    @Test
    public void itShouldCreateExams() {
        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam_student", examStudentWhereSql)).isEqualTo(0);
        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam", examWhereSql)).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "iab_exam_item")).isEqualTo(0);

        final long examId = repository.create(builder.build());
        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam_student", examStudentWhereSql)).isEqualTo(1);

        final long examStudentId = jdbcTemplate.queryForObject("select id from iab_exam_student where " + examStudentWhereSql, Long.class);
        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam", examWhereSql + " and iab_exam_student_id =  " + examStudentId)).isEqualTo(1);

        assertThat(countRowsInTable(jdbcTemplate, "iab_exam_item")).isEqualTo(2);

        assertThat(countRowsInTable(jdbcTemplate, "iab_exam_item")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam_item", examItem1WhereSql + " and iab_exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam_item", examItem2WhereSql + " and iab_exam_id = " + examId)).isEqualTo(1);

        // verify that another request to create the same exam will insert a new record
        assertThat(repository.create(builder.build())).isNotEqualTo(examId);
        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam_student", examStudentWhereSql)).isEqualTo(2);

        assertThat(countRowsInTableWhere(jdbcTemplate, "iab_exam", examWhereSql)).isEqualTo(2);
        assertThat(countRowsInTable(jdbcTemplate, "iab_exam_item")).isEqualTo(4);
    }
}