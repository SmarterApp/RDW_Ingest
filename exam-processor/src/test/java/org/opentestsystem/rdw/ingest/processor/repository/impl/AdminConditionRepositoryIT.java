package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import org.opentestsystem.rdw.ingest.processor.repository.AdminConditionRepository;

import static org.assertj.core.api.Assertions.assertThat;

@Import(JdbcAdminConditionRepository.class)
@Sql(statements = {
        "INSERT INTO administration_condition (id, code) VALUES (-99, 'test1');",
        "INSERT INTO administration_condition (id, code) VALUES (-88, 'test2');",
        "INSERT INTO administration_condition (id, code) VALUES (-55, 'test55');"
})
public class AdminConditionRepositoryIT extends TenantAwareIT {

    @Autowired
    private AdminConditionRepository repository;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findIdByCode("test1")).isEqualTo(-99);
        assertThat(repository.findIdByCode("test2")).isEqualTo(-88);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowExceptionWhenNameIsUnknown() {
        repository.findIdByCode("something");
    }

    @Test
    public void itShouldCacheReturnedId() {
        assertThat(getCachedValue("adminCondition", "findIdByCode", "test55")).isNull();
        assertThat(repository.findIdByCode("test55")).isEqualTo(-55);
        assertThat(getCachedValue("adminCondition", "findIdByCode", "test55").get()).isEqualTo(-55);
    }
}
