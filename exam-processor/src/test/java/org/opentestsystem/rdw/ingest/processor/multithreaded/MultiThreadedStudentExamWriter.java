package org.opentestsystem.rdw.ingest.processor.multithreaded;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.model.StudentGroup;
import org.opentestsystem.rdw.ingest.processor.repository.StudentGroupRepository;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.time.LocalDate;

import static com.google.common.collect.Lists.newArrayList;

@Profile("mtTest")
@Component
public class MultiThreadedStudentExamWriter extends MultiThreadedTest {

    @Autowired
    private StudentExamWriter examWriter;

    @Autowired
    private StudentRepository studentRepository;

    @Autowired
    private StudentGroupRepository studentGroupRepository;

    @Autowired
    private NamedParameterJdbcTemplate jdbcTemplate;

    private Exam.Builder examBuilder;
    private Student student;

    @Override
    protected void before() {
        final int schoolId = createSchool();

        final StudentGroup group1 = newGroup("name1", schoolId);
        final StudentGroup group2 = newGroup("name2", schoolId);
        final StudentGroup group3 = newGroup("name3", schoolId);

        studentGroupRepository.upsert(group1, 1);
        studentGroupRepository.upsert(group2, 1);
        studentGroupRepository.upsert(group3, 1);

        student = Student.builder()
                .ssid("6666666669")
                .firstName("FirstName6")
                .lastOrSurname("LastName6")
                .middleName("MiddleName6")
                .birthday(LocalDate.parse("2006-07-08"))
                .firsEntryIntoUSSchoolAt(LocalDate.parse("2015-09-02"))
                .lepEntryAt(null)
                .lepExitAt(null)
                .genderId(1)
                .groups(newArrayList(group1, group2, group3))
                .build();

        examBuilder = Exam.builder()
                .typeId(AssessmentType.ICA.id())
                .performanceLevel(5)
                .administrationConditionId(1)
                .asmtVersion("345")
                .assessmentId(createAsmt())
                .completedAt(Instant.parse("2007-01-02T14:30:00Z"))
                .schoolYear(2015)
                .completenessId(1)
                .opportunity(7L)
                .oppId("22840351")
                .scaleScore(77.7)
                .scaleScoreStdErr(6.6)
                .sessionId("session")
                .deleted(false)
                .studentExamAttributes(StudentExamAttributes.builder()
                        .economicDisadvantage(true)
                        .engProfLvl("engl prof")
                        .gradeId(1)
                        .ideaIndicator(true)
                        .languageId(0)
                        .lep(false)
                        .migrantStatus(false)
                        .primDisabilityType("PD")
                        .responsibleSchoolId(schoolId)
                        .section504(true)
                        .t3ProgramType("t3")
                        .build());
    }

    @Override
    protected void work() {
        examWriter.upsert(student, examBuilder.oppId(new Float(Math.random()).toString()).build(), 1);
    }

    @Override
    protected void after() {
        final int studentId = studentRepository.upsert(student, 1);
        logger.info("student id " + studentId);
    }

    private StudentGroup newGroup(final String name, final int schoolId) {
        return StudentGroup.builder()
                .name(name)
                .schoolId(schoolId)
                .schoolYear(2017)
                .active(true)
                .creator("test")
                .created(Instant.now())
                .build();
    }

    private long createAsmt() {
        final KeyHolder keyHolder = new GeneratedKeyHolder();
        jdbcTemplate.update("INSERT INTO asmt (natural_id, name, label, grade_id, type_id, subject_id, school_year, import_id, update_import_id)\n" +
                " VALUES ('testId', 'test name', 'test label', 3, 1, 1, 2015, 1, 1);", new MapSqlParameterSource(), keyHolder);
        return keyHolder.getKey().longValue();
    }
}
