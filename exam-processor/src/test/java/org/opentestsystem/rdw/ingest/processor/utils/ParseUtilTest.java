package org.opentestsystem.rdw.ingest.processor.utils;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.util.DataElementError;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;

import java.text.ParseException;
import java.time.LocalDate;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.parseMandatoryBoolean;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.parseMandatoryDate;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.parseMandatoryString;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.parseOptionalDouble;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.parseOptionalInteger;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.toBoolean;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.toDate;

public class ParseUtilTest {

    @Test
    public void ItShouldParseToBoolean() throws ParseException {
        assertThat(toBoolean("yes")).isEqualTo(true);
        assertThat(toBoolean("YES")).isEqualTo(true);
        assertThat(toBoolean("Yes")).isEqualTo(true);
        assertThat(toBoolean("Y")).isEqualTo(true);
        assertThat(toBoolean("y")).isEqualTo(true);

        assertThat(toBoolean("No")).isEqualTo(false);
        assertThat(toBoolean("NO")).isEqualTo(false);
        assertThat(toBoolean("no")).isEqualTo(false);
        assertThat(toBoolean("n")).isEqualTo(false);
        assertThat(toBoolean("N")).isEqualTo(false);
    }

    @Test(expected = IllegalArgumentException.class)
    public void ItShouldThrowUnsupportedValueForBoolean() throws ParseException {
        toBoolean("something");
    }

    @Test(expected = IllegalArgumentException.class)
    public void ItShouldThrowUnsupportedForNull() throws ParseException {
        toBoolean(null);
    }

    @Test
    public void ItShouldParseToDate() throws ParseException {
        assertThat(toDate("2015-09-07").getYear()).isEqualTo(2015);
        assertThat(toDate("2015-09-07").getMonthValue()).isEqualTo(9);
        assertThat(toDate("2000-09-07").getDayOfMonth()).isEqualTo(7);
    }

    @Test(expected = IllegalArgumentException.class)
    public void ItShouldThrowUnsupportedValueForDate() throws ParseException {
        toBoolean("07-01-2000");
    }

    @Test
    public void ItShouldParseMandatoryString() {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseMandatoryString("sample", "test", errorCollector)).isEqualTo("sample");
        assertThat(errorCollector.isEmpty()).isTrue();
    }

    @Test
    public void ItShouldParseMandatoryDate() throws ParseException {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseMandatoryDate("2001-01-01", "test", errorCollector)).isEqualTo(LocalDate.parse("2001-01-01"));
        assertThat(errorCollector.isEmpty()).isTrue();
    }

    @Test
    public void ItShouldParseMandatoryBoolean() {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseMandatoryBoolean("yes", "test", errorCollector)).isEqualTo(true);
        assertThat(errorCollector.isEmpty()).isTrue();
    }

    @Test
    public void ItShouldAddErrorOnParseMandatoryStringFailure() {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseMandatoryString("   ", "test", errorCollector)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
        assertThat(errorCollector.contains(new DataElementError("test", "   ", "value may not be blank"))).isTrue();
    }

    @Test
    public void ItShouldAddErrorOnParseMandatoryDateFailure() {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseMandatoryDate("bad data", "test", errorCollector)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
        assertThat(errorCollector.contains(new DataElementError("test", "bad data", "Text \u0027bad data\u0027 could not be parsed at index 0"))).isTrue();
    }

    @Test
    public void ItShouldAddErrorOnParseMandatoryBooleanFailure() {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseMandatoryBoolean("bad data", "test", errorCollector)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
        assertThat(errorCollector.contains(new DataElementError("test", "bad data", "an invalid value [bad data]"))).isTrue();
    }

    @Test
    public void ItShouldParseOptionalDouble() {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseOptionalDouble("1.1", "test", errorCollector)).isEqualTo(1.1);
        assertThat(errorCollector.isEmpty()).isTrue();
    }

    @Test
    public void ItShouldAddErrorOnParseOptionalDoubleFailure() {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseOptionalDouble("bad data", "test", errorCollector)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
        assertThat(errorCollector.contains(new DataElementError("test", "bad data", "For input string: \"bad data\""))).isTrue();
    }

    @Test
    public void ItShouldNotAddErrorOnParseOptionalDoubleWithNullOrBlank() {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseOptionalDouble("", "test", errorCollector)).isNull();
        assertThat(errorCollector.isEmpty()).isTrue();

        assertThat(parseOptionalDouble("  ", "test", errorCollector)).isNull();
        assertThat(errorCollector.isEmpty()).isTrue();

        assertThat(parseOptionalDouble(null, "test", errorCollector)).isNull();
        assertThat(errorCollector.isEmpty()).isTrue();
    }

    @Test
    public void ItShouldParseOptionalInteger() {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseOptionalInteger("1", "test", errorCollector)).isEqualTo(1);
        assertThat(errorCollector.isEmpty()).isTrue();
    }

    @Test
    public void ItShouldAddErrorOnParseOptionaIntegerFailure() {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseOptionalInteger("bad data", "test", errorCollector)).isNull();
        assertThat(errorCollector.size()).isEqualTo(1);
        assertThat(errorCollector.contains(new DataElementError("test", "bad data", "For input string: \"bad data\""))).isTrue();
    }

    @Test
    public void ItShouldNotAddErrorOnParseOptionalIntegerWithNullOrBlank() {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        assertThat(parseOptionalInteger("", "test", errorCollector)).isNull();
        assertThat(errorCollector.isEmpty()).isTrue();

        assertThat(parseOptionalInteger("  ", "test", errorCollector)).isNull();
        assertThat(errorCollector.isEmpty()).isTrue();

        assertThat(parseOptionalInteger(null, "test", errorCollector)).isNull();
        assertThat(errorCollector.isEmpty()).isTrue();
    }
}