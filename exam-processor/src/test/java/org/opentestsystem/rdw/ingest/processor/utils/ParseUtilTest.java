package org.opentestsystem.rdw.ingest.processor.utils;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.processor.service.DataElementError;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.parseMandatoryValue;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.toBoolean;
import static org.opentestsystem.rdw.ingest.processor.utils.ParseUtil.toDate;

public class ParseUtilTest {

    @Test
    public void ItShouldParseToBoolean() throws ParseException {
        assertThat(toBoolean("yes")).isEqualTo(true);
        assertThat(toBoolean("YES")).isEqualTo(true);
        assertThat(toBoolean("Yes")).isEqualTo(true);
        assertThat(toBoolean("Y")).isEqualTo(true);
        assertThat(toBoolean("y")).isEqualTo(true);


        assertThat(toBoolean("No")).isEqualTo(false);
        assertThat(toBoolean("NO")).isEqualTo(false);
        assertThat(toBoolean("no")).isEqualTo(false);
        assertThat(toBoolean("n")).isEqualTo(false);
        assertThat(toBoolean("N")).isEqualTo(false);
    }

    @Test(expected = IllegalArgumentException.class)
    public void ItShouldThrowUnsupportedValueForBoolean() throws ParseException {
        toBoolean("something");
    }

    @Test(expected = IllegalArgumentException.class)
    public void ItShouldThrowUnsupportedForNull() throws ParseException {
        toBoolean(null);
    }

    @Test
    public void ItShouldParseToDate() throws ParseException {
        assertThat(toDate("2000-01-07")).isEqualTo(new SimpleDateFormat("yyyyy-mm-dd").parse("2000-01-07"));
    }

    @Test(expected = IllegalArgumentException.class)
    public void ItShouldThrowUnsupportedValueForDate() throws ParseException {
        toBoolean("07-01-2000");
    }

    @Test
    public void ItShouldParseMandatoryString() {
        final List<DataElementError> elementErrors = newArrayList();

        assertThat(parseMandatoryValue("sample", "test", String.class, elementErrors)).isEqualTo("sample");
        assertThat(elementErrors).isEmpty();
    }

    @Test
    public void ItShouldParseMandatoryDate() throws ParseException {
        final List<DataElementError> elementErrors = newArrayList();

        assertThat(parseMandatoryValue("2001-01-01", "test", Date.class, elementErrors)).isEqualTo(new SimpleDateFormat("yyyyy-mm-dd").parse("2001-01-01"));
        assertThat(elementErrors).isEmpty();
    }

    @Test
    public void ItShouldParseMandatoryBoolean() {

        final List<DataElementError> elementErrors = newArrayList();

        assertThat(parseMandatoryValue("yes", "test", Boolean.class, elementErrors)).isEqualTo(true);
        assertThat(elementErrors).isEmpty();
    }

    @Test
    public void ItShouldAddErrorOnParseMandatoryStringFailure() {
        final List<DataElementError> elementErrors = newArrayList();

        assertThat(parseMandatoryValue("   ", "test", String.class, elementErrors)).isNull();
        assertThat(elementErrors).containsExactly(new DataElementError("test", "   ", "value may not be blank"));
    }

    @Test
    public void ItShouldAddErrorOnParseMandatoryDateFailure() {
        final List<DataElementError> elementErrors = newArrayList();

        assertThat(parseMandatoryValue("bad data", "test", Date.class, elementErrors)).isNull();
        assertThat(elementErrors).containsExactly(new DataElementError("test", "bad data", "Unparseable date: \"bad data\""));
    }

    @Test
    public void ItShouldAddErrorOnParseMandatoryBooleanFailure() {
        final List<DataElementError> elementErrors = newArrayList();

        assertThat(parseMandatoryValue("bad data", "test", Boolean.class, elementErrors)).isNull();
        assertThat(elementErrors).containsExactly(new DataElementError("test", "bad data", "an invalid value [bad data]"));
    }
}