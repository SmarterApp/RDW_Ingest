package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.model.ClaimTarget;
import org.opentestsystem.rdw.ingest.processor.repository.ClaimTargetRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (-99, 1, 'C1', 'Claim 1', 'Claim');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (-98, 2, 'C2', 'Claim 2', 'Claim');",
        "INSERT INTO target (id, claim_id, natural_id, code, description) VALUES (-89, -99, 'T1|1-2', '1-2', 'Target');",
        "INSERT INTO target (id, claim_id, natural_id, code, description) VALUES (-88, -99, 'T2|A', 'A', 'Target');",
        "INSERT INTO target (id, claim_id, natural_id, code, description) VALUES (-87, -98, 'T3|R-B', 'R-B', 'Target');",
})
public class ClaimTargetRepositoryIT {

    @Autowired
    private ClaimTargetRepository repository;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldFindBySubject() {
        assertThat(repository.findBySubjectId(1).stream().filter(claimTarget -> claimTarget.getId() < 0).map(ClaimTarget::getCode))
                .containsExactlyInAnyOrder("C1|T1|1-2", "C1|T2|A");
        assertThat(repository.findBySubjectId(2).stream().filter(claimTarget -> claimTarget.getId() < 0).map(ClaimTarget::getCode))
                .containsExactly("C2|T3|R-B");
    }

    @Test
    public void itShouldCache() {
        final Cache claimTargets = this.cacheManager.getCache("subjectClaimTargets");
        assertThat(claimTargets.get(1)).isNull();
        assertThat(claimTargets.get(2)).isNull();

        assertThat(repository.findBySubjectId(1)).isNotEmpty();

        assertThat(claimTargets.get(1)).isNotNull();
        assertThat(claimTargets.get(2)).isNull();
    }
}