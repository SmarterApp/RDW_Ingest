package org.opentestsystem.rdw.ingest.processor.service.impl;


import java.util.Map;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.configuration.data.CacheConfiguration;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentTypeRepository;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentTypeService;
import org.opentestsystem.rdw.ingest.processor.service.impl.DefaultAssessmentTypeServiceTest.TestAssessmentTypeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.context.annotation.Profile;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@ContextConfiguration(classes = {CacheConfiguration.class, DefaultAssessmentTypeService.class, TestAssessmentTypeRepository.class})
public class DefaultAssessmentTypeServiceTest {

    @Autowired
    private AssessmentTypeService service;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldGetCodeAndCacheIt() {
        final Cache codes = this.cacheManager.getCache("assessmentType");
        assertThat(codes.get(77)).isNull();

        assertThat(service.toCode(77)).isEqualTo("code77");

        assertThat(codes.get(77, String.class)).isEqualTo("code77");
        assertThat(service.toCode(77)).isEqualTo("code77");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowException() {
        service.toCode(-1);
    }

    @Profile("test")
    public static class TestAssessmentTypeRepository implements AssessmentTypeRepository {
        private final Map<Integer, Integer> callHistory = newHashMap();

        @Override
        public String toCode(final int id) {
            if (callHistory.containsKey(id)) return "duplicate call";
            if (id < 0) return null;
            return "code" + id;
        }
    }
}