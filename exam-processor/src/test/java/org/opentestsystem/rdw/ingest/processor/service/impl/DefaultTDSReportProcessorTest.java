package org.opentestsystem.rdw.ingest.processor.service.impl;

import java.text.ParseException;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.District;
import org.opentestsystem.rdw.ingest.processor.model.School;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentService;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeParser;
import org.opentestsystem.rdw.ingest.processor.service.ParsedExaminee;
import org.opentestsystem.rdw.ingest.processor.service.ParsedExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.model.Examinee;
import org.opentestsystem.rdw.model.Opportunity;
import org.opentestsystem.rdw.model.TDSReport;
import org.opentestsystem.rdw.utils.TenancyChain;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;


@RunWith(SpringRunner.class)
@SpringBootTest
public class DefaultTDSReportProcessorTest {

    private TDSReportProcessor processor;

    private ExamineeParser examineeParser;
    private StudentExamProcessor studentExamProcessor;
    private AssessmentService assessmentService;
    private ParsedExamineeProcessor studentProcessor;

    private TDSReport tdsReport;
    private Examinee examinee;
    private School school;

    @Before
    public void setUp() {
        examineeParser = mock(ExamineeParser.class);
        studentExamProcessor = mock(StudentExamProcessor.class);
        assessmentService = mock(AssessmentService.class);
        studentProcessor = mock(ParsedExamineeProcessor.class);

        processor = new DefaultTDSReportProcessor(examineeParser, studentExamProcessor, assessmentService, studentProcessor);

        tdsReport = mock(TDSReport.class);
        examinee = mock(Examinee.class);
        when(tdsReport.getExaminee()).thenReturn(examinee);

        school = School.builder()
                .withName("Sample School 1")
                .withNaturalId("30664640124743")
                .withDistrict(District.builder().withNaturalId("01247430000000").withName("Sample District 1").withStateCode("SC").build())
                .build();
    }

    @Test
    public void itShouldProcessTDSReport() throws ParseException {

        final org.opentestsystem.rdw.model.Test test = mock(org.opentestsystem.rdw.model.Test.class);
        final Opportunity opportunity = mock(Opportunity.class);
        when(tdsReport.getTest()).thenReturn(test);
        when(tdsReport.getOpportunity()).thenReturn(opportunity);
        when(tdsReport.getExaminee()).thenReturn(examinee);

        final ParsedExaminee parsedExaminee = mock(ParsedExaminee.class);
        when(examineeParser.parse(any(Examinee.class))).thenReturn(parsedExaminee);
        when(parsedExaminee.getSchool()).thenReturn(school);

        final StudentExamAttributes studentExamAttributes = mock(StudentExamAttributes.class);
        when(studentProcessor.process(parsedExaminee)).thenReturn(studentExamAttributes);

        final Assessment assessment = mock(Assessment.class);
        when(assessmentService.findOneByNaturalId(test)).thenReturn(assessment);

        final TenancyChain tenancyChain = mock(TenancyChain.class);
        when(tenancyChain.hasRole("ASMTDATALOAD", school.getDistrict().getStateCode(), school.getDistrict().getNaturalId(), school.getNaturalId())).thenReturn(true);

        processor.process(tdsReport, tenancyChain);

        verify(examineeParser, times(1)).parse(examinee);
        verify(tenancyChain, times(1)).hasRole("ASMTDATALOAD", school.getDistrict().getStateCode(), school.getDistrict().getNaturalId(), school.getNaturalId());
        verify(studentExamProcessor, times(1)).process(test, opportunity, studentExamAttributes, assessment);
    }

    @Test(expected = ImportException.class)
    public void itShouldThrowExceptionForUnauthorized() throws ParseException {

        final ParsedExaminee parsedExaminee = mock(ParsedExaminee.class);
        when(examineeParser.parse(any(Examinee.class))).thenReturn(parsedExaminee);
        when(parsedExaminee.getSchool()).thenReturn(school);

        final TenancyChain tenancyChain = mock(TenancyChain.class);
        when(tenancyChain.hasRole("ASMTDATALOAD", school.getDistrict().getStateCode(), school.getDistrict().getNaturalId(), school.getNaturalId())).thenReturn(false);

        processor.process(tdsReport, tenancyChain);
    }

    @Test(expected = ImportException.class)
    public void itShouldConvertParseExceptionIntoImportException() throws ParseException {

        when(examineeParser.parse(any(Examinee.class))).thenThrow(mock(ParseException.class));

        processor.process(tdsReport, mock(TenancyChain.class));
    }
}