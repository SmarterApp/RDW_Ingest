package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.trt.Examinee;
import org.opentestsystem.rdw.common.model.trt.Opportunity;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentService;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamWriter;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;

import java.text.ParseException;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class DefaultTDSReportProcessorTest {

    private TDSReportProcessor processor;

    private StudentExamProcessor studentExamProcessor;
    private AssessmentService assessmentService;
    private ExamineeProcessor examineeProcessor;
    private StudentExamWriter writer;

    private TDSReport tdsReport;
    private Examinee examinee;
    private long importId;

    @Before
    public void setUp() {
        studentExamProcessor = mock(StudentExamProcessor.class);
        assessmentService = mock(AssessmentService.class);
        examineeProcessor = mock(ExamineeProcessor.class);
        writer = mock(StudentExamWriter.class);

        processor = new DefaultTDSReportProcessor(studentExamProcessor, assessmentService, examineeProcessor, writer);

        tdsReport = mock(TDSReport.class);
        examinee = mock(Examinee.class);
        when(tdsReport.getExaminee()).thenReturn(examinee);
        importId = 1;
    }

    @Test
    public void itShouldProcessTDSReport() throws ParseException {

        final org.opentestsystem.rdw.common.model.trt.Test test = mock(org.opentestsystem.rdw.common.model.trt.Test.class);
        final Opportunity opportunity = mock(Opportunity.class);
        when(tdsReport.getTest()).thenReturn(test);
        when(tdsReport.getOpportunity()).thenReturn(opportunity);
        when(tdsReport.getExaminee()).thenReturn(examinee);

        when(examineeProcessor.parseSchoolId(examinee)).thenReturn(99);

        final Exam exam = mock(Exam.class);
        when(exam.getSchoolYear()).thenReturn(2016);

        final Assessment assessment = mock(Assessment.class);
        when(assessment.getSubjectId()).thenReturn(1);
        when(assessmentService.findOneForTest(test)).thenReturn(assessment);
        when(studentExamProcessor.parseExam(tdsReport, 99, assessment)).thenReturn(exam);

        final Student student = mock(Student.class);
        when(examineeProcessor.parseStudent(examinee, 2016, 99)).thenReturn(student);

        processor.process(tdsReport, importId);
        verify(writer, times((1))).upsertExam(student, exam, importId);
    }

    @Test(expected = ImportException.class)
    public void itShouldThrowExceptionForNullExaminee() throws ParseException {
        when(tdsReport.getExaminee()).thenReturn(null);

        processor.process(tdsReport, importId);
    }

    @Test(expected = ImportException.class)
    public void itShouldConvertIllegalArgumentExceptionIntoImportException() throws ParseException {

        when(tdsReport.getExaminee()).thenThrow(mock(IllegalArgumentException.class));

        processor.process(tdsReport, importId);
    }
}