package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.common.model.District;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentService;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.model.Examinee;
import org.opentestsystem.rdw.model.Opportunity;
import org.opentestsystem.rdw.model.TDSReport;

import java.text.ParseException;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class DefaultTDSReportProcessorTest {

    private TDSReportProcessor processor;

    private ExamineeProcessor examineeProcessor;
    private StudentExamProcessor studentExamProcessor;
    private AssessmentService assessmentService;

    private TDSReport tdsReport;
    private Examinee examinee;
    private School school;
    private long importId;

    @Before
    public void setUp() {
        studentExamProcessor = mock(StudentExamProcessor.class);
        assessmentService = mock(AssessmentService.class);
        examineeProcessor = mock(ExamineeProcessor.class);

        processor = new DefaultTDSReportProcessor(studentExamProcessor, assessmentService, examineeProcessor);

        tdsReport = mock(TDSReport.class);
        examinee = mock(Examinee.class);
        when(tdsReport.getExaminee()).thenReturn(examinee);

        school = School.builder()
                .name("Sample School 1")
                .naturalId("30664640124743")
                .district(District.builder().naturalId("01247430000000").name("Sample District 1").stateCode("SC").build())
                .build();

        importId = 1;
    }

    @Test
    public void itShouldProcessTDSReport() throws ParseException {

        final org.opentestsystem.rdw.model.Test test = mock(org.opentestsystem.rdw.model.Test.class);
        final Opportunity opportunity = mock(Opportunity.class);
        when(tdsReport.getTest()).thenReturn(test);
        when(tdsReport.getOpportunity()).thenReturn(opportunity);
        when(tdsReport.getExaminee()).thenReturn(examinee);

        when(examineeProcessor.parseExamineeRelationship(any(Examinee.class))).thenReturn(school);

        final StudentExamAttributes studentExamAttributes = mock(StudentExamAttributes.class);
        when(examineeProcessor.process(examinee, test, school, importId)).thenReturn(studentExamAttributes);

        final Assessment assessment = mock(Assessment.class);
        when(assessmentService.findOneByNaturalId(tdsReport)).thenReturn(assessment);

        processor.process(tdsReport, importId);

        verify(examineeProcessor, times(1)).parseExamineeRelationship(examinee);
        verify(studentExamProcessor, times(1)).process(test, opportunity, studentExamAttributes, assessment, importId);
    }

    @Test(expected = ImportException.class)
    public void itShouldThrowExceptionForNullExaminee() throws ParseException {
        when(tdsReport.getExaminee()).thenReturn(null);

        processor.process(tdsReport, importId);
    }

    @Test(expected = ImportException.class)
    public void itShouldConvertIllegalArgumentExceptionIntoImportException() throws ParseException {

        when(examineeProcessor.parseExamineeRelationship(any(Examinee.class))).thenThrow(mock(IllegalArgumentException.class));

        processor.process(tdsReport, importId);
    }
}