package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.model.District;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.common.repository.SchoolRepository;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
public class SchoolRepositoryIT {
    @Autowired
    private SchoolRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
            "INSERT INTO district (id, name, natural_id) VALUES (-22, 'Sample District 1', 'DistrictNaturalId');",
            "INSERT INTO school (id, district_id, name, natural_id, import_id, update_import_id) VALUES (-27, -22, 'Sample School 1', 'SchoolNaturalId', -99, -99);"
    })
    public void itShouldReturnExistingSchoolForAnExistingDistrict() {
        final int schoolCount = countRowsInTable(jdbcTemplate, "school");
        final int districtCount = countRowsInTable(jdbcTemplate, "district");

        final int id = repository.upsert(School.builder()
                .name("Sample School 1")
                .naturalId("SchoolNaturalId")
                .district(District.builder().naturalId("DistrictNaturalId").name("Sample District 1").build())
                .build(), -100);

        assertThat(id).isEqualTo(-27);
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(schoolCount);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(districtCount);

        //verify that import id has not changed
        assertThat(countRowsInTableWhere(jdbcTemplate, "school", "id = -27 and name ='Sample School 1' and natural_id = 'SchoolNaturalId' and import_id = -99")).isEqualTo(1);

    }

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
            "INSERT INTO district (id, name, natural_id) VALUES (-22, 'Sample District 1', 'DistrictNaturalId');"
    })
    public void itShouldCreateNewSchoolForAnExistingDistrict() {
        final int schoolCount = countRowsInTable(jdbcTemplate, "school");
        final int districtCount = countRowsInTable(jdbcTemplate, "district");

        final int id = repository.upsert(School.builder()
                .name("Sample School 11")
                .naturalId("SchoolNaturalId")
                .district(District.builder().naturalId("DistrictNaturalId").name("Sample District 1").build())
                .build(), -99);

        assertThat(id).isNotNull();
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(schoolCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(districtCount);

        //verify import id
        assertThat(countRowsInTableWhere(jdbcTemplate, "school", "natural_id = 'SchoolNaturalId' and import_id = -99")).isEqualTo(1);
    }

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')"
    })
    public void itShouldCreateNewSchoolAndDistrict() {
        final int schoolCount = countRowsInTable(jdbcTemplate, "school");
        final int districtCount = countRowsInTable(jdbcTemplate, "district");

        Integer id = jdbcTemplate.queryForObject("SELECT count(*) FROM school WHERE natural_id = ? AND name = ?", Integer.class, "DistrictNaturalId", "Sample District 1");
        assertThat(id).isEqualTo(0);

        id = repository.upsert(School.builder()
                .name("Sample School 12")
                .naturalId("SchoolNaturalId")
                .district(District.builder().naturalId("DistrictNaturalId").name("Sample District 1").build())
                .build(), -99);

        assertThat(id).isNotNull();
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(schoolCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(districtCount + 1);
    }

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -100, 0, 1, 'type', 'digest')",
            "INSERT INTO district (id, name, natural_id) VALUES (-22, 'Sample District 1', 'DistrictNaturalId');",
            "INSERT INTO school (id, district_id, name, natural_id, import_id, update_import_id) VALUES (-27, -22, 'Sample School 1', 'SchoolNaturalId', -99, -99);"
    })
    public void itShouldUpdateExistingSchoolForAnExistingDistrict() {
        final int id = repository.upsert(School.builder()
                .name("Sample School New Name")
                .naturalId("SchoolNaturalId")
                .district(District.builder().naturalId("DistrictNaturalId").name("District New Name").build())
                .build(), -100);

        assertThat(id).isEqualTo(-27)
        ;
        //verify that impoert id has been updated
        assertThat(id).isEqualTo(-27);
        assertThat(countRowsInTableWhere(jdbcTemplate, "school", "id = -27 and name ='Sample School New Name' and update_import_id = -100")).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "district", "id = -22 and name ='District New Name'")).isEqualTo(1);
    }

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
            "INSERT INTO district (id, name, natural_id) VALUES (-22, 'Sample District 1', 'DistrictNaturalId');",
            "INSERT INTO school (id, district_id, name, natural_id, import_id, update_import_id) VALUES (-27, -22, 'Sample School 1', 'SchoolNaturalId', -99, -99);"
    })
    public void itShouldFindIdByNaturalId() {
        assertThat(repository.findIdByNaturalId("SchoolNaturalId")).isEqualTo(-27);
        assertThat(repository.findIdByNaturalId("test")).isNull();
    }
}