package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.model.District;
import org.opentestsystem.rdw.ingest.processor.model.School;
import org.opentestsystem.rdw.ingest.processor.repository.SchoolRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.cache.CacheType;
import org.springframework.boot.test.autoconfigure.core.AutoConfigureCache;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@EnableCaching
@AutoConfigureCache(cacheProvider = CacheType.SIMPLE)
public class SchoolRepositoryIT {
    @Autowired
    private CacheManager cacheManager;

    @Autowired
    private SchoolRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    @Sql(statements = {
            "INSERT INTO district (id, name, natural_id) VALUES (22, 'Sample District 1', '01247430000000');",
            "INSERT INTO school (id, district_id, name, natural_id) VALUES (27, 22, 'Sample School 1', '30664640124743');"
    })
    public void itShouldReturnExistingSchoolForAnExistingDistrict() {
        final int schoolCount = countRowsInTable(jdbcTemplate, "school");
        final int districtCount = countRowsInTable(jdbcTemplate, "district");

        final int id = repository.upsert(School.builder()
                .withName("Sample School 1")
                .withNaturalId("30664640124743")
                .withDistrict(District.builder().withNaturalId("01247430000000").withName("Sample District 1").build())
                .build());

        assertThat(id).isEqualTo(27);
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(schoolCount);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(districtCount);
    }

    @Test
    @Sql(statements = {
            "INSERT INTO district (id, name, natural_id) VALUES (22, 'Sample District 1', '01247430000000');"
    })
    public void itShouldCreateNewSchoolForAnExistingDistrict() {
        final int schoolCount = countRowsInTable(jdbcTemplate, "school");
        final int districtCount = countRowsInTable(jdbcTemplate, "district");

        final int id = repository.upsert(School.builder()
                .withName("Sample School 1")
                .withNaturalId("30664640124743")
                .withDistrict(District.builder().withNaturalId("01247430000000").withName("Sample District 1").build())
                .build());

        assertThat(id).isNotNull();
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(schoolCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(districtCount);
    }

    @Test
    public void itShouldCreateNewSchoolAndDistrict() {
        final int schoolCount = countRowsInTable(jdbcTemplate, "school");
        final int districtCount = countRowsInTable(jdbcTemplate, "district");

        Integer id = jdbcTemplate.queryForObject("select count(*) from school where natural_id = ? and name = ?", Integer.class, "01247430000000", "Sample District 1");
        assertThat(id).isEqualTo(0);

        id = repository.upsert(School.builder()
                .withName("Sample School 1")
                .withNaturalId("30664640124743")
                .withDistrict(District.builder().withNaturalId("01247430000000").withName("Sample District 1").build())
                .build());

        assertThat(id).isNotNull();
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(schoolCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(districtCount + 1);
    }

    @Test
    @Sql(statements = {
            "INSERT INTO district (id, name, natural_id) VALUES (22, 'Sample District 1', '01247430000000');",
            "INSERT INTO school (id, district_id, name, natural_id) VALUES (27, 22, 'Sample School 1', '30664640124743');"
    })
    public void itShouldUpdatExistingSchoolForAnExistingDistrict() {
        final int schoolCount = countRowsInTable(jdbcTemplate, "school");
        final int districtCount = countRowsInTable(jdbcTemplate, "district");

        final int id = repository.upsert(School.builder()
                .withName("Sample School New Name")
                .withNaturalId("30664640124743")
                .withDistrict(District.builder().withNaturalId("01247430000000").withName("District New Name").build())
                .build());

        assertThat(id).isEqualTo(27);
        assertThat(countRowsInTableWhere(jdbcTemplate, "school", "id=27 and name ='Sample School New Name'")).isEqualTo(schoolCount);
        assertThat(countRowsInTableWhere(jdbcTemplate, "district", "id=22 and name ='District New Name'")).isEqualTo(districtCount);
    }

    @Test
    public void itShouldCacheReturnedIdForSchool() {

        final School school = School.builder()
                .withName("New School To Test Cache")
                .withNaturalId("cache123")
                .withDistrict(District.builder().withNaturalId("cache123").withName("New District to test Cache").build())
                .build();

        final Cache codes = this.cacheManager.getCache("school");
        assertThat(codes.get(school)).isNull();

        final int newSchoolId = repository.upsert(school);

        assertThat(codes.get(school, Integer.class)).isEqualTo(newSchoolId);
    }

}