package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.common.model.trt.XmlUtils;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.ExamProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;


@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles({"test", "optional2"})
@ContextConfiguration(classes = {ExamProcessorApplication.class})
@Sql(scripts = {"classpath:PreloadAsmtAndSchoolData.sql"})
@DirtiesContext
public class DefaultTDSReportProcessorWithOptionalDataIT {
    private final static int importId = -1;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private TDSReportProcessor processor;

    @BeforeClass
    public static void setTenantContext() {
        TenantContextHolder.setTenantId("CA");
    }

    @Test
    public void test() {

        final int beforeStudentCount = countRowsInTable(jdbcTemplate, "student");
        final int beforeIabExamCount = countRowsInTableWhere(jdbcTemplate, "exam", "type_id = 2 and completeness_id = 2 and administration_condition_id = 1 and session_id is null");

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/NULL-fields.xml"));
        processor.process(tdsReport, importId);

        assertThat(countRowsInTable(jdbcTemplate, "student")).isEqualTo(beforeStudentCount + 1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", "type_id = 2 and completeness_id = 2 and administration_condition_id = 1 and session_id is null"))
                .isEqualTo(beforeIabExamCount + 1);
    }
}
