package org.opentestsystem.rdw.ingest.processor.multithreaded;

import org.opentestsystem.rdw.ingest.common.model.District;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.common.repository.SchoolRepository;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.model.StudentGroup;
import org.opentestsystem.rdw.ingest.processor.repository.StudentGroupRepository;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.time.Instant;
import java.time.LocalDate;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Component
public class MultiThreadedStudentGroupAddStudent extends MultiThreadedTest {
    private static final Logger logger = LoggerFactory.getLogger(MultiThreadedStudentGroupAddStudent.class);

    @Autowired
    private StudentGroupRepository repository;

    @Autowired
    private SchoolRepository schoolRepository;

    @Autowired
    private StudentRepository studentRepository;

    private List<Integer> groupIds = newArrayList();
    private long studentId;

    @Override
    protected void setUp() {
        final int schoolId = schoolRepository.upsert(School.builder()
                .name("New School To Test Cache")
                .naturalId("cache123")
                .district(District.builder().naturalId("cache123").name("New District to test Cache").build())
                .build(), 1);

        groupIds.add(repository.upsert(newGroup("test", schoolId), 1).getId());
        groupIds.add(repository.upsert(newGroup("test2", schoolId), 1).getId());

        studentId = studentRepository.upsert(Student.builder()
                .ssid("6666666669")
                .firstName("FirstName6")
                .lastOrSurname("LastName6")
                .middleName("MiddleName6")
                .birthday(LocalDate.parse("2006-07-08"))
                .firsEntryIntoUSSchoolAt(LocalDate.parse("2015-09-02"))
                .lepEntryAt(null)
                .lepExitAt(null)
                .genderId(1)
                .ethnicityIds(newArrayList(1, 2, 3))
                .build(), 1);
    }

    @Override
    protected Runnable newRunnable() {
        return () -> {
            try {
                repository.addStudentToGroups(studentId, groupIds, 1);
            } catch (final Exception ex) {
                logger.info("Exception:" + ex.getMessage());
                passed = false;
            }
        };
    }

    private StudentGroup newGroup(final String name, final int schoolId) {
        return StudentGroup.builder()
                .name(name)
                .schoolId(schoolId)
                .schoolYear(2017)
                .active(true)
                .creator("test")
                .created(Instant.now())
                .build();
    }
}
