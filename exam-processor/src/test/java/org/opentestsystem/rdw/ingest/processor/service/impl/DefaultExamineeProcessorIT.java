package org.opentestsystem.rdw.ingest.processor.service.impl;


import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.ExamProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.model.District;
import org.opentestsystem.rdw.ingest.processor.model.School;
import org.opentestsystem.rdw.ingest.processor.repository.impl.CachingTest;
import org.opentestsystem.rdw.model.TDSReport;
import org.opentestsystem.rdw.model.XmlUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Java6Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ContextConfiguration(classes = {ExamProcessorApplication.class})
public class DefaultExamineeProcessorIT {
    @Autowired
    private DefaultExamineeProcessor processor;

    @Test
    public void itShouldReportExamineeAttributesParseErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.basic.errors.xml"));
        try {
            processor.process(tdsReport.getExaminee(), School.builder()
                    .withDistrict(District.builder().withName("district").withNaturalId("error test").withStateCode("tt").build())
                    .withName("test")
                    .withNaturalId("error test").build());
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo(
                    "{\"elementName\":\"FirstName\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                            "{\"elementName\":\"LastOrSurname\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                            "{\"elementName\":\"StudentIdentifier\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                            "{\"elementName\":\"Birthdate\",\"value\":\"bad data\",\"error\":\"Unparseable date: \\\"bad data\\\"\"}," +
                            "{\"elementName\":\"Sex\",\"value\":\"bad data\",\"error\":\"unknown gender name [bad data]\"}," +
                            "{\"elementName\":\"FirstEntryDateIntoUSSchool\",\"value\":\"bad data\",\"error\":\"Unparseable date: \\\"bad data\\\"\"}," +
                            "{\"elementName\":\"LimitedEnglishProficiencyEntryDate\",\"value\":\"bad data\",\"error\":\"Unparseable date: \\\"bad data\\\"\"}," +
                            "{\"elementName\":\"LEPExitDate\",\"value\":\"bad data\",\"error\":\"Unparseable date: \\\"bad data\\\"\"}," +
                            "{\"elementName\":\"HispanicOrLatinoEthnicity\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"AmericanIndianOrAlaskaNative\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"Asian\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"BlackOrAfricanAmerican\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"White\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"NativeHawaiianOrOtherPacificIslander\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"DemographicRaceTwoOrMoreRaces\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"IDEAIndicator\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"LEPStatus\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"Section504Status\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"EconomicDisadvantageStatus\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"MigrantStatus\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                            "{\"elementName\":\"GradeLevelWhenAssessed\",\"value\":\"bad data\",\"error\":\"unknown grade code [bad data]\"}");
        }
    }

    @Test
    public void itShouldReportExamineeRelationshipAttributesParseErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.basic.errors.xml"));
        try {
            processor.parseExamineeRelationship(tdsReport.getExaminee());

        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"elementName\":\"StateAbbreviation\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"ResponsibleDistrictIdentifier\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"OrganizationName\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"ResponsibleInstitutionIdentifier\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"NameOfInstitution\",\"value\":\"\",\"error\":\"value may not be blank\"}");
        }
    }
}
