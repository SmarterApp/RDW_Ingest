package org.opentestsystem.rdw.ingest.processor.service.impl;


import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.ExamProcessorApplication;
import org.opentestsystem.rdw.ingest.common.model.District;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.common.model.trt.XmlUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Java6Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@ContextConfiguration(classes = {ExamProcessorApplication.class})
@Sql(statements = {
        "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
})
public class DefaultExamineeProcessorIT {
    @Autowired
    private DefaultExamineeProcessor processor;

    @Test
    public void itShouldReportExamineeAttributesParseErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.basic.errors.xml"));
        try {
            processor.process(tdsReport.getExaminee(), tdsReport.getTest(), School.builder()
                    .district(District.builder().name("district").naturalId("error test").stateCode("tt").build())
                    .name("test")
                    .naturalId("error test").build(), -99);
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"FirstName\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"LastOrSurname\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"StudentIdentifier\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"Birthdate\",\"value\":\"bad data\",\"error\":\"Text \\u0027bad data\\u0027 could not be parsed at index 0\"}," +
                    "{\"elementName\":\"Sex\",\"value\":\"bad data\",\"error\":\"unknown gender code [bad data]\"}," +
                    "{\"elementName\":\"FirstEntryDateIntoUSSchool\",\"value\":\"bad data\",\"error\":\"Text \\u0027bad data\\u0027 could not be parsed at index 0\"}," +
                    "{\"elementName\":\"LimitedEnglishProficiencyEntryDate\",\"value\":\"bad data\",\"error\":\"Text \\u0027bad data\\u0027 could not be parsed at index 0\"}," +
                    "{\"elementName\":\"LEPExitDate\",\"value\":\"bad data\",\"error\":\"Text \\u0027bad data\\u0027 could not be parsed at index 0\"}," +
                    "{\"elementName\":\"AmericanIndianOrAlaskaNative\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"Asian\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"BlackOrAfricanAmerican\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"DemographicRaceTwoOrMoreRaces\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"HispanicOrLatinoEthnicity\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"NativeHawaiianOrOtherPacificIslander\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"White\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"IDEAIndicator\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"LEPStatus\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"Section504Status\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"EconomicDisadvantageStatus\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"MigrantStatus\",\"value\":\"bad data\",\"error\":\"an invalid value [bad data]\"}," +
                    "{\"elementName\":\"GradeLevelWhenAssessed\",\"value\":\"bad data\",\"error\":\"unknown grade code [bad data]\"}" +
                    "]}");
        }
    }

    @Test
    public void itShouldReportExamineeRelationshipAttributesParseErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.basic.errors.xml"));
        try {
            processor.parseExamineeRelationship(tdsReport.getExaminee());

        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"StateAbbreviation\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"DistrictId\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"DistrictName\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"SchoolId\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"SchoolName\",\"value\":\"\",\"error\":\"value may not be blank\"}" +
                    "]}");
        }
    }
}
