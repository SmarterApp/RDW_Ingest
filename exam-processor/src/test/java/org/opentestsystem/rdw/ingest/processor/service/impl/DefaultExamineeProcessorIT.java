package org.opentestsystem.rdw.ingest.processor.service.impl;


import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.common.model.trt.XmlUtils;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.ExamProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Java6Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@ContextConfiguration(classes = {ExamProcessorApplication.class})
@Sql(statements = {
        "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
})
public class DefaultExamineeProcessorIT {
    @Autowired
    private ExamineeProcessor processor;

    @Test(expected = ImportException.class)
    public void itShouldReportStudentParseErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.basic.errors.xml"));
        try {
            processor.parseStudent(tdsReport.getExaminee(), 2016, -99);
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"FirstName\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"LastOrSurname\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"StudentIdentifier\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"Birthdate\",\"value\":\"bad data\",\"error\":\"Text \\u0027bad data\\u0027 could not be parsed at index 0\"}," +
                    "{\"elementName\":\"Sex\",\"value\":\"bad data\",\"error\":\"unknown gender code [bad data]\"}," +
                    "{\"elementName\":\"FirstEntryDateIntoUSSchool\",\"value\":\"bad data\",\"error\":\"Text \\u0027bad data\\u0027 could not be parsed at index 0\"}," +
                    "{\"elementName\":\"LimitedEnglishProficiencyEntryDate\",\"value\":\"bad data\",\"error\":\"Text \\u0027bad data\\u0027 could not be parsed at index 0\"}," +
                    "{\"elementName\":\"LEPExitDate\",\"value\":\"bad data\",\"error\":\"Text \\u0027bad data\\u0027 could not be parsed at index 0\"}," +
                    "{\"elementName\":\"AmericanIndianOrAlaskaNative\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"Asian\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"BlackOrAfricanAmerican\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"DemographicRaceTwoOrMoreRaces\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"HispanicOrLatinoEthnicity\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"NativeHawaiianOrOtherPacificIslander\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"White\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}" +
                    "]}");
            throw e;
        }
    }

    @Test(expected = ImportException.class)
    public void itShouldReportStudentParseErrorsWithLongValues() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.longdata.basic.error.xml"));
        try {
            processor.parseStudent(tdsReport.getExaminee(), 2016, -99);
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"FirstName\",\"value\":\"VeryLongFirstName12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\"error\":\"string is too long, max length is 60\"}," +
                    "{\"elementName\":\"LastOrSurname\",\"value\":\"VeryLongLastName12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\"error\":\"string is too long, max length is 60\"}," +
                    "{\"elementName\":\"MiddleName\",\"value\":\"VeryLongMiddleName12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\"error\":\"string is too long, max length is 60\"}," +
                    "{\"elementName\":\"StudentIdentifier\",\"value\":\"VeryLongSSID12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\"error\":\"string is too long, max length is 65\"}" +
                    "]}");
            throw e;
        }
    }

    @Test
    public void itShouldReportStudentExamAttributesParseErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.basic.errors.xml"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        processor.parseStudentExamAttributes(tdsReport.getExaminee(), -99, errorCollector);
        assertThat(errorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"IDEAIndicator\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                "{\"elementName\":\"LEPStatus\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                "{\"elementName\":\"Section504Status\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                "{\"elementName\":\"EconomicDisadvantageStatus\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                "{\"elementName\":\"MigrantStatus\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                "{\"elementName\":\"GradeLevelWhenAssessed\",\"value\":\"bad data\",\"error\":\"unknown grade code [bad data]\"}" +
                "]}");
    }

    @Test
    public void itShouldReportStudentExamAttributesParseErrorsWithLongValue() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.longdata.basic.error.xml"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        processor.parseStudentExamAttributes(tdsReport.getExaminee(), -99, errorCollector);
        assertThat(errorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"LanguageCode\",\"value\":\"LongLanguageCode\",\"error\":\"string is too long, max length is 3\"}," +
                "{\"elementName\":\"EnglishLanguageProficiencyLevel\",\"value\":\"LongEnglishLanguageProficiencyLevel012345678\",\"error\":\"string is too long, max length is 20\"}," +
                "{\"elementName\":\"TitleIIILanguageInstructionProgramType\",\"value\":\"LongTitleIIILanguageInstructionProgramType\",\"error\":\"string is too long, max length is 20\"}," +
                "{\"elementName\":\"PrimaryDisabilityType\",\"value\":\"LongPrimaryDisabilityType\",\"error\":\"string is too long, max length is 3\"}" +
                "]}");
    }

    @Test(expected = ImportException.class)
    public void itShouldReportExamineeRelationshipAttributesParseErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.basic.errors.xml"));
        try {
            processor.parseExamineeRelationship(tdsReport.getExaminee());
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"StateAbbreviation\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"DistrictId\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"DistrictName\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"SchoolId\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"SchoolName\",\"value\":\"\",\"error\":\"value may not be blank\"}" +
                    "]}");
            throw e;
        }
    }
}
