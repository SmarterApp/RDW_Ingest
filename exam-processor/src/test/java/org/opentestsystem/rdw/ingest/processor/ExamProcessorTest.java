package org.opentestsystem.rdw.ingest.processor;

import com.google.common.io.ByteStreams;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.MediaType;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.GenericMessage;

import java.io.IOException;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class ExamProcessorTest {

    private ExamProcessor processor;
    private TDSReportProcessor tdsReportProcessor;
    private ImportRepository importRepository;
    private Message message;

    @Before
    public void createProcessor() throws IOException {
        tdsReportProcessor = mock(TDSReportProcessor.class);
        importRepository = mock(ImportRepository.class);

        final ResourceLoader resourceLoader = mock(ResourceLoader.class);
        when(resourceLoader.getResource("bankkey.xsl"))
                .thenReturn(new InputStreamResource(this.getClass().getResourceAsStream("/bankkey.xsl")));

        processor = new ExamProcessor(tdsReportProcessor, importRepository, resourceLoader, "bankkey.xsl");

        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(null);
        accessor.setContent(ImportContent.EXAM.name());
        accessor.setContentType(MediaType.APPLICATION_XML);
        accessor.setImportId(1);

        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/TDSReport.iab.bankkey.xml"));

        message = new GenericMessage<>(payload, accessor.getMessageHeaders());
    }

    @Test
    public void itShouldProcessMessageWithXmlContent() {
        // this should also transform the payload; can check by debugging
        processor.process(message);
        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.PROCESSED, null);
    }

    @Test
    public void itShouldHandleImportException() {
        doThrow(new ImportException(ImportStatus.UNKNOWN_ASMT, "message"))
                .when(tdsReportProcessor)
                .process(any(TDSReport.class), any(long.class));

        processor.process(message);

        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.UNKNOWN_ASMT, "message");
    }

    @Test
    public void itShouldHandleAnyException() {
        doThrow(new RuntimeException("any message")).when(tdsReportProcessor).process(any(TDSReport.class), any(long.class));

        processor.process(message);

        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.BAD_DATA, "any message");
    }
}
