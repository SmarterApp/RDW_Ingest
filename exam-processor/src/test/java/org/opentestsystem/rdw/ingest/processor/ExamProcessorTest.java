package org.opentestsystem.rdw.ingest.processor;

import com.google.common.io.ByteStreams;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.common.model.ImportContent;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.common.model.trt.Opportunity;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.MediaType;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.GenericMessage;
import org.w3c.dom.Node;
import org.xmlunit.builder.Input;
import org.xmlunit.xpath.JAXPXPathEngine;

import javax.xml.transform.Source;
import java.io.IOException;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.xmlunit.matchers.EvaluateXPathMatcher.hasXPath;

public class ExamProcessorTest {

    private ExamProcessor processor;
    private TDSReportProcessor tdsReportProcessor;
    private ImportRepository importRepository;
    private Message message;

    @Before
    public void createProcessor() throws IOException {
        tdsReportProcessor = mock(TDSReportProcessor.class);
        importRepository = mock(ImportRepository.class);

        final ResourceLoader resourceLoader = mock(ResourceLoader.class);
        when(resourceLoader.getResource("bankkey.xsl"))
                .thenReturn(new InputStreamResource(this.getClass().getResourceAsStream("/bankkey.xsl")));

        processor = new ExamProcessor(tdsReportProcessor, importRepository, resourceLoader, "bankkey.xsl");

        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(null);
        accessor.setContent(ImportContent.EXAM.name());
        accessor.setContentType(MediaType.APPLICATION_XML);
        accessor.setImportId(1);

        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/TDSReport.iab.bankkey.xml"));

        message = new GenericMessage<>(payload, accessor.getMessageHeaders());
    }

    @Test
    public void itShouldProcessMessageWithXmlContent() {
        // this should also transform the payload; can check by debugging
        processor.process(message);
        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.PROCESSED, null);
    }

    @Test
    public void itShouldPerformTransformationsOnTRT() throws Exception {
        final ArgumentCaptor<TDSReport> reportCaptor = ArgumentCaptor.forClass(TDSReport.class);
        processor.process(message);

        verify(tdsReportProcessor).process(reportCaptor.capture(), anyLong());
        final TDSReport report = reportCaptor.getValue();
        final List<Opportunity.Item> items = report.getOpportunity().getItem();
        assertThat(items.get(0).getBankKey()).isEqualTo(200);

        //MC
        assertThat(items.get(0).getResponse().getContent()).isEqualTo("A");
        //MS
        assertThat(items.get(1).getResponse().getContent()).isEqualToIgnoringCase("A,C,D");

        //EBSR
        final String ebsrXml = items.get(2).getResponse().getContent();
        Assert.assertThat(ebsrXml, hasXPath("count(/itemResponse/response)", equalTo("2")));
        Assert.assertThat(ebsrXml, hasXPath("count(/itemResponse/response[@id='EBSR1']/value)", equalTo("1")));
        Assert.assertThat(ebsrXml, hasXPath("/itemResponse/response[@id='EBSR1']/value/text()", equalTo("B")));
        Assert.assertThat(ebsrXml, hasXPath("count(/itemResponse/response[@id='EBSR2']/value)", equalTo("1")));
        Assert.assertThat(ebsrXml, hasXPath("/itemResponse/response[@id='EBSR2']/value/text()", equalTo("A")));

        //MI
        final Source miXML = Input.fromString(items.get(3).getResponse().getContent()).build();
        Assert.assertThat(miXML, hasXPath("count(/itemResponse/response)", equalTo("1")));
        Assert.assertThat(miXML, hasXPath("/itemResponse/response/@id", equalTo("RESPONSE")));
        Assert.assertThat(miXML, hasXPath("count(/itemResponse/response/value)", equalTo("5")));
        final List<String> miValues = newArrayList();
        new JAXPXPathEngine()
                .selectNodes("/itemResponse/response/value/text()", miXML)
                .forEach(valueNode -> miValues.add(valueNode.getTextContent()));
        assertThat(miValues).containsExactly("1 a", "2 b", "3 b", "4 a", "5 a");

        //TI
        final Source tiXML = Input.fromString(items.get(4).getResponse().getContent()).build();
        Assert.assertThat(tiXML, hasXPath("count(/responseSpec/responseTable/tr/th)", equalTo("11")));
        Assert.assertThat(tiXML, hasXPath("count(/responseSpec/responseTable/tr/td)", equalTo("11")));
        final List<String> tiValues = newArrayList();
        new JAXPXPathEngine()
                .selectNodes("/responseSpec/responseTable/tr/td", tiXML)
                .forEach(valueNode -> tiValues.add(valueNode.getTextContent()));
        assertThat(tiValues).containsExactly("", "B", "", "", "A", "", "", "C", "", "", "D");

        //HTQ
        final Source htqXML = Input.fromString(items.get(5).getResponse().getContent()).build();
        Assert.assertThat(htqXML, hasXPath("/itemResponse/response/@id", equalTo("1")));
        Assert.assertThat(htqXML, hasXPath("count(/itemResponse/response[@id='1']/value)", equalTo("2")));
        final List<String> htqValues = newArrayList();
        new JAXPXPathEngine()
                .selectNodes("/itemResponse/response/value", htqXML)
                .forEach(valueNode -> htqValues.add(valueNode.getTextContent()));
        assertThat(htqValues).containsExactly("2", "4");

        //EQ
        final Source eqXML = Input.fromString(items.get(6).getResponse().getContent()).build();
        final Node mathNode = StreamSupport.stream(new JAXPXPathEngine()
                .selectNodes("/response/*[name()='math']", eqXML)
                .spliterator(), false)
                .findFirst()
                .orElseThrow(() -> new NoSuchElementException("Cannot find EQ Math node"));
        assertThat(mathNode.getNamespaceURI()).isEqualTo("http://www.w3.org/1998/Math/MathML");
        Assert.assertThat(eqXML, hasXPath("/response/*[name()='math']/@title", equalTo("50")));
        Assert.assertThat(eqXML, hasXPath("/response/*[name()='math']/*[name()='mstyle']/*[name()='mn']/text()", equalTo("50")));

        //GI
        final Source giXML = Input.fromString(items.get(7).getResponse().getContent()).build();
        Assert.assertThat(giXML, hasXPath("/AnswerSet/Question/QuestionPart/@id", equalTo("1")));
        final List<String> atomicObjectValues = StreamSupport.stream(new JAXPXPathEngine()
                .selectNodes("/AnswerSet/Question/QuestionPart/ObjectSet/AtomicObject", giXML)
                .spliterator(), false)
                .map(Node::getTextContent)
                .collect(Collectors.toList());
        assertThat(atomicObjectValues).containsExactly("{AminusB(91,49)}", "{BC(193,49)}", "{C(299,49)}");
        Assert.assertThat(giXML, hasXPath("/AnswerSet/Question/QuestionPart/ObjectSet/RegionGroupObject/@name", equalTo("PartA")));
        final List<String> regionObjectValues = StreamSupport.stream(new JAXPXPathEngine()
                .selectNodes("/AnswerSet/Question/QuestionPart/ObjectSet/RegionGroupObject/RegionObject/@name", giXML)
                .spliterator(), false)
                .map(Node::getTextContent)
                .collect(Collectors.toList());
        assertThat(regionObjectValues).containsExactly("Step1", "Step2", "Step3", "Step4");
        Assert.assertThat(giXML, hasXPath("/AnswerSet/Question/QuestionPart/SnapPoint/text()", equalTo("70@91,361;193,361;299,361;407,361;299,345;299,377")));


    }

    @Test
    public void itShouldHandleImportException() {
        doThrow(new ImportException(ImportStatus.UNKNOWN_ASMT, "message"))
                .when(tdsReportProcessor)
                .process(any(TDSReport.class), any(long.class));

        processor.process(message);

        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.UNKNOWN_ASMT, "message");
    }

    @Test
    public void itShouldHandleAnyException() {
        doThrow(new RuntimeException("any message")).when(tdsReportProcessor).process(any(TDSReport.class), any(long.class));

        processor.process(message);

        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.BAD_DATA, "any message");
    }
}
