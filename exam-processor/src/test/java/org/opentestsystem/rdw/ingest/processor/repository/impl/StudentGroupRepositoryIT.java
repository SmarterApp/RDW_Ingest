package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.model.StudentGroup;
import org.opentestsystem.rdw.ingest.processor.repository.StudentGroupRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest'), ( -98, 0, 1, 'type', 'digest2')",
        "INSERT INTO subject (id, code) VALUES (-11, 'SCIENCE');",
        "INSERT INTO district (id, natural_id, name) VALUES (-20, 'DS009', 'District 9');",
        "INSERT INTO school (id, district_id, natural_id, name, import_id, update_import_id) VALUES (-21, -20, 'S001', 'School 1', -99, -99);",
        "INSERT INTO student (id, ssid, last_or_surname, first_name, gender_id, birthday, import_id, update_import_id) VALUES " +
                "(-100, '100', 'Smith', 'Alice', 2, '2004-09-02', -99, -99), " +
                "(-101, '101', 'Jones', 'Bob', 1, '2004-03-02', -99, -99)"
})
public class StudentGroupRepositoryIT {

    @Autowired
    private StudentGroupRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private final long importId = -99;
    private final long updateImportId = -98;

    @Test
    public void itShouldCreateAndFindGroups() {
        repository.upsert(createTestGroup("one"), importId);
        repository.upsert(createTestGroup("two"), importId);

        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group", "name = 'one' and school_year = 2017 and school_id = -21")).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group", "name = 'one' and school_year = 2016 and school_id = -21")).isZero();
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group", "name = 'three' and school_year = 2016 and school_id = -21")).isZero();

        repository.upsert(createTestGroup("one"), importId);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group", "name = 'one' and school_year = 2017 and school_id = -21")).isEqualTo(1);

        assertThat(repository.findIdByNameAndSchoolAndYear("one", -21, 2017)).isNotNull();
    }

    @Test
    public void itShouldAddStudentMembership() {
        final int membershipRows = countRowsInTable(jdbcTemplate, "student_group_membership");

        final StudentGroup group1 = repository.upsert(createTestGroup("one"), importId);
        final StudentGroup group2 = repository.upsert(createTestGroup("two"), importId);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group",
                "id in (" + group1.getId() + "," + group2.getId() + ") " + "and import_id = " + importId + " and update_import_id = " + importId)
        ).isEqualTo(2);

        repository.addStudentToGroups(-100, newArrayList(group1.getId(), group2.getId()), updateImportId);
        repository.addStudentToGroups(-101, newArrayList(group1.getId()), updateImportId);
        assertThat(countRowsInTable(jdbcTemplate, "student_group_membership")).isEqualTo(membershipRows + 3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group",
                "id in (" + group1.getId() + "," + group2.getId() + ") " + "and import_id = " + importId + " and update_import_id = " + updateImportId)
        ).isEqualTo(2);


        // it should tolerate adding the same membership again, by doing nothing
        repository.addStudentToGroups(-100, newArrayList(group2.getId()), 1);
        assertThat(countRowsInTable(jdbcTemplate, "student_group_membership")).isEqualTo(membershipRows + 3);
    }

    private StudentGroup createTestGroup(final String name) {
        return StudentGroup.builder()
                .name(name)
                .schoolId(-21)
                .schoolYear(2017)
                .active(true)
                .creator("test")
                .created(Instant.now())
                .build();
    }
}