package org.opentestsystem.rdw.ingest.processor.multithreaded;

import org.opentestsystem.rdw.ingest.processor.config.DataElementsConfiguration;
import org.opentestsystem.rdw.ingest.processor.repository.DataSourceConfiguration;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Import;

import java.util.Map;

/**
 * A console application that runs all available {@link MultiThreadedTest}s
 * The exist status 0 indicates a success.
 * The exist status > 0 indicates a number of failed tests
 */
@ComponentScan({
        "org.opentestsystem.rdw.ingest.processor.service",
        "org.opentestsystem.rdw.ingest.processor.service.impl",
        "org.opentestsystem.rdw.ingest.processor.repository",
        "org.opentestsystem.rdw.ingest.processor.repository.impl",
        "org.opentestsystem.rdw.ingest.processor.model",
        "org.opentestsystem.rdw.ingest.processor.multithreaded"
})
@Import({YamlPropertiesConfigurator.class,
        DataSourceAutoConfiguration.class,
        JdbcTemplateAutoConfiguration.class,
        DataSourceConfiguration.class,
        DataElementsConfiguration.class})
public class MultiThreadedApplicationTest {
    private static final Logger logger = LoggerFactory.getLogger(MultiThreadedApplicationTest.class);
    private static final int ExpectedTests = 4;

    public static void main(final String[] args) {
        int threadCount = 10;
        int iterations = 20;

        // TODO - parse arguments for --threads --iterations

        final ConfigurableApplicationContext ctx =
                new SpringApplicationBuilder(MultiThreadedApplicationTest.class)
                        .profiles("test", "mtTest")
                        .web(false)
                        .run(args);

        final Map<String, MultiThreadedTest> beans = ctx.getBeansOfType(MultiThreadedTest.class);
        if (beans.size() != ExpectedTests) {
            logger.error("Found {} MultiThreadedTest beans, expected {}", beans.size(), ExpectedTests);
            System.exit(1);
        }

        logger.info("Running {} iterations of {} tests, each with thread count {}", iterations, beans.size(), threadCount);
        int failed = 0;

        for (final Map.Entry<String, MultiThreadedTest> entry : beans.entrySet()) {
            final String name = entry.getKey();
            final MultiThreadedTest bean = entry.getValue();

            logger.info("Running {} iterations with {} threads for [{}] ", iterations, threadCount, name);
            for (int i = 0; i < iterations; ++i) {
                try {
                    if (!bean.run(threadCount)) {
                        logger.warn("Test failed on {} iteration for [{}]", i + 1, name);
                        ++failed;
                    }
                } catch (final InterruptedException e) {
                    logger.warn("Test interrupted [{}]", name);
                }
            }
        }

        System.exit(failed);
    }
}
