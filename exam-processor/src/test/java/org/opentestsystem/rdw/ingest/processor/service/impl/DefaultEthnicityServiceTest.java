package org.opentestsystem.rdw.ingest.processor.service.impl;


import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.trt.Examinee;
import org.opentestsystem.rdw.common.model.trt.Examinee.ExamineeAttribute;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.repository.EthnicityRepository;
import org.opentestsystem.rdw.ingest.processor.service.EthnicityService;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Java6Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DefaultEthnicityServiceTest {

    private EthnicityService service;
    private Examinee examinee;
    private DataElementErrorCollector elementErrorCollector;
    private ExamineeAttribute attributeC;

    @Before
    public void setUp() {
        final EthnicityRepository repository = mock(EthnicityRepository.class);
        when(repository.findAllCodes()).thenReturn(newArrayList("ethnicityA", "ethnicityB", "ethnicityC"));
        service = new DefaultEthnicityService(repository);

        examinee = mock(Examinee.class);
        final ExamineeAttribute attributeA = mock(ExamineeAttribute.class);
        when(examinee.getBestAttribute("ethnicityA")).thenReturn(attributeA);
        when(attributeA.getValue()).thenReturn("Y");

        final ExamineeAttribute attributeB = mock(ExamineeAttribute.class);
        when(examinee.getBestAttribute("ethnicityB")).thenReturn(attributeB);
        when(attributeB.getValue()).thenReturn("N");

        attributeC = mock(ExamineeAttribute.class);
        when(examinee.getBestAttribute("ethnicityC")).thenReturn(attributeC);
        when(attributeC.getValue()).thenReturn("Y");

        when(repository.findIdByCode("ethnicityA")).thenReturn(10);
        when(repository.findIdByCode("ethnicityC")).thenReturn(20);

        elementErrorCollector = new DataElementErrorCollector();
    }

    @Test
    public void itShouldReturnEthnicityIdsList() {
        service.getEthnicity(examinee, elementErrorCollector);
        assertThat(service.getEthnicity(examinee, elementErrorCollector)).containsExactly(10, 20);
        assertThat(elementErrorCollector.isEmpty()).isTrue();
    }

    @Test
    public void itShouldIgnoreUnsupportedEthnicity() {
        when(examinee.getBestAttribute("ethnicityC")).thenReturn(null);

        service.getEthnicity(examinee, elementErrorCollector);
        assertThat(service.getEthnicity(examinee, elementErrorCollector)).containsExactly(10);
        assertThat(elementErrorCollector.isEmpty()).isTrue();
    }

    @Test
    public void itShouldReturnErrors() {
        when(attributeC.getValue()).thenReturn("ABC");

        service.getEthnicity(examinee, elementErrorCollector);
        assertThat(service.getEthnicity(examinee, elementErrorCollector)).containsExactly(10);
        assertThat(elementErrorCollector.isEmpty()).isFalse();
    }
}