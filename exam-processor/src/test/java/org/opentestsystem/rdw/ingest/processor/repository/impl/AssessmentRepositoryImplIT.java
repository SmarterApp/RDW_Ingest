package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.SubjectClaimScore;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class AssessmentRepositoryImplIT {

    @Autowired
    private AssessmentRepository repository;

    @Test
    @Sql(statements = "INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, academic_year, name, label, version) VALUES " +
            "(22, 'exam natural id', 4, 1, 1, 2016, 'SBAC-ICA', 'Math', '9835');")
    public void itShouldFindAssessmentByNaturalIdForICAandMath() {
        final Assessment assessment = repository.findOneByNaturalId("exam natural id");

        assertThat(assessment.getId()).isEqualTo(22);
        assertThat(assessment.getAcademicYear()).isEqualTo(2016);
        assertThat(assessment.getGradeId()).isEqualTo(4);
        assertThat(assessment.getLabel()).isEqualTo("Math");
        assertThat(assessment.getName()).isEqualTo("SBAC-ICA");
        assertThat(assessment.getNaturalId()).isEqualTo("exam natural id");
        assertThat(assessment.getSubjectId()).isEqualTo(1);
        assertThat(assessment.getTypeId()).isEqualTo(1);
        assertThat(assessment.getVersion()).isEqualTo("9835");
        assertThat(assessment.getSubjectClaimScores().stream().map(SubjectClaimScore::getCode).collect(toList())).containsExactlyInAnyOrder("1", "SOCK_2", "3");
    }

    @Test
    @Sql(statements = "INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, academic_year, name, label, version) VALUES " +
            "(23, 'exam natural id', 4, 1, 2, 2016, 'SBAC-ICA', 'ELA', '9835');")
    public void itShouldFindAssessmentByNaturalIdForICAandELA() {
        final Assessment assessment = repository.findOneByNaturalId("exam natural id");

        assertThat(assessment.getId()).isEqualTo(23);
        assertThat(assessment.getAcademicYear()).isEqualTo(2016);
        assertThat(assessment.getGradeId()).isEqualTo(4);
        assertThat(assessment.getLabel()).isEqualTo("ELA");
        assertThat(assessment.getName()).isEqualTo("SBAC-ICA");
        assertThat(assessment.getNaturalId()).isEqualTo("exam natural id");
        assertThat(assessment.getSubjectId()).isEqualTo(2);
        assertThat(assessment.getTypeId()).isEqualTo(1);
        assertThat(assessment.getVersion()).isEqualTo("9835");
        assertThat(assessment.getSubjectClaimScores().stream().map(SubjectClaimScore::getCode).collect(toList())).containsExactlyInAnyOrder("SOCK_R", "SOCK_LS", "2-W", "4-CR");
    }

    @Test
    @Sql(statements = "INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, academic_year, name, label, version) VALUES " +
            "(23, 'exam natural id', 4, 2, 2, 2016, 'SBAC-IAB', 'ELA', '9835');")
    public void itShouldFindAssessmentByNaturalIdForIAB() {
        final Assessment assessment = repository.findOneByNaturalId("exam natural id");

        assertThat(assessment.getId()).isEqualTo(23);
        assertThat(assessment.getAcademicYear()).isEqualTo(2016);
        assertThat(assessment.getGradeId()).isEqualTo(4);
        assertThat(assessment.getLabel()).isEqualTo("ELA");
        assertThat(assessment.getName()).isEqualTo("SBAC-IAB");
        assertThat(assessment.getNaturalId()).isEqualTo("exam natural id");
        assertThat(assessment.getSubjectId()).isEqualTo(2);
        assertThat(assessment.getTypeId()).isEqualTo(2);
        assertThat(assessment.getVersion()).isEqualTo("9835");
        assertThat(assessment.getSubjectClaimScores()).isEmpty();
    }

    @Test
    public void itShouldReturnNullWhenNotFound() {
        assertThat(repository.findOneByNaturalId("exam natural id")).isNull();
    }
}