package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.repository.StubbedOutAssessmentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;


@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {"INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')"})
public class StubbedOutAssessmentRepositoryIT {

    @Autowired
    private StubbedOutAssessmentRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    public void itShouldHandleDuplicateInserts() {

        final Map<String, Integer> items = newHashMap();
        items.put("item-1", null);
        items.put("item-2", null);

        final int asmtCountBefore = countRowsInTable(jdbcTemplate, "asmt");
        final int itemCountBefore = countRowsInTable(jdbcTemplate, "item");
        final Assessment.Builder builder = Assessment.builder()
                .naturalId("testId")
                .name("test name")
                .label("test label")
                .schoolYear(2015)
                .gradeId(3)
                .subjectId(1)
                .typeId(1)
                .items(items);

        final Assessment assessment = repository.create(builder.build(), -99);

        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(asmtCountBefore + 1);
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(itemCountBefore + 2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "asmt", "id = " + assessment.getId() + " and natural_id ='testId'")).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "item", "natural_id = 'item-1' and asmt_id = " + assessment.getId())).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "item", "natural_id = 'item-2' and asmt_id = " + assessment.getId())).isEqualTo(1);

        //verify that a duplicate insert does not create new asmts and items
        assertThat(repository.create(builder.build(), -99).getId()).isEqualTo(assessment.getId());
        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(asmtCountBefore + 1);
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(itemCountBefore + 2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "item", "natural_id = 'item-1' and asmt_id = " + assessment.getId())).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "item", "natural_id = 'item-2' and asmt_id = " + assessment.getId())).isEqualTo(1);

        //verify that a duplicate insert does not create new asmts and adds new items
        items.put("item-3", null);
        assertThat(repository.create(builder.build(), -99).getId()).isEqualTo(assessment.getId());
        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(asmtCountBefore + 1);
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(itemCountBefore + 3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "item", "natural_id = 'item-3' and asmt_id = " + assessment.getId())).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "item", "natural_id = 'item-1' and asmt_id = " + assessment.getId())).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "item", "natural_id = 'item-2' and asmt_id = " + assessment.getId())).isEqualTo(1);
    }
}