package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentRepository;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentService;

import static org.assertj.core.api.Java6Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.ImportStatus.BAD_DATA;

public class DefaultAssessmentServiceTest {

    private final String asmtNaturalId = "asmtId";
    private AssessmentRepository assessmentRepository;
    private AssessmentService service;
    private org.opentestsystem.rdw.common.model.trt.Test test;


    @Before
    public void setUp() {
        assessmentRepository = mock(AssessmentRepository.class);
        service = new DefaultAssessmentService(assessmentRepository);

        test = mock(org.opentestsystem.rdw.common.model.trt.Test.class);
        when(test.getName()).thenReturn(asmtNaturalId);
    }

    @Test
    public void itShouldThrowExceptionWithErrorsWhenAssmtMismatchesTest() {
        final Assessment assessment = Assessment.builder()
                .subjectCode("asmtSubject")
                .typeId(1)
                .gradeCode("asmtGrade")
                .build();
        when(assessmentRepository.findOneByNaturalId(asmtNaturalId)).thenReturn(assessment);

        when(test.getGrade()).thenReturn("testGrade");
        when(test.getSubject()).thenReturn("testSubject");
        when(test.getAssessmentType()).thenReturn("testAsmtType");

        try {
            service.findOneForTest(test);
        } catch (final ImportException ex) {
            assertThat(ex.getStatus()).isEqualTo(BAD_DATA);
            assertThat(ex.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"Assessment natural id [asmtId], Test subject\",\"value\":\"testSubject\",\"error\":\"exam subject does not match asmt subject\"}," +
                    "{\"elementName\":\"Assessment natural id [asmtId], Test grade\",\"value\":\"testGrade\",\"error\":\"exam grade does not match asmt grade\"}" +
                    "]}");
        }
    }

    @Test
    public void itShouldReturnAssessment() {
        final Assessment assessment = Assessment.builder()
                .naturalId(asmtNaturalId)
                .subjectCode("testSubject")
                .typeId(1)
                .gradeCode("testSubject")
                .build();
        when(assessmentRepository.findOneByNaturalId(asmtNaturalId)).thenReturn(assessment);

        when(test.getGrade()).thenReturn("testSubject");
        when(test.getSubject()).thenReturn("testSubject");
        when(test.getAssessmentType()).thenReturn("Interim");

        assertThat(service.findOneForTest(test).getNaturalId()).isEqualTo(asmtNaturalId);
    }
}