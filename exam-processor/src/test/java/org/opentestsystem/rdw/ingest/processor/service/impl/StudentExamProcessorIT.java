package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.ExamProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentRepository;
import org.opentestsystem.rdw.ingest.processor.repository.impl.CachingTest;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.opentestsystem.rdw.model.TDSReport;
import org.opentestsystem.rdw.model.XmlUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Java6Assertions.assertThat;
import static org.mockito.Mockito.mock;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ContextConfiguration(classes = {ExamProcessorApplication.class})
public class StudentExamProcessorIT {

    @Autowired
    StudentExamProcessor processor;
    @Autowired
    AssessmentRepository assessmentRepository;

    @Test
    @Sql(statements = "INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, academic_year, name, label, version) VALUES " +
            "(23, 'exam natural id', 6, 1, 2, 2016, 'SBAC-ICA', 'ELA', '9835');")
    public void itShouldIcaScoreErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.ica.score.errors.xml"));
        try {
            processor.process(tdsReport.getTest(), tdsReport.getOpportunity(), mock(StudentExamAttributes.class), assessmentRepository.findOneByNaturalId("exam natural id"));

        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"elementName\":\"Overall,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"2-W,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"4-CR,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"SOCK_R,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"SOCK_LS,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"Overall,ScaleScore, AchievementLevel\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"2-W,PerformanceLevel, Category\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"4-CR,PerformanceLevel, Category\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"SOCK_R,PerformanceLevel, Category\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"SOCK_LS,PerformanceLevel, Category\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}");
        }
    }

    @Test
    @Sql(statements = "INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, academic_year, name, label, version) VALUES " +
            "(23, 'exam natural id', 6, 2, 2, 2016, 'SBAC-IAB', 'ELA', '9835');")
    public void itShouldIABScoreErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.ica.score.errors.xml"));
        try {
            processor.process(tdsReport.getTest(), tdsReport.getOpportunity(), mock(StudentExamAttributes.class), assessmentRepository.findOneByNaturalId("exam natural id"));

        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"elementName\":\"Overall,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"Overall,PerformanceLevel, Category\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}");
        }
    }
}