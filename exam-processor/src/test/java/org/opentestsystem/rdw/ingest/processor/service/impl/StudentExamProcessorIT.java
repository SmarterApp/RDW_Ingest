package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.ExamProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentRepository;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamProcessor;
import org.opentestsystem.rdw.model.TDSReport;
import org.opentestsystem.rdw.model.XmlUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Java6Assertions.assertThat;
import static org.mockito.Mockito.mock;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ContextConfiguration(classes = {ExamProcessorApplication.class})
public class StudentExamProcessorIT {
    private static final String insertImportSql = "INSERT INTO import (id,status,content,contenttype,digest,created) VALUES " +
            "(-1,0,1, 'application/xml','1D849A91956B74350FF895F067F115E6',CURRENT_DATE); ";
    private static final int importId = -1;

    @Autowired
    private StudentExamProcessor processor;

    @Autowired
    private AssessmentRepository assessmentRepository;

    @Test
    @Sql(statements = { insertImportSql,
            "INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, school_year, name, label, version) VALUES " +
            "(-1, 'exam natural id', 6, 1, 2, 2016, 'SBAC-ICA', 'ELA', '9835');",
            " INSERT INTO item (claim_id, target_id, natural_id, asmt_id, dok_id, difficulty, max_points, math_practice, allow_calc) VALUES \n" +
                    " (null, null, '200-56561', -1, 1, 0.5, 5, null, null)," +
                    " (null, null, '200-46849', -1, 1, 0.5, 5, null, null);"
    })
    public void itShouldReportIcaScoreErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.ica.score.errors.xml"));
        try {
            processor.process(tdsReport.getTest(), tdsReport.getOpportunity(), mock(StudentExamAttributes.class), assessmentRepository.findOneByNaturalId("exam natural id"), importId);

        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"elementName\":\"Overall,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"2-W,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"4-CR,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"SOCK_R,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"SOCK_LS,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"Overall,ScaleScore, AchievementLevel\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"2-W,PerformanceLevel, Category\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"4-CR,PerformanceLevel, Category\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"SOCK_R,PerformanceLevel, Category\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"SOCK_LS,PerformanceLevel, Category\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"items\",\"value\":\"\",\"error\":\"Mismatch items size; assmt size \\u003d 2, test item size \\u003d3\"}," +
                    "{\"elementName\":\"item\",\"value\":\"200-70064\",\"error\":\"Missing item with id \\u003d 200-70064\"}," +
                    "{\"elementName\":\"DateCompleted\",\"error\":\"must not be null\"}");
        }
    }

    @Test
    @Sql(statements = { insertImportSql,
            "INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, school_year, name, label, version) VALUES " +
            "(-1, 'exam natural id', 6, 2, 2, 2016, 'SBAC-ICA', 'ELA', '9835');",
            " INSERT INTO item (claim_id, target_id, natural_id, asmt_id, dok_id, difficulty, max_points, math_practice, allow_calc) VALUES \n" +
                    " (null, null, '200-56561', -1, 1, 0.5, 5, null, null)," +
                    " (null, null, '200-46849', -1, 1, 0.5, 5, null, null);"
    })
    public void itShouldReportIABScoreErrors() {

        //note: it reused the ica sample for the test, but since the exam is inserted as IAB, it report errors that are IAB specific
        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.ica.score.errors.xml"));
        try {
            processor.process(tdsReport.getTest(), tdsReport.getOpportunity(), mock(StudentExamAttributes.class), assessmentRepository.findOneByNaturalId("exam natural id"), importId);

        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"elementName\":\"Overall,ScaleScore\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"Overall,PerformanceLevel, Category\",\"value\":\"bad data\",\"error\":\"For input string: \\\"bad data\\\"\"}," +
                    "{\"elementName\":\"items\",\"value\":\"\",\"error\":\"Mismatch items size; assmt size \\u003d 2, test item size \\u003d3\"}," +
                    "{\"elementName\":\"item\",\"value\":\"200-70064\",\"error\":\"Missing item with id \\u003d 200-70064\"}," +
                    "{\"elementName\":\"DateCompleted\",\"error\":\"must not be null\"}");
        }
    }
}