package org.opentestsystem.rdw.ingest.processor.service.impl;


import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.model.StudentGroup;
import org.opentestsystem.rdw.ingest.processor.repository.ExamRepository;
import org.opentestsystem.rdw.ingest.processor.repository.StudentGroupRepository;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;
import org.opentestsystem.rdw.ingest.processor.service.StudentExamWriter;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.verifyZeroInteractions;
import static org.mockito.Mockito.when;

public class DefaultStudentExamWriterTest {

    private final int importId = 99;
    private ExamRepository examRepository;
    private StudentGroupRepository studentGroupRepository;
    private StudentRepository studentRepository;

    private StudentGroup group;
    private Student student;
    private Exam exam;

    private StudentExamWriter writer;

    @Before
    public void setUp() {

        examRepository = mock(ExamRepository.class);
        studentGroupRepository = mock(StudentGroupRepository.class);
        studentRepository = mock(StudentRepository.class);

        writer = new DefaultStudentExamWriter(examRepository, studentGroupRepository, studentRepository);

        group = StudentGroup.builder().name("group1").schoolId(89).schoolYear(200).id(0).build();
        student = Student.builder()
                .groups(newArrayList(group))
                .genderId(1)
                .build();

        exam = Exam.builder().schoolYear(200).build();
        exam.setStudentId(0);
    }

    @Test
    public void itShouldUseRepositoryToSaveStudentAndExam() {
        final Student student = Student.builder().genderId(1).build();
        final Exam exam = Exam.builder().schoolYear(200).build();
        exam.setStudentId(0);

        when(studentRepository.upsert(student, importId)).thenReturn(-99);

        writer.saveNewExam(student, exam, importId);

        verify(studentRepository).upsert(student, importId);
        assertThat(exam.getStudentId()).isEqualTo(-99);
        verify(examRepository).create(exam, importId);
        verifyZeroInteractions(studentGroupRepository);
    }

    @Test
    public void itShouldUseRepositoryToSaveStudentGroupswhenGroupDoesNotExist() {
        when(studentRepository.upsert(student, importId)).thenReturn(-99);
        when(studentGroupRepository.findIdByNameAndSchoolAndYear(group.getName(), group.getSchoolId(), group.getSchoolYear())).thenReturn(null);
        when(studentGroupRepository.upsert(group, importId)).thenReturn(StudentGroup.builder().id(9).build());

        writer.saveNewExam(student, exam, importId);

        verify(studentRepository).upsert(student, importId);
        verify(examRepository).create(exam, importId);
        verify(studentGroupRepository).addStudentToGroups(-99, newArrayList(9), importId);
    }

    @Test
    public void itShouldUseRepositoryAddStudentToExistingGroup() {
        when(studentRepository.upsert(student, importId)).thenReturn(-99);
        when(studentGroupRepository.findIdByNameAndSchoolAndYear(group.getName(), group.getSchoolId(), group.getSchoolYear())).thenReturn(22);
        when(studentGroupRepository.existsStudentInGroup(-99, 22)).thenReturn(false);

        writer.saveNewExam(student, exam, importId);

        verify(studentRepository).upsert(student, importId);
        verify(examRepository).create(exam, importId);
        verify(studentGroupRepository).addStudentToGroups(-99, newArrayList(22), importId);
    }

    @Test
    public void itShouldNotUseRepositoryAddStudentToExistingGroupIfTheStudentIsAlreadyAGroupMember() {
        when(studentRepository.upsert(student, importId)).thenReturn(-99);
        when(studentGroupRepository.findIdByNameAndSchoolAndYear(group.getName(), group.getSchoolId(), group.getSchoolYear())).thenReturn(22);
        when(studentGroupRepository.existsStudentInGroup(-99, 22)).thenReturn(true);

        writer.saveNewExam(student, exam, importId);

        verify(studentRepository).upsert(student, importId);
        verify(examRepository).create(exam, importId);
        verify(studentGroupRepository).findIdByNameAndSchoolAndYear(group.getName(), group.getSchoolId(), group.getSchoolYear());
        verify(studentGroupRepository).existsStudentInGroup(-99, 22);
        verifyNoMoreInteractions(studentGroupRepository);
    }
}