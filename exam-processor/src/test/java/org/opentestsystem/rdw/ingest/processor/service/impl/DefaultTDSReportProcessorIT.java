package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.ExamProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.repository.impl.CachingTest;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.model.TDSReport;
import org.opentestsystem.rdw.model.XmlUtils;
import org.opentestsystem.rdw.utils.TenancyChain;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;


@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ContextConfiguration(classes = {ExamProcessorApplication.class})
public class DefaultTDSReportProcessorIT {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private TDSReportProcessor processor;

    @Test
    public void itShouldProcessMessageWithXmlContent() {

        final int elaClaimCount = 4;
        final int mathClaimCount = 3;

        int beforeItemCount = countRowsInTable(jdbcTemplate, "iab_exam_item") + countRowsInTable(jdbcTemplate, "exam_item");
        int beforeExamCount = countRowsInTable(jdbcTemplate, "iab_exam") + countRowsInTable(jdbcTemplate, "exam");
        int beforeClaimScoreCount = countRowsInTable(jdbcTemplate, "exam_claim_score");

        final TenancyChain tenancyChain = TenancyChain.fromString("|AP|ASMTDATALOAD|STATE|||||AP|ARMED FORCES PACIFIC|||||||||");

        for (final String sample : new String[]{
                "TDSReport.iab.sample.xml",
                "TDSReport.ica.sample.xml",
                "SBAC-IAB-FIXED-G4M-G-MATH-4.xml",
                "SBAC-IAB-FIXED-G6E-LangVocab-ELA-6.xml",
                "SBAC-IAB-FIXED-G6E-ReadLit-ELA-6.xml",
                "SBAC-IAB-FIXED-G6M-EE.xml",
                "SBAC-ICA-FIXED-G4M-COMBINED-2017.xml",
                "SBAC-ICA-FIXED-G6E-COMBINED-2017.xml",
                "SBAC-ICA-FIXED-G6M-COMBINED-2017.xml"
        }) {
            final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/" + sample));
            processor.process(tdsReport, tenancyChain);

            assertThat(countRowsInTable(jdbcTemplate, "iab_exam") + countRowsInTable(jdbcTemplate, "exam")).isEqualTo(beforeExamCount + 1);

            assertThat(countRowsInTable(jdbcTemplate, "iab_exam_student")).isEqualTo(countRowsInTable(jdbcTemplate, "iab_exam"));
            assertThat(countRowsInTable(jdbcTemplate, "exam_student")).isEqualTo(countRowsInTable(jdbcTemplate, "exam"));

            assertThat(countRowsInTable(jdbcTemplate, "iab_exam_item") + countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(beforeItemCount + tdsReport.getOpportunity().getItem().size());
            if (!tdsReport.getTest().getTestId().contains("IAB")) {
                if (tdsReport.getTest().getSubject().equalsIgnoreCase("ELA")) {
                    assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(beforeClaimScoreCount + elaClaimCount);
                    beforeClaimScoreCount += elaClaimCount;
                } else if (tdsReport.getTest().getSubject().equalsIgnoreCase("MATH")) {
                    assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(beforeClaimScoreCount + mathClaimCount);
                    beforeClaimScoreCount += mathClaimCount;
                }
            }
            beforeItemCount += tdsReport.getOpportunity().getItem().size();
            beforeExamCount++;
        }
    }

    @Test(expected = ImportException.class)
    public void itShouldNotProcessForUnauthorized() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/" + "TDSReport.iab.sample.xml"));
        processor.process(tdsReport, TenancyChain.fromString("|AP|ASMTDATALOAD|STATE|||||NA|ARMED FORCES PACIFIC|||||||||"));
    }
}