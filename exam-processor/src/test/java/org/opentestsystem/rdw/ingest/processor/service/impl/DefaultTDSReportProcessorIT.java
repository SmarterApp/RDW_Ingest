package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.ExamProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.service.TDSReportProcessor;
import org.opentestsystem.rdw.model.TDSReport;
import org.opentestsystem.rdw.model.XmlUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;


@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@ContextConfiguration(classes = {ExamProcessorApplication.class})
public class DefaultTDSReportProcessorIT {
    private final static String insertImportSql = "INSERT INTO import (id,status,content,contenttype,digest,created) VALUES " +
            "(-1,0,1, 'application/xml','1D849A91956B74350FF895F067F115E6',CURRENT_DATE);";
    private final static int importId = -1;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private TDSReportProcessor processor;

    @Test
    @Sql(statements = insertImportSql)
    public void itShouldProcessMessageWithXmlContent() {

        final int elaClaimCount = 4;
        final int mathClaimCount = 3;


        int beforeItemCount = countRowsInTable(jdbcTemplate, "exam_item");
        int beforeIabExamCount = countRowsInTableWhere(jdbcTemplate, "exam", "type_id = 2");
        int beforeOtherExamCount = countRowsInTableWhere(jdbcTemplate, "exam", "type_id <> 2");
        int beforeClaimScoreCount = countRowsInTable(jdbcTemplate, "exam_claim_score");

        for (final String sample : new String[]{
                "TDSReport.iab.sample.xml",
                "TDSReport.ica.sample.xml",
                "SBAC-IAB-FIXED-G4M-G-MATH-4.xml",
                "SBAC-IAB-FIXED-G6E-LangVocab-ELA-6.xml",
                "SBAC-IAB-FIXED-G6E-ReadLit-ELA-6.xml",
                "SBAC-IAB-FIXED-G6M-EE.xml",
                "SBAC-ICA-FIXED-G4M-COMBINED-2017.xml",
                "SBAC-ICA-FIXED-G6E-COMBINED-2017.xml",
                "SBAC-ICA-FIXED-G6M-COMBINED-2017.xml"
        }) {
            final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/" + sample));
            processor.process(tdsReport, importId);

            assertThat(countRowsInTable(jdbcTemplate, "exam")).isEqualTo(beforeIabExamCount + beforeOtherExamCount + 1);
            assertThat(countRowsInTable(jdbcTemplate, "exam_student")).isEqualTo(countRowsInTable(jdbcTemplate, "exam"));
            assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(beforeItemCount + tdsReport.getOpportunity().getItem().size());

            if (!tdsReport.getTest().getTestId().contains("IAB")) {
                if (tdsReport.getTest().getSubject().equalsIgnoreCase("ELA")) {
                    assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(beforeClaimScoreCount + elaClaimCount);
                    beforeClaimScoreCount += elaClaimCount;
                } else if (tdsReport.getTest().getSubject().equalsIgnoreCase("MATH")) {
                    assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(beforeClaimScoreCount + mathClaimCount);
                    beforeClaimScoreCount += mathClaimCount;
                }
                assertThat(countRowsInTableWhere(jdbcTemplate, "exam", "type_id <> 2")).isEqualTo(beforeOtherExamCount + 1);
                beforeOtherExamCount++;
            } else {
                assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(beforeClaimScoreCount);
                assertThat(countRowsInTableWhere(jdbcTemplate, "exam", "type_id = 2")).isEqualTo(beforeIabExamCount + 1);
                beforeIabExamCount++;
            }

            beforeItemCount += tdsReport.getOpportunity().getItem().size();

        }
    }

    @Test
    @Sql(statements = insertImportSql)
    public void itShouldHandleLargeItemResponses() {
        // this sample has an item response >64k; before the fix it would throw a data violation exception
        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.largeitem.xml"));
        processor.process(tdsReport, importId);
    }

//    // this is a test that loads external TDSReports that can't be checked in with source
//    @Test
//    public void testExternalReports() throws FileNotFoundException {
//        final File srcdir = new File("/Users/marklaffoon/git/rdw_datagenerator/out");
//        for (final File file : srcdir.listFiles((dir, name) -> name.endsWith(".xml"))) {
//            System.out.println("PROCESSING " + file.getAbsolutePath());
//            try {
//                final TDSReport tdsReport = XmlUtils.tdsReportFromXml(new FileInputStream(file));
//                processor.process(tdsReport);
//                System.out.println("   TDSReport: " + XmlUtils.tdsReportToXml(tdsReport).substring(0, 80));
//            } catch (final Exception e) {
//                System.out.println("   Exception: " + e.getMessage());
//                throw e;
//            }
//        }
//    }
}