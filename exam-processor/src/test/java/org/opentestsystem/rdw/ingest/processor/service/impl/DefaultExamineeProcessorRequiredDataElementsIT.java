package org.opentestsystem.rdw.ingest.processor.service.impl;


import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.trt.TDSReport;
import org.opentestsystem.rdw.common.model.trt.XmlUtils;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.ExamProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.service.ExamineeProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Java6Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles({"required"})  // profile with all required data elements
@ContextConfiguration(classes = {ExamProcessorApplication.class})
@Sql(statements = {
        "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
})
public class DefaultExamineeProcessorRequiredDataElementsIT {
    @Autowired
    private ExamineeProcessor processor;

    @Test(expected = ImportException.class)
    public void itShouldReportStudentParseErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.basic.errors.xml"));
        try {
            processor.parseStudent(tdsReport.getExaminee(), 2016, -99);
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"isDemo\",\"value\":\"true\",\"error\":\"demo students are not supported\"}," +
                    "{\"elementName\":\"FirstName\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"LastOrSurname\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"MiddleName\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"StudentIdentifier\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"Birthdate\",\"value\":\"bad data\",\"error\":\"invalid date [bad data], use format YYYY-MM-DD\"}," +
                    "{\"elementName\":\"Sex\",\"value\":\"bad data\",\"error\":\"unknown gender code [bad data]\"}," +
                    "{\"elementName\":\"FirstEntryDateIntoUSSchool\",\"value\":\"bad data\",\"error\":\"invalid date [bad data], use format YYYY-MM-DD\"}," +
                    "{\"elementName\":\"LimitedEnglishProficiencyEntryDate\",\"value\":\"bad data\",\"error\":\"invalid date [bad data], use format YYYY-MM-DD\"}," +
                    "{\"elementName\":\"LEPExitDate\",\"value\":\"bad data\",\"error\":\"invalid date [bad data], use format YYYY-MM-DD\"}," +
                    "{\"elementName\":\"AmericanIndianOrAlaskaNative\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"Asian\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"BlackOrAfricanAmerican\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"DemographicRaceTwoOrMoreRaces\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"Filipino\",\"error\":\"missing Filipino\"}," +
                    "{\"elementName\":\"HispanicOrLatinoEthnicity\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"NativeHawaiianOrOtherPacificIslander\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"White\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                    "{\"elementName\":\"Ethnicity\",\"value\":\"none\",\"error\":\"must provide an ethnicity\"}," +
                    "{\"elementName\":\"StudentGroupName\",\"value\":\"none\",\"error\":\"must provide a student group\"}" +
                    "]}");
            throw e;
        }
    }

    @Test(expected = ImportException.class)
    public void itShouldReportErrorForMissingRequiredAndMandatoryFieldsWhenAttributeIsEmptyWhenParsingStudent() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.emptyDataElements.xml"));
        try {
            processor.parseStudent(tdsReport.getExaminee(), 2016, -99);
        } catch (final ImportException e) {
            // this test for both mandatory and configured required based on the latest TRT specification at the time this is written
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"isDemo\",\"value\":\"true\",\"error\":\"demo students are not supported\"}," +
                    "{\"elementName\":\"FirstName\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"LastOrSurname\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"MiddleName\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"StudentIdentifier\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"Birthdate\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"Sex\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"FirstEntryDateIntoUSSchool\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"LimitedEnglishProficiencyEntryDate\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"LEPExitDate\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"AmericanIndianOrAlaskaNative\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                    "{\"elementName\":\"Asian\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                    "{\"elementName\":\"BlackOrAfricanAmerican\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                    "{\"elementName\":\"DemographicRaceTwoOrMoreRaces\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                    "{\"elementName\":\"Filipino\",\"error\":\"missing Filipino\"}," +
                    "{\"elementName\":\"HispanicOrLatinoEthnicity\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                    "{\"elementName\":\"NativeHawaiianOrOtherPacificIslander\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                    "{\"elementName\":\"White\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                    "{\"elementName\":\"Ethnicity\",\"value\":\"none\",\"error\":\"must provide an ethnicity\"}," +
                    "{\"elementName\":\"StudentGroupName\",\"value\":\"none\",\"error\":\"must provide a student group\"}" +
                    "]}");
            throw e;
        }
    }

    @Test(expected = ImportException.class)
    public void itShouldReportErrorForMissingRequiredAndMandatoryFieldsWhenParsingStudent() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.noElement.xml"));
        try {
            processor.parseStudent(tdsReport.getExaminee(), 2016, -99);
        } catch (final ImportException e) {
            // this test for both mandatory and configured required based on the latest TRT specification at the time this is written
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"isDemo\",\"value\":\"true\",\"error\":\"demo students are not supported\"}," +
                    "{\"elementName\":\"FirstName\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"LastOrSurname\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"MiddleName\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"StudentIdentifier\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"Birthdate\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"Sex\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"FirstEntryDateIntoUSSchool\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"LimitedEnglishProficiencyEntryDate\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"LEPExitDate\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"AmericanIndianOrAlaskaNative\",\"error\":\"missing AmericanIndianOrAlaskaNative\"}," +
                    "{\"elementName\":\"Asian\",\"error\":\"missing Asian\"}," +
                    "{\"elementName\":\"BlackOrAfricanAmerican\",\"error\":\"missing BlackOrAfricanAmerican\"}," +
                    "{\"elementName\":\"DemographicRaceTwoOrMoreRaces\",\"error\":\"missing DemographicRaceTwoOrMoreRaces\"}," +
                    "{\"elementName\":\"Filipino\",\"error\":\"missing Filipino\"}," +
                    "{\"elementName\":\"HispanicOrLatinoEthnicity\",\"error\":\"missing HispanicOrLatinoEthnicity\"}," +
                    "{\"elementName\":\"NativeHawaiianOrOtherPacificIslander\",\"error\":\"missing NativeHawaiianOrOtherPacificIslander\"}," +
                    "{\"elementName\":\"White\",\"error\":\"missing White\"}," +
                    "{\"elementName\":\"Ethnicity\",\"value\":\"none\",\"error\":\"must provide an ethnicity\"}," +
                    "{\"elementName\":\"StudentGroupName\",\"value\":\"none\",\"error\":\"must provide a student group\"}" +
                    "]}");
            throw e;
        }
    }

    @Test(expected = ImportException.class)
    public void itShouldReportStudentParseErrorsWithLongValues() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.longdata.basic.error.xml"));
        try {
            processor.parseStudent(tdsReport.getExaminee(), 2016, -99);
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"FirstName\",\"value\":\"VeryLongFirstName12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\"error\":\"string is too long, max length is 60\"}," +
                    "{\"elementName\":\"LastOrSurname\",\"value\":\"VeryLongLastName12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\"error\":\"string is too long, max length is 60\"}," +
                    "{\"elementName\":\"MiddleName\",\"value\":\"VeryLongMiddleName12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\"error\":\"string is too long, max length is 60\"}," +
                    "{\"elementName\":\"StudentIdentifier\",\"value\":\"VeryLongSSID12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\"error\":\"string is too long, max length is 65\"}," +
                    "{\"elementName\":\"FirstEntryDateIntoUSSchool\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"LimitedEnglishProficiencyEntryDate\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"LEPExitDate\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"Filipino\",\"error\":\"missing Filipino\"}," +
                    "{\"elementName\":\"StudentGroupName\",\"value\":\"LongGroupName1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890012345678901234567890123456789012345678901234567890\",\"error\":\"string is too long, max length is 255\"}" +
                    "]}");
            throw e;
        }
    }

    @Test
    public void itShouldReportStudentExamAttributesParseErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.basic.errors.xml"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        processor.parseStudentExamAttributes(tdsReport.getExaminee(), -99, errorCollector);
        assertThat(errorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"IDEAIndicator\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                "{\"elementName\":\"Section504Status\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                "{\"elementName\":\"EconomicDisadvantageStatus\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                "{\"elementName\":\"MigrantStatus\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                "{\"elementName\":\"LanguageCode\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"LEPStatus\",\"value\":\"bad data\",\"error\":\"invalid value [bad data]\"}," +
                "{\"elementName\":\"EnglishLanguageProficiencyLevel\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"TitleIIILanguageInstructionProgramType\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"PrimaryDisabilityType\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"GradeLevelWhenAssessed\",\"value\":\"bad data\",\"error\":\"unknown grade code [bad data]\"}," +
                "{\"elementName\":\"EnglishLanguageAcquisitionStatus\",\"value\":\"bad data\",\"error\":\"unknown elas code [bad data]\"}," +
                "{\"elementName\":\"EnglishLanguageAcquisitionStatusStartDate\",\"value\":\"bad data\",\"error\":\"invalid date [bad data], use format YYYY-MM-DD\"}" +
                "]}");
    }

    @Test
    public void itShouldReportStudentExamAttributesParseErrorsWithLongValue() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.longdata.basic.error.xml"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        processor.parseStudentExamAttributes(tdsReport.getExaminee(), -99, errorCollector);
        assertThat(errorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"LanguageCode\",\"value\":\"LongLanguageCode\",\"error\":\"string is too long, max length is 3\"}," +
                "{\"elementName\":\"EnglishLanguageProficiencyLevel\",\"value\":\"LongEnglishLanguageProficiencyLevel012345678\",\"error\":\"string is too long, max length is 20\"}," +
                "{\"elementName\":\"TitleIIILanguageInstructionProgramType\",\"value\":\"LongTitleIIILanguageInstructionProgramType\",\"error\":\"string is too long, max length is 30\"}," +
                "{\"elementName\":\"PrimaryDisabilityType\",\"value\":\"LongPrimaryDisabilityType\",\"error\":\"string is too long, max length is 3\"}," +
                "{\"elementName\":\"EnglishLanguageAcquisitionStatus\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"EnglishLanguageAcquisitionStatusStartDate\",\"error\":\"value may not be blank\"}" +
                "]}");
    }

    @Test
    public void itShouldReportErrorForMissingRequiredAndMandatoryFieldsWhenAttributeIsEmptyWhenParsingStudentExamAttributes() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.emptyDataElements.xml"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        processor.parseStudentExamAttributes(tdsReport.getExaminee(), -99, errorCollector);
        assertThat(errorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"IDEAIndicator\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                "{\"elementName\":\"Section504Status\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                "{\"elementName\":\"EconomicDisadvantageStatus\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                "{\"elementName\":\"MigrantStatus\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                "{\"elementName\":\"LanguageCode\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"LEPStatus\",\"value\":\"\",\"error\":\"invalid value []\"}," +
                "{\"elementName\":\"EnglishLanguageProficiencyLevel\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"TitleIIILanguageInstructionProgramType\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"PrimaryDisabilityType\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"GradeLevelWhenAssessed\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"EnglishLanguageAcquisitionStatus\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"EnglishLanguageAcquisitionStatusStartDate\",\"value\":\"\",\"error\":\"value may not be blank\"}" +
                "]}");
    }

    @Test
    public void itShouldReportErrorForMissingRequiredAndMandatoryFieldsWhenParsingStudentExamAttributes() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.noElement.xml"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        processor.parseStudentExamAttributes(tdsReport.getExaminee(), -99, errorCollector);
        assertThat(errorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"IDEAIndicator\",\"error\":\"invalid value [null]\"}," +
                "{\"elementName\":\"Section504Status\",\"error\":\"invalid value [null]\"}," +
                "{\"elementName\":\"EconomicDisadvantageStatus\",\"error\":\"invalid value [null]\"}," +
                "{\"elementName\":\"MigrantStatus\",\"error\":\"invalid value [null]\"}," +
                "{\"elementName\":\"LanguageCode\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"LEPStatus\",\"error\":\"invalid value [null]\"}," +
                "{\"elementName\":\"EnglishLanguageProficiencyLevel\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"TitleIIILanguageInstructionProgramType\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"PrimaryDisabilityType\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"GradeLevelWhenAssessed\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"EnglishLanguageAcquisitionStatus\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"EnglishLanguageAcquisitionStatusStartDate\",\"error\":\"value may not be blank\"}" +
                "]}");
    }

    @Test(expected = ImportException.class)
    public void itShouldReportSchoolParseErrors() {

        final TDSReport tdsReport = XmlUtils.tdsReportFromXml(this.getClass().getResourceAsStream("/TDSReport.iab.basic.errors.xml"));
        try {
            processor.parseSchoolId(tdsReport.getExaminee());
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("unable to find a school with natural id []. School name: null, district id: [null], district name: null");
            throw e;
        }
    }
}
