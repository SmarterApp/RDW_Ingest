package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.text.ParseException;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.jdbc.JdbcTestUtils;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class StudentRepositoryIT {
    @Autowired
    private StudentRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    @Sql(statements = {
            "INSERT INTO student (id, ssid, last_or_surname, first_name, middle_name, gender_id, ethnicity_id, first_entry_into_us_school_at, lep_entry_at, lep_exit_at, birthday) VALUES\n" +
                    "  (999, '6666666669', 'LastName6', 'FirstName6', 'MiddleName6', 1, 4, '2015-09-01', null, null, '2006-01-01');"
    })
    public void itShouldFindExisting() throws ParseException {
        assertThat(repository.upsert(Student.builder()
                .withSsid("6666666669")
                .withFirstName("FirstName6")
                .withLastOrSurname("LastName6")
                .withMiddleName("MiddleName6")
                .withBirthday("2006-01-01")
                .withGenderId(1)
                .withEthnicityId(4)
                .build())).isEqualTo(999);
    }


    @Test
    public void itShouldCreateNew() throws ParseException {
        assertThat(JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "student", "ssid = '6666666669'")).isZero();
        long id = repository.upsert(Student.builder()
                .withSsid("6666666669")
                .withFirstName("FirstName6")
                .withLastOrSurname("LastName6")
                .withMiddleName("MiddleName6")
                .withBirthday("2006-01-01")
                .withGenderId(1)
                .withEthnicityId(4)
                .build());
        assertThat(JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "student", "ssid = '6666666669'")).isEqualTo(1);
    }

    @Test
    @Sql(statements = {
            "INSERT INTO student (id, ssid, last_or_surname, first_name, middle_name, gender_id, ethnicity_id, first_entry_into_us_school_at, lep_entry_at, lep_exit_at, birthday) VALUES\n" +
                    "  (999, '6666666669', 'LastName6', 'FirstName6', 'MiddleName6', 1, 4, '2015-09-01', null, null, '2006-01-01');"
    })
    public void itShouldFindAndUpdateExisting() throws ParseException {
        assertThat(countRowsInTableWhere(jdbcTemplate, "student", "id=999 and first_name ='FirstName - New Name' and " +
                "last_or_surname = 'LastName - New Name' and middle_name='MiddleName - New Name' and birthday='2007-01-01' and " +
                "gender_id=0 and ethnicity_id = 0 ")).isZero();

        assertThat(repository.upsert(Student.builder()
                .withSsid("6666666669")
                .withFirstName("FirstName - New Name")
                .withLastOrSurname("LastName - New Name")
                .withMiddleName("MiddleName - New Name")
                .withBirthday("2007-01-01")
                .withGenderId(0)
                .withEthnicityId(0)
                .build())).isEqualTo(999);

        assertThat(countRowsInTableWhere(jdbcTemplate, "student", "id=999 and first_name ='FirstName - New Name' and " +
                "last_or_surname = 'LastName - New Name' and middle_name='MiddleName - New Name' and birthday='2007-01-01' and " +
                "gender_id=0 and ethnicity_id = 0 ")).isEqualTo(1);

    }
}