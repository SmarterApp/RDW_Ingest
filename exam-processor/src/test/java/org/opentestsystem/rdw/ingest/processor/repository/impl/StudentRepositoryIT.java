package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.text.ParseException;
import java.time.LocalDate;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.jdbc.JdbcTestUtils;
import org.springframework.transaction.annotation.Transactional;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class StudentRepositoryIT {

    @Autowired
    private StudentRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private Student.Builder studentBuilder;

    private final Long studentId = -999L;
    private final String studentSQL = "INSERT INTO student (id, ssid, last_or_surname, first_name, middle_name, gender_id, first_entry_into_us_school_at, lep_entry_at, lep_exit_at, birthday) " +
            "VALUES  (-999, '6666666669', 'LastName6', 'FirstName6', 'MiddleName6', 1, '2015-09-02', null, null, '2006-07-08')";

    @Before
    public void setUp() throws ParseException {
        studentBuilder = Student.builder()
                .ssid("6666666669")
                .firstName("FirstName6")
                .lastOrSurname("LastName6")
                .middleName("MiddleName6")
                .birthday(LocalDate.parse("2006-07-08"))
                .firsEntryIntoUSSchoolAt(LocalDate.parse("2015-09-02"))
                .lepEntryAt(null)
                .lepExitAt(null)
                .genderId(1);
    }

    @Test
    @Sql(statements = {
            studentSQL,
            "INSERT INTO student_ethnicity (student_id, ethnicity_id) VALUES (-999, 6), (-999, 4)"
    })
    public void itShouldFindExisting() throws ParseException {
        final int countRowInStudentBefore = JdbcTestUtils.countRowsInTable(jdbcTemplate, "student");
        assertThat(JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "student_ethnicity", "student_id = " + studentId)).isEqualTo(2);

        final List<Integer> ethnicity = newArrayList();
        ethnicity.add(4);
        ethnicity.add(6);

        assertThat(repository.upsert(studentBuilder.ethnicityIds(ethnicity).build())).isEqualTo(studentId);

        //verify that number of rows has not changed
        assertThat(JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "student_ethnicity", "student_id =" + studentId)).isEqualTo(2);
        assertThat(JdbcTestUtils.countRowsInTable(jdbcTemplate, "student")).isEqualTo(countRowInStudentBefore);
    }

    public void itShouldCreateNew() throws ParseException {

        final int countRowInStudentBefore = JdbcTestUtils.countRowsInTable(jdbcTemplate, "student");
        assertThat(JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "student", "ssid = '6666666669'")).isZero();

        repository.upsert(studentBuilder.build());

        assertThat(JdbcTestUtils.countRowsInTableWhere(jdbcTemplate, "student", "ssid = '6666666669'")).isEqualTo(1);
        assertThat(JdbcTestUtils.countRowsInTable(jdbcTemplate, "student")).isEqualTo(countRowInStudentBefore + 1);
    }

    @Test
    @Sql(statements = {
            studentSQL,
            "INSERT INTO student_ethnicity (student_id, ethnicity_id) VALUES (-999, 6), (-999, 4)"

    })
    public void itShouldFindAndUpdateExistingWithNoChangeToEthnicity() throws ParseException {

        final String newStudentSQL = "id=" + studentId + " and first_name ='FirstName - New Name' and " +
                "last_or_surname = 'LastName - New Name' and middle_name='MiddleName - New Name' and birthday='1999-05-01' and " +
                "gender_id=0";

        assertThat(countRowsInTableWhere(jdbcTemplate, "student", newStudentSQL)).isZero();
        final int countRowInStudentBefore = JdbcTestUtils.countRowsInTable(jdbcTemplate, "student");

        final List<Integer> ethnicity = newArrayList();
        ethnicity.add(4);
        ethnicity.add(6);

        assertThat(repository.upsert(Student.builder()
                .ssid("6666666669")
                .firstName("FirstName - New Name")
                .lastOrSurname("LastName - New Name")
                .middleName("MiddleName - New Name")
                .birthday(LocalDate.parse("1999-05-01"))
                .ethnicityIds(ethnicity)
                .genderId(0)
                .build())).isEqualTo(-999);

        assertThat(JdbcTestUtils.countRowsInTable(jdbcTemplate, "student")).isEqualTo(countRowInStudentBefore);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student", newStudentSQL)).isEqualTo(1);
    }

    @Test
    @Sql(statements = {
            studentSQL,
            "INSERT INTO student_ethnicity (student_id, ethnicity_id) VALUES (-999, 6), (-999, 4)"
    })
    public void itShouldFindAndUpdateExistingIfOnlyEthnicityChanges() throws ParseException {

        final int countRowInStudentBefore = JdbcTestUtils.countRowsInTable(jdbcTemplate, "student");
        final int countRowInEthnBefore = JdbcTestUtils.countRowsInTable(jdbcTemplate, "student_ethnicity");

        final List<Integer> ethnicity = newArrayList();
        ethnicity.add(4);

        assertThat(repository.upsert(studentBuilder.ethnicityIds(ethnicity).build())).isEqualTo(studentId);

        assertThat(JdbcTestUtils.countRowsInTable(jdbcTemplate, "student")).isEqualTo(countRowInStudentBefore);
        assertThat(JdbcTestUtils.countRowsInTable(jdbcTemplate, "student_ethnicity")).isEqualTo(countRowInEthnBefore - 1);

        assertThat(repository.upsert(studentBuilder.ethnicityIds(newArrayList()).build())).isEqualTo(studentId);

        assertThat(JdbcTestUtils.countRowsInTable(jdbcTemplate, "student")).isEqualTo(countRowInStudentBefore);
        assertThat(JdbcTestUtils.countRowsInTable(jdbcTemplate, "student_ethnicity")).isEqualTo(countRowInEthnBefore - 2);
    }
}