package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.ExamClaim;
import org.opentestsystem.rdw.ingest.processor.model.ExamItem;
import org.opentestsystem.rdw.ingest.processor.model.ExamItemSubScore;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.repository.ExamRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.text.ParseException;
import java.time.Instant;
import java.time.LocalDate;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO import (id,status,content,contenttype,digest,created) VALUES " +
                "(-1,0,1, 'application/xml','1D849A91956B74350FF895F067F115E6',CURRENT_DATE);" +
                "INSERT IGNORE INTO district (id, name, natural_id) VALUES\n" +
                "  (-11, 'Sample District 1', 'District1NaturalId');",
        "INSERT IGNORE INTO school (id, district_id, name, natural_id, import_id, update_import_id) VALUES\n" +
                "  (-12, -11, 'Sample School 1', 'School1NaturalId', -1, -1);",
        "INSERT INTO student (id, ssid, last_or_surname, first_name, middle_name, gender_id, first_entry_into_us_school_at, lep_entry_at, lep_exit_at, birthday, import_id, update_import_id) VALUES\n" +
                "  (-11, '6666666666', 'LastName6', 'FirstName6', 'MiddleName6', 1, '2015-09-01', null, null, '2006-01-01', -1, -1);",
        "INSERT INTO asmt (id, natural_id, grade_id,type_id, subject_id, school_year, name, label, version, import_id, update_import_id) VALUES\n" +
                "  (-1, '(SBAC)SBAC-ICA-FIXED-G5E-COMBINED-2017', 5, 1, 2, 2016, 'SBAC-ICA-FIXED-G5E-COMBINED-2017', 'Grade 5 ELA', '9831', -1, -1);\n",
        "INSERT INTO item (id, claim_id, target_id, natural_id, asmt_id, dok_id, difficulty, max_points, math_practice, allow_calc) VALUES \n" +
                " (-1, 1, 1, 'item1', -1, 1, 0.5, 5, null, null)," +
                " (-2, 1, 1, 'item3', -1, 1, 0.5, 5, null, null);",
        "INSERT INTO accommodation (id, code) VALUES (-99, 'ACC_CODE1');"
})
public class ExamRepositoryIT {

    @Autowired
    private ExamRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    //TODO: we do not have a referential integrity enforced on the db, hence we can use any data. We should consider adding system level reports to check for issues
    private final String examClaim1ScoreWhereSql = "subject_claim_score_id = - 1 and cast(scale_score as decimal(5,2)) = 1 and cast(scale_score_std_err as decimal(5,2))= 2 and category = 1";
    private final String examClaim2ScoreWhereSql = "subject_claim_score_id = - 2 and cast(scale_score as decimal(5,2)) = 2 and cast(scale_score_std_err as decimal(5,2))= 3 and category = 1";
    private final String examClaim3ScoreWhereSql = "subject_claim_score_id = - 3 and cast(scale_score as decimal(5,2)) = 3 and cast(scale_score_std_err as decimal(5,2))= 4 and category = 1";

    private final String examStudentWhereSql = "student_id = -11 and " +
            "economic_disadvantage = 1 and " +
            "eng_prof_lvl = 'engl prof' and " +
            "grade_id = 1 and " +
            "iep = 1 and " +
            "language_code = 'CDE' and " +
            "lep = 0 and " +
            "migrant_status = 0 and " +
            "prim_disability_type = 'PD' and " +
            "school_id = -12 and " +
            "section504 = 1 and " +
            "t3_program_type = 't3'";

    private final String examWhereSql = "type_id = 1 and school_year = 2015 and performance_level = 5 and " +
            "administration_condition_id = 1 and " +
            "asmt_version = '345' and " +
            "asmt_id = -1 and " +
            "completed_at = convert_tz(timestamp('2007-01-02T14:30:00Z'), '+00:00', @@session.time_zone) and " +
            "completeness_id = 1 and " +
            "opportunity = 7 and " +
            "cast(scale_score as decimal(5,2)) =  77.7 and " +
            "cast(scale_score_std_err as decimal(5,2)) =  6.6 and " +
            "session_id =  'session'";

    private Exam.Builder builder;

    @Before
    public void setUp() throws ParseException {

        builder = Exam.builder()
                .typeId(AssessmentType.ICA.id())
                .performanceLevel(5)
                .administrationConditionId(1)
                .asmtVersion("345")
                .assessmentId(-1)
                .completedAt(Instant.parse("2007-01-02T14:30:00Z"))
                .schoolYear(2015L)
                .completenessId(1)
                .opportunity(7L)
                .scaleScore(77.7)
                .scaleScoreStdErr(6.6)
                .sessionId("session")
                .student(Student.builder()
                        .ssid("6666666666")
                        .genderId(1)
                        .lastOrSurname("LastName6")
                        .firstName("FirstName6")
                        .birthday(LocalDate.parse("2006-01-01"))
                        .studentExamAttributes(StudentExamAttributes.builder()
                                .economicDisadvantage(true)
                                .engProfLvl("engl prof")
                                .gradeId(1)
                                .ideaIndicator(true)
                                .languageCode("CDE")
                                .lep(false)
                                .migrantStatus(false)
                                .primDisabilityType("PD")
                                .responsibleSchoolId(-12)
                                .section504(true)
                                .t3ProgramType("t3")
                                .build()
                        ).build());

        final List<ExamClaim> claims = newArrayList();
        for (int claim = 1; claim < 4; claim++) {
            claims.add(ExamClaim.builder()
                    .claimId(-1 * claim)
                    .category(1)
                    .scaleScore((double) claim)
                    .scaleScoreStdErr((double) claim + 1)
                    .build());
        }
        builder.examClaims(claims);

        final List<ExamItem> items = newArrayList();
        final List<ExamItemSubScore> subScores = newArrayList();
        subScores.add(new ExamItemSubScore(1, 1.1, "status1"));
        subScores.add(new ExamItemSubScore(2, 2.2, "status2"));
        subScores.add(new ExamItemSubScore(3, 3.3, "status3"));
        items.add(ExamItem.builder().itemId(-1).score(3.7).scoreStatus("status A").response("test response A").position(1L).subScoreList(subScores).build());
        items.add(ExamItem.builder().itemId(-2).score(7.8).scoreStatus("status B").response("test response B").position(2L).build());

        builder.examItems(items);

        final List<Integer> accommodations = newArrayList();
        accommodations.add(-99);
        builder.accommodationIds(accommodations);

    }

    @Test
    public void itShouldCreateExamsWithNoItemsAndClaims() {

        builder.examClaims(null).examItems(null);

        final int beforeExamStudentCount = countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql);
        final int beforeExamCount = countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql);
        final int beforeExamClaimScoreCount = countRowsInTable(jdbcTemplate, "exam_claim_score");
        final int beforeExamItemCount = countRowsInTable(jdbcTemplate, "exam_item");
        final int beforeExamAccommodationCount = countRowsInTable(jdbcTemplate, "exam_available_accommodation");

        repository.create(builder.build(), -1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql)).isEqualTo(beforeExamStudentCount + 1);

        final long examStudentId = jdbcTemplate.queryForObject("SELECT id FROM exam_student WHERE " + examStudentWhereSql, Long.class);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql + " and exam_student_id =  " + examStudentId)).isEqualTo(beforeExamCount + 1);

        assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(beforeExamItemCount);
        assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(beforeExamClaimScoreCount);
        assertThat(countRowsInTable(jdbcTemplate, "exam_available_accommodation")).isEqualTo(beforeExamAccommodationCount + 1);
    }

    @Test
    public void itShouldCreateExamsWithClaims() {

        builder.examItems(null);

        final int beforeExamStudentCount = countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql);
        final int beforeExamCount = countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql);
        final int beforeExamItemCount = countRowsInTable(jdbcTemplate, "exam_item");
        final int beforeExamClaimScoreCount = countRowsInTable(jdbcTemplate, "exam_claim_score");
        final int beforeExamAccommodationCount = countRowsInTable(jdbcTemplate, "exam_available_accommodation");

        final long examId = repository.create(builder.build(), -1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql)).isEqualTo(beforeExamStudentCount + 1);

        final long examStudentId = jdbcTemplate.queryForObject("SELECT id FROM exam_student WHERE " + examStudentWhereSql, Long.class);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql + " and exam_student_id =  " + examStudentId)).isEqualTo(beforeExamCount + 1);

        assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(beforeExamItemCount);

        assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(beforeExamClaimScoreCount + 3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim1ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim2ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim3ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTable(jdbcTemplate, "exam_available_accommodation")).isEqualTo(beforeExamAccommodationCount + 1);
    }

    @Test
    public void itShouldCreateExams() {
        final int beforeExamStudentCount = countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql);
        final int beforeExamCount = countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql);
        final int beforeExamItemCount = countRowsInTable(jdbcTemplate, "exam_item");
        final int beforeExamClaimScoreCount = countRowsInTable(jdbcTemplate, "exam_claim_score");
        final int beforeExamAccommodationCount = countRowsInTable(jdbcTemplate, "exam_available_accommodation");

        final long examId = repository.create(builder.build(), -1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql)).isEqualTo(beforeExamStudentCount + 1);

        final long examStudentId = jdbcTemplate.queryForObject("SELECT id FROM exam_student WHERE " + examStudentWhereSql, Long.class);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql + " and exam_student_id =  " + examStudentId)).isEqualTo(beforeExamCount + 1);

        assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(beforeExamItemCount + 2);

        assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(beforeExamClaimScoreCount + 3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim1ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim2ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim3ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);

        final String examItem1WhereSql = "item_id = -1 and cast(score as decimal(5,2)) = 3.7 and score_status = 'status A' and response = 'test response A'" +
                " and cast(trait_evidence_elaboration_score as decimal(5,2)) = 1.1 and trait_evidence_elaboration_score_status ='status1'" +
                " and cast(trait_organization_purpose_score as decimal(5,2)) = 2.2 and trait_organization_purpose_score_status = 'status2'" +
                " and cast(trait_conventions_score as decimal(5,2)) = 3.3 and trait_conventions_score_status = 'status3'";
        final String examItem2WhereSql = "item_id = -2 and cast(score as decimal(5,2)) = 7.8 and score_status = 'status B' and response = 'test response B'" +
                " and trait_evidence_elaboration_score is null and trait_evidence_elaboration_score_status is null" +
                " and trait_organization_purpose_score is null and trait_organization_purpose_score_status is null" +
                " and trait_conventions_score is null and trait_conventions_score_status is null";

        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_item", examItem1WhereSql + " and exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_item", examItem2WhereSql + " and exam_id = " + examId)).isEqualTo(1);

        // verify that another request to create the same exam will insert a new record
        assertThat(repository.create(builder.build(), -1)).isNotEqualTo(examId);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql)).isEqualTo(beforeExamStudentCount + 2);

        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql)).isEqualTo(beforeExamCount + 2);
        assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(beforeExamClaimScoreCount + 6);
        assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(beforeExamItemCount + 4);
        assertThat(countRowsInTable(jdbcTemplate, "exam_available_accommodation")).isEqualTo(beforeExamAccommodationCount + 2);
    }
}