package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.text.ParseException;
import java.util.List;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.ExamClaim;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.repository.ExamRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class ExamRepositoryIT {

    @Autowired
    private ExamRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    @Sql(statements = {
            "INSERT IGNORE INTO district (id, name, natural_id) VALUES\n" +
                    "  (-11, 'Sample District 1', '01247430000000');",
            "INSERT IGNORE INTO school (id, district_id, name, natural_id) VALUES\n" +
                    "  (-12, -11, 'Sample School 1', '30664640124743');",
            "INSERT INTO student (id, ssid, last_or_surname, first_name, middle_name, gender_id, ethnicity_id, first_entry_into_us_school_at, lep_entry_at, lep_exit_at, birthday) VALUES\n" +
                    "  (-11, '6666666666', 'LastName6', 'FirstName6', 'MiddleName6', 1, 4, '2015-09-01', null, null, '2006-01-01');",
            "INSERT INTO asmt (id, natural_id, grade_id,type_id, subject_id, academic_year, name, label, version) VALUES\n" +
                    "  (-1, 'SBAC)SBAC-ICA-FIXED-G5E-COMBINED-2017-Winter-2016-2017', 5, 1, 2, 2016, 'SBAC-ICA-FIXED-G5E-COMBINED-2017', 'Grade 5 ELA', '9831');\n",
            "INSERT INTO claim (id, asmt_id, min_score, max_score, code) VALUES\n" +
                    "  (-1, -1, null, null, 'SBAC-2-W'),\n" +
                    "  (-2, -1, null, null, 'SBAC-4-CR'),\n" +
                    "  (-3, -1, null, null, 'SOCK_LS');",
    })
    public void itShouldCreateExam() throws ParseException {

        final List<ExamClaim> claims = newArrayList();
        for (int claim = 1; claim < 3; claim++) {
            claims.add(ExamClaim.builder()
                    .withClaimId(-1 * claim)
                    .withCategory(1)
                    .withScaleScore(claim)
                    .withScaleScoreStdErr(claim + 1)
                    .build());
        }

        final String examStudentSQl = "SELECT count(*) from exam_student where " +
                "grade_id = 1 and student_id = -11 and school_id = -12 and iep = 1 and lep = 0 and section504 = 1 and " +
                "economic_disadvantage = 1 and migrant_status = 0 and eng_prof_lvl = 'engl prof' and t3_program_type = 't3' and language_code = 'CDE' and prim_disability_type = 'PD';";


        Integer examStudentCount = jdbcTemplate.queryForObject(examStudentSQl, Integer.class);
        assertThat(examStudentCount).isEqualTo(0);

        final long examId = repository.create(
                Exam.builder()
                        .withExamClaims(claims)
                        .withAchievementLevel(5)
                        .withExamItems(null)//// TODO:
                        .withAdministrationConditionId(1)
                        .withAsmtVersion("345")
                        .withAssessmentId(-1)
                        .withAvailableAccommodations(null)
                        .withCompletedAt("2007-01-02")
                        .withCompleteness(1)
                        .withOpportunity(7)
                        .withScaleScore(77.7f)
                        .withScaleScoreStdErr(6.6f)
                        .withSessionId("session")
                        .withStatus("status")
                        .withValid(false)
                        .withStudentAttributes(
                                StudentExamAttributes.builder()
                                        .withStudentId(-11L)
                                        .withEconomicDisadvantage(true)
                                        .withEngProfLvl("engl prof")
                                        .withGradeId(1)
                                        .withIdeaIndicator(true)
                                        .withLanguageCode("CDE")
                                        .withLep(false)
                                        .withMigrantStatus(false)
                                        .withPrimDisabilityType("PD")
                                        .withResponsibleSchoolId(-12)
                                        .withSection504(true)
                                        .withT3ProgramType("t3")
                                        .build()
                        ).build());

        examStudentCount = jdbcTemplate.queryForObject(examStudentSQl, Integer.class);
        assertThat(examStudentCount).isEqualTo(1);

    }

}