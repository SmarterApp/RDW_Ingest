package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.model.Exam;
import org.opentestsystem.rdw.ingest.processor.model.ExamClaim;
import org.opentestsystem.rdw.ingest.processor.model.ExamItem;
import org.opentestsystem.rdw.ingest.processor.model.ExamItemSubScore;
import org.opentestsystem.rdw.ingest.processor.model.StudentExamAttributes;
import org.opentestsystem.rdw.ingest.processor.repository.ExamRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Sql(statements = {
        "INSERT IGNORE INTO district (id, name, natural_id) VALUES\n" +
                "  (-11, 'Sample District 1', '01247430000000');",
        "INSERT IGNORE INTO school (id, district_id, name, natural_id) VALUES\n" +
                "  (-12, -11, 'Sample School 1', '30664640124743');",
        "INSERT INTO student (id, ssid, last_or_surname, first_name, middle_name, gender_id, first_entry_into_us_school_at, lep_entry_at, lep_exit_at, birthday) VALUES\n" +
                "  (-11, '6666666666', 'LastName6', 'FirstName6', 'MiddleName6', 1, '2015-09-01', null, null, '2006-01-01');",
        "INSERT INTO asmt (id, natural_id, grade_id,type_id, subject_id, school_year, name, label, version) VALUES\n" +
                "  (-1, '(SBAC)SBAC-ICA-FIXED-G5E-COMBINED-2017-Winter-2016-2017', 5, 1, 2, 2016, 'SBAC-ICA-FIXED-G5E-COMBINED-2017', 'Grade 5 ELA', '9831');\n"
})
public class ExamRepositoryIT {

    @Autowired
    private ExamRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    //TODO: we do not have a referential integrity enforced on the db, hence we can use any data. We should consider adding system level reports to check for issues
    private final String examClaim1ScoreWhereSql = "subject_claim_score_id = - 1 and cast(scale_score as decimal(5,2)) = 1 and cast(scale_score_std_err as decimal(5,2))= 2 and category = 1";
    private final String examClaim2ScoreWhereSql = "subject_claim_score_id = - 2 and cast(scale_score as decimal(5,2)) = 2 and cast(scale_score_std_err as decimal(5,2))= 3 and category = 1";
    private final String examClaim3ScoreWhereSql = "subject_claim_score_id = - 3 and cast(scale_score as decimal(5,2)) = 3 and cast(scale_score_std_err as decimal(5,2))= 4 and category = 1";

    private final String examStudentWhereSql = "student_id = -11 and " +
            "economic_disadvantage = 1 and " +
            "eng_prof_lvl = 'engl prof' and " +
            "grade_id = 1 and " +
            "iep = 1 and " +
            "language_code = 'CDE' and " +
            "lep = 0 and " +
            "migrant_status = 0 and " +
            "prim_disability_type = 'PD' and " +
            "school_id = -12 and " +
            "section504 = 1 and " +
            "t3_program_type = 't3'";

    private final String examWhereSql = "achievement_level = 5 and " +
            "administration_condition_id = 1 and " +
            "asmt_version = '345' and " +
            "asmt_id = -1 and " +
            "completed_at = '2007-01-02' and " +
            "completeness_id = 1 and " +
            "opportunity = 7 and " +
            "cast(scale_score as decimal(5,2)) =  77.7 and " +
            "cast(scale_score_std_err as decimal(5,2)) =  6.6 and " +
            "session_id =  'session' and " +
            "status =  'status'";

    private Exam.Builder builder;

    @Before
    public void setUp() throws ParseException {

        builder = Exam.builder()
                .achievementLevel(5)
                .administrationConditionId(1)
                .asmtVersion("345")
                .assessmentId(-1)
                .completedAt(new SimpleDateFormat("yyyyy-mm-dd").parse("2007-01-02"))
                .completenessId(1)
                .opportunity(7L)
                .scaleScore(77.7)
                .scaleScoreStdErr(6.6)
                .sessionId("session")
                .status("status")
                .studentAttributes(
                        StudentExamAttributes.builder()
                                .studentId(-11L)
                                .economicDisadvantage(true)
                                .engProfLvl("engl prof")
                                .gradeId(1)
                                .ideaIndicator(true)
                                .languageCode("CDE")
                                .lep(false)
                                .migrantStatus(false)
                                .primDisabilityType("PD")
                                .responsibleSchoolId(-12)
                                .section504(true)
                                .t3ProgramType("t3").build());

        final List<ExamClaim> claims = newArrayList();
        for (int claim = 1; claim < 4; claim++) {
            claims.add(ExamClaim.builder()
                    .claimId(-1 * claim)
                    .category(1)
                    .scaleScore((double) claim)
                    .scaleScoreStdErr((double) claim + 1)
                    .build());
        }
        builder.examClaims(claims);

        final List<ExamItem> items = newArrayList();
        final List<ExamItemSubScore> subScores = newArrayList();
        subScores.add(new ExamItemSubScore(1, 1.1, "status1"));
        subScores.add(new ExamItemSubScore(2, 2.2, "status2"));
        subScores.add(new ExamItemSubScore(3, 3.3, "status3"));
        items.add(ExamItem.builder().naturalId("375").score(3.7).scoreStatus("status A").response("test response A").position(1L).subScoreList(subScores).build());
        items.add(ExamItem.builder().naturalId("378").score(7.8).scoreStatus("status B").response("test response B").position(2L).build());

        builder.examItems(items);

    }

    @Test
    public void itShouldCreateExamsWithNoItemsAndClaims() {

        builder.examClaims(null).examItems(null);

        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql)).isEqualTo(0);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql)).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(0);

        repository.create(builder.build());
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql)).isEqualTo(1);

        final long examStudentId = jdbcTemplate.queryForObject("select id from exam_student where " + examStudentWhereSql, Long.class);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql + " and exam_student_id =  " + examStudentId)).isEqualTo(1);

        assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(0);
    }

    @Test
    public void itShouldCreateExamsWithClaims() {

        builder.examItems(null);

        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql)).isEqualTo(0);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql)).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(0);

        final long examId = repository.create(builder.build());
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql)).isEqualTo(1);

        final long examStudentId = jdbcTemplate.queryForObject("select id from exam_student where " + examStudentWhereSql, Long.class);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql + " and exam_student_id =  " + examStudentId)).isEqualTo(1);

        assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(0);

        assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim1ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim2ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim3ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);
    }

    @Test
    public void itShouldCreateExams() {
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql)).isEqualTo(0);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql)).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(0);

        final long examId = repository.create(builder.build());
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql)).isEqualTo(1);

        final long examStudentId = jdbcTemplate.queryForObject("select id from exam_student where " + examStudentWhereSql, Long.class);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql + " and exam_student_id =  " + examStudentId)).isEqualTo(1);

        assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(2);

        assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim1ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim2ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_claim_score", examClaim3ScoreWhereSql + " and exam_id = " + examId)).isEqualTo(1);

        final String examItem1WhereSql = "item_natural_id = '375' and cast(score as decimal(5,2)) = 3.7 and score_status = 'status A' and response = 'test response A'" +
                " and cast(trait_evidence_elaboration_score as decimal(5,2)) = 1.1 and trait_evidence_elaboration_score_status ='status1'" +
                " and cast(trait_organization_purpose_score as decimal(5,2)) = 2.2 and trait_organization_purpose_score_status = 'status2'" +
                " and cast(trait_conventions_score as decimal(5,2)) = 3.3 and trait_conventions_score_status = 'status3'";
        final String examItem2WhereSql = "item_natural_id = '378' and cast(score as decimal(5,2)) = 7.8 and score_status = 'status B' and response = 'test response B'" +
                " and trait_evidence_elaboration_score is null and trait_evidence_elaboration_score_status is null" +
                " and trait_organization_purpose_score is null and trait_organization_purpose_score_status is null" +
                " and trait_conventions_score is null and trait_conventions_score_status is null";

        assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_item", examItem1WhereSql + " and exam_id = " + examId)).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_item", examItem2WhereSql + " and exam_id = " + examId)).isEqualTo(1);

        // verify that another request to create the same exam will insert a new record
        assertThat(repository.create(builder.build())).isNotEqualTo(examId);
        assertThat(countRowsInTableWhere(jdbcTemplate, "exam_student", examStudentWhereSql)).isEqualTo(2);

        assertThat(countRowsInTableWhere(jdbcTemplate, "exam", examWhereSql)).isEqualTo(2);
        assertThat(countRowsInTable(jdbcTemplate, "exam_claim_score")).isEqualTo(6);
        assertThat(countRowsInTable(jdbcTemplate, "exam_item")).isEqualTo(4);
    }
}