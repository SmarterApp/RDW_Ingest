package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.AssessmentScore;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentRepository;

import static com.google.common.collect.Lists.newArrayList;
import static java.util.stream.Collectors.toList;
import static org.assertj.core.api.Assertions.assertThat;

@Import(JdbcAssessmentRepository.class)
public class AssessmentRepositoryIT extends TenantAwareIT {

    @Autowired
    private AssessmentRepository repository;

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
            "INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, school_year, name, label, version, import_id, update_import_id) VALUES " +
                    "(-22, 'exam natural id', 4, 1, 1, 2016, 'SBAC-ICA', 'Math', '9835', -99, -99);",
            // have overall score and a claim score (not typical but allowed)
            "INSERT INTO asmt_score (asmt_id, min_score, max_score) VALUES (-22, 1000, 3500);",
            "INSERT INTO asmt_score (asmt_id, subject_score_id, min_score, max_score) VALUES (-22, 1, 1000, 3000);",
            "INSERT INTO claim (id, subject_id, code) VALUES (-99, 1, 'C1'),(-98, 2, 'C2');",
            "INSERT INTO target (id, claim_id, natural_id) VALUES (-89, -99, 'T1|1-2');",
            "INSERT INTO target (id, claim_id, natural_id) VALUES (-88, -99, 'T2|A');",
            "INSERT INTO target (id, claim_id, natural_id) VALUES (-87, -98, 'T3|R-B');",
            "INSERT INTO item (claim_id, target_id, natural_id, asmt_id, dok_id, difficulty, max_points, math_practice, allow_calc) VALUES \n" +
                    "(-99, -89, 'item1', -22, 1, 0.5, 5, null, null)," +
                    "(-99, -88, 'item2', -22, 1, 0.5, 5, null, null)," +
                    "(-98, -87, 'item3', -22, 1, 0.5, 5, null, null);",

            // stick in an extra asmt and some extra asmt_score entries to confuse things and test complex join
            "INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, school_year, name, label, version, import_id, update_import_id) VALUES " +
                    "(-33, 'exam 33 natural id', 4, 1, 1, 2016, 'SBAC-ICA', 'Math', '9835', -99, -99);",
            "INSERT INTO asmt_score (asmt_id, subject_score_id, min_score, max_score) VALUES (-33, 1, 1000, 3000);",
    })
    public void itShouldFindAssessmentByNaturalIdForICAandMath() {
        final Assessment assessment = repository.findOneByNaturalId("exam natural id");

        assertThat(assessment.getId()).isEqualTo(-22);
        assertThat(assessment.getGradeCode()).isEqualTo("04");
        assertThat(assessment.getNaturalId()).isEqualTo("exam natural id");
        assertThat(assessment.getSubjectId()).isEqualTo(1);
        assertThat(assessment.getSubjectCode()).isEqualTo("Math");
        assertThat(assessment.getTypeId()).isEqualTo(1);
        assertThat(assessment.getScores().stream().map(AssessmentScore::getCode).collect(toList())).containsExactlyInAnyOrder("OVERALL", "1", "SOCK_2", "3");
        assertThat(assessment.getTargetCodeToId().keySet()).containsExactlyInAnyOrder("C1|T1|1-2", "C1|T2|A", "C2|T3|R-B");
        assertThat(newArrayList(assessment.getItems().keySet())).containsExactlyInAnyOrder("item1", "item2", "item3");
    }

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
            "INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, school_year, name, label, version, import_id, update_import_id) VALUES " +
                    "(-23, 'exam natural id', 4, 1, 2, 2016, 'SBAC-ICA', 'ELA', '9835', -99, -99);",
            "INSERT INTO item (claim_id, target_id, natural_id, asmt_id, dok_id, difficulty, max_points, math_practice, allow_calc) VALUES \n" +
                    " (1, 1, 'item1', -23, 1, 0.5, 5, null, null)," +
                    " (1, 1, 'item2', -23, 1, 0.5, 5, null, null)," +
                    " (1, 1, 'item3', -23, 1, 0.5, 5, null, null);"
    })
    public void itShouldFindAssessmentByNaturalIdForICAandELA() {
        final Assessment assessment = repository.findOneByNaturalId("exam natural id");

        assertThat(assessment.getId()).isEqualTo(-23);
        assertThat(assessment.getNaturalId()).isEqualTo("exam natural id");
        assertThat(assessment.getSubjectId()).isEqualTo(2);
        assertThat(assessment.getTypeId()).isEqualTo(1);
        assertThat(assessment.getScores().stream().map(AssessmentScore::getCode).collect(toList())).containsExactlyInAnyOrder("SOCK_R", "SOCK_LS", "2-W", "4-CR");
        assertThat(newArrayList(assessment.getItems().keySet())).containsExactlyInAnyOrder("item1", "item2", "item3");
    }

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
            "INSERT INTO asmt (id, natural_id, grade_id, type_id, subject_id, school_year, name, label, version, import_id, update_import_id) VALUES " +
                    "(-23, 'exam natural id', 4, 2, 2, 2016, 'SBAC-IAB', 'ELA', '9835', -99, -99);",
            " INSERT INTO item (claim_id, target_id, natural_id, asmt_id, dok_id, difficulty, max_points, math_practice, allow_calc) VALUES \n" +
                    " (1, 1, 'item1', -23, 1, 0.5, 5, null, null)," +
                    " (1, 1, 'item2', -23, 1, 0.5, 5, null, null)," +
                    " (1, 1, 'item3', -23, 1, 0.5, 5, null, null);"
    })
    public void itShouldFindAssessmentByNaturalIdForIAB() {
        final Assessment assessment = repository.findOneByNaturalId("exam natural id");

        assertThat(assessment.getId()).isEqualTo(-23);
        assertThat(assessment.getNaturalId()).isEqualTo("exam natural id");
        assertThat(assessment.getSubjectId()).isEqualTo(2);
        assertThat(assessment.getTypeId()).isEqualTo(2);
        assertThat(assessment.getScores()).isEmpty();
        assertThat(newArrayList(assessment.getItems().keySet())).containsExactlyInAnyOrder("item1", "item2", "item3");
    }

    @Test
    public void itShouldReturnNullWhenNotFound() {
        assertThat(repository.findOneByNaturalId("exam natural id")).isNull();
    }
}
