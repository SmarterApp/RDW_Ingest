package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.common.test.TenantCacheableIT;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.repository.MathPracticeRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcMathPracticeRepository.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO math_practice (practice, description, code) VALUES (-11, 'test1', '-11');",
        "INSERT INTO math_practice (practice, description, code) VALUES (-22, 'test2', '-22');",
        "INSERT INTO math_practice (practice, description, code) VALUES (-55, 'test5', '-55');"
})
public class JdbcMathPracticeRepositoryIT extends TenantCacheableIT {

    @Autowired
    private MathPracticeRepository repository;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findByPractice(-11)).isEqualTo(-11);
        assertThat(repository.findByPractice(-22)).isEqualTo(-22);
    }

    @Test
    public void itShouldReturnNullWhenPracticeIsUnknown() {
        assertThat(repository.findByPractice(-44)).isEqualTo(null);
    }

    @Test
    public void itShouldCacheReturnedId() {
        assertThat(getCachedValue("mathPractice", "findByPractice", -55)).isNull();
        assertThat(repository.findByPractice(-55)).isEqualTo(-55);
        assertThat(getCachedValue("mathPractice", "findByPractice", -55).get()).isEqualTo(-55);
    }
}
