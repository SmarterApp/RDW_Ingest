package org.opentestsystem.rdw.ingest.processor;

import com.google.common.io.ByteStreams;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportContent;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.processor.service.AccommodationsProcessor;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentPackageProcessor;
import org.opentestsystem.rdw.ingest.processor.service.OrganizationProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.springframework.http.MediaType;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.GenericMessage;

import java.io.IOException;
import java.io.UnsupportedEncodingException;

import static org.junit.Assert.fail;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.anyLong;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.CODES;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.ORGANIZATION;
import static org.opentestsystem.rdw.ingest.common.model.ImportContent.PACKAGE;


public class PackageProcessorTest {

    private PackageProcessor processor;
    private ImportRepository importRepository;
    private AccommodationsProcessor accommodationsProcessor;
    private OrganizationProcessor organizationProcessor;
    private AssessmentPackageProcessor packageProcessor;


    @Before
    public void createProcessors() throws IOException {
        accommodationsProcessor = mock(AccommodationsProcessor.class);
        organizationProcessor = mock(OrganizationProcessor.class);
        packageProcessor = mock(AssessmentPackageProcessor.class);
        importRepository = mock(ImportRepository.class);
        processor = new PackageProcessor(
                importRepository,
                packageProcessor,
                accommodationsProcessor,
                organizationProcessor);
    }

    @Test
    public void itShouldProcessAssessmentPackage() throws UnsupportedEncodingException {
        processor.processPackage(createMessage(1, PACKAGE, MediaType.TEXT_PLAIN, "/IAB_ICA_Combined.items.csv"));
        verify(packageProcessor).process(any(byte[].class), eq(1L));
        verify(importRepository).updateStatusAndMessageById(1, ImportStatus.PROCESSED, null);
    }

    @Test
    public void itShouldProcessAccommodations() throws UnsupportedEncodingException {
        processor.processCodes(createMessage(2, CODES, MediaType.APPLICATION_XML, "/AccessibilityConfig.xml"));
        verify(accommodationsProcessor).process(any(byte[].class), eq(2L));
        verify(importRepository).updateStatusAndMessageById(2, ImportStatus.PROCESSED, null);
    }

    @Test
    public void itShouldProcessOrganization() throws UnsupportedEncodingException {
        processor.processOrganization(createMessage(1, ORGANIZATION, MediaType.APPLICATION_JSON, "/organization.json"));
        verify(organizationProcessor).process(any(byte[].class), eq(1L));
        verify(importRepository).updateStatusAndMessageById(1, ImportStatus.PROCESSED, null);
    }

    @Test
    public void itShouldProcessCalpadsOrganization() throws UnsupportedEncodingException {
        processor.processOrganization(createMessage(1, ORGANIZATION, MediaType.APPLICATION_JSON, "/CA_schools.csv"));
        verify(organizationProcessor).process(any(byte[].class), eq(1L));
        verify(importRepository).updateStatusAndMessageById(1, ImportStatus.PROCESSED, null);
    }

    @Test
    public void itShouldHandleImportException() throws UnsupportedEncodingException {
        doThrow(new ImportException(ImportStatus.UNKNOWN_ASMT, "message"))
                .when(packageProcessor)
                .process(any(byte[].class), anyLong());

        processor.processPackage(createMessage(1, PACKAGE, MediaType.TEXT_PLAIN, "/IAB_ICA_Combined.bad-item.csv"));

        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.UNKNOWN_ASMT, "message");
    }

    @Test
    public void itShouldHandleAnyRuntimeException() throws UnsupportedEncodingException {
        doThrow(new RuntimeException("any message")).when(packageProcessor).process(any(byte[].class), anyLong());

        processor.processPackage(createMessage(1, PACKAGE, MediaType.TEXT_PLAIN, "/IAB_ICA_Combined.bad-asmt.csv"));

        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.BAD_DATA, "any message");
    }


    private Message createMessage(final long importId,
                                  final ImportContent content,
                                  final MediaType contentType,
                                  final String resource) {
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(null);
        accessor.setImportId(importId);
        accessor.setContent(content.name());
        accessor.setContentType(contentType);

        final byte[] payload;
        try {
            payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream(resource));
            return new GenericMessage<>(payload, accessor.getMessageHeaders());
        } catch (final IOException e) {
            fail("failed to create payload " + resource);
            return null;
        }
    }
}
