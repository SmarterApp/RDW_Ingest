package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.ByteStreams;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.io.IOException;
import java.util.Collection;
import org.opentestsystem.rdw.common.model.ImportException;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.processor.model.Percentile;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.hasProperty;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SqlGroup({
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:/PreloadAsmt.sql"})
})
public class DefaultPercentileParserTestIT extends TenantAwareServiceIT {

    @Autowired
    private PercentileParser percentileParser;

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    @Test
    public void itShouldParse() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles.csv"));
        final Collection<Percentile> percentiles = percentileParser.parse(payload);

        assertThat(percentiles).hasSize(3);
    }

    @Test
    public void itShouldReportMissingDate() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles-missing-date.csv"));

        thrown.expect(ImportException.class);
        thrown.expect(hasProperty("status", is(ImportStatus.BAD_DATA)));
        thrown.expectMessage(containsString("value may not be blank"));
        thrown.expectMessage(containsString("date"));
        final Collection<Percentile> percentiles = percentileParser.parse(payload);
        assertThat(percentiles).hasSize(0);
    }

    @Test
    public void itShouldReportMissingAsmt() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles-missing.csv"));

        thrown.expect(ImportException.class);
        thrown.expect(hasProperty("status", is(ImportStatus.BAD_DATA)));
        thrown.expectMessage(containsString("Missing assessment"));
        final Collection<Percentile> percentiles = percentileParser.parse(payload);
        assertThat(percentiles).hasSize(0);
    }

    @Test
    public void itShouldReportBadOrderPercentileRankAndScore() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles-bad-order.csv"));

        thrown.expect(ImportException.class);
        thrown.expect(hasProperty("status", is(ImportStatus.BAD_DATA)));
        thrown.expectMessage(containsString("2356.0 must not be less than previous score 4000.0"));
        final Collection<Percentile> percentiles = percentileParser.parse(payload);
        assertThat(percentiles).hasSize(0);
    }

    @Test
    public void itShouldReadFileWithBOM() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles-bom.csv"));
        final Collection<Percentile> percentiles = percentileParser.parse(payload);
        assertThat(percentiles).hasSize(1);
    }
}
