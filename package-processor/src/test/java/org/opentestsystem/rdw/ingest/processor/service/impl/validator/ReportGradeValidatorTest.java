package org.opentestsystem.rdw.ingest.processor.service.impl.validator;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.subject.ItemClaim;
import org.opentestsystem.rdw.common.model.subject.PerformanceLevel;
import org.opentestsystem.rdw.common.model.subject.PerformanceLevels;
import org.opentestsystem.rdw.common.model.subject.ReportAssessmentType;
import org.opentestsystem.rdw.common.model.subject.ReportClaim;
import org.opentestsystem.rdw.common.model.subject.ReportGrade;
import org.opentestsystem.rdw.common.model.subject.ReportPerformanceLevel;
import org.opentestsystem.rdw.common.model.subject.SubScoring;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.common.model.subject.SubjectAssessmentType;
import org.opentestsystem.rdw.ingest.processor.model.SubjectValidationContext;
import org.opentestsystem.rdw.ingest.processor.model.SubjectValidationFailure;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;

public class ReportGradeValidatorTest {

    private SubjectValidationContext context;
    private ReportGradeValidator validator;

    @Before
    public void setup() {
        context = new SubjectValidationContext();
        validator = new ReportGradeValidator();
    }

    @Test
    public void itShouldDetectDuplicateReportGrades() {
        final Subject subject = subject()
                .reportGrades(of(
                        reportGrade("03").build(),
                        reportGrade("03").build(),
                        reportGrade("04").build()
                ))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("ReportGrade(03)");
        assertThat(failure.getMessage()).isEqualTo("Duplicate code found: 03");
    }

    @Test
    public void itShouldDetectDuplicateReportAssessmentTypes() {
        final Subject subject = subject()
                .reportGrades(of(reportGrade("03")
                        .reportAssessmentTypes(of(
                                reportType("ica").build(),
                                reportType("ica").build(),
                                reportType("sum").build()
                        ))
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("ReportGrade(03):ReportAssessmentType(ica)");
        assertThat(failure.getMessage()).isEqualTo("Duplicate code found: ica");
    }

    @Test
    public void itShouldDetectAReportAssessmentTypeThatReferencesANonExistentSubjectAssessmentType() {
        final Subject subject = subject()
                .assessmentTypes(of(
                        SubjectAssessmentType.builder().code("iab").build(),
                        SubjectAssessmentType.builder().code("sum").build()
                ))
                .reportGrades(of(reportGrade("03")
                        .reportAssessmentTypes(of(reportType("ica").build()))
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("ReportGrade(03):ReportAssessmentType(ica)");
        assertThat(failure.getMessage()).isEqualTo("ReportAssessmentType code must reference an existing Subject.Assessment_Type code: ica");
    }

    @Test
    public void itShouldDetectADuplicateReportPerformanceLevel() {
        final Subject subject = subject()
                .reportGrades(of(reportGrade("03")
                        .reportAssessmentTypes(of(reportType("ica")
                                .reportPerformanceLevels(of(
                                        ReportPerformanceLevel.builder().level(1).build(),
                                        ReportPerformanceLevel.builder().level(1).build(),
                                        ReportPerformanceLevel.builder().level(2).build(),
                                        ReportPerformanceLevel.builder().level(3).build()
                                ))
                                .build()))
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("ReportGrade(03):ReportAssessmentType(ica):ReportPerformanceLevels");
        assertThat(failure.getMessage()).isEqualTo("Duplicate performance level: 1");
    }

    @Test
    public void itShouldDetectReportPerformanceLevelWithoutAnAssociatedOverallPerformanceLevel() {
        final Subject subject = subject()
                .reportGrades(of(reportGrade("03")
                        .reportAssessmentTypes(of(reportType("ica")
                                .reportPerformanceLevels(of(
                                        ReportPerformanceLevel.builder().level(1).build(),
                                        ReportPerformanceLevel.builder().level(2).build(),
                                        ReportPerformanceLevel.builder().level(3).build(),
                                        ReportPerformanceLevel.builder().level(4).build()
                                ))
                                .build()))
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("ReportGrade(03):ReportAssessmentType(ica):ReportPerformanceLevels");
        assertThat(failure.getMessage()).isEqualTo("Report references non-existent performance level: 4");
    }

    @Test
    public void itShouldDetectAMissingReportPerformanceLevel() {
        final Subject subject = subject()
                .reportGrades(of(reportGrade("03")
                        .reportAssessmentTypes(of(reportType("ica")
                                .reportPerformanceLevels(of(
                                        ReportPerformanceLevel.builder().level(1).build(),
                                        ReportPerformanceLevel.builder().level(2).build()
                                ))
                                .build()))
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("ReportGrade(03):ReportAssessmentType(ica):ReportPerformanceLevels");
        assertThat(failure.getMessage()).isEqualTo("Performance levels exist without associated report messages: 3");
    }

    @Test
    public void itShouldDetectDuplicateReportClaims() {
        final Subject subject = subject()
                .reportGrades(of(reportGrade("03")
                        .reportAssessmentTypes(of(reportType("ica")
                                .reportClaims(of(
                                        reportClaim("claim_1").build(),
                                        reportClaim("claim_1").build(),
                                        reportClaim("claim_2").build(),
                                        reportClaim("claim_3").build()
                                ))
                                .build()))
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("ReportGrade(03):ReportAssessmentType(ica):ReportClaim(claim_1)");
        assertThat(failure.getMessage()).isEqualTo("Duplicate report claim: claim_1");
    }

    @Test
    public void itShouldDetectAReportClaimWithoutAnAssociatedScorableClaim() {
        final Subject subject = subject()
                .reportGrades(of(reportGrade("03")
                        .reportAssessmentTypes(of(reportType("ica")
                                .reportClaims(of(
                                        reportClaim("claim_1").build(),
                                        reportClaim("claim_2").build(),
                                        reportClaim("claim_3").build(),
                                        reportClaim("claim_4").build()
                                ))
                                .build()))
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("ReportGrade(03):ReportAssessmentType(ica):ReportClaim(claim_4)");
        assertThat(failure.getMessage()).isEqualTo("Report references non-existent scorable claim: claim_4");
    }

    @Test
    public void itShouldDetectAScorableClaimWitoutAnAssociatedReportClaim() {
        final Subject subject = subject()
                .reportGrades(of(reportGrade("03")
                        .reportAssessmentTypes(of(reportType("ica")
                                .reportClaims(of(
                                        reportClaim("claim_1").build(),
                                        reportClaim("claim_2").build()
                                ))
                                .build()))
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("ReportGrade(03):ReportAssessmentType(ica):ReportClaim");
        assertThat(failure.getMessage()).isEqualTo("There exist scorable claims without associated ReportClaim elements: claim_3");
    }

    @Test
    public void itShouldValidateReportClaimPerformanceLevels() {
        final Subject subject = subject()
                .reportGrades(of(reportGrade("03")
                        .reportAssessmentTypes(of(reportType("ica")
                                .reportClaims(of(
                                        reportClaim("claim_1").build(),
                                        reportClaim("claim_2").build(),
                                        reportClaim("claim_3")
                                                .performanceLevels(of(
                                                        ReportPerformanceLevel.builder().level(1).build(),
                                                        ReportPerformanceLevel.builder().level(2).build()
                                                ))
                                                .build()
                                ))
                                .build()))
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("ReportGrade(03):ReportAssessmentType(ica):ReportClaim(claim_3):ReportPerformanceLevels");
        assertThat(failure.getMessage()).isEqualTo("Performance levels exist without associated report messages: 3");
    }

    private ReportGrade.Builder reportGrade(final String code) {
        return ReportGrade.builder()
                .code(code);
    }

    private ReportAssessmentType.Builder reportType(final String assessmentType) {
        return ReportAssessmentType.builder()
                .code(assessmentType);
    }

    private ReportClaim.Builder reportClaim(final String code) {
        return ReportClaim.builder()
                .performanceLevels(of(
                        ReportPerformanceLevel.builder().level(1).build(),
                        ReportPerformanceLevel.builder().level(2).build(),
                        ReportPerformanceLevel.builder().level(3).build()
                ))
                .code(code);
    }

    private Subject.Builder subject() {
        return Subject.builder()
                .assessmentTypes(of(
                        SubjectAssessmentType.builder().code("iab")
                                .performanceLevels(performanceLevels().build())
                                .build(),
                        SubjectAssessmentType.builder().code("ica")
                                .performanceLevels(performanceLevels().build())
                                .subScoring(SubScoring.builder()
                                        .performanceLevels(performanceLevels().build())
                                        .build())
                                .build(),
                        SubjectAssessmentType.builder().code("sum")
                                .performanceLevels(performanceLevels().build())
                                .subScoring(SubScoring.builder()
                                        .performanceLevels(performanceLevels().build())
                                        .build())
                                .build()
                ))
                .claims(of(
                        ItemClaim.builder().code("claim_1").build(),
                        ItemClaim.builder().code("claim_2").build(),
                        ItemClaim.builder().code("claim_3").build()
                ));
    }

    private PerformanceLevels.Builder performanceLevels() {
        return PerformanceLevels.builder()
                .performanceLevels(of(
                        PerformanceLevel.builder().level(1).build(),
                        PerformanceLevel.builder().level(2).build(),
                        PerformanceLevel.builder().level(3).build()
                ));
    }
}