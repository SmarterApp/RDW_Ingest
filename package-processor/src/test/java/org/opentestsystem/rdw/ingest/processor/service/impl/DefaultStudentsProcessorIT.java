package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.ByteStreams;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.opentestsystem.rdw.common.model.ImportException;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.processor.service.NormsProcessor;
import org.opentestsystem.rdw.ingest.processor.service.StudentsProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.hasProperty;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.*;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

@SqlGroup({
    @Sql(executionPhase = BEFORE_TEST_METHOD,
        statements = {
            "INSERT INTO import (id, status, content, contentType, digest, batch, creator) VALUES\n" +
                "  (-99, 1, 2, 'text/plain', '99',  'batch', 'dwtest@example.com'),\n" +
                "  (-98, 1, 2, 'text/plain', '98',  'batch', 'dwtest@example.com'),\n" +
                "  (-97, 1, 2, 'text/plain', '97',  'batch', 'dwtest@example.com'),\n" +
                "  (-96, 1, 2, 'text/plain', '97',  'batch', 'dwtest@example.com');\n" +
            "INSERT INTO district (id, name, natural_id) VALUES (-22, 'Sample District 1', 'DistrictNaturalId');\n",
            "INSERT INTO school (id, district_id, name, natural_id, import_id, update_import_id) VALUES\n" +
                " (-27, -22, 'Sample School 1', 'SchoolNaturalId1', -99, -99),\n" +
                " (-26, -22, 'Sample School 2', 'SchoolNaturalId2', -99, -99),\n" +
                " (-25, -22, 'Sample School 3', 'SchoolNaturalId3', -99, -99);\n" +
            "INSERT INTO student (id, ssid, first_name,last_or_surname, import_id, update_import_id) VALUES\n" +
                "(-99, '2663752814', 'aaa', 'bbb', -99, -99),\n" +
                "(-98, '1158939483', 'ccc', 'ddd', -99, -99),\n" +
                "(-97, '2735108818', 'ddd', 'eee', -99, -99),\n" +
                "(-96, '3009750513', 'fff', 'ggg', -99, -99),\n" +
                "(-95, '3018560040', 'hhh', 'iii', -99, -99),\n" +
                "(-94, '6106239033', 'kkk', 'lll', -99, -99);\n"
        })
})
public class DefaultStudentsProcessorIT extends TenantAwareServiceIT {
    @Autowired
    private StudentsProcessor studentsProcessor;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    @Test
    public void itShouldUpdate() throws IOException {
        final int beforeStudentCount = countRowsInTable(jdbcTemplate, "student");

        assertThat(studentsProcessor
            .process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/students/CA_StudentExtract.csv")), -99))
            .isEqualTo("Students updated: 6");

        assertThat(countRowsInTable(jdbcTemplate, "student")).isEqualTo(beforeStudentCount);
    }

    @Test
    public void itShouldSkipBadData() throws IOException {
        assertThat(studentsProcessor
            .process(ByteStreams
                .toByteArray(this.getClass().getResourceAsStream("/students/CA_StudentExtract_bad_data.csv")), -99))
            .isEqualTo("Students updated: 4");
    }
}
