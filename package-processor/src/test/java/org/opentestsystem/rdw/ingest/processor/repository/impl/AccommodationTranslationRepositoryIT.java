package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.model.Accommodation;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Item;
import org.opentestsystem.rdw.ingest.processor.repository.AccommodationTranslationRepository;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO language (id, code) VALUES (-1, 'la1')",
        "INSERT INTO language (id, code) VALUES (-2, 'la2')",
})
public class AccommodationTranslationRepositoryIT {
    @Autowired
    private AccommodationTranslationRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private Accommodation.Builder accBuilder;

    @Before
    public void setUp() {
        accBuilder = Accommodation.builder();

        accBuilder.code("TDS_CODE")
                .addTranslation(-1, "English translation")
                .addTranslation(-2, "Spanish Translation");
    }

    @Test
    public void itShouldCreateAccommodationsAndTranslations() {
        final int beforeAccCount = countRowsInTable(jdbcTemplate, "accommodation");
        final int beforeTranslationCount = countRowsInTable(jdbcTemplate, "accommodation_translation");

        Accommodation[] accArray = new Accommodation[]{accBuilder.build()};

        repository.create(Arrays.asList(accArray));

        assertThat(countRowsInTable(jdbcTemplate, "accommodation")).isEqualTo(beforeAccCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "accommodation_translation")).isEqualTo(beforeTranslationCount + 2);

    }

    @Test
    public void itShouldUpdateTranslations() {
        String query = "Select label from accommodation_translation where language_id=-1";
        //Add some translations
        Accommodation[] accArray = new Accommodation[]{accBuilder.build()};
        repository.create(Arrays.asList(accArray));
        String oldTranslation = jdbcTemplate.queryForObject(query, String.class);

        Accommodation.Builder newAccBuilder = Accommodation.builder().code("TDS_CODE")
                .addTranslation(-1, "New English translation");

        Accommodation[] newAccArray = new Accommodation[]{newAccBuilder.build()};

        repository.create(Arrays.asList(newAccArray));
        String newTranslation = jdbcTemplate.queryForObject(query, String.class);
        assertThat("New English translation").isEqualTo(newTranslation);
        assertThat(oldTranslation).isNotEqualTo(newTranslation);
    }

    @Test
    public void itShouldIgnoreAndNotAddAccommodationCodeWhenOneAlreadyExists() {
        final int beforeAccCount = countRowsInTable(jdbcTemplate, "accommodation");
        final int beforeTranslationCount = countRowsInTable(jdbcTemplate, "accommodation_translation");

        Accommodation[] accArray = new Accommodation[]{accBuilder.build()};

        repository.create(Arrays.asList(accArray));
        repository.create(Arrays.asList(accArray));

        assertThat(countRowsInTable(jdbcTemplate, "accommodation")).isEqualTo(beforeAccCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "accommodation_translation")).isEqualTo(beforeTranslationCount + 2);
    }

}
