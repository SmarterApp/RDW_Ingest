package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.common.model.subject.Trait;
import org.opentestsystem.rdw.ingest.processor.repository.TraitRepository;
import org.opentestsystem.rdw.ingest.processor.service.SubjectTraitService;

import static com.google.common.collect.Sets.newHashSet;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultSubjectTraitServiceTest {

    @Mock
    private TraitRepository repository;

    private SubjectTraitService service;

    @Before
    public void setup() {
        service = new DefaultSubjectTraitService(repository);
    }

    private static final String SubjectCode = "latin";
    private final Subject subject = Subject.builder()
        .code(SubjectCode)
        .traits(ImmutableList.of(
            Trait.builder().code("LAT_G_C").purpose("GRAMMAR").category("CONJ").build(),
            Trait.builder().code("LAT_V_V").purpose("VOCAB").category("VERB").build()
        ))
        .build();

    @Test
    public void itShouldCreateNewTraits() {
        when(repository.findCodesBySubject(SubjectCode))
            .thenReturn(newHashSet("LAT_V_V"));

        service.upsert(subject);
        verify(repository).create(SubjectCode, "LAT_G_C", "GRAMMAR", "CONJ");
    }

    @Test
    public void itShouldDeleteExistingTraits() {
        when(repository.findCodesBySubject(SubjectCode))
            .thenReturn(newHashSet("LAT_G_C", "LAT_V_V", "LAT_V_N"));
        when(repository.isReferenced(SubjectCode, "LAT_V_N"))
            .thenReturn(false);

        service.upsert(subject);
        verify(repository).delete(SubjectCode, "LAT_V_N");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotDeleteExistingTraitsWithBoundExams() {
        when(repository.findCodesBySubject(SubjectCode))
            .thenReturn(newHashSet("LAT_G_C", "LAT_V_V", "LAT_V_N"));
        when(repository.isReferenced(SubjectCode, "LAT_V_N"))
            .thenReturn(true);

        service.upsert(subject);
    }
}
