package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.processor.repository.TraitRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;

@Import(JdbcTraitRepository.class)
@Sql(statements = {
        "INSERT INTO subject (id, code, import_id, update_import_id) VALUES (-12, 'latin', 1, 1);",
        "INSERT INTO subject (id, code, import_id, update_import_id) VALUES (-13, 'science', 1, 1);",
        "INSERT INTO subject_trait (id, subject_id, code, purpose, category, max_score) VALUES (-122, -12, 'LAT_G_C', 'GRAMMAR', 'CONJ', 5);",
        "INSERT INTO subject_trait (id, subject_id, code, purpose, category, max_score) VALUES (-123, -12, 'LAT_V_V', 'VOCAB', 'VERB', 5);",
        "INSERT INTO subject_trait (id, subject_id, code, purpose, category, max_score) VALUES (-124, -13, 'SCI_CHEM_THEORY', 'CHEM', 'THEORY', 4);",
        "INSERT INTO subject_trait (id, subject_id, code, purpose, category, max_score) VALUES (-125, -13, 'SCI_CHEM_LAB', 'CHEM', 'LAB', 4);",
})
public class JdbcTraitRepositoryIT extends TenantAwareRepositoryIT {

    @Autowired
    private TraitRepository repository;

    @Test
    public void itShouldReturnTraitsForASubject() {
        final Set<String> traitCodes = repository.findCodesBySubject("latin");
        assertThat(traitCodes).containsOnly("LAT_G_C", "LAT_V_V");
    }

    @Test
    public void itShouldReturnTraitsForALegacySubject() {
        final Set<String> traitCodes = repository.findCodesBySubject("ELA");
        assertThat(traitCodes).hasSize(15);
        assertThat(traitCodes).contains("SOCK_ARGU_CON", "SOCK_OPIN_EVI");
    }

    @Test
    public void itShouldReturnEmptyTraitsForAnUnknownSubject() {
        assertThat(repository.findCodesBySubject("unknown")).isEmpty();
    }

    @Test
    public void itShouldCreateATrait() {
        assertThat(repository.findCodesBySubject("latin")).containsOnly("LAT_G_C", "LAT_V_V");

        repository.create("latin", "LAT_V_N", "VOCAB", "NOUN", 5);
        assertThat(repository.findCodesBySubject("latin")).contains("LAT_V_N");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowIfUnableToCreateATrait() {
        repository.create("latin", "LAT_V_V", "VOCAB", "VERB", 5);
    }

    @Test
    public void itShouldDeleteATrait() {
        repository.delete("latin", "LAT_V_V");
        assertThat(repository.findCodesBySubject("latin"))
                .containsOnly("LAT_G_C");
    }

    @Test
    @Ignore
    public void itShouldDetectIfATraitHasExams() {
        // TODO
    }
}
