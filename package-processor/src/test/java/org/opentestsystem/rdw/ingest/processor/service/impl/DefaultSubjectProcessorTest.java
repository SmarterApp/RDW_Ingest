package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.collect.ImmutableSet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.model.LocationStrategy;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.common.model.subject.SubjectSerializationService;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.util.LocationAwareErrorCollector;
import org.opentestsystem.rdw.ingest.processor.service.SubjectValidator;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.ImportContent.SUBJECT;

@RunWith(MockitoJUnitRunner.class)
public class DefaultSubjectProcessorTest {
    private static final String Digest = "DIGEST";
    private static final String Location = new LocationStrategy.ImportContentLocationStrategy(SUBJECT).location(Digest);
    private static final String SubjectXml = "Subject XML";
    private static final long ImportId = 123L;

    @Mock
    private SubjectSerializationService serializationService;

    @Mock
    private ArchiveService archiveService;

    @Mock
    private SubjectValidator validator;

    private Subject.Builder subject;
    private DefaultSubjectProcessor processor;

    @Before
    public void setup() throws Exception {
        when(archiveService.openResource(Location))
                .thenAnswer(invocation -> new ByteArrayInputStream(SubjectXml.getBytes()));

        subject = Subject.builder();
        when(serializationService.parseSubject(any()))
                .thenAnswer(invocation -> subject.build());

        processor = new DefaultSubjectProcessor(archiveService, serializationService, ImmutableSet.of(validator));
    }

    @Test
    public void itShouldAppendExceptionMessageToFailedImport() throws Exception {
        when(serializationService.parseSubject(any())).thenThrow(new IOException("reason message"));

        ImportException expected = null;
        try {
            processor.process(Digest.getBytes(), ImportId);
        } catch (final ImportException e) {
            expected = e;
        }

        assertThat(expected).isNotNull();
        assertThat(expected.getMessage()).isEqualTo("Unable to read Subject resource: reason message");
    }

    @Test
    public void itShouldValidateTheSubjectModel() {
        doAnswer(invocation -> {
            final LocationAwareErrorCollector context = invocation.getArgument(0);
            context.push("location");
            context.failure("Invalid Stuff");
            return null;
        }).when(validator).validate(any(), any());

        ImportException expected = null;
        try {
            processor.process(Digest.getBytes(), ImportId);
        } catch (final ImportException e) {
            expected = e;
        }

        assertThat(expected).isNotNull();
        assertThat(expected.getMessage()).isEqualTo("[{\"elementName\":\"location\",\"error\":\"Invalid Stuff\"}]");
    }
}