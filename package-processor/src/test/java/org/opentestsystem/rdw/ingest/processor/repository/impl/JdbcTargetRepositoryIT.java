package org.opentestsystem.rdw.ingest.processor.repository.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseTarget;
import org.opentestsystem.rdw.ingest.processor.repository.TargetRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Iterables.getOnlyElement;
import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcTargetRepository.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO subject (id, code) VALUES (-12, 'name1'), (-13, 'name2'), (-14, 'name3');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (-122, -12, 'ccode1', 'name1', 'description'), (-133, -13, 'ccode2', 'name2', 'description'), (-144, -14, 'ccode44','name3', 'description');",
        "INSERT INTO target (id, claim_id, natural_id, code, description) VALUES (-2222, -122, 'id-code22', 'code22', 'description'), (-2223, -133, 'id-code23', 'code23', 'description'), (-2224, -144, 'id-code24', 'code24', 'description');",
})
public class JdbcTargetRepositoryIT {

    @Autowired
    private TargetRepository repository;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findIdByNaturalIdAndClaimId("id-code22", -122)).isEqualTo(-2222);
        assertThat(repository.findIdByNaturalIdAndClaimId("id-code23", -133)).isEqualTo(-2223);
    }

    @Test
    public void itShouldThrowExceptionWhenCodeIsUnknown() {
        assertThat(repository.findIdByNaturalIdAndClaimId("code66", -1)).isEqualTo(null);
    }

    @Test
    public void itShouldFindTargetsBySubject() {
        final Collection<WarehouseTarget> targets = repository.findBySubject("name1");
        assertThat(targets).hasSize(1);
        final WarehouseTarget target = getOnlyElement(targets);
        assertThat(target.getId()).isEqualTo(-2222);
        assertThat(target.getClaimCode()).isEqualTo("ccode1");
        assertThat(target.getNaturalId()).isEqualTo("id-code22");
    }

    @Test
    public void itShouldCreateTargets() {
        final List<WarehouseTarget> targets = newArrayList();
        targets.add(WarehouseTarget.builder().claimCode("ccode1").naturalId("id-code23").build());
        targets.add(WarehouseTarget.builder().claimCode("ccode1").naturalId("id-code24").build());

        repository.create("name1", targets);
        final Collection<WarehouseTarget> persisted = repository.findBySubject("name1");
        assertThat(persisted).hasSize(3);
        assertThat(persisted.stream().map(WarehouseTarget::getNaturalId))
                .containsOnly("id-code22", "id-code23", "id-code24");
    }

    @Test
    public void itShouldDeleteATarget() {
        repository.delete(ImmutableSet.of(-2222));
        assertThat(repository.findBySubject("name1")).isEmpty();
    }

    @Test
    @Sql(
            scripts = "/PreloadAsmt.sql",
            statements = {
                    "INSERT INTO subject (id, code) VALUES (-12, 'name1'), (-13, 'name2'), (-14, 'name3');",
                    "INSERT INTO claim (id, subject_id, code, name, description) VALUES (-122, -12, 'ccode1', 'name1', 'description'), (-133, -13, 'ccode2', 'name2', 'description'), (-144, -14, 'ccode44','name3', 'description');",
                    "INSERT INTO target (id, claim_id, natural_id, code, description) VALUES (-2222, -122, 'id-code22', 'code22', 'description'), (-2223, -133, 'id-code23', 'code23', 'description'), (-2224, -144, 'id-code24', 'code24', 'description');",
            }
    )
    public void itShouldDetectThatATargetIsReferenced() {
        assertThat(repository.hasItems(ImmutableList.of(-2222))).isNull();
        //Referenced by item
        assertThat(repository.hasItems(ImmutableList.of(1))).isEqualTo(1);
        //Referenced by item_other_target
        assertThat(repository.hasItems(ImmutableList.of(6))).isEqualTo(6);
    }
}