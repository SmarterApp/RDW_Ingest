package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.repository.TargetRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.interceptor.SimpleKey;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO subject (id, code) VALUES (-12, 'name1');",
        "INSERT INTO subject (id, code) VALUES (-13, 'name2');",
        "INSERT INTO subject (id, code) VALUES (-14, 'name3');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (-122, -12, 'ccode1', 'name1', 'description');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (-133, -13, 'ccode2', 'name2', 'description');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (-144, -14, 'ccode44','name3', 'description');",
        "INSERT INTO target (id, claim_id, natural_id, code, description) VALUES (-2222, -122, 'id-code22', 'code22', 'description');",
        "INSERT INTO target (id, claim_id, natural_id, code, description) VALUES (-2223, -133, 'id-code23', 'code23', 'description');",
        "INSERT INTO target (id, claim_id, natural_id, code, description) VALUES (-2224, -144, 'id-code24', 'code24', 'description');"
})
public class JdbcTargetRepositoryIT {

    @Autowired
    private TargetRepository repository;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findIdByNaturalIdAndClaimId("id-code22", -122)).isEqualTo(-2222);
        assertThat(repository.findIdByNaturalIdAndClaimId("id-code23", -133)).isEqualTo(-2223);
    }

    @Test
    public void itShouldThrowExceptionWhenCodeIsUnknown() {
        assertThat(repository.findIdByNaturalIdAndClaimId("code66", -1)).isEqualTo(null);
    }

    @Test
    public void itShouldCacheReturnedId() {
        final Cache ids = this.cacheManager.getCache("target");
        assertThat(ids.get(new SimpleKey("id-code24", -144))).isNull();

        assertThat(repository.findIdByNaturalIdAndClaimId("id-code24", -144)).isEqualTo(-2224);

        assertThat(ids.get(new SimpleKey("id-code24", -144), Integer.class)).isEqualTo(-2224);
    }
}