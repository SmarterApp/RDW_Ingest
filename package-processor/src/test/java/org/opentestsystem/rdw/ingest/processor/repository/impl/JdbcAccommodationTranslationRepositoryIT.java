package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.configuration.TenantConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.Accommodation;
import org.opentestsystem.rdw.ingest.processor.repository.AccommodationTranslationRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcAccommodationTranslationRepository.class,
        DataSourceConfiguration.class,
        TenantConfiguration.class,
        YamlPropertiesConfigurator.class,
        JdbcTemplateAutoConfiguration.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
public class JdbcAccommodationTranslationRepositoryIT {

    @Autowired
    private AccommodationTranslationRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private Accommodation.Builder accBuilder;

    @Before
    public void setUp() {
        accBuilder = Accommodation.builder()
                .code("TDS_CODE")
                .addTranslation("eng", "English translation")
                .addTranslation("spa", "Spanish Translation");
    }

    @Test
    public void itShouldCreateAccommodationsAndTranslations() {
        final int beforeAccCount = countRowsInTable(jdbcTemplate, "accommodation");
        final int beforeTranslationCount = countRowsInTable(jdbcTemplate, "accommodation_translation");

        repository.upsert(newArrayList(accBuilder.build()));

        assertThat(countRowsInTable(jdbcTemplate, "accommodation")).isEqualTo(beforeAccCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "accommodation_translation")).isEqualTo(beforeTranslationCount + 2);
        assertThat(jdbcTemplate.queryForObject("SELECT label FROM accommodation_translation WHERE language_code='eng'", String.class)).isEqualTo("English translation");
    }

    @Test
    public void itShouldUpdateTranslations() {
        repository.upsert(newArrayList(accBuilder.build()));

        final Accommodation.Builder newAccBuilder = Accommodation.builder()
                .code("TDS_CODE")
                .addTranslation("eng", "New English translation");

        repository.upsert(newArrayList(newAccBuilder.build()));
        assertThat(jdbcTemplate.queryForObject("SELECT label FROM accommodation_translation WHERE language_code='eng'", String.class)).isEqualTo("New English translation");
    }

    @Test
    public void itShouldIgnoreAndNotAddAccommodationCodeWhenOneAlreadyExists() {
        final int beforeAccCount = countRowsInTable(jdbcTemplate, "accommodation");
        final int beforeTranslationCount = countRowsInTable(jdbcTemplate, "accommodation_translation");

        repository.upsert(newArrayList(accBuilder.build()));
        assertThat(countRowsInTable(jdbcTemplate, "accommodation")).isEqualTo(beforeAccCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "accommodation_translation")).isEqualTo(beforeTranslationCount + 2);

        repository.upsert(newArrayList(accBuilder.build()));
        assertThat(countRowsInTable(jdbcTemplate, "accommodation")).isEqualTo(beforeAccCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "accommodation_translation")).isEqualTo(beforeTranslationCount + 2);
    }
}
