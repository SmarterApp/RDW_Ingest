package org.opentestsystem.rdw.ingest.processor.repository.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseItemDifficulty;
import org.opentestsystem.rdw.ingest.processor.repository.ItemDifficultyRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.offset;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcItemDifficultyRepository.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql("/LoadTestSubject.sql")
public class JdbcItemDifficultyRepositoryIT {
    private static final String SubjectCode = "test";

    @Autowired
    private ItemDifficultyRepository repository;

    @Test
    public void itShouldFindAllDifficultiesForASubject() {
        final Collection<WarehouseItemDifficulty> elaDifficulties = repository.findBySubject("ELA");
        assertThat(elaDifficulties).isNotEmpty();
        final WarehouseItemDifficulty difficulty = Iterables.getFirst(elaDifficulties, null);
        assertThat(difficulty).isNotNull();
        assertThat(difficulty.getGradeCode()).isNotBlank();
        assertThat(difficulty.getDifficultLowEnd()).isNotZero();
        assertThat(difficulty.getModerateLowEnd()).isNotZero();
        assertThat(difficulty.getId()).isGreaterThan(0);

        assertThat(repository.findBySubject(SubjectCode)).isEmpty();
    }

    @Test
    public void itShouldCreateNewItemDifficulties() {
        final List<WarehouseItemDifficulty> difficulties = newArrayList();
        difficulties.add(WarehouseItemDifficulty.builder().gradeCode("03").moderateLowEnd(1d).difficultLowEnd(2d).build());
        difficulties.add(WarehouseItemDifficulty.builder().gradeCode("04").moderateLowEnd(2d).difficultLowEnd(3d).build());
        repository.create(SubjectCode, difficulties);

        final Map<String, WarehouseItemDifficulty> persisted = repository.findBySubject(SubjectCode).stream()
                .collect(Collectors.toMap(
                        WarehouseItemDifficulty::getGradeCode,
                        difficulty -> difficulty
                ));

        assertThat(persisted).hasSize(2);
        assertThat(persisted.get("03").getModerateLowEnd()).isEqualTo(1d, offset(0.1));
        assertThat(persisted.get("03").getDifficultLowEnd()).isEqualTo(2d, offset(0.1));
        assertThat(persisted.get("04").getModerateLowEnd()).isEqualTo(2d, offset(0.1));
        assertThat(persisted.get("04").getDifficultLowEnd()).isEqualTo(3d, offset(0.1));
    }

    @Test
    public void itShouldDeleteItemDifficulties() {
        final List<WarehouseItemDifficulty> difficulties = newArrayList();
        difficulties.add(WarehouseItemDifficulty.builder().gradeCode("03").moderateLowEnd(1d).difficultLowEnd(2d).build());
        difficulties.add(WarehouseItemDifficulty.builder().gradeCode("04").moderateLowEnd(2d).difficultLowEnd(3d).build());
        repository.create(SubjectCode, difficulties);

        final Collection<WarehouseItemDifficulty> persisted = repository.findBySubject(SubjectCode);
        assertThat(persisted).hasSize(2);

        final WarehouseItemDifficulty deleted = Iterables.getFirst(persisted, null);
        assertThat(deleted).isNotNull();
        repository.delete(ImmutableList.of(deleted.getId()));

        final Collection<WarehouseItemDifficulty> remaining = repository.findBySubject(SubjectCode);
        assertThat(remaining).hasSize(1);
        assertThat(remaining.stream().map(WarehouseItemDifficulty::getId)).doesNotContain(deleted.getId());
    }

    @Test
    @Sql(scripts = {"/LoadTestSubject.sql", "/PreloadAsmt.sql"})
    public void itShouldDetermineIfADifficultyHasReferences() {
        final List<WarehouseItemDifficulty> difficulties = newArrayList();
        difficulties.add(WarehouseItemDifficulty.builder().gradeCode("03").moderateLowEnd(1d).difficultLowEnd(2d).build());
        difficulties.add(WarehouseItemDifficulty.builder().gradeCode("04").moderateLowEnd(2d).difficultLowEnd(3d).build());
        repository.create(SubjectCode, difficulties);

        final List<Integer> unreferencedIds = repository.findBySubject(SubjectCode).stream()
                .map(WarehouseItemDifficulty::getId)
                .collect(Collectors.toList());
        assertThat(repository.isReferenced(unreferencedIds)).isNull();

        final Collection<WarehouseItemDifficulty> elaDifficulties = repository.findBySubject("ELA");

        assertThat(repository.isReferenced(elaDifficulties.stream()
                .map(WarehouseItemDifficulty::getId).collect(Collectors.toList()))).isNotNull();
    }

    @Test
    public void itShouldUpdateDifficulties() {
        final List<WarehouseItemDifficulty> difficulties = newArrayList();
        difficulties.add(WarehouseItemDifficulty.builder().gradeCode("03").moderateLowEnd(1d).difficultLowEnd(2d).build());
        difficulties.add(WarehouseItemDifficulty.builder().gradeCode("04").moderateLowEnd(2d).difficultLowEnd(3d).build());
        repository.create(SubjectCode, difficulties);

        Map<String, WarehouseItemDifficulty> persisted = repository.findBySubject(SubjectCode).stream()
                .collect(Collectors.toMap(
                        WarehouseItemDifficulty::getGradeCode,
                        difficulty -> difficulty
                ));

        final List<WarehouseItemDifficulty> updated = newArrayList();
        updated.add(persisted.get("03").copy().moderateLowEnd(3d).difficultLowEnd(4d).build());
        updated.add(persisted.get("04").copy().moderateLowEnd(5d).difficultLowEnd(6d).build());
        repository.update(updated);

        persisted = repository.findBySubject(SubjectCode).stream()
                .collect(Collectors.toMap(
                        WarehouseItemDifficulty::getGradeCode,
                        difficulty -> difficulty
                ));
        assertThat(persisted.get("03").getModerateLowEnd()).isEqualTo(3d, offset(0.1));
        assertThat(persisted.get("03").getDifficultLowEnd()).isEqualTo(4d, offset(0.1));
        assertThat(persisted.get("04").getModerateLowEnd()).isEqualTo(5d, offset(0.1));
        assertThat(persisted.get("04").getDifficultLowEnd()).isEqualTo(6d, offset(0.1));

    }

}