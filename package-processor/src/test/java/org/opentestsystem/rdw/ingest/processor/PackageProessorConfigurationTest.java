package org.opentestsystem.rdw.ingest.processor;
import com.google.common.io.CharStreams;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.springframework.http.MediaType;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.GenericMessage;

import java.io.*;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.fail;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.*;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;


public class PackageProessorConfigurationTest {


        private PackageProcessorConfiguration processor;
        private ImportRepository importRepository;

    private RdwMessageHeaderAccessor accessor;
    private String assessmentPackage;
    private Message message;

        @Before
        public void createProcessor() throws IOException {
            importRepository = mock(ImportRepository.class);
            processor = new PackageProcessorConfiguration(importRepository);

            accessor = RdwMessageHeaderAccessor.wrap(null);
            accessor.setContent("packages");
            accessor.setContentType(MediaType.TEXT_PLAIN);
            accessor.setImportId(1);

            try (final Reader reader = new InputStreamReader(this.getClass().getResourceAsStream("/ContentTest.items.csv"))) {
                assessmentPackage = CharStreams.toString(reader);
            }
            message = new GenericMessage(assessmentPackage, accessor.getMessageHeaders());
        }

    @Test
    public void itShouldProcessMessageWithCsvContent() throws UnsupportedEncodingException {
        processor.process(message);
        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.PROCESSED, null);
    }

    //TODO: Need more tests
}
