package org.opentestsystem.rdw.ingest.processor.repository.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.jdbc.Sql;

import java.util.Map;
import org.opentestsystem.rdw.ingest.processor.repository.SubjectTranslationRepository;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.entry;

@Import(JdbcSubjectTranslationRepository.class)
@Sql(statements = {
        "INSERT INTO subject (id, code, import_id, update_import_id) VALUES (-12, 'test1', 1, 1), (-13, 'test2', 1, 1);",
        "INSERT INTO subject_translation (subject_id, label_code, label) VALUES (-12, 'key_a', 'value_a'), (-12, 'key_b', 'value_b');",
})
public class JdbcSubjectTranslationRepositoryIT extends TenantAwareRepositoryIT {

    @Autowired
    private SubjectTranslationRepository repository;

    @Test
    public void itShouldFindAllMessagesForASubject() {
        assertThat(repository.findBySubject("test1"))
                .containsOnly(entry("key_a", "value_a"), entry("key_b", "value_b"));
        assertThat(repository.findBySubject("test2")).isEmpty();
    }

    @Test
    public void itShouldCreateMessages() {
        final Map<String, String> newMessages = ImmutableMap.of(
                "key_1", "value_1",
                "key_2", "value_2");
        repository.create("test2", newMessages);

        assertThat(repository.findBySubject("test2"))
                .hasSameSizeAs(newMessages)
                .containsAllEntriesOf(newMessages);
    }

    @Test
    public void itShouldUpdateMessages() {
        final Map<String, String> updatedMessages = ImmutableMap.of(
                "key_a", "new_value_a",
                "key_b", "new_value_b");
        repository.update("test1", updatedMessages);

        assertThat(repository.findBySubject("test1"))
                .hasSameSizeAs(updatedMessages)
                .containsAllEntriesOf(updatedMessages);
    }

    @Test
    public void itShouldDeleteMessages() {
        repository.delete("test1", ImmutableList.of("key_a"));

        assertThat(repository.findBySubject("test1"))
                .containsOnly(entry("key_b", "value_b"));
    }
}
