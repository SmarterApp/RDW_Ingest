package org.opentestsystem.rdw.ingest.processor.repository.impl;

import java.util.ArrayList;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Item;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
        "INSERT INTO subject (id, name) VALUES (-12, 'TMath');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES \n" +
                "(-12, -12, '11', 'Concepts and Procedures', 'Concepts and Procedures - Students can explain and apply mathematical concepts and interpret and carry out mathematical procedures with precision and fluency.');",
        "INSERT INTO target (id, claim_id, natural_id, code, description) VALUES \n" +
                "(-1111, -12,'TA-APR', 'TA-APR', 'Test Arithmetic with Polynomials and Rational Expressions');",
        "INSERT INTO grade (id, code, name) VALUES \n" +
                "(-22,  '22', 'Twenty Second grade - for the slow kids');",
        "INSERT INTO depth_of_knowledge (id, level, subject_id, description, reference) VALUES \n" +
                "(-11, -11, -12, 'Total recall of knowledge', 'reference');",
        "INSERT INTO math_practice (practice, description) VALUES \n" +
                "(-11, 'Makes no sense of problems and cannot persevere in solving them');",
        "INSERT INTO asmt_type (id, code, name) VALUES \n" +
                "(-11, 'tsum', 'TSummative');"

})
public class AssessmentPackageRepositoryIT {
    @Autowired
    private AssessmentPackageRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private Item.Builder itemBuilder;
    private Assessment.Builder asmtBuilder;

    @Before
    public void setUp() {
        asmtBuilder = new Assessment.Builder();
        itemBuilder = new Item.Builder();
        asmtBuilder.cutPoints(2.0e3, 2.1e3, 2.2e3)
                .schoolYear(2017)
                .gradeId(-22)
                .label("label")
                .maxScore(2.4e3)
                .minScore(1.9e3)
                .name("My Assessment")
                .subjectId(-12)
                .typeId(-11)
                .version("version")
                .naturalId("(SBAC)SBAC-Winter-2016-2017");

        itemBuilder.mathPractice(-11)
                .targetId(-1111)
                .assessmentNaturalId("(SBAC)SBAC-Winter-2016-2017")
                .allowCalculator(false)
                .claimId(-12)
                .difficulty(0.23)
                .dokId(-11)
                .maxPoints(2.0)
                .naturalId("20-18943");
    }

    @Test
    public void itShouldCreateAssessmentsAndScoresAndItems() {
        final int beforeAsmtCount = countRowsInTable(jdbcTemplate, "asmt");
        final int beforeItemCount = countRowsInTable(jdbcTemplate, "item");
        final int beforeAsmScoreCount = countRowsInTable(jdbcTemplate, "asmt_score");

        Assessment[] asmtArray = new Assessment[]{asmtBuilder.build()};

        List<Item> itemList = new ArrayList<Item>();
        itemList.add(itemBuilder.build());
        itemList.add(itemBuilder.naturalId("20-19999").build());
        itemList.add(itemBuilder.naturalId("20-18888").build());
        repository.createPackage(asmtArray, itemList.toArray(new Item[itemList.size()]), -99);

        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(beforeAsmtCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "asmt_score")).isEqualTo(beforeAsmScoreCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(beforeItemCount + 3);

    }

}
