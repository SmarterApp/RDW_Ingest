package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.PackageProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.model.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@ContextConfiguration(classes = {PackageProcessorApplication.class})
public class DefaultItemParserIT {
    @Autowired
    ItemParser itemParser;

    @Test
    public void itShouldCatchAllErrorsAndReturnNoObjectsWhenParsingBadData() throws IOException {
        DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        final Iterable<CSVRecord> records =
                CSVFormat.RFC4180.withFirstRecordAsHeader().parse(new InputStreamReader(this.getClass().getResourceAsStream("/IAB_ICA_Combined.bad-item.csv")));

        for (CSVRecord record : records) {
            final Item item = itemParser.parse(record, errorCollector);
            assertThat(item).isNull();
        }
        assertThat(errorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"Claim\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Claim\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Target and Claim\",\"value\":\"G-GPE| and 4\",\"error\":\"Unknown value combination\"}," +
                "{\"elementName\":\"MathematicalPractice\",\"value\":\"something\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"MaxPoints\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"DOK and AssessmentSubject\",\"value\":\"662 and MATH\",\"error\":\"Unknown value combination\"}" +
                "]}");
    }

    @Test
    public void itShouldHaveNoErrorsAndReturnObjectsWhenParsingGoodData() throws IOException {
        DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        List<Item> items = newArrayList();

        final Iterable<CSVRecord> records =
                CSVFormat.RFC4180.withFirstRecordAsHeader()
                        .parse(new InputStreamReader(this.getClass()
                                .getResourceAsStream("/IAB_ICA_Combined.items.csv")));

        for (CSVRecord record : records) {
            final Item item = itemParser.parse(record, errorCollector);
            assertThat(item).isNotNull();
            items.add(item);
        }
        assertThat(errorCollector.isEmpty()).isTrue();
        assertThat(items.size()).isEqualTo(81);
    }

}