package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.RepoAndServiceTestConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.Item;
import org.opentestsystem.rdw.ingest.processor.repository.SubjectRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        RepoAndServiceTestConfiguration.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
public class DefaultItemParserIT {

    @Autowired
    private ItemParser itemParser;

    @Autowired
    private SubjectRepository subjectRepository;

    @Test
    public void itShouldCatchAllErrorsAndReturnNoObjectsWhenParsingBadData() throws IOException {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        final Iterable<CSVRecord> records =
                CSVFormat.RFC4180.withFirstRecordAsHeader().parse(new InputStreamReader(this.getClass().getResourceAsStream("/IAB_ICA_Combined.bad-item.csv")));

        for (final CSVRecord record : records) {
            final Item item = itemParser.parse(record, errorCollector, record.get("AssessmentId").trim(), subjectRepository.findIdByCode(record.get("AssessmentSubject").trim()));
            assertThat(item).isNull();
        }
        assertThat(errorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501], SecondaryClaimContentTarget\",\"value\":\"|4-11\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11E-Perf-HowWeLearn-Winter-2016-2017], item id [200-62025], ClaimContentTarget\",\"value\":\"|4-11\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Perf-TeenDrivingRestricitons-MATH-11-Winter-2016-2017], item id [200-21563], ClaimContentTarget\",\"value\":\"4|G-GPE|\",\"error\":\"target not found for\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Perf-TeenDrivingRestricitons-MATH-11-Winter-2016-2017], item id [200-21564], AllowCalculator\",\"value\":\"something\",\"error\":\"invalid value [something]\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-12585], MathematicalPractice\",\"value\":\"something\",\"error\":\"For input string: \\\"something\\\"\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501], MaxPoints\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501], CommonCore\",\"value\":\"ABCD;ABCF\",\"error\":\"unable to find all common core standards for an item and subject id [1]\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501], DOK\",\"value\":\"662\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501], ClaimContentTarget\",\"value\":\"\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], FullItemKey\",\"value\":\"200-501234567890123456789012345678901234567890long\",\"error\":\"string is too long, max length is 40\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501234567890123456789012345678901234567890long], ClaimContentTarget\",\"value\":\"\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501], NumberOfAnswerOptions\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                // these two error messages test different item types: MS and MC
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501], AnswerKey\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501], AnswerKey\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"PtWritingType\",\"value\":\"veryverylongPtWritingType\",\"error\":\"string is too long, max length is 16\"}" +
                "]}");
    }

    @Test
    public void itShouldHaveNoErrorsAndReturnObjectsWhenParsingGoodData() throws IOException {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        final List<Item> items = newArrayList();

        final Iterable<CSVRecord> records =
                CSVFormat.RFC4180.withFirstRecordAsHeader()
                        .parse(new InputStreamReader(this.getClass()
                                .getResourceAsStream("/IAB_ICA_Combined.items.csv")));

        for (final CSVRecord record : records) {
            final Item item = itemParser.parse(record, errorCollector, record.get("AssessmentId").trim(), subjectRepository.findIdByCode(record.get("AssessmentSubject").trim()));
            assertThat(item).isNotNull();
            items.add(item);
        }
        assertThat(errorCollector.isEmpty()).isTrue();
        assertThat(items.size()).isEqualTo(81);
    }

    @Test
    public void itShouldQuietlyReturnNullIfNoItemData() throws IOException {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        final Iterable<CSVRecord> records = CSVFormat.RFC4180.withFirstRecordAsHeader()
                .parse(new InputStreamReader(this.getClass().getResourceAsStream("/IAB.itemless.csv")));

        for (final CSVRecord record : records) {
            assertThat(itemParser.parse(record, errorCollector, record.get("AssessmentId").trim(),
                    subjectRepository.findIdByCode(record.get("AssessmentSubject").trim()))).isNull();
        }
    }
}
