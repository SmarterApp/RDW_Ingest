package org.opentestsystem.rdw.ingest.processor.model;

import org.junit.Test;

/**
 * Unit test for the Assessment model
 */
public class AssessmentTest {

    /*
     * Required parameters are naturalId, cutPoints, maxScore, minScore, gradeId, subjectId, typeId
     * However, in usage in the Package Processor, gradeId, subjectId, and typeId are validated
     * against the database before they are set in the builder. If they aren't found, then building stops.
     */

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireSubjectId() {
        Assessment.builder()
                .naturalId("id")
                .name("name")
                .schoolYear(2017)
                .typeId(1)
                .gradeId(3)
                .build();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireTypeId() {
        Assessment.builder()
                .naturalId("id")
                .name("name")
                .schoolYear(2017)
                .subjectId(1)
                .gradeId(3)
                .build();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldRequireGradeId() {
        Assessment.builder()
                .naturalId("id")
                .name("name")
                .schoolYear(2017)
                .subjectId(1)
                .typeId(1)
                .build();
    }

    /**
     * Optional parameters are name, version, label
     */
    @Test
    public void itShouldAllowCertainNullParameters() {
        final Assessment.Builder builder = Assessment.builder()
                .naturalId("id")
                .schoolYear(2017)
                .gradeId(3)
                .subjectId(5)
                .typeId(1)
                .version("version");

        builder.build();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldEnforceUniqueSubjectScoreIds() {
        Assessment.builder()
                .score(AssessmentScore.builder()
                        .minScore(0.0)
                        .maxScore(100.0)
                        .cutPoint1(50.0)
                        .build())
                .score(AssessmentScore.builder()
                        .minScore(0.0)
                        .maxScore(1000.0)
                        .build())
                .build();
    }
}
