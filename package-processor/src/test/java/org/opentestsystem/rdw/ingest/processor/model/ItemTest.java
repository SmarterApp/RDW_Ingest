package org.opentestsystem.rdw.ingest.processor.model;

import org.junit.Test;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

/**
 * Unit test for Item class
 */
public class ItemTest {

    @Test(expected = NullPointerException.class)
    public void itShouldNotAllowNullDokParameter() {
        Item.builder()
                .naturalId("ItemId")
                .claimId(1)
                .targetId(1)
                .allowCalculator(true)
                .difficulty(1.5)
                .maxPoints(1.0)
                .mathPractice(3)
                .build();
    }

    @Test(expected = NullPointerException.class)
    public void itShouldNotAllowNullClaimIdParameter() {
        Item.builder()
                .naturalId("ItemId")
                .targetId(1)
                .dokId(1)
                .allowCalculator(true)
                .difficulty(1.5)
                .maxPoints(1.0)
                .mathPractice(3)
                .build();
    }

    @Test(expected = NullPointerException.class)
    public void itShouldNotAllowNullTargetIdParameter() {
        Item.builder()
                .naturalId("ItemId")
                .claimId(1)
                .dokId(1)
                .allowCalculator(true)
                .difficulty(1.5)
                .maxPoints(1.0)
                .mathPractice(3)
                .build();
    }

    @Test(expected = NullPointerException.class)
    public void itShouldNotAllowNullDifficultyParameter() {
        Item.builder()
                .naturalId("ItemId")
                .claimId(1)
                .dokId(1)
                .targetId(1)
                .allowCalculator(true)
                .mathPractice(3)
                .maxPoints(1.0)
                .build();
    }

    @Test(expected = NullPointerException.class)
    public void itShouldNotAllowNullMaxPointsParameter() {
        Item.builder()
                .naturalId("ItemId")
                .claimId(1)
                .dokId(1)
                .targetId(1)
                .allowCalculator(true)
                .difficulty(1.5)
                .mathPractice(3)
                .build();
    }

    @Test
    public void itShouldAllowNullMathPracticeParameter() {
        Item.builder()
                .naturalId("ItemId")
                .claimId(1)
                .dokId(1)
                .targetId(1)
                .allowCalculator(true)
                .difficulty(1.5)
                .maxPoints(2.0)
                .build();
    }

    @Test
    public void itShouldAllowNullAllowCalculatorParameter() {
        Item.builder()
                .naturalId("ItemId")
                .claimId(1)
                .dokId(1)
                .targetId(1)
                .mathPractice(1)
                .difficulty(1.5)
                .maxPoints(2.0)
                .build();
    }

    @Test
    public void itShouldCompare() {
        final Item.Builder builder = Item.builder()
                .id(99)
                .naturalId("ItemId")
                .active(true)
                .answerKey("new answerKey")
                .allowCalculator(null)
                .claimId(1)
                .difficulty(1.5)
                .dokId(1)
                .fieldTest(true)
                .targetId(1)
                .mathPractice(1)
                .maxPoints(2.0)
                .optionsCount(6)
                .position(3)
                .type("type")
                .commonCoreStandards(newArrayList(-99, -98))
                .otherTargets(newArrayList(-1111));

        assertThat(builder.build()).isEqualTo(builder.build());

        assertThat(builder.build()).isNotEqualTo(builder.id(10).build());
        assertThat(builder.build()).isNotEqualTo(builder.naturalId("id").build());
        assertThat(builder.build()).isNotEqualTo(builder.active(null).build());
        assertThat(builder.build()).isNotEqualTo(builder.answerKey(null).build());
        assertThat(builder.build()).isNotEqualTo(builder.allowCalculator(true).build());
        assertThat(builder.build()).isNotEqualTo(builder.claimId(2).build());
        assertThat(builder.build()).isNotEqualTo(builder.difficulty(2.5).build());
        assertThat(builder.build()).isNotEqualTo(builder.dokId(2).build());
        assertThat(builder.build()).isNotEqualTo(builder.fieldTest(null).build());
        assertThat(builder.build()).isNotEqualTo(builder.targetId(2).build());
        assertThat(builder.build()).isNotEqualTo(builder.mathPractice(2).build());
        assertThat(builder.build()).isNotEqualTo(builder.maxPoints(5.0).build());
        assertThat(builder.build()).isNotEqualTo(builder.optionsCount(5).build());
        assertThat(builder.build()).isNotEqualTo(builder.position(5).build());
        assertThat(builder.build()).isNotEqualTo(builder.type("new type").build());
        assertThat(builder.build()).isNotEqualTo(builder.commonCoreStandards(null).build());
        assertThat(builder.build()).isNotEqualTo(builder.otherTargets(newArrayList(1)).build());
    }
}
