package org.opentestsystem.rdw.ingest.processor.service.impl.validator;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.subject.ItemDifficulty;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.ingest.common.util.DataElementError;
import org.opentestsystem.rdw.ingest.common.util.LocationAwareErrorCollector;

import static org.assertj.core.api.Assertions.assertThat;

public class WarehouseAssessmentItemDifficultyValidatorTest {

    private LocationAwareErrorCollector context;
    private ItemDifficultyValidator validator;

    @Before
    public void setup() {
        context = new LocationAwareErrorCollector();
        validator = new ItemDifficultyValidator();
    }

    @Test
    public void itShouldValidateThatModerateIsLessThanDifficult() {
        final Subject subject = Subject.builder()
                .itemDifficulties(ImmutableList.of(
                        ItemDifficulty.builder()
                                .gradeCode("03")
                                .moderateLowEnd(2)
                                .difficultLowEnd(1)
                                .build(),
                        ItemDifficulty.builder()
                                .gradeCode("04")
                                .moderateLowEnd(1)
                                .difficultLowEnd(2)
                                .build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("ItemDifficulty(03)");
        assertThat(failure.getError()).isEqualTo("Moderate low end cutpoint must be less than the difficult low end cutpoint");
    }

    @Test
    public void itShouldDetectDuplicateCodes() {
        final Subject subject = Subject.builder()
                .itemDifficulties(ImmutableList.of(
                        ItemDifficulty.builder()
                                .gradeCode("03")
                                .moderateLowEnd(1)
                                .difficultLowEnd(2)
                                .build(),
                        ItemDifficulty.builder()
                                .gradeCode("03")
                                .moderateLowEnd(1)
                                .difficultLowEnd(2)
                                .build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("ItemDifficulty(03)");
        assertThat(failure.getError()).isEqualTo("Duplicate code found: 03");
    }
}
