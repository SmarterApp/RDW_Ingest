package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

@Import(JdbcStudentRepository.class)
@Sql(statements = {
    "INSERT INTO import (id, status, content, contentType, digest) VALUES (-10, 1, 4, 'text', 'text');",
    "INSERT INTO import (id, status, content, contentType, digest) VALUES (-1, 1, 4, 'text', 'text');",
    "INSERT INTO student (id, ssid, first_name, middle_name, last_or_surname, gender_id, birthday, import_id, update_import_id) " +
        "VALUES (-99, '00110011', 'George', null, 'Washington', 1, '1732-02-22', -10, -10);",
    "INSERT INTO student (id, ssid, first_name, middle_name, last_or_surname, gender_id, birthday, import_id, update_import_id) " +
        "VALUES (-98, '00220022', 'John', null, 'Adams', 1, '1735-10-30', -10, -10)"
})
public class JdbcStudentRepositoryIT extends TenantAwareRepositoryIT {
    @Autowired
    private StudentRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    public void itShouldUpdateFields() {
        final Student washington = Student.builder()
            .ssid("00110011")
            .middleName("Washington")
            .lastOrSurname("Carver")
            .birthday(LocalDate.parse("1864-01-01"))
            .build();

        final Student adams = Student.builder()
            .ssid("00220022")
            .firstName("Abigail")
            .genderId(2)
            .birthday(LocalDate.parse("1744-11-22"))
            .firstEntryIntoUSSchoolAt(LocalDate.parse("1999-02-02"))
            .lepEntryAt(LocalDate.parse("1999-03-03"))
            .lepExitAt(LocalDate.parse("1999-04-04"))
            .build();

        repository.update(Arrays.asList(washington, adams), -1);

        List<Map<String, Object>> students = jdbcTemplate.queryForList("select * from student");

        Map<String, Object> washingtonUpdates = null;
        Map<String, Object> adamsUpdates = null;

        for (Map<String,Object> studentMap : students) {
            if (studentMap.get("ssid").equals(washington.getSsid())) {
                washingtonUpdates = studentMap;
            } else if (studentMap.get("ssid").equals(adams.getSsid())) {
                adamsUpdates = studentMap;
            }
        }

        assertThat(washingtonUpdates).isNotNull();
        assertThat(washingtonUpdates.get("import_id")).isEqualTo(-10L);
        assertThat(washingtonUpdates.get("update_import_id")).isEqualTo(-1L);
        assertThat(washingtonUpdates.get("first_name")).isEqualTo("George");
        assertThat(washingtonUpdates.get("middle_name")).isEqualTo("Washington");
        assertThat(washingtonUpdates.get("last_or_surname")).isEqualTo("Carver");
        assertThat(washingtonUpdates.get("gender_id")).isEqualTo(1);
        assertThat(washingtonUpdates.get("birthday").toString()).isEqualTo("1864-01-01");
        assertThat(washingtonUpdates.get("first_entry_into_us_school_at")).isNull();
        assertThat(washingtonUpdates.get("lep_entry_at")).isNull();
        assertThat(washingtonUpdates.get("lep_exit_at")).isNull();

        assertThat(adamsUpdates).isNotNull();
        assertThat(adamsUpdates.get("import_id")).isEqualTo(-10L);
        assertThat(adamsUpdates.get("update_import_id")).isEqualTo(-1L);
        assertThat(adamsUpdates.get("first_name")).isEqualTo("Abigail");
        assertThat(adamsUpdates.get("middle_name")).isNull();
        assertThat(adamsUpdates.get("last_or_surname")).isEqualTo("Adams");
        assertThat(adamsUpdates.get("gender_id")).isEqualTo(2);
        assertThat(adamsUpdates.get("birthday").toString()).isEqualTo("1744-11-22");
        assertThat(adamsUpdates.get("first_entry_into_us_school_at")).isNotNull();
        assertThat(adamsUpdates.get("first_entry_into_us_school_at").toString()).isEqualTo("1999-02-02");
        assertThat(adamsUpdates.get("lep_entry_at")).isNotNull();
        assertThat(adamsUpdates.get("lep_entry_at").toString()).isEqualTo("1999-03-03");
        assertThat(adamsUpdates.get("lep_exit_at")).isNotNull();
        assertThat(adamsUpdates.get("lep_exit_at").toString()).isEqualTo("1999-04-04");
    }

    @Test
    public void itShouldSkipUnknownStudents() {
        final Student jefferson = Student.builder()
            .ssid("00330033")
            .firstName("Thomas")
            .lastOrSurname("Jefferson")
            .build();

        final Student adams = Student.builder()
            .ssid("00220022")
            .middleName("Quincy")
            .birthday(LocalDate.parse("1767-07-11"))
            .build();

        repository.update(Arrays.asList(jefferson, adams), -1);

        List<Map<String, Object>> students = jdbcTemplate.queryForList("select * from student");

        Map<String, Object> jeffersonUpdates = null;
        Map<String, Object> adamsUpdates = null;

        for (Map<String,Object> studentMap : students) {
            if (studentMap.get("ssid").equals(jefferson.getSsid())) {
                jeffersonUpdates = studentMap;
            } else if (studentMap.get("ssid").equals(adams.getSsid())) {
                adamsUpdates = studentMap;
            }
        }

        assertThat(jeffersonUpdates).isNull();

        assertThat(adamsUpdates).isNotNull();
        assertThat(adamsUpdates.get("middle_name")).isNotNull();
        assertThat(adamsUpdates.get("middle_name")).isEqualTo("Quincy");
        assertThat(adamsUpdates.get("birthday").toString()).isEqualTo("1767-07-11");
    }
}
