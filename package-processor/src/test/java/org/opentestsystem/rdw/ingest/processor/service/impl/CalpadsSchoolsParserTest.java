package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.ByteStreams;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.common.util.ParserHelper;

import java.io.IOException;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

public class CalpadsSchoolsParserTest {

    @Test
    public void testParser() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/CA_schools.baddata.csv"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        final CalpadsSchoolsParser parser = new CalpadsSchoolsParser();
        parser.parse(payload, new ParserHelper(errorCollector));

        assertThat(errorCollector.size()).isEqualTo(3);

        final Map<String, School> schools = parser.getSchools();
        assertThat(schools).hasSize(23);

        final School arcata = schools.get("12626796007678");
        assertThat(arcata.getName()).isEqualTo("Arcata Elementary");
        assertThat(arcata.getDistrict().getNaturalId()).isEqualTo("12626790000000");
        assertThat(arcata.getDistrict().getName()).isEqualTo("Arcata Elementary");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowForUnknownFormatJson() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/organization.json"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        final CalpadsSchoolsParser parser = new CalpadsSchoolsParser();
        parser.parse(payload, new ParserHelper(errorCollector));
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowForUnknownFormatXml() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/organization.xml"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        final CalpadsSchoolsParser parser = new CalpadsSchoolsParser();
        parser.parse(payload, new ParserHelper(errorCollector));
    }
}
