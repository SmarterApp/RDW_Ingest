package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.repository.MathPracticeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@Sql(statements = {
        "INSERT INTO math_practice (practice, description) VALUES (11, 'test1');",
        "INSERT INTO math_practice (practice, description) VALUES (22, 'test2');",
        "INSERT INTO math_practice (practice, description) VALUES (55, 'test5');"
})
public class MathPracticeRepositoryIT {

    @Autowired
    private MathPracticeRepository repository;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findByPractice(11)).isEqualTo(11);
        assertThat(repository.findByPractice(22)).isEqualTo(22);
    }

    @Test
    public void itShouldReturnNullWhenPracticeIsUnknown() {
        assertThat(repository.findByPractice(44)).isEqualTo(null);
    }

    @Test
    public void itShouldCacheReturnedId() {
        final Cache practices = this.cacheManager.getCache("mathPractice");
        assertThat(practices.get(55)).isNull();

        assertThat(repository.findByPractice(55)).isEqualTo(55);

        assertThat(practices.get(55, Integer.class)).isEqualTo(55);
    }
}