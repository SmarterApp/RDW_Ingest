package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.model.District;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.common.repository.SchoolRepository;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.CacheManager;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

/**
 * The JdbcSchoolRepository is in common. This tests the parts that package processor cares about.
 */
@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO import (id, status, content, contentType, digest) VALUES (-10, 1, 4, 'text', 'text');",
        "INSERT INTO import (id, status, content, contentType, digest) VALUES (-11, 0, 4, 'text', 'text');",
        "INSERT INTO district (id, natural_id, name) VALUES (-199, 'D199', 'District 199');",
        "INSERT INTO school (id, district_id, natural_id, name, import_id, update_import_id, deleted) VALUES (-99, -199, 'S99', 'School 99', -10, -10, 0);",
})
public class JdbcSchoolRepositoryIT {

    @Autowired
    private SchoolRepository repository;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldBatchUpsertSchools() {
        final District d199 = District.builder().naturalId("D199").name("District 199").build();
        final District d200 = District.builder().naturalId("D200").name("District 200").build();

        // need at least 4 schools to trigger batch handling
        final School s99 = School.builder().naturalId("S99").name("School 99 Skidoo").district(d199).build();
        final School s98 = School.builder().naturalId("S98").name("School 98").district(d199).build();
        final School s97 = School.builder().naturalId("S97").name("School 97").district(d200).build();
        final School s96 = School.builder().naturalId("S96").name("School 96").district(d200).build();

        repository.upsert(newArrayList(s96, s97, s98, s99), -11);

        assertThat(repository.findIdByNaturalId("s96")).isNotNull();
        assertThat(repository.findIdByNaturalId("s97")).isNotNull();
        assertThat(repository.findIdByNaturalId("s98")).isNotNull();
        assertThat(repository.findIdByNaturalId("s99")).isNotNull();
    }
}