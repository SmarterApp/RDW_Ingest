package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import org.opentestsystem.rdw.ingest.common.model.District;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.processor.repository.SchoolRepository;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

/**
 * The JdbcSchoolRepository is in common. This tests the parts that package processor cares about.
 */
@Import(JdbcSchoolRepository.class)
public class JdbcSchoolRepositoryIT extends TenantAwareRepositoryIT {

    @Autowired
    private SchoolRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES (-10, 1, 4, 'text', 'text');",
            "INSERT INTO import (id, status, content, contentType, digest) VALUES (-11, 0, 4, 'text', 'text');",
            "INSERT INTO district (id, natural_id, name) VALUES (-199, 'D199', 'District 199');",
            "INSERT INTO school (id, district_id, natural_id, name, import_id, update_import_id, deleted) VALUES (-99, -199, 'S99', 'School 99', -10, -10, 0);",
    })
    public void itShouldBatchUpsertSchools() {
        final int schoolCount = countRowsInTable(jdbcTemplate, "school");
        final int districtCount = countRowsInTable(jdbcTemplate, "district");

        // TODO - extend this test to include groups of things

        final District d199 = District.builder().naturalId("D199").name("District 199").build();
        final District d200 = District.builder().naturalId("D200").name("District 200").build();

        // need at least 4 schools to trigger batch handling
        final School s99 = School.builder().naturalId("S99").name("School 99 Skidoo").district(d199).build();
        final School s98 = School.builder().naturalId("S98").name("School 98").district(d199).build();
        final School s97 = School.builder().naturalId("S97").name("School 97").district(d200).build();
        final School s96 = School.builder().naturalId("S96").name("School 96").district(d200).build();

        repository.upsert(newArrayList(s96, s97, s98, s99), -11);

        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(schoolCount+3);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(districtCount+1);
    }

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
            "INSERT INTO district (id, name, natural_id) VALUES (-22, 'Sample District 1', 'DistrictNaturalId');",
            "INSERT INTO school (id, district_id, name, natural_id, import_id, update_import_id) VALUES (-27, -22, 'Sample School 1', 'SchoolNaturalId', -99, -99);"
    })
    public void itShouldReturnExistingSchoolForAnExistingDistrict() {
        final int schoolCount = countRowsInTable(jdbcTemplate, "school");
        final int districtCount = countRowsInTable(jdbcTemplate, "district");

        final School school = School.builder()
                .name("Sample School 1")
                .naturalId("SchoolNaturalId")
                .district(District.builder().naturalId("DistrictNaturalId").name("Sample District 1").build())
                .build();
        repository.upsert(newArrayList(school), -100);

        assertThat(school.getId()).isEqualTo(-27);
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(schoolCount);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(districtCount);

        //verify that import id has not changed
        assertThat(countRowsInTableWhere(jdbcTemplate, "school", "id = -27 and name ='Sample School 1' and natural_id = 'SchoolNaturalId' and import_id = -99")).isEqualTo(1);
    }

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
            "INSERT INTO district (id, name, natural_id) VALUES (-22, 'Sample District 1', 'DistrictNaturalId');"
    })
    public void itShouldCreateNewSchoolForAnExistingDistrict() {
        final int schoolCount = countRowsInTable(jdbcTemplate, "school");
        final int districtCount = countRowsInTable(jdbcTemplate, "district");

        final School school = School.builder()
                .name("Sample School 11")
                .naturalId("SchoolNaturalId")
                .district(District.builder().naturalId("DistrictNaturalId").name("Sample District 1").build())
                .build();
        repository.upsert(newArrayList(school), -99);

        assertThat(school.getId()).isNotNull();
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(schoolCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(districtCount);

        //verify import id
        assertThat(countRowsInTableWhere(jdbcTemplate, "school", "natural_id = 'SchoolNaturalId' and import_id = -99")).isEqualTo(1);
    }

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')"
    })
    public void itShouldCreateNewSchoolAndDistrict() {
        final int schoolCount = countRowsInTable(jdbcTemplate, "school");
        final int districtCount = countRowsInTable(jdbcTemplate, "district");

        assertThat(jdbcTemplate.queryForObject("SELECT count(*) FROM school WHERE natural_id = ? AND name = ?", Integer.class, "DistrictNaturalId", "Sample District 1"))
                .isEqualTo(0);

        final School school = School.builder()
                .name("Sample School 12")
                .naturalId("SchoolNaturalId")
                .district(District.builder().naturalId("DistrictNaturalId").name("Sample District 1").build())
                .build();
        repository.upsert(newArrayList(school), -99);

        assertThat(school.getId()).isNotNull();
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(schoolCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(districtCount + 1);
    }

    @Test
    @Sql(statements = {
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
            "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -100, 0, 1, 'type', 'digest')",
            "INSERT INTO district (id, name, natural_id) VALUES (-22, 'Sample District 1', 'DistrictNaturalId');",
            "INSERT INTO school (id, district_id, name, natural_id, import_id, update_import_id) VALUES (-27, -22, 'Sample School 1', 'SchoolNaturalId', -99, -99);"
    })
    public void itShouldUpdateExistingSchoolForAnExistingDistrict() {
        final School school = School.builder()
                .name("Sample School New Name")
                .naturalId("SchoolNaturalId")
                .district(District.builder().naturalId("DistrictNaturalId").name("District New Name").build())
                .build();
        repository.upsert(newArrayList(school), -100);

        //verify that import id has been updated
        assertThat(school.getId()).isEqualTo(-27);
        assertThat(countRowsInTableWhere(jdbcTemplate, "school", "id = -27 and name ='Sample School New Name' and update_import_id = -100")).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "district", "id = -22 and name ='District New Name'")).isEqualTo(1);
    }
}
