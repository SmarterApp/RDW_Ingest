package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentTypeRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcAssessmentTypeRepository.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO asmt_type (id, code) VALUES (-99, 'Code1');",
        "INSERT INTO asmt_type (id, code) VALUES (-88, 'Code2');",
        "INSERT INTO asmt_type (id, code) VALUES (-55, 'Code55');"
})
public class JdbcWarehouseAssessmentTypeRepositoryIT {

    @Autowired
    private AssessmentTypeRepository repository;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldReturnCode() {
        assertThat(repository.findIdByCode("Code1")).isEqualTo(-99);
        assertThat(repository.findIdByCode("Code2")).isEqualTo(-88);
    }

    @Test
    public void itShouldReturnNullWhenCodeIsUnknown() {
        assertThat(repository.findIdByCode("blah")).isEqualTo(null);
    }

    @Test
    public void itShouldCacheReturnedCode() {
        final Cache ids = this.cacheManager.getCache("asmtType");
        assertThat(ids.get("Code55")).isNull();

        assertThat(repository.findIdByCode("Code55")).isEqualTo(-55);

        assertThat(ids.get("Code55", Integer.class)).isEqualTo(-55);
    }
}
