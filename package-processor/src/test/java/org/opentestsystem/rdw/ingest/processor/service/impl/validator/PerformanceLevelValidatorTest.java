package org.opentestsystem.rdw.ingest.processor.service.impl.validator;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.subject.PerformanceLevel;
import org.opentestsystem.rdw.common.model.subject.PerformanceLevels;
import org.opentestsystem.rdw.common.model.subject.SubScoring;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.common.model.subject.SubjectAssessmentType;
import org.opentestsystem.rdw.ingest.processor.model.SubjectValidationContext;
import org.opentestsystem.rdw.ingest.processor.model.SubjectValidationFailure;

import static org.assertj.core.api.Assertions.assertThat;

public class PerformanceLevelValidatorTest {

    private SubjectValidationContext context;
    private PerformanceLevelValidator validator;

    @Before
    public void setup() {
        context = new SubjectValidationContext();
        validator = new PerformanceLevelValidator();
    }

    @Test
    public void itShouldValidateThatPerformanceLevelsStartAt1() {
        final Subject subject = Subject.builder().assessmentTypes(ImmutableList.of(
                SubjectAssessmentType.builder()
                        .code("iab")
                        .performanceLevels(PerformanceLevels.builder()
                                .performanceLevels(ImmutableList.of(
                                        PerformanceLevel.builder().level(2).build(),
                                        PerformanceLevel.builder().level(3).build()
                                ))
                                .build())
                        .build(),
                SubjectAssessmentType.builder()
                        .code("ica")
                        .performanceLevels(PerformanceLevels.builder()
                                .performanceLevels(ImmutableList.of(
                                        PerformanceLevel.builder().level(1).build(),
                                        PerformanceLevel.builder().level(2).build()
                                ))
                                .build())
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("AssessmentType(iab)");
        assertThat(failure.getMessage()).isEqualTo("Performance levels must start at level 1");
    }

    @Test
    public void itShouldValidateThatPerformanceLevelsAreConsecutive() {
        final Subject subject = Subject.builder().assessmentTypes(ImmutableList.of(
                SubjectAssessmentType.builder()
                        .code("iab")
                        .performanceLevels(PerformanceLevels.builder()
                                .performanceLevels(ImmutableList.of(
                                        PerformanceLevel.builder().level(1).build(),
                                        PerformanceLevel.builder().level(3).build()
                                ))
                                .build())
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.isValid()).isFalse();
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("AssessmentType(iab)");
        assertThat(failure.getMessage()).isEqualTo("Performance levels must be continuous (1, 2, 3, etc)");
    }

    @Test
    public void itShouldValidateThePerformanceCutoffLevelExists() {
        final Subject subject = Subject.builder().assessmentTypes(ImmutableList.of(
                SubjectAssessmentType.builder()
                        .code("iab")
                        .performanceLevels(PerformanceLevels.builder()
                                .standardCutoff(4)
                                .performanceLevels(ImmutableList.of(
                                        PerformanceLevel.builder().level(1).build(),
                                        PerformanceLevel.builder().level(2).build(),
                                        PerformanceLevel.builder().level(3).build()
                                ))
                                .build())
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.isValid()).isFalse();
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("AssessmentType(iab)");
        assertThat(failure.getMessage()).isEqualTo("Performance level cutoff: 4 must reference an existing performance level");
    }

    @Test
    public void itShouldOnlyAllowSixPerformanceLevels() {
        final Subject subject = Subject.builder().assessmentTypes(ImmutableList.of(
                SubjectAssessmentType.builder()
                        .code("iab")
                        .performanceLevels(PerformanceLevels.builder()
                                .standardCutoff(4)
                                .performanceLevels(ImmutableList.of(
                                        PerformanceLevel.builder().level(1).build(),
                                        PerformanceLevel.builder().level(2).build(),
                                        PerformanceLevel.builder().level(3).build(),
                                        PerformanceLevel.builder().level(4).build(),
                                        PerformanceLevel.builder().level(5).build(),
                                        PerformanceLevel.builder().level(6).build(),
                                        PerformanceLevel.builder().level(7).build()
                                ))
                                .build())
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.isValid()).isFalse();
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("AssessmentType(iab)");
        assertThat(failure.getMessage()).isEqualTo("A maximum of 6 performance levels are supported, but found: 7");
    }

    @Test
    public void itShouldValidateSubScorePerformanceLevels() {
        final Subject subject = Subject.builder().assessmentTypes(ImmutableList.of(
                SubjectAssessmentType.builder()
                        .code("iab")
                        .performanceLevels(PerformanceLevels.builder()
                                .performanceLevels(ImmutableList.of(
                                        PerformanceLevel.builder().level(1).build(),
                                        PerformanceLevel.builder().level(2).build()
                                ))
                                .build())
                        .subScoring(SubScoring.builder()
                                .performanceLevels(PerformanceLevels.builder()
                                        .performanceLevels(ImmutableList.of(
                                                PerformanceLevel.builder().level(2).build()
                                        ))
                                        .build())
                                .build())
                        .build()))
                .build();

        validator.validate(context, subject);
        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("AssessmentType(iab):SubScoring");
        assertThat(failure.getMessage()).isEqualTo("Performance levels must start at level 1");
    }
}