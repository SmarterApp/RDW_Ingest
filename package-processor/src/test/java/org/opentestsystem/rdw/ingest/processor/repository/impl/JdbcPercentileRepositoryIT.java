package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.repository.PercentileRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * TODO - this test suite was added to demonstrate a single bug during a time-crunch
 * TODO   it needs to be fleshed out to test all methods on the repository interface
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcPercentileRepository.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
@SqlGroup({
    @Sql(scripts = {"classpath:/PreloadAsmt.sql"}),
    @Sql(statements = {
        "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest');",
        "INSERT INTO percentile (id, asmt_id, start_date, end_date, count, mean, min_score, max_score, deleted, import_id, update_import_id) VALUES \n" +
            "(-79, -99, '2017-09-01', '2017-12-31', 1000, 2500, 2200, 2700, 0, -99, -99), \n" +
            "(-78, -99, '2018-01-01', '2018-02-28', 1000, 2520, 2200, 2700, 0, -99, -99), \n" +
            "(-77, -99, '2018-03-01', '2018-06-30', 1000, 2540, 2200, 2700, 0, -99, -99);"
    })
})
public class JdbcPercentileRepositoryIT {

    @Autowired
    private PercentileRepository repository;

    @Test
    public void itShouldFindById() {
        assertThat(repository.findIdByKey(-99, LocalDate.of(2018, 1, 1), LocalDate.of(2018, 2, 28))).isEqualTo(-78);
    }

    @Test
    public void itShouldDetectOverlaps() {
        assertThat(repository.findIdsByDateOverlap(-99, LocalDate.of(2018, 2, 1), LocalDate.of(2018, 2, 14))).contains(-78);
        assertThat(repository.findIdsByDateOverlap(-99, LocalDate.of(2018, 2, 1), LocalDate.of(2018, 3, 14))).contains(-78, -77);
        assertThat(repository.findIdsByDateOverlap(-99, LocalDate.of(2017, 6, 1), LocalDate.of(2018, 6, 30))).contains(-79, -78, -77);
    }

    @Test
    public void itShouldDetectOneDayOverlap() {
        assertThat(repository.findIdsByDateOverlap(-99, LocalDate.of(2017, 6, 1), LocalDate.of(2017, 9, 1))).contains(-79);
        assertThat(repository.findIdsByDateOverlap(-99, LocalDate.of(2018, 2, 28), LocalDate.of(2018, 3, 1))).contains(-78, -77);
    }

}