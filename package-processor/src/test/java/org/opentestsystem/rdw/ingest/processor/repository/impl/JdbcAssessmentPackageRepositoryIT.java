package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.AssessmentScore;
import org.opentestsystem.rdw.ingest.processor.model.Item;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentPackageRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcAssessmentPackageRepository.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class,
        JdbcTemplateAutoConfiguration.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
        "INSERT INTO common_core_standard (id, natural_id, subject_id) VALUES " +
                "(-99, 'natural-id-999', 1)," +
                "(-98, 'natural-id-998', 1)",
        "INSERT INTO claim (id, subject_id, code) VALUES \n" +
                "(-12, 1, '11');",
        "INSERT INTO target (id, claim_id, natural_id) VALUES \n" +
                "(-1111, -12,'TA-APR');",
        "INSERT INTO depth_of_knowledge (id, level, subject_id,reference) VALUES \n" +
                "(-11, -11, 1, 'reference');",
        "INSERT INTO math_practice (practice, description, code) VALUES \n" +
                "(-11, 'Makes no sense of problems and cannot persevere in solving them', '-11');"
},
        scripts = {"classpath:PreloadAsmt.sql"})
public class JdbcAssessmentPackageRepositoryIT {
    @Autowired
    private AssessmentPackageRepository repository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    private Item.Builder itemBuilder;
    private Assessment.Builder asmtBuilder;

    @Before
    public void setUp() {
        asmtBuilder = new Assessment.Builder();
        itemBuilder = new Item.Builder();
        asmtBuilder.score(AssessmentScore.builder()
                        .cutPoint1(2.0e3)
                        .cutPoint2(2.1e3)
                        .cutPoint3(2.2e3)
                        .maxScore(2.4e3)
                        .minScore(1.9e3)
                        .build())
                // not normal, but a claim CAN have score metadata so use it to test things
                .score(AssessmentScore.builder()
                        .subjectScoreId(1)
                        .minScore(1000.0)
                        .maxScore(3000.0)
                        .build())
                .schoolYear(2017)
                .gradeId(3)
                .label("label")
                .name("My Assessment")
                .subjectId(1)
                .typeId(1)
                .version("version")
                .naturalId("(SBAC)SBAC-Winter-2016-2017");

        itemBuilder.mathPractice(-11)
                .targetId(-1111)
                .allowCalculator(false)
                .claimId(-12)
                .difficulty(0.23)
                .dokId(-11)
                .maxPoints(2.0)
                .naturalId("20-18943")
                .commonCoreStandards(newArrayList(-99, -98))
                .otherTargets(newArrayList(-1111));
    }

    @Test
    public void itShouldCreateAssessmentsAndScoresAndItems() {
        final int beforeAsmtCount = countRowsInTable(jdbcTemplate, "asmt");
        final int beforeItemCount = countRowsInTable(jdbcTemplate, "item");
        final int beforeItemWithDiffCodeCount = countRowsInTableWhere(jdbcTemplate, "item", "difficulty_code = 'D'");
        final int beforeItemCommonCoreCount = countRowsInTable(jdbcTemplate, "item_common_core_standard");
        final int beforeItemOtherTarget = countRowsInTable(jdbcTemplate, "item_other_target");
        final int beforeAsmScoreCount = countRowsInTable(jdbcTemplate, "asmt_score");

        asmtBuilder.item(itemBuilder.build());
        asmtBuilder.item(itemBuilder.naturalId("20-19999").build());
        asmtBuilder.item(itemBuilder.naturalId("20-18888").active(false)
                .answerKey("answerKey")
                .fieldTest(true)
                .optionsCount(0)
                .type("type").build());

        final Map<String, Assessment> asmts = newHashMap();
        final Assessment assessment = asmtBuilder.build();
        asmts.put(assessment.getNaturalId(), assessment);

        repository.create(asmts.values(), -99);

        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(beforeAsmtCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "asmt_score")).isEqualTo(beforeAsmScoreCount + 2);
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(beforeItemCount + 3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "item", "difficulty_code = 'D'")).isEqualTo(beforeItemWithDiffCodeCount + 3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "item", "natural_id = '20-19999' and field_test is null and active is null and type is null and options_count is null and answer_key is null")).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "item", "natural_id = '20-18888' and field_test = 1 and active = 0 and type = 'type' and options_count= 0 and answer_key = 'answerKey'")).isEqualTo(1);
        assertThat(countRowsInTable(jdbcTemplate, "item_common_core_standard")).isEqualTo(beforeItemCommonCoreCount + 6);
        assertThat(countRowsInTable(jdbcTemplate, "item_other_target")).isEqualTo(beforeItemOtherTarget + 3);
    }

    @Test
    public void itShouldNotFindOneByNaturalId() {
        assertThat(repository.findOneByNaturalId("test")).isNull();
    }


    @Test
    public void itShouldFindOneByNaturalId() {
        final Assessment assessment = repository.findOneByNaturalId("(SBAC)SBAC-IAB-ASMT TEST-5");

        assertThat(assessment.getId()).isEqualTo(-99);
        assertThat(assessment.getNaturalId()).isEqualTo("(SBAC)SBAC-IAB-ASMT TEST-5");
        assertThat(assessment.getSubjectId()).isEqualTo(1);
        assertThat(assessment.getSchoolYear()).isEqualTo(2016);
        assertThat(assessment.getTypeId()).isEqualTo(2);
        assertThat(assessment.getGradeId()).isEqualTo(5);
        assertThat(assessment.getLabel()).isEqualTo("MTH IAB G5 OperationsAlgebraicThinking");
        assertThat(assessment.getName()).isEqualTo("SBAC-IAB-FIXED-G4M-OA-MATH-5");
        assertThat(assessment.getVersion()).isEqualTo("9835");

        final AssessmentScore score = assessment.getScores().get(0);
        assertThat(score.getSubjectScoreId()).isNull(); // null -> overall
        assertThat(score.getCutPoint1()).isEqualTo(2442);
        assertThat(score.getCutPoint2()).isEqualTo(2502);
        assertThat(score.getCutPoint3()).isEqualTo(2582);
        assertThat(score.getMinScore()).isEqualTo(2201);
        assertThat(score.getMaxScore()).isEqualTo(2701);

        final List<Item> items = assessment.getItems();
        assertThat(items.size()).isEqualTo(4);

        final Item item990 = items.stream().filter(i -> i.getId() == -990).findFirst().orElse(null);
        assertThat(item990).isNotNull();
        assertThat(item990.getNaturalId()).isEqualTo("200-2010");
        assertThat(item990.getDokId()).isEqualTo(1);
        assertThat(item990.getDifficulty()).isEqualTo(-0.23);
        assertThat(item990.getPosition()).isEqualTo(4);
        assertThat(item990.getClaimId()).isEqualTo(1);
        assertThat(item990.getMaxPoints()).isEqualTo(2);
        assertThat(item990.getTargetId()).isEqualTo(2);
        assertThat(item990.getActive()).isEqualTo(true);
        assertThat(item990.getFieldTest()).isEqualTo(false);
        assertThat(item990.getAnswerKey()).isEqualTo("key990");
        assertThat(item990.getAllowCalculator()).isEqualTo(false);
        assertThat(item990.getCommonCoreStandards()).containsExactlyInAnyOrder(1, 2);
        assertThat(item990.getOtherTargets()).containsExactlyInAnyOrder(2, 3);

        // just check that it can assessment with null data elements
        assertThat(repository.findOneByNaturalId("(SBAC)SBAC-ICA-ASMT TEST-8")).isNotNull();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToCreateIfIdExists() {
        repository.create(newArrayList(asmtBuilder.id(1).build()), -99);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFailToUpdateIfIdDoesNotExist() {
        repository.update(newArrayList(asmtBuilder.build()), -99);
    }

    @Test
    public void itShouldUpdate() {
        final int beforeAsmtCount = countRowsInTable(jdbcTemplate, "asmt");
        final int beforeItemCount = countRowsInTable(jdbcTemplate, "item");
        final int beforeItemCommonCoreCount = countRowsInTable(jdbcTemplate, "item_common_core_standard");
        final int beforeItemOtherTarget = countRowsInTable(jdbcTemplate, "item_other_target");
        final int beforeAsmScoreCount = countRowsInTable(jdbcTemplate, "asmt_score");

        final Assessment existingAsmt = repository.findOneByNaturalId("(SBAC)SBAC-IAB-ASMT TEST-5");
        final Item existingItem990 = existingAsmt.getItems().stream().filter(i -> i.getId() == -990).findFirst().orElse(null);
        final Assessment.Builder builder = Assessment.builder()
                .copyWithoutItems(existingAsmt)
                .name("new name")
                .schoolYear(2017)
                .label("new label")
                .version(null)
                .scores(null)
                .score(AssessmentScore.builder()
                        .minScore(1000.00)
                        .maxScore(2000.00)
                        .cutPoint1(100.00)
                        .cutPoint2(200.00)
                        .cutPoint3(300.00)
                        .build())
                //a brand new item
                .item(itemBuilder.build())
                //change an existing item
                .item(Item.builder()
                        .copy(existingItem990)
                        .dokId(2)
                        .difficulty(-0.1)
                        .mathPractice(1)
                        .position(3)
                        .claimId(2)
                        .maxPoints(5.0)
                        .targetId(1)
                        .active(null)
                        .fieldTest(true)
                        .answerKey("new answerKey")
                        .allowCalculator(null)
                        .commonCoreStandards(newArrayList(-99, -98))
                        .otherTargets(newArrayList(-1111))
                        .build());

        repository.update(newArrayList(builder.build()), -99);

        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(beforeAsmtCount);
        assertThat(countRowsInTable(jdbcTemplate, "asmt_score")).isEqualTo(beforeAsmScoreCount);
        //verify that none of the existing items have been deleted
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(beforeItemCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "item_common_core_standard")).isEqualTo(beforeItemCommonCoreCount + 2);
        assertThat(countRowsInTable(jdbcTemplate, "item_other_target")).isEqualTo(beforeItemOtherTarget);

        final Assessment assessment = repository.findOneByNaturalId("(SBAC)SBAC-IAB-ASMT TEST-5");
        assertThat(assessment.getId()).isEqualTo(-99);
        assertThat(assessment.getNaturalId()).isEqualTo("(SBAC)SBAC-IAB-ASMT TEST-5");
        assertThat(assessment.getSubjectId()).isEqualTo(1);
        assertThat(assessment.getTypeId()).isEqualTo(2);
        assertThat(assessment.getGradeId()).isEqualTo(5);

        assertThat(assessment.getSchoolYear()).isEqualTo(2017);
        assertThat(assessment.getLabel()).isEqualTo("new label");
        assertThat(assessment.getName()).isEqualTo("new name");
        assertThat(assessment.getVersion()).isNull();

        final AssessmentScore score = assessment.getScores().get(0);
        assertThat(score.getCutPoint1()).isEqualTo(100.00);
        assertThat(score.getCutPoint2()).isEqualTo(200.00);
        assertThat(score.getCutPoint3()).isEqualTo(300.00);
        assertThat(score.getMinScore()).isEqualTo(1000.00);
        assertThat(score.getMaxScore()).isEqualTo(2000.00);

        final List<Item> items = assessment.getItems();
        final Item item990 = items.stream().filter(i -> i.getId() == -990).findFirst().orElse(null);
        assertThat(item990).isNotNull();
        assertThat(item990.getNaturalId()).isEqualTo("200-2010");
        assertThat(item990.getDokId()).isEqualTo(2);
        assertThat(item990.getDifficulty()).isEqualTo(-0.1);
        assertThat(item990.getPosition()).isEqualTo(3);
        assertThat(item990.getClaimId()).isEqualTo(2);
        assertThat(item990.getMaxPoints()).isEqualTo(5.0);
        assertThat(item990.getTargetId()).isEqualTo(1);
        assertThat(item990.getActive()).isNull();
        assertThat(item990.getFieldTest()).isEqualTo(true);
        assertThat(item990.getAnswerKey()).isEqualTo("new answerKey");
        assertThat(item990.getAllowCalculator()).isNull();
        assertThat(item990.getMathPractice()).isEqualTo(1);
        assertThat(item990.getCommonCoreStandards()).containsExactlyInAnyOrder(-99, -98);
        assertThat(item990.getOtherTargets()).containsExactlyInAnyOrder(-1111);

        final Item anotherItem = items.stream().filter(i -> i.getId() != -990).findFirst().orElse(null);
        assertThat(anotherItem).isNotNull();
        assertThat(anotherItem.getNaturalId()).isEqualTo("20-18943");
        assertThat(anotherItem.getDokId()).isEqualTo(-11);
        assertThat(anotherItem.getDifficulty()).isEqualTo(0.23);
        assertThat(anotherItem.getPosition()).isNull();
        assertThat(anotherItem.getClaimId()).isEqualTo(-12);
        assertThat(anotherItem.getMaxPoints()).isEqualTo(2.0);
        assertThat(anotherItem.getTargetId()).isEqualTo(-1111);
        assertThat(anotherItem.getActive()).isNull();
        assertThat(anotherItem.getFieldTest()).isNull();
        assertThat(anotherItem.getAnswerKey()).isNull();
        assertThat(anotherItem.getAllowCalculator()).isFalse();
        assertThat(anotherItem.getCommonCoreStandards()).containsExactlyInAnyOrder(-99, -98);
        assertThat(anotherItem.getOtherTargets()).containsExactlyInAnyOrder(-1111);
    }
}
