package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.Resources;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.io.IOException;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.model.LocationStrategy;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentPackageProcessor;
import org.opentestsystem.rdw.ingest.processor.service.SubjectProcessor;

import static org.apache.commons.io.IOUtils.toByteArray;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.ImportContent.SUBJECT;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@Import(DefaultSubjectProcessorIT.TestConfiguration.class)
@Sql(statements = {
        "INSERT INTO import (id, status, content, contentType, digest) VALUES ( -99, 0, 1, 'type', 'digest')",
        "DELETE FROM target",
        "DELETE FROM claim",
        "DELETE FROM subject_translation",
        "DELETE FROM depth_of_knowledge",
        "DELETE FROM common_core_standard",
        "DELETE FROM item_difficulty_cuts",
        "DELETE FROM subject_score",
        "DELETE FROM subject_asmt_scoring",
        "DELETE FROM subject_asmt_type",
        "DELETE FROM subject"
})
public class AssessmentPackageProcessorIT extends TenantAwareServiceIT {
    private static final String DigestMath = "digest_Math";
    private static final String DigestELA = "digest_ELA";
    private static final String LocationMath = new LocationStrategy.ImportContentLocationStrategy(SUBJECT).location(DigestMath);
    private static final String LocationELA = new LocationStrategy.ImportContentLocationStrategy(SUBJECT).location(DigestELA);

    @Autowired
    private AssessmentPackageProcessor packageProcessor;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    public SubjectProcessor subjectProcessor;

    @Autowired
    public ArchiveService archiveService;

    @Before
    public void setup() {
        when(archiveService.openResource(LocationMath)).thenAnswer(invocation ->
                Resources.getResource("Math_subject.xml").openStream()
        );
        when(archiveService.openResource(LocationELA)).thenAnswer(invocation ->
                Resources.getResource("ELA_subject.xml").openStream()
        );
        subjectProcessor.process(DigestMath.getBytes(), 123L);
        subjectProcessor.process(DigestELA.getBytes(), 1234L);
    }

    @Test
    public void itShouldCreate() throws IOException {
        final int beforeAssessmentCount = countRowsInTable(jdbcTemplate, "asmt");
        final int beforeItemCount = countRowsInTable(jdbcTemplate, "item");

        assertThat(packageProcessor.process(toByteArray(this.getClass().getResourceAsStream("/updateAsmt/IAB_ICA_Combined.items.csv")), -99))
                .isEqualTo("Assessments processed: 9, created: 9, updated: 0, rejected: 0");
        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(beforeAssessmentCount + 9);
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(beforeItemCount + 81);
    }

    @Test
    public void itShouldUpdate() throws IOException {
        final int beforeAssessmentCount = countRowsInTable(jdbcTemplate, "asmt");
        final int beforeItemCount = countRowsInTable(jdbcTemplate, "item");

        assertThat(packageProcessor.process(toByteArray(this.getClass().getResourceAsStream("/updateAsmt/IAB_ICA_Combined.items.csv")), 1))
                .isEqualTo("Assessments processed: 9, created: 9, updated: 0, rejected: 0");
        final int afterCreateAssessmentCount = beforeAssessmentCount + 9;
        final int afterCreateItemCount = beforeItemCount + 81;

        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(afterCreateAssessmentCount);
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(afterCreateItemCount);

        assertThat(packageProcessor.process(toByteArray(this.getClass().getResourceAsStream("/updateAsmt/IAB_ICA_Combined.items.csv")), -99))
                .isEqualTo("Assessments processed: 9, created: 0, updated: 0, rejected: 0");
        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(afterCreateAssessmentCount);
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(afterCreateItemCount);

        assertThat(packageProcessor.process(toByteArray(this.getClass().getResourceAsStream("/updateAsmt/IAB_ICA_Combined.items.updated.invalid.csv")), 1))
                .isEqualTo("Assessments processed: 3, created: 0, updated: 0, rejected: 3");
        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(afterCreateAssessmentCount);
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(afterCreateItemCount);

        assertThat(countRowsInTableWhere(jdbcTemplate, "asmt", "natural_id = '(SBAC)SBAC-ICA-FIXED-G11E-Perf-HowWeLearn-Winter-2016-2017' and school_year = 2017 and name ='SBAC-ICA-FIXED-G11E-Perf-HowWeLearn' and label = 'ICA-G11E-Perf' and version = '9787' and update_import_id = 1 and import_id = 1")).isEqualTo(1);
        assertThat(jdbcTemplate.queryForObject("SELECT count(*) FROM item i JOIN asmt a ON i.asmt_id = a.id WHERE a.natural_id = '(SBAC)SBAC-ICA-FIXED-G11E-Perf-HowWeLearn-Winter-2016-2017' " +
                "AND i.natural_id= '200-62027' AND i.answer_key = 'B' AND i.options_count = 0 AND i.type = 'WER' AND i.performance_task_writing_type IS NULL", Integer.class)).isEqualTo(1);

        assertThat(packageProcessor.process(toByteArray(this.getClass().getResourceAsStream("/updateAsmt/IAB_ICA_Combined.items.updated.csv")), -99))
                .isEqualTo("Assessments processed: 3, created: 1, updated: 1, rejected: 0");

        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(afterCreateAssessmentCount + 1);
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(afterCreateItemCount + 4);

        assertThat(countRowsInTableWhere(jdbcTemplate, "asmt", "natural_id = '(SBAC)SBAC-ICA-FIXED-G11E-Perf-HowWeLearn-Winter-2016-2017' and school_year = 2015 and name ='name' and label = 'label' and version = '1' and update_import_id = -99 and import_id = 1")).isEqualTo(1);
        assertThat(jdbcTemplate.queryForObject("SELECT count(*) FROM item i JOIN asmt a ON i.asmt_id = a.id WHERE a.natural_id = '(SBAC)SBAC-ICA-FIXED-G11E-Perf-HowWeLearn-Winter-2016-2017' " +
                "AND i.natural_id= '200-62027' AND i.answer_key = 'test' AND i.options_count = 9 AND i.type = 'type' AND i.performance_task_writing_type = 'ptType'", Integer.class)).isEqualTo(1);
    }

    @Test
    public void itShouldUpdateLabel() throws IOException {
        // there was a bug where the equals check wasn't dealing with name and {label,version,school-year} properly
        // if the name is equal, even if the other fields aren't, then it thinks it is equal and won't update

        final int beforeAssessmentCount = countRowsInTable(jdbcTemplate, "asmt");
        final int beforeItemCount = countRowsInTable(jdbcTemplate, "item");

        assertThat(packageProcessor.process(toByteArray(this.getClass().getResourceAsStream("/updateAsmt/IAB_ICA_Combined.items.csv")), 1))
                .isEqualTo("Assessments processed: 9, created: 9, updated: 0, rejected: 0");
        final int afterCreateAssessmentCount = beforeAssessmentCount + 9;
        final int afterCreateItemCount = beforeItemCount + 81;

        assertThat(countRowsInTable(jdbcTemplate, "asmt")).isEqualTo(afterCreateAssessmentCount);
        assertThat(countRowsInTable(jdbcTemplate, "item")).isEqualTo(afterCreateItemCount);

        // before the fix, the updated count was 0
        assertThat(packageProcessor.process(toByteArray(this.getClass().getResourceAsStream("/updateAsmt/IAB_ICA_Combined.items.updated-label.csv")), 1))
                .isEqualTo("Assessments processed: 1, created: 0, updated: 1, rejected: 0");
    }
}
