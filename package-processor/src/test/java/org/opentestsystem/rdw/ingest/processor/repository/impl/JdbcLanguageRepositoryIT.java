package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.repository.LanguageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO language (id, code) VALUES (-1, 'la1')",
        "INSERT INTO language (id, code) VALUES (-2, 'la2')",
})
public class JdbcLanguageRepositoryIT {

    @Autowired
    private LanguageRepository repository;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findIdByCode("la1")).isEqualTo(-1);
        assertThat(repository.findIdByCode("la2")).isEqualTo(-2);
    }

    @Test
    public void itShouldReturnNullWhenCodeIsUnknown() {
        assertThat(repository.findIdByCode("la3")).isEqualTo(null);
    }

    @Test
    public void itShouldCacheReturnedId() {
        final Cache codes = this.cacheManager.getCache("languageCode");
        assertThat(codes.get("la2")).isNull();

        assertThat(repository.findIdByCode("la2")).isEqualTo(-2);

        assertThat(codes.get("la2", Integer.class)).isEqualTo(-2);
    }
}