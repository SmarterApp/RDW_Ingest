package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.Resources;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

import java.util.Map;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.model.ImportException;
import org.opentestsystem.rdw.common.model.LocationStrategy;
import org.opentestsystem.rdw.common.model.subject.SubjectSerializationService;
import org.opentestsystem.rdw.common.model.subject.XmlSubjectSerializationService;
import org.opentestsystem.rdw.ingest.processor.service.SubjectProcessor;

import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.entry;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.ImportContent.SUBJECT;

@Import(DefaultSubjectProcessorIT.TestConfiguration.class)
public class DefaultSubjectProcessorIT extends TenantAwareServiceIT {

    @Autowired
    public SubjectProcessor subjectProcessor;

    @Autowired
    public NamedParameterJdbcTemplate template;

    @Autowired
    public ArchiveService archiveService;

    @Test
    public void itShouldUpdateTheExistingMathSubjectTranslations() {
        final String digest = setUpTestResource("digest_Math", "Math_subject.xml");

        subjectProcessor.process(digest.getBytes(), 123L);

        assertThat(template.queryForObject("SELECT update_import_id FROM subject WHERE code = 'Math'",
                new MapSqlParameterSource(),
                Long.class))
                .isEqualTo(123L);

        final Map<String, String> translations = newHashMap();
        template.query("SELECT * from subject_translation WHERE subject_id = 1",
                new MapSqlParameterSource(),
                (row) -> {
                    translations.put(row.getString("label_code"), row.getString("label"));
                }
        );
        assertThat(translations)
                .contains(entry("subject.Math.standard-description", "This column reflects the Common Core State Standard(s) associated with a test item. Test items may be associated with more than one standard.  Items that assess mathematical practices (problem solving, modeling and data analysis, and communicating reasoning) are also aligned to standards that describe the mathematical content with which students engage. For example, an item may ask students to communicate their reasoning when solving a problem about geometry or fractions. For more information, see the <a href=\\\"https://portal.smarterbalanced.org/library/en/mathematics-content-specifications.pdf\\\" target=\\\"_blank\\\">Mathematics Content Specifications</a>."));
        assertThat(translations.size()).isGreaterThan(2300);
    }

    @Test
    public void itShouldCreateANewMath2Subject() {
        final String digest = setUpTestResource("digest_Math2", "Math2_subject.xml");

        subjectProcessor.process(digest.getBytes(), 1234L);

        assertThat(template.queryForObject(
                "SELECT import_id FROM subject WHERE code = 'Math2'",
                new MapSqlParameterSource(),
                Long.class))
                .isEqualTo(1234L);

        final Map<String, String> translations = newHashMap();
        template.query("SELECT st.* FROM subject_translation st JOIN subject s ON s.id = st.subject_id WHERE s.code = 'Math2'",
                new MapSqlParameterSource(),
                (row) -> {
                    translations.put(row.getString("label_code"), row.getString("label"));
                }
        );
        assertThat(translations)
                .contains(entry("subject.Math2.standard-description", "This column reflects the Common Core State Standard(s) associated with a test item. Test items may be associated with more than one standard.  Items that assess mathematical practices (problem solving, modeling and data analysis, and communicating reasoning) are also aligned to standards that describe the mathematical content with which students engage. For example, an item may ask students to communicate their reasoning when solving a problem about geometry or fractions. For more information, see the <a href=\\\"https://portal.smarterbalanced.org/library/en/mathematics-content-specifications.pdf\\\" target=\\\"_blank\\\">Mathematics Content Specifications</a>."))
                .contains(entry("subject.Math2.claim.3.icon", "fa-pencil-square-o"));
        assertThat(translations.size()).isGreaterThan(2300);
    }

    @Test
    public void itShouldLoadELPAC() {
        final String digest = setUpTestResource("digest_ELPAC", "ELPAC_subject.xml");

        subjectProcessor.process(digest.getBytes(), 2121L);

        final Map<String, String> translations = newHashMap();
        template.query("SELECT st.* FROM subject_translation st JOIN subject s ON s.id = st.subject_id WHERE s.code = 'ELPAC'",
                new MapSqlParameterSource(),
                (row) -> {
                    translations.put(row.getString("label_code"), row.getString("label"));
                }
        );
        assertThat(translations).isNotEmpty();
    }

    @Test
    public void itShouldLoadELPACwithReportGrades() {
        final String digest = setUpTestResource("digest_ELPAC_rg", "ELPAC_subject_with_report_grades.xml");

        subjectProcessor.process(digest.getBytes(), 2122L);

        final Map<String, String> translations = newHashMap();
        template.query("SELECT st.* FROM subject_translation st JOIN subject s ON s.id = st.subject_id WHERE s.code = 'ELPAC'",
                new MapSqlParameterSource(),
                (row) -> {
                    translations.put(row.getString("label_code"), row.getString("label"));
                }
        );
        assertThat(translations).isNotEmpty();
    }

    @Test(expected = ImportException.class)
    public void itFailsToParseASubjectWithoutClaims() {
        final String digest = setUpTestResource("digest_Minier", "minier_subject_config.xml");

        // this was a test of a subject with *no* claims (or targets)
        subjectProcessor.process(digest.getBytes(), 1212L);
    }

    private String setUpTestResource(final String digest, final String resource) {
        final String location = new LocationStrategy.ImportContentLocationStrategy(SUBJECT).location(digest);
        when(archiveService.openResource(location)).thenAnswer(invocation ->
                Resources.getResource(resource).openStream()
        );
        return digest;
    }

    @Configuration
    static class TestConfiguration {

        @Bean
        public SubjectSerializationService subjectSerializationService() {
            return new XmlSubjectSerializationService();
        }
    }
}
