package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.Resources;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.model.LocationStrategy;
import org.opentestsystem.rdw.common.model.subject.SubjectSerializationService;
import org.opentestsystem.rdw.common.model.subject.XmlSubjectSerializationService;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.service.SubjectProcessor;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.entry;
import static org.mockito.Mockito.when;
import static org.opentestsystem.rdw.common.model.ImportContent.SUBJECT;

@RunWith(SpringRunner.class)
@SpringBootTest( classes = {
        DefaultSubjectProcessorIT.TestConfiguration.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
public class DefaultSubjectProcessorIT {
    private static String DigestMath = "digest_Math";
    private static String DigestMath2 = "digest_Math2";
    private static String LocationMath = new LocationStrategy.ImportContentLocationStrategy(SUBJECT).location(DigestMath);
    private static String LocationMath2 = new LocationStrategy.ImportContentLocationStrategy(SUBJECT).location(DigestMath2);

    @Autowired
    public SubjectProcessor subjectProcessor;

    @Autowired
    public NamedParameterJdbcTemplate template;

    @MockBean
    public ArchiveService archiveService;

    @Before
    public void setup() {
        when(archiveService.openResource(LocationMath)).thenAnswer(invocation ->
                Resources.getResource("Math_subject.xml").openStream()
        );
        when(archiveService.openResource(LocationMath2)).thenAnswer(invocation ->
                Resources.getResource("Math2_subject.xml").openStream()
        );
    }

    @Test
    public void itShouldUpdateTheExistingMathSubjectTranslations() throws Exception {
        subjectProcessor.process(DigestMath.getBytes(), 123L);

        assertThat(template.queryForObject(
                "SELECT update_import_id FROM subject WHERE code = 'Math'",
                new MapSqlParameterSource(),
                Long.class))
                .isEqualTo(123L);

        final Map<String, String> translations = newHashMap();
        template.query(
                "SELECT * from subject_translation WHERE subject_id = 1",
                new MapSqlParameterSource(),
                (row) -> {
                    translations.put(row.getString("label_code"), row.getString("label"));
                }
        );
        assertThat(translations)
                .hasSize(2357)
                .contains(entry("subject.Math.standard-description", "This column reflects the Common Core State Standard(s) associated with a test item. Test items may be associated with more than one standard.  Items that assess mathematical practices (problem solving, modeling and data analysis, and communicating reasoning) are also aligned to standards that describe the mathematical content with which students engage. For example, an item may ask students to communicate their reasoning when solving a problem about geometry or fractions. For more information, see the <a href=\\\"https://portal.smarterbalanced.org/library/en/mathematics-content-specifications.pdf\\\" target=\\\"_blank\\\">Mathematics Content Specifications</a>."));
    }

    @Test
    public void itShouldCreateANewMath2Subject() throws Exception {
        subjectProcessor.process(DigestMath2.getBytes(), 1234L);

        assertThat(template.queryForObject(
                "SELECT import_id FROM subject WHERE code = 'Math2'",
                new MapSqlParameterSource(),
                Long.class))
                .isEqualTo(1234L);

        final Map<String, String> translations = newHashMap();
        template.query(
                "SELECT st.* FROM subject_translation st " +
                        "  JOIN subject s ON s.id = st.subject_id " +
                        "WHERE s.code = 'Math2'",
                new MapSqlParameterSource(),
                (row) -> {
                    translations.put(row.getString("label_code"), row.getString("label"));
                }
        );
        assertThat(translations)
                .hasSize(2357)
                .contains(entry("subject.Math2.standard-description", "This column reflects the Common Core State Standard(s) associated with a test item. Test items may be associated with more than one standard.  Items that assess mathematical practices (problem solving, modeling and data analysis, and communicating reasoning) are also aligned to standards that describe the mathematical content with which students engage. For example, an item may ask students to communicate their reasoning when solving a problem about geometry or fractions. For more information, see the <a href=\\\"https://portal.smarterbalanced.org/library/en/mathematics-content-specifications.pdf\\\" target=\\\"_blank\\\">Mathematics Content Specifications</a>."));
    }

    @Configuration
    @ComponentScan({
            "org.opentestsystem.rdw.ingest.processor.repository",
            "org.opentestsystem.rdw.ingest.processor.service",
    })
    static class TestConfiguration {

        @Bean
        public SubjectSerializationService subjectSerializationService() {
            return new XmlSubjectSerializationService();
        }
    }
}