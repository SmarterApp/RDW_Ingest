package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.common.model.subject.Standard;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseStandard;
import org.opentestsystem.rdw.ingest.processor.repository.CommonCoreStandardRepository;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultSubjectStandardServiceTest {
    private static final String SubjectCode = "subject";

    @Mock
    private CommonCoreStandardRepository repository;

    @Captor
    private ArgumentCaptor<Collection<String>> codeCaptor;

    @Captor
    private ArgumentCaptor<Collection<Integer>> idCaptor;

    private DefaultSubjectStandardService service;

    @Before
    public void setup() {
        when(repository.isReferenced(any())).thenReturn(null);
        service = new DefaultSubjectStandardService(repository);
    }

    @Test
    public void itShouldCreateNewStandards() {
        service.upsert(subject().build());

        verify(repository).create(eq(SubjectCode), codeCaptor.capture());
        assertThat(codeCaptor.getValue()).containsOnly("standard_a", "standard_b");

        verify(repository, never()).isReferenced(any());
        verify(repository, never()).delete(any());
    }

    @Test
    public void itShouldDeleteStaleStandards() {
        final List<WarehouseStandard> existing = newArrayList();
        existing.add(WarehouseStandard.builder().id(-1).code("standard_a").build());
        existing.add(WarehouseStandard.builder().id(-2).code("standard_b").build());
        existing.add(WarehouseStandard.builder().id(-3).code("standard_c").build());
        when(repository.findBySubject(SubjectCode)).thenReturn(existing);

        service.upsert(subject().build());

        verify(repository).create(eq(SubjectCode), codeCaptor.capture());
        assertThat(codeCaptor.getValue()).isEmpty();

        verify(repository).isReferenced(idCaptor.capture());
        assertThat(idCaptor.getValue()).containsOnly(-3);

        verify(repository).delete(idCaptor.capture());
        assertThat(idCaptor.getValue()).containsOnly(-3);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotDeleteAReferencedStandard() {
        final List<WarehouseStandard> existing = newArrayList();
        existing.add(WarehouseStandard.builder().id(-1).code("standard_a").build());
        existing.add(WarehouseStandard.builder().id(-2).code("standard_b").build());
        existing.add(WarehouseStandard.builder().id(-3).code("standard_c").build());
        when(repository.findBySubject(SubjectCode)).thenReturn(existing);
        when(repository.isReferenced(any())).thenAnswer(invocation -> {
            final Collection<Integer> standardIds = invocation.getArgument(0);
            return Iterables.getFirst(standardIds, null);
        });

        service.upsert(subject().build());
    }

    private Subject.Builder subject() {
        return Subject.builder()
                .code(SubjectCode)
                .standards(ImmutableList.of(
                        standard("standard_a"),
                        standard("standard_b")
                ));
    }

    private Standard standard(final String code) {
        return Standard.builder().code(code).build();
    }
}