package org.opentestsystem.rdw.ingest.processor.repository.impl;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseStandard;
import org.opentestsystem.rdw.ingest.processor.repository.CommonCoreStandardRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collection;
import java.util.stream.Collectors;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcCommonCoreStandardRepository.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO subject (id, code) VALUES (-99, 'test1'), (-88, 'test2');",
        "INSERT INTO common_core_standard (id, subject_id, natural_id) VALUES (-1, -99, 'standard_a'), (-2, -99, 'standard_b');"
})
public class JdbcCommonCoreStandardRepositoryIT {

    @Autowired
    private CommonCoreStandardRepository repository;

    @Test
    public void itShouldFindIds() {
        assertThat(repository.findIdsBySubjectIdAndNaturalIds(newArrayList("standard_a", "standard_b"), -99)).contains(-1, -2);
        assertThat(repository.findIdsBySubjectIdAndNaturalIds(newArrayList("standard_a"), -99)).contains(-1);

        assertThat(repository.findIdsBySubjectIdAndNaturalIds(newArrayList("standard_a", "standard_b"), -88)).isEmpty();

        assertThat(repository.findIdsBySubjectIdAndNaturalIds(newArrayList(), -99)).isEmpty();
    }

    @Test
    public void itShouldFindStandardsForASubject() {
        assertThat(repository.findBySubject("test1").stream().map(WarehouseStandard::getId))
                .containsOnly(-1, -2);
        assertThat(repository.findBySubject("test2")).isEmpty();
    }

    @Test
    public void itShouldCreateStandards() {
        repository.create("test2", ImmutableList.of("standard_1", "standard_2"));
        assertThat(repository.findBySubject("test2").stream().map(WarehouseStandard::getCode))
                .containsOnly("standard_1", "standard_2");
    }

    @Test
    public void itShouldDeleteStandards() {
        repository.delete(ImmutableList.of(-1, -2));
        assertThat(repository.findBySubject("test1")).isEmpty();
    }

    @Test
    @Sql(
            scripts = "/PreloadAsmt.sql",
            statements = {
                    "INSERT INTO subject (id, code) VALUES (-99, 'test1'), (-88, 'test2');",
                    "INSERT INTO common_core_standard (id, subject_id, natural_id) VALUES (-1, -99, 'standard_a'), (-2, -99, 'standard_b');"
            }
    )
    public void itShouldDetermineIfStandardsAreReferenced() {
        assertThat(repository.hasItem(ImmutableList.of(-1, -2))).isNull();

        final Collection<Integer> mathStandardIds = repository.findBySubject("Math").stream()
                .map(WarehouseStandard::getId)
                .collect(Collectors.toSet());
        assertThat(repository.hasItem(mathStandardIds)).isNotNull();
    }

}