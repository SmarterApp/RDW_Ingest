package org.opentestsystem.rdw.ingest.processor.service.impl.validator;

import org.junit.Before;
import org.junit.Test;

import java.util.concurrent.atomic.AtomicInteger;
import org.opentestsystem.rdw.common.model.subject.AltScore;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.utils.DataElementError;
import org.opentestsystem.rdw.utils.LocationAwareErrorCollector;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;

public class AltScoreValidatorTest {

    private AtomicInteger order;
    private LocationAwareErrorCollector context;
    private AltScoreValidator validator;

    @Before
    public void setup() {
        order = new AtomicInteger(1);
        context = new LocationAwareErrorCollector();
        validator = new AltScoreValidator();
    }

    @Test
    public void itShouldDetectDuplicateAltScoreCodes() {
        final Subject subject = Subject.builder()
                .altScores(of(
                        altScore("score_1").build(),
                        altScore("score_1").build(),
                        altScore("score_2").build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("AltScore(score_1)");
        assertThat(failure.getError()).isEqualTo("Duplicate code found: score_1");
    }

    @Test
    public void itShouldDetectAMissingDisplayOrder() {
        final Subject subject = Subject.builder()
                .altScores(of(
                        altScore("score_1").displayOrder(null).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("AltScore(score_1)");
        assertThat(failure.getError()).isEqualTo("AltScores must have a displayOrder defined");
    }

    @Test
    public void itShouldDetectADuplicateDisplayOrder() {
        final Subject subject = Subject.builder()
                .altScores(of(
                        altScore("score_1").displayOrder(1).build(),
                        altScore("score_2").displayOrder(1).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("AltScore(score_2)");
        assertThat(failure.getError()).isEqualTo("Duplicate display order found: 1");
    }

    @Test
    public void itShouldDetectAMissingDataOrder() {
        final Subject subject = Subject.builder()
                .altScores(of(
                        altScore("score_1").dataOrder(null).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("AltScore(score_1)");
        assertThat(failure.getError()).isEqualTo("AltScores must have a dataOrder defined");
    }

    @Test
    public void itShouldDetectADuplicateDataOrder() {
        final Subject subject = Subject.builder()
                .altScores(of(
                        altScore("score_1").dataOrder(1).build(),
                        altScore("score_2").dataOrder(1).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("AltScore(score_2)");
        assertThat(failure.getError()).isEqualTo("Duplicate dataOrder found: 1");
    }

    @Test
    public void itShouldOnlyAllowSixAltScores() {
        final Subject subject = Subject.builder()
                .altScores(of(
                        altScore("score_1").build(),
                        altScore("score_2").build(),
                        altScore("score_3").build(),
                        altScore("score_4").build(),
                        altScore("score_5").build(),
                        altScore("score_6").build(),
                        altScore("score_7").build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("AltScores");
        assertThat(failure.getError()).isEqualTo("A maximum number of 6 AltScores are supported, but found: 7");
    }

    private AltScore.Builder altScore(final String code) {
        final int order = this.order.getAndIncrement();
        return AltScore.builder()
                .code(code)
                .dataOrder(order)
                .displayOrder(order);

    }
}
