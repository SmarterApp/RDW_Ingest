package org.opentestsystem.rdw.ingest.processor;

import com.google.common.io.ByteStreams;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.processor.service.AccommodationsProcessor;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentPackageProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.springframework.http.MediaType;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.GenericMessage;

import java.io.IOException;
import java.io.UnsupportedEncodingException;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.anyLong;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;


public class PackageProcessorConfigurationTest {

    private AssessmentPackageProcessor packageProcessor;
    private PackageProcessorConfiguration processor;
    private ImportRepository importRepository;
    private AccommodationsProcessor accommodationsProcessor;

    private Message assessmentPackageMessage;
    private Message accommodationsMessage;

    @Before
    public void createProcessors() throws IOException {
        packageProcessor = mock(AssessmentPackageProcessor.class);
        accommodationsProcessor = mock(AccommodationsProcessor.class);
        importRepository = mock(ImportRepository.class);
        processor = new PackageProcessorConfiguration(
                importRepository,
                packageProcessor,
                accommodationsProcessor);

        final RdwMessageHeaderAccessor accessor1 = RdwMessageHeaderAccessor.wrap(null);
        accessor1.setContent("packages");
        accessor1.setContentType(MediaType.TEXT_PLAIN);
        accessor1.setImportId(1);

        final RdwMessageHeaderAccessor accessor2 = RdwMessageHeaderAccessor.wrap(null);
        accessor2.setContent("codes");
        accessor2.setContentType(MediaType.APPLICATION_XML);
        accessor2.setImportId(2);

        final byte[] assessmentPayload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/IAB_English.items.csv"));

        assessmentPackageMessage = new GenericMessage<>(assessmentPayload, accessor1.getMessageHeaders());

        final byte[] accommodationsPayload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/AccessibilityConfig.xml"));

        accommodationsMessage = new GenericMessage<>(accommodationsPayload, accessor2.getMessageHeaders());
    }

    @Test
    public void itShouldProcessAssessmentPackage() throws UnsupportedEncodingException {
        processor.processPackage(assessmentPackageMessage);
        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.PROCESSED, null);
    }

    @Test
    public void itShouldProcessAccommodations() throws UnsupportedEncodingException {
        processor.processPackage(accommodationsMessage);
        verify(importRepository, times(1)).updateStatusAndMessageById(2, ImportStatus.PROCESSED, null);
    }

    @Test
    public void itShouldHandleImportExceptionAssessmentPackage() throws UnsupportedEncodingException {
        doThrow(new ImportException(ImportStatus.UNKNOWN_ASMT, "message"))
                .when(packageProcessor)
                .process(any(byte[].class), anyLong());

        processor.processPackage(assessmentPackageMessage);

        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.UNKNOWN_ASMT, "message");
    }

    @Test
    public void itShouldHandleImportExceptionAccommodations() throws UnsupportedEncodingException {
        doThrow(new ImportException(ImportStatus.UNKNOWN_ASMT, "message"))
                .when(accommodationsProcessor)
                .process(any(byte[].class));

        processor.processCodes(accommodationsMessage);

        verify(importRepository, times(1)).updateStatusAndMessageById(2, ImportStatus.UNKNOWN_ASMT, "message");
    }


    @Test
    public void itShouldHandleAnyRuntimeExceptionForAssessmentPackage() throws UnsupportedEncodingException {
        doThrow(new RuntimeException("any message")).when(packageProcessor).process(any(byte[].class), anyLong());

        processor.processPackage(assessmentPackageMessage);

        verify(importRepository, times(1)).updateStatusAndMessageById(1, ImportStatus.BAD_DATA, "any message");
    }

    @Test
    public void itShouldHandleAnyRuntimeExceptionForAccommodations() throws UnsupportedEncodingException {
        doThrow(new RuntimeException("any message")).when(accommodationsProcessor).process(any(byte[].class));

        processor.processCodes(accommodationsMessage);

        verify(importRepository, times(1)).updateStatusAndMessageById(2, ImportStatus.BAD_DATA, "any message");
    }
}
