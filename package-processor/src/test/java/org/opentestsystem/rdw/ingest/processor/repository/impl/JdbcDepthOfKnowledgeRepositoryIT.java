package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.repository.GradeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO grade  (id, code, name, sequence) VALUES (-99, 'c1', 'test1', 9);",
        "INSERT INTO grade (id, code, name, sequence) VALUES (-88, 'c2', 'test2', 8);",
        "INSERT INTO grade (id, code, name, sequence) VALUES (-55, 'c5', 'test55', 5);"
})
public class JdbcDepthOfKnowledgeRepositoryIT {

    @Autowired
    private GradeRepository repository;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findIdByCode("c1")).isEqualTo(-99);
        assertThat(repository.findIdByCode("c2")).isEqualTo(-88);
    }

    @Test
    public void itShouldReturnNullWhenCodeIsUnknown() {
        assertThat(repository.findIdByCode("zz")).isEqualTo(null);
    }

    @Test
    public void itShouldCacheReturnedId() {
        final Cache codes = this.cacheManager.getCache("grade");
        assertThat(codes.get("c5")).isNull();

        assertThat(repository.findIdByCode("c5")).isEqualTo(-55);

        assertThat(codes.get("c5", Integer.class)).isEqualTo(-55);
    }
}