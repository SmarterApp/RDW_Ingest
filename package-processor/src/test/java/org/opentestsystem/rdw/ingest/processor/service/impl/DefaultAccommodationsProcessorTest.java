package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.ByteStreams;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Accommodation;
import org.opentestsystem.rdw.ingest.processor.repository.AccommodationTranslationRepository;
import org.opentestsystem.rdw.ingest.processor.repository.LanguageRepository;
import org.opentestsystem.rdw.ingest.processor.service.AccommodationsProcessor;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Fail.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class DefaultAccommodationsProcessorTest {

    private AccommodationsProcessor processor;
    private AccommodationTranslationRepository translationRepository;

    @Before
    public void createProcessor() {
        translationRepository = mock(AccommodationTranslationRepository.class);

        final LanguageRepository languageRepository = mock(LanguageRepository.class);
        when(languageRepository.findIdByCode("eng")).thenReturn(1);
        when(languageRepository.findIdByCode("ukr")).thenReturn(null);

        processor = new DefaultAccommodationsProcessor(translationRepository, languageRepository);
    }

    @Test
    public void itShouldProcessAccommodations() throws IOException {
        assertThat(processor.process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/AccessibilityConfig.xml")), 1L))
                .isEqualTo("11 accommodations processed");
        final ArgumentCaptor<List<Accommodation>> captor = ArgumentCaptor.forClass((Class) List.class);
        verify(translationRepository).create(captor.capture());
        final List<Accommodation> accommodations = captor.getValue();
        assertThat(accommodations).hasSize(11);
        assertThat(accommodations.stream().map(Accommodation::code).collect(Collectors.toSet())).containsOnly(
                "TDS_ASL0", "TDS_ASL1", "NEA0", "NEA_AR", "NEA_RA_Stimuli", "NEA_SC_WritItems",
                "NEA_STT", "NEA_Abacus", "NEA_Calc", "NEA_MT", "NEA_NumTbl"
        );
    }

    @Test(expected = ImportException.class)
    public void itShouldFailToProcessPayloadWithInvalidSchema() throws IOException {
        processor.process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/AccessibilityConfig.schema.xml")), 1L);
    }

    @Test(expected = ImportException.class)
    public void itShouldFailToProcessPayloadWithBadXml() throws IOException {
        processor.process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/AccessibilityConfig.badxml.xml")), 1L);
    }

    @Test
    public void itShouldFailToProcessPayloadWithBadData() throws IOException {
        try {
            processor.process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/AccessibilityConfig.baddata.xml")), 1L);
            fail("it should have thrown exception for bad data");
        } catch (final ImportException e) {
            assertThat(e.getMessage()).isEqualTo("{\"messages\":[" +
                    "{\"elementName\":\"NEA0 language code\",\"value\":\"ukr\",\"error\":\"invalid value\"}," +
                    "{\"elementName\":\"Translation\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                    "{\"elementName\":\"Accommodation code\",\"value\":\"NEA_RA_Stimuli_very_very_long_code\",\"error\":\"string is too long, max length is 25\"}," +
                    "{\"elementName\":\"Translation\",\"value\":\"Read Aloud CAT Reading Passages, very very long value\",\"error\":\"string is too long, max length is 40\"}" +
                    "]}");
        }
    }

}
