package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.repository.TargetRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.interceptor.SimpleKey;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@Sql(statements = {
        "INSERT INTO subject (id, name) VALUES (12, 'name1');",
        "INSERT INTO subject (id, name) VALUES (13, 'name2');",
        "INSERT INTO subject (id, name) VALUES (14, 'name3');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (122, 12, 'ccode1', 'name1', 'description');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (133, 13, 'ccode2', 'name2', 'description');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (144, 14, 'ccode44','name3', 'description');",
        "INSERT INTO target (id, claim_id, code, description) VALUES (2222, 122, 'code22', 'description');",
        "INSERT INTO target (id, claim_id, code, description) VALUES (2223, 133, 'code23', 'description');",
        "INSERT INTO target (id, claim_id, code, description) VALUES (2224, 144, 'code24', 'description');"
})
public class TargetRepositoryIT {

    @Autowired
    private TargetRepository repository;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findIdByCodeAndClaim("code22", "ccode1")).isEqualTo(2222);
        assertThat(repository.findIdByCodeAndClaim("code23", "ccode2")).isEqualTo(2223);
    }

    @Test
    public void itShouldThrowExceptionWhenCodeIsUnknown() {
        assertThat(repository.findIdByCodeAndClaim("code66", "ccode1")).isEqualTo(null);
    }

    @Test
    public void itShouldCacheReturnedId() {
        final Cache ids = this.cacheManager.getCache("target");
        assertThat(ids.get(new SimpleKey("code24", "ccode44"))).isNull();

        assertThat(repository.findIdByCodeAndClaim("code24", "ccode44")).isEqualTo(2224);

        assertThat(ids.get(new SimpleKey("code24", "ccode44"), Integer.class)).isEqualTo(2224);
    }
}