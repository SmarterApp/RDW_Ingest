package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.ByteStreams;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.ingest.common.repository.GenderRepository;
import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.repository.SchoolRepository;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;

import java.io.IOException;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultStudentParserTest {
    private StudentParser parser;

    @Mock
    private StudentRepository studentRepository;

    @Mock
    private SchoolRepository schoolRepository;

    @Mock
    private GenderRepository genderRepository;

    @Before
    public void createParser() {
        when(studentRepository.findBySsid(anyString())).thenReturn(-1);
        when(studentRepository.findBySsid("BAD_STUDENT_SSID")).thenThrow(new IllegalArgumentException("Unknown student with ssid [BAD_STUDENT_SSID]"));

        when(schoolRepository.findIdByNaturalId(anyString())).thenReturn(-1);
        when(schoolRepository.findIdByNaturalId("BAD_SCHOOL_ID")).thenThrow(new IllegalArgumentException("unknown natural school id [BAD_SCHOOL_ID]"));

        // TODO: uncomment when updating gender field is turned on in parser.
//        when(genderRepository.findIdByCode("MALE")).thenReturn(1);
//        when(genderRepository.findIdByCode("FEMALE")).thenReturn(2);
//        when(genderRepository.findIdByCode("BAD_GENDER")).thenThrow(new IllegalArgumentException("unknown gender code [BAD_GENDER]"));

        parser = new DefaultStudentParser(studentRepository, schoolRepository, genderRepository);
    }

    @Test
    public void itShouldParseFileWithoutDateField() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/students/CA_StudentExtract.csv"));
        final List<Student> students = parser.parse(payload);
        assertThat(students).hasSize(6);

        // Test sample student
        final Student sample = students.get(0);
        assertThat(sample.getSsid()).isEqualTo("2663752814");
        assertThat(sample.getSchoolId()).isEqualTo(-1);
        assertThat(sample.getInfoUpdate()).isNull();
        // TODO: uncomment when updates for these fields are turned on.
//        assertThat(sample.getFirstName()).isEqualTo("ELI");
//        assertThat(sample.getMiddleName()).isEqualTo("ONY");
//        assertThat(sample.getLastOrSurname()).isEqualTo("CAR");
//        assertThat(sample.getGenderId()).isEqualTo(2);
//        assertThat(sample.getFirstEntryIntoUSSchoolAt()).isEqualTo("2020-07-01");
//        assertThat(sample.getLepEntryAt()).isNull();
//        assertThat(sample.getLepExitAt()).isNull();
//        assertThat(sample.getBirthday()).isEqualTo("2002-09-28");
    }

    @Test
    public void itShouldParseFileWithDateField() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/students/CA_StudentExtractWithDates.csv"));
        final List<Student> students = parser.parse(payload);
        assertThat(students).hasSize(6);

        // Test sample student (first student has update info date of 2021/08/22
        final Student sample = students.get(0);
        assertThat(sample.getSsid()).isEqualTo("2663752814");
        assertThat(sample.getSchoolId()).isEqualTo(-1);
        assertThat(sample.getInfoUpdate()).isNotNull();
        assertThat(sample.getInfoUpdate().toString()).startsWith("2021-08-22");
        // TODO: uncomment when updates for these fields are turned on.
        //        assertThat(sample.getFirstName()).isEqualTo("ELI");
        //        assertThat(sample.getMiddleName()).isEqualTo("ONY");
        //        assertThat(sample.getLastOrSurname()).isEqualTo("CAR");
        //        assertThat(sample.getGenderId()).isEqualTo(2);
        //        assertThat(sample.getFirstEntryIntoUSSchoolAt()).isEqualTo("2020-07-01");
        //        assertThat(sample.getLepEntryAt()).isNull();
        //        assertThat(sample.getLepExitAt()).isNull();
        //        assertThat(sample.getBirthday()).isEqualTo("2002-09-28");

        // Test second student has null update info because date field is blank.
        assertThat(students.get(1).getInfoUpdate()).isNull();
    }
    @Test
    public void itShouldSkipBadData() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/students/CA_StudentExtract_bad_data.csv"));
        final List<Student> students = parser.parse(payload);
        // TODO: expect 2 when parsing of other fields turned on.
        assertThat(students).hasSize(5);
    }

    @Test
    public void itShouldSkipRowsWithNoUpdates() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/students/CA_StudentExtract_blank_data.csv"));
        final List<Student> students = parser.parse(payload);
        assertThat(students).hasSize(5);
    }
}
