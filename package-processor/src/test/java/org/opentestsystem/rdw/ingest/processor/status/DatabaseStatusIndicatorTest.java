package org.opentestsystem.rdw.ingest.processor.status;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.List;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DatabaseStatusIndicatorTest {

    private DatabaseStatusIndicator statusIndicator;
    private JdbcTemplate jdbcTemplate;

    @Before
    public void createStatusIndicator() {
        jdbcTemplate = mock(JdbcTemplate.class);
        final TenantProperties tenantProperties = mock(TenantProperties.class);
        when(tenantProperties.getTenants()).thenReturn(ImmutableMap.of(
                "CA", new Tenant("CA", "CA", "California"),
                "NV", new Tenant("NV", "NV", "Nevada")
        ));

        statusIndicator = new DatabaseStatusIndicator(jdbcTemplate, tenantProperties);
    }

    @Test
    public void itShouldHaveAName() {
        assertThat(statusIndicator.name()).isEqualTo("database");
    }

    @Test
    public void itShouldBeDatabaseLevel() {
        assertThat(statusIndicator.doLevelCheck(2)).isFalse();
        assertThat(statusIndicator.doLevelCheck(3)).isTrue();
    }

    @Test
    public void itShouldReturnIdealStatus() {
        when(jdbcTemplate.queryForList(any(), eq(String.class))).thenReturn(newArrayList("ica", "iab", "sum"));
        when(jdbcTemplate.batchUpdate(any())).thenReturn(new int[]{1,1});

        final Status status = statusIndicator.status(4);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());
        assertThat(status.getDetails()).hasSize(2);
        final List<Status> ops = (List<Status>) status.getDetails().get("databaseOperations - CA");
        assertThat(ops).hasSize(2);
        assertThat(ops.get(0).getStatusRating()).isEqualTo(Rating.Ideal.value());
        assertThat(ops.get(0).getDetails().get("schema")).isEqualTo("warehouse");
        assertThat(ops.get(0).getDetails().get("type")).isEqualTo("READ");
        assertThat(ops.get(1).getStatusRating()).isEqualTo(Rating.Ideal.value());
        assertThat(ops.get(1).getDetails().get("type")).isEqualTo("WRITE");
    }

    @Test
    public void itShouldCheckResults() {
        when(jdbcTemplate.queryForList(any(), eq(String.class))).thenReturn(newArrayList("ica"));
        when(jdbcTemplate.batchUpdate(any())).thenReturn(new int[]{1,0});

        final Status status = statusIndicator.status(4);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Warning.value());
        assertThat(status.getDetails()).hasSize(2);
        final List<Status> ops = (List<Status>) status.getDetails().get("databaseOperations - NV");
        assertThat(ops).hasSize(2);
        assertThat(ops.get(0).getStatusRating()).isEqualTo(Rating.Warning.value());
        assertThat(ops.get(1).getStatusRating()).isEqualTo(Rating.Warning.value());
    }
}
