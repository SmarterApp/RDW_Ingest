package org.opentestsystem.rdw.ingest.processor.status;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DatabaseStatusIndicatorTest {

    private DatabaseStatusIndicator statusIndicator;
    private JdbcTemplate jdbcTemplate;

    @Before
    public void createStatusIndicator() {
        jdbcTemplate = mock(JdbcTemplate.class);
        statusIndicator = new DatabaseStatusIndicator(jdbcTemplate);
    }

    @Test
    public void itShouldHaveAName() {
        assertThat(statusIndicator.name()).isEqualTo("database");
    }

    @Test
    public void itShouldBeDatabaseLevel() {
        assertThat(statusIndicator.doLevelCheck(2)).isFalse();
        assertThat(statusIndicator.doLevelCheck(3)).isTrue();
    }

    @Test
    public void itShouldReturnIdealStatus() {
        when(jdbcTemplate.queryForList(anyString(), eq(String.class))).thenReturn(newArrayList("ica", "iab", "sum"));
        when(jdbcTemplate.batchUpdate(anyString(), anyString())).thenReturn(new int[]{1,1});

        final Status status = statusIndicator.status(4);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());
        final List<Status> ops = (List<Status>) status.getDetails().get("databaseOperations");
        assertThat(ops).hasSize(2);
        assertThat(ops.get(0).getStatusRating()).isEqualTo(Rating.Ideal.value());
        assertThat(ops.get(0).getDetails().get("schema")).isEqualTo("warehouse");
        assertThat(ops.get(0).getDetails().get("type")).isEqualTo("READ");
        assertThat(ops.get(1).getStatusRating()).isEqualTo(Rating.Ideal.value());
        assertThat(ops.get(1).getDetails().get("schema")).isEqualTo("warehouse");
        assertThat(ops.get(1).getDetails().get("type")).isEqualTo("WRITE");
    }

    @Test
    public void itShouldCheckResults() {
        when(jdbcTemplate.queryForList(anyString(), eq(String.class))).thenReturn(newArrayList("ica"));
        when(jdbcTemplate.batchUpdate(anyString(), anyString())).thenReturn(new int[]{1,0});

        final Status status = statusIndicator.status(4);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Warning.value());
        final List<Status> ops = (List<Status>) status.getDetails().get("databaseOperations");
        assertThat(ops).hasSize(2);
        assertThat(ops.get(0).getStatusRating()).isEqualTo(Rating.Warning.value());
        assertThat(ops.get(1).getStatusRating()).isEqualTo(Rating.Warning.value());
    }
}
