package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.common.model.subject.DepthOfKnowledge;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseDepthOfKnowledge;
import org.opentestsystem.rdw.ingest.processor.repository.DepthOfKnowledgeRepository;

import java.net.URI;
import java.util.Collection;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultSubjectDepthOfKnowledgeServiceTest {
    private static final String SubjectCode = "sub_a";

    @Mock
    private DepthOfKnowledgeRepository repository;

    @Captor
    private ArgumentCaptor<Collection<WarehouseDepthOfKnowledge>> depthCaptor;

    @Captor
    private ArgumentCaptor<Collection<Integer>> idCaptor;

    private DefaultSubjectDepthOfKnowledgeService service;

    @Before
    public void setup() {
        when(repository.isReferenced(any())).thenReturn(null);
        service = new DefaultSubjectDepthOfKnowledgeService(repository);
    }

    @Test
    public void itShouldCreateNewDepths() {
        service.upsert(subject().build());

        verify(repository).create(eq(SubjectCode), depthCaptor.capture());
        assertThat(depthCaptor.getValue().stream().map(WarehouseDepthOfKnowledge::getLevel))
                .containsOnly(1, 2, 3);

        verify(repository).update(depthCaptor.capture());
        assertThat(depthCaptor.getValue()).isEmpty();

        verify(repository).isReferenced(idCaptor.capture());
        assertThat(idCaptor.getValue()).isEmpty();

        verify(repository).delete(idCaptor.capture());
        assertThat(idCaptor.getValue()).isEmpty();
    }

    @Test
    public void itShouldUpdateDepths() {
        final List<WarehouseDepthOfKnowledge> existing = ImmutableList.of(
                warehouseDepth(1).reference(URI.create("http://depth.com/old")).build(),
                warehouseDepth(2).reference(URI.create("http://depth.com/old")).build(),
                warehouseDepth(3).build()
        );
        when(repository.findBySubject(SubjectCode)).thenReturn(existing);

        service.upsert(subject().build());

        verify(repository).create(eq(SubjectCode), depthCaptor.capture());
        assertThat(depthCaptor.getValue()).isEmpty();

        verify(repository).update(depthCaptor.capture());
        assertThat(depthCaptor.getValue().stream().map(WarehouseDepthOfKnowledge::getLevel))
                .containsOnly(1, 2);

        verify(repository).isReferenced(idCaptor.capture());
        assertThat(idCaptor.getValue()).isEmpty();

        verify(repository).delete(idCaptor.capture());
        assertThat(idCaptor.getValue()).isEmpty();
    }

    @Test
    public void itShouldDeleteDepths() {
        final List<WarehouseDepthOfKnowledge> existing = ImmutableList.of(
                warehouseDepth(1).build(),
                warehouseDepth(2).build(),
                warehouseDepth(3).build(),
                warehouseDepth(4).build()
        );
        when(repository.findBySubject(SubjectCode)).thenReturn(existing);

        service.upsert(subject().build());

        verify(repository).create(eq(SubjectCode), depthCaptor.capture());
        assertThat(depthCaptor.getValue()).isEmpty();

        verify(repository).update(depthCaptor.capture());
        assertThat(depthCaptor.getValue()).isEmpty();

        verify(repository).isReferenced(idCaptor.capture());
        assertThat(idCaptor.getValue()).containsOnly(4);

        verify(repository).delete(idCaptor.capture());
        assertThat(idCaptor.getValue()).containsOnly(4);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowIfDeletingAReferencedDepth() {
        final List<WarehouseDepthOfKnowledge> existing = ImmutableList.of(
                warehouseDepth(1).build(),
                warehouseDepth(2).build(),
                warehouseDepth(3).build(),
                warehouseDepth(4).build()
        );
        when(repository.findBySubject(SubjectCode)).thenReturn(existing);
        when(repository.isReferenced(any())).thenReturn(4);

        service.upsert(subject().build());
    }

    private Subject.Builder subject() {
        return Subject.builder()
                .code(SubjectCode)
                .depthsOfKnowledge(ImmutableList.of(
                        depth(1).build(),
                        depth(2).build(),
                        depth(3).build()
                ));
    }

    private DepthOfKnowledge.Builder depth(final int depth) {
        return DepthOfKnowledge.builder()
                .level(depth)
                .reference(URI.create("http://depth.com/" + depth));
    }

    private WarehouseDepthOfKnowledge.Builder warehouseDepth(final int depth) {
        return WarehouseDepthOfKnowledge.builder()
                .id(depth)
                .level(depth)
                .reference(URI.create("http://depth.com/" + depth));
    }
}