package org.opentestsystem.rdw.ingest.processor.repository.impl;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.common.model.subject.ItemDifficulty;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseItemDifficulty;
import org.opentestsystem.rdw.ingest.processor.repository.ItemDifficultyRepository;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class DefaultSubjectItemDifficultyServiceTest {
    private static final String SubjectCode = "subject";

    @Mock
    private ItemDifficultyRepository repository;

    @Captor
    private ArgumentCaptor<Collection<WarehouseItemDifficulty>> difficultyCaptor;

    @Captor
    private ArgumentCaptor<Collection<Integer>> idCaptor;

    private DefaultSubjectItemDifficultyService service;

    @Before
    public void setup() {
        when(repository.hasItems(any())).thenReturn(null);
        service = new DefaultSubjectItemDifficultyService(repository);
    }

    @Test
    public void itShouldCreateNewDifficulties() {
        service.upsert(subject().build());

        verify(repository).create(eq(SubjectCode), difficultyCaptor.capture());
        assertThat(difficultyCaptor.getValue().stream().map(WarehouseItemDifficulty::getGradeCode))
                .containsOnly("03", "04");

        verify(repository).update(difficultyCaptor.capture());
        assertThat(difficultyCaptor.getValue()).isEmpty();

        verify(repository).hasItems(idCaptor.capture());
        assertThat(idCaptor.getValue()).isEmpty();

        verify(repository, never()).delete(idCaptor.capture());
    }

    @Test
    public void itShouldUpdateExistingDifficulties() {
        final List<WarehouseItemDifficulty> existing = newArrayList();
        existing.add(WarehouseItemDifficulty.builder().id(3).gradeCode("03").moderateLowEnd(1.1f).difficultLowEnd(2.2f).build());
        existing.add(WarehouseItemDifficulty.builder().id(4).gradeCode("04").moderateLowEnd(3.3f).difficultLowEnd(4.4f).build());
        when(repository.findBySubject(SubjectCode)).thenReturn(existing);

        service.upsert(subject().build());

        verify(repository).create(eq(SubjectCode), difficultyCaptor.capture());
        assertThat(difficultyCaptor.getValue()).isEmpty();

        verify(repository).update(difficultyCaptor.capture());
        assertThat(difficultyCaptor.getValue()).hasSize(1);
        assertThat(difficultyCaptor.getValue().stream().map(WarehouseItemDifficulty::getId))
                .containsOnly(4);

        verify(repository).hasItems(idCaptor.capture());
        assertThat(idCaptor.getValue()).containsOnly(4);

        verify(repository, never()).delete(idCaptor.capture());
    }

    @Test
    public void itShouldDeleteStaleDifficulties() {
        final List<WarehouseItemDifficulty> existing = newArrayList();
        existing.add(WarehouseItemDifficulty.builder().id(3).gradeCode("03").moderateLowEnd(1.1f).difficultLowEnd(2.2f).build());
        existing.add(WarehouseItemDifficulty.builder().id(4).gradeCode("04").moderateLowEnd(3.3f).difficultLowEnd(4.4f).build());
        when(repository.findBySubject(SubjectCode)).thenReturn(existing);

        service.upsert(subject()
                .itemDifficulties(ImmutableList.of(
                        difficulty("03", 1.1f).build()
                ))
                .build());

        verify(repository).create(eq(SubjectCode), difficultyCaptor.capture());
        assertThat(difficultyCaptor.getValue()).isEmpty();

        verify(repository).update(difficultyCaptor.capture());
        assertThat(difficultyCaptor.getValue()).isEmpty();

        verify(repository, times(2)).hasItems(idCaptor.capture());
        assertThat(idCaptor.getAllValues().get(0)).isEmpty();
        assertThat(idCaptor.getAllValues().get(1)).containsOnly(4);

        verify(repository).delete(idCaptor.capture());
        assertThat(idCaptor.getValue()).containsOnly(4);
    }

    private Subject.Builder subject() {
        return Subject.builder()
                .code(SubjectCode)
                .itemDifficulties(ImmutableList.of(
                        difficulty("03", 1.1f).build(),
                        difficulty("04", 2.2f).build()
                ));
    }

    private ItemDifficulty.Builder difficulty(final String gradeCode, final float cut) {
        return ItemDifficulty.builder()
                .gradeCode(gradeCode)
                .moderateLowEnd(cut)
                .difficultLowEnd(cut + 1.1f);
    }
}