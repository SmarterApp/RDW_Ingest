package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.collect.Iterables;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.util.List;
import org.opentestsystem.rdw.common.model.assessment.AssessmentSerializationService;
import org.opentestsystem.rdw.common.model.assessment.TabulatorService;
import org.opentestsystem.rdw.common.model.subject.SubjectSerializationService;
import org.opentestsystem.rdw.common.model.subject.XmlSubjectSerializationService;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.RepoAndServiceTestConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseAssessment;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseAssessmentItem;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseAssessmentScoring;

import static org.apache.commons.io.IOUtils.toByteArray;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        AssessmentParserIT.TestConfiguration.class,
        RepoAndServiceTestConfiguration.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
public class AssessmentParserIT {

    @Configuration
    static class TestConfiguration {

        @Bean
        public AssessmentSerializationService assessmentSerializationService() {
            return new TabulatorService();
        }
    }


    @Autowired
    private AssessmentParser assessmentParser;

    @Sql(statements = {
            "UPDATE subject_asmt_scoring SET performance_level_count=6 WHERE subject_id=2 AND asmt_type_id=1 AND score_type_id=1"
    })
    @Test
    public void itShouldCatchAllErrorsAndReturnNoObjectsWhenParsingBadData() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();

        assertThat(assessmentParser.parse(toByteArray(this.getClass().getResourceAsStream("/IAB_ICA_Combined.bad-asmt.csv")), elementErrorCollector)).isEmpty();
        assertThat(elementErrorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-8-Winter-2016-2017], AssessmentGrade\",\"value\":\"something\",\"error\":\"unknown grade code [something]\"}," +
                "{\"elementName\":\"[assessment id], AssessmentLabel\",\"value\":\"ELA IAB G11 BriefWrites very  very very very very very very very very very very very very very very very very very very very very very  very very very very very very very very very  very very very very very very very very very very very very very very very very very very very very very very very long label\",\"error\":\"string is too long, max length is 250\"}," +
                "{\"elementName\":\"[assessment id with long version], AssessmentVersion\",\"value\":\"version that is very very very very very very very very very very very very very very very very very very very very long\",\"error\":\"string is too long, max length is 30\"}," +
                "{\"elementName\":\"[assessment id with long name], AssessmentName\",\"value\":\"assessment name that is very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very long\",\"error\":\"string is too long, max length is 250\"}," +
                "{\"elementName\":\"AssessmentId\",\"value\":\"assessment id that is very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very long\",\"error\":\"string is too long, max length is 250\"}" +
                "]}");
    }

    @Test
    public void itShouldCatchAllItemErrors() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();

        assertThat(assessmentParser.parse(toByteArray(this.getClass().getResourceAsStream("/IAB_ICA_Combined.bad-item.csv")), elementErrorCollector)).isEmpty();
        assertThat(elementErrorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501], SecondaryClaimContentTarget\",\"value\":\"|4-11\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-502], MaxPoints\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-503], DOK\",\"value\":\"662\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-503], CommonCoreStandards\",\"value\":\"ABCD;ABCF\",\"error\":\"unable to find all common core standards for an item and subject id [1]\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-504], ClaimContentTarget\",\"value\":\"\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501234567890123456789012345678901234567890long], ClaimContentTarget\",\"value\":\"\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-501234567890123456789012345678901234567890long], FullKey\",\"value\":\"200-501234567890123456789012345678901234567890long\",\"error\":\"string is too long, max length is 40\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-505], NumberOfAnswerOptions\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-506], AnswerKey\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-507], AnswerKey\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017], item id [200-508], PtWritingType\",\"value\":\"veryverylongPtWritingType\",\"error\":\"string is too long, max length is 16\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11E-Perf-HowWeLearn-Winter-2016-2017], item id [200-62025], ClaimContentTarget\",\"value\":\"|4-11\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-ICA-FIXED-G11M-Perf-TeenDrivingRestricitons-MATH-11-Winter-2016-2017], item id [200-21563], ClaimContentTarget\",\"value\":\"4|G-GPE|\",\"error\":\"target not found\"}" +
                "]}");
    }

    @Test
    public void itShouldHaveNoErrorsAndReturnObjectsWhenParsingGoodData() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();

        final List<WarehouseAssessment> assessments = assessmentParser.parse(toByteArray(this.getClass().getResourceAsStream("/IAB_ICA_Combined.items.csv")), elementErrorCollector);

        assertThat(elementErrorCollector.isEmpty()).isTrue();
        assertThat(assessments.size()).isEqualTo(9);
        assertThat(assessments.stream().map(a -> a.getItems().size()).reduce(Integer::sum)).contains(81);

        for (final WarehouseAssessment assessment : assessments) {
            switch (assessment.getNaturalId()) {
                case "(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(6);
                    assertThat(assessment.getItems().stream().map(WarehouseAssessmentItem::getPosition)).contains(1, 2, 3, 4, 5, 6);
                    assertThat(assessment.getScores().get(0).getMinScore()).isEqualTo(2300);
                    assertThat(assessment.getScores().get(0).getMaxScore()).isEqualTo(2800);
                    break;
                case "(SBAC)SBAC-IAB-FIXED-G11E-Editing-ELA-11-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(15);
                    break;
                case "(SBAC)SBAC-IAB-FIXED-G11E-ListenInterpet-ELA-11-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(15);
                    break;
                case "(SBAC)SBAC-IAB-FIXED-G11E-Perf-Explanatory-Marshmallow-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(3);
                    break;
                case "(SBAC)SBAC-ICA-FIXED-G11E-COMBINED-2017-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(16);
                    break;
                case "(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(4);
                    assertThat(assessment.getItems().stream().map(WarehouseAssessmentItem::getPosition)).contains(3, 6, 7, 9);
                    break;
            }
        }
    }

    @Sql(statements = {
            "UPDATE subject_asmt_scoring SET performance_level_count=1 WHERE subject_id=2 AND asmt_type_id=1 AND score_type_id=1"
    })
    @Test
    public void itShouldHandleSubjectWithOnePerformanceLevelCount() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<WarehouseAssessment> assessments = assessmentParser.parse(toByteArray(this.getClass()
                .getResourceAsStream("/Cutpoints.test1.csv")), elementErrorCollector);

        assertThat(assessments).hasSize(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();

        // demonstrate that it reads cut-points
        final WarehouseAssessment assessment = assessments.get(0);
        assertThat(assessment.getScores()).hasSize(1);
        final WarehouseAssessmentScoring score = assessment.getScores().get(0);
        assertThat(score.getMinScore()).isEqualTo(2300);
        assertThat(score.getMaxScore()).isEqualTo(2490);
        assertThat(score.getCutPoint1()).isNull();
        assertThat(score.getCutPoint2()).isNull();
        assertThat(score.getCutPoint3()).isNull();
    }

    @Sql(statements = {
            "UPDATE subject_asmt_scoring SET performance_level_count=6 WHERE subject_id=2 AND asmt_type_id=1 AND score_type_id=1"
    })
    @Test
    public void itShouldHandleSubjectWithMaxPerformanceLevelCount() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<WarehouseAssessment> assessments = assessmentParser.parse(toByteArray(this.getClass()
                .getResourceAsStream("/Cutpoints.test6.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();

        // demonstrate that it reads cut-points
        final WarehouseAssessment assessment = assessments.get(0);
        assertThat(assessment.getScores()).hasSize(1);
        final WarehouseAssessmentScoring score = assessment.getScores().get(0);
        assertThat(score.getMinScore()).isEqualTo(2300);
        assertThat(score.getCutPoint1()).isEqualTo(2490);
        assertThat(score.getCutPoint2()).isEqualTo(2580);
        assertThat(score.getCutPoint3()).isEqualTo(2680);
        assertThat(score.getCutPoint4()).isEqualTo(2800);
        assertThat(score.getCutPoint5()).isEqualTo(2850);
        assertThat(score.getMaxScore()).isEqualTo(2900);
    }

    @Test
    public void itShouldHandleFileWithEmptyRowsAndComments() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<WarehouseAssessment> assessments = assessmentParser.parse(toByteArray(this.getClass()
                .getResourceAsStream("/IAB_ICA_Combined.items.emptyrows.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();
    }

    @Test
    public void itShouldHandleFileWithBOM() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<WarehouseAssessment> assessments = assessmentParser.parse(toByteArray(this.getClass()
                .getResourceAsStream("/IAB_ICA_Combined.items.bom.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();
    }

    @Test
    public void itShouldHandleFileWithOneRow() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<WarehouseAssessment> assessments = assessmentParser.parse(toByteArray(this.getClass()
                .getResourceAsStream("/IAB_ICA_Combined.items.one.row.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();

        // demonstrate that it reads cut-points
        final WarehouseAssessment assessment = assessments.get(0);
        assertThat(assessment.getScores()).hasSize(1);
        final WarehouseAssessmentScoring score = assessment.getScores().get(0);
        assertThat(score.getMinScore()).isEqualTo(2300);
        assertThat(score.getCutPoint1()).isEqualTo(2490);
        assertThat(score.getCutPoint2()).isEqualTo(2580);
        assertThat(score.getCutPoint3()).isEqualTo(2680);
        assertThat(score.getMaxScore()).isEqualTo(2800);

        assertThat(assessment.getItems().size()).isEqualTo(1);
        final WarehouseAssessmentItem item = assessment.getItems().get(0);
        assertThat(item.getClaimId()).isEqualTo(3);
        assertThat(item.getTargetId()).isNotNull();
        assertThat(item.getMaxPoints()).isEqualTo(10);
        assertThat(Iterables.size(item.getOtherTargets())).isEqualTo(2);
        assertThat(Iterables.size(item.getCommonCoreStandards())).isEqualTo(2);
    }

    @Test
    public void itShouldHandleFileWithOneRowAndNoItems() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<WarehouseAssessment> assessments = assessmentParser.parse(toByteArray(this.getClass()
                .getResourceAsStream("/IAB.itemless.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();

        // demonstrate that it reads cut-points
        final WarehouseAssessment assessment = assessments.get(0);
        assertThat(assessment.getScores()).hasSize(1);
        final WarehouseAssessmentScoring score = assessment.getScores().get(0);
        assertThat(score.getMinScore()).isEqualTo(2300);
        assertThat(score.getCutPoint1()).isEqualTo(2490);
        assertThat(score.getCutPoint2()).isEqualTo(2580);
        assertThat(score.getCutPoint3()).isEqualTo(2680);
        assertThat(score.getMaxScore()).isEqualTo(2800);

        assertThat(assessment.getItems()).isEmpty();
    }

    @Sql(scripts = { "classpath:ELPACSubject.sql" })
    @Test
    public void itShouldParseELPAC() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();

        final List<WarehouseAssessment> assessments = assessmentParser.parse(toByteArray(this.getClass().getResourceAsStream("/ELPAC_asmt.csv")), elementErrorCollector);

        assertThat(assessments).hasSize(12);
        assertThat(elementErrorCollector.isEmpty()).isTrue();
        for (final WarehouseAssessment assessment : assessments) {
            assertThat(assessment.getNaturalId()).startsWith("ELPAC-SA-GRADE");
            assertThat(assessment.getName()).startsWith("ELPAC-SA-GRADE");
            assertThat(assessment.getTypeId()).isEqualTo(3);
            assertThat(assessment.getSubjectId()).isEqualTo(11);    // from SQL script
            assertThat(assessment.getSchoolYear()).isEqualTo(2019);
            assertThat(assessment.getItems()).isNullOrEmpty();
            final List<WarehouseAssessmentScoring> scores = assessment.getScores();
            assertThat(scores).hasSize(3);
            assertThat(scores.get(0).getSubjectScoreId()).isNull(); // overall
            for (final WarehouseAssessmentScoring score : scores) {
                assertThat(score.getMinScore()).isLessThan(score.getCutPoint1());
                assertThat(score.getCutPoint1()).isLessThan(score.getCutPoint2());
                assertThat(score.getCutPoint2()).isLessThan(score.getCutPoint3());
                assertThat(score.getCutPoint3()).isLessThan(score.getMaxScore());
                assertThat(score.getCutPoint4()).isNull();
                assertThat(score.getCutPoint5()).isNull();
            }
        }
    }

}
