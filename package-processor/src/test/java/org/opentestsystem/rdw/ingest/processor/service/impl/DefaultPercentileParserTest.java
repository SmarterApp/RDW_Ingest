package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.ByteStreams;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.config.SbacScoreConfiguration;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Percentile;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentPackageRepository;
import org.opentestsystem.rdw.ingest.processor.repository.PercentileRepository;

import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DefaultPercentileParserTest {

    private PercentileParser parser;

    @Before
    public void createParser() {
        final Assessment assessment = mock(Assessment.class);
        when(assessment.getId()).thenReturn(42);
        final AssessmentPackageRepository assessmentPackageRepository = mock(AssessmentPackageRepository.class);
        when(assessmentPackageRepository.findOneByNaturalId(anyString())).thenReturn(assessment);

        final PercentileRepository percentileRepository = mock(PercentileRepository.class);
        when(percentileRepository.findIdByKey(anyInt(), any(LocalDate.class), any(LocalDate.class))).thenReturn(null);
        when(percentileRepository.findIdsByDateOverlap(anyInt(), any(LocalDate.class), any(LocalDate.class))).thenReturn(new ArrayList<>());

        final SbacScoreConfiguration.Score scaleScore = mock(SbacScoreConfiguration.Score.class);
        when(scaleScore.getMin()).thenReturn(1500.0);
        when(scaleScore.getMax()).thenReturn(3000.0);
        final SbacScoreConfiguration scoreConfiguration = mock(SbacScoreConfiguration.class);
        when(scoreConfiguration.getScaleScore()).thenReturn(scaleScore);

        parser = new DefaultPercentileParser(assessmentPackageRepository, percentileRepository, scoreConfiguration);
    }

    @Test
    public void itShouldParseFile() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles.csv"));
        final List<Percentile> percentiles = parser.parse(payload);
        assertThat(percentiles).hasSize(3);
    }

    @Test(expected = ImportException.class)
    public void itShouldThrowImportExceptionForInvalidRankData() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles-bad-rank.csv"));
        parser.parse(payload);
    }

    @Test(expected = ImportException.class)
    public void itShouldThrowImportExceptionWhenMaxLessThanMinScore() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles-bad-min-max.csv"));
        parser.parse(payload);
    }

    @Test(expected = ImportException.class)
    public void itShouldThrowImportExceptionWhenRankScoreMoreThanMaxScore() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles-bad-rank-score.csv"));
        parser.parse(payload);
    }

    @Test(expected = ImportException.class)
    public void itShouldThrowImportExceptionWhenMeanMoreThanMaxScore() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles-bad-mean.csv"));
        parser.parse(payload);
    }
}
