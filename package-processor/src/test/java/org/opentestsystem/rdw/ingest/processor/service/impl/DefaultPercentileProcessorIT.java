package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.ByteStreams;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.service.PercentileProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.hasProperty;
import static org.hamcrest.Matchers.is;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

@RunWith(SpringRunner.class)
@SpringBootTest
@ActiveProfiles("test")
@Transactional
@SqlGroup({
        @Sql(executionPhase = BEFORE_TEST_METHOD,
                statements = {"INSERT INTO import (id, status, content, contentType, digest, batch, creator) VALUES\n" +
                        "  (-99, 1, 2, 'text/plain', '99',  'batch', 'dwtest@example.com'),\n" +
                        "  (-98, 1, 2, 'text/plain', '98',  'batch', 'dwtest@example.com'),\n" +
                        "  (-97, 1, 2, 'text/plain', '97',  'batch', 'dwtest@example.com'),\n" +
                        "  (-96, 1, 2, 'text/plain', '97',  'batch', 'dwtest@example.com');"},
                scripts = {"classpath:/PreloadAsmt.sql"})
})
public class DefaultPercentileProcessorIT {

    @Autowired
    private PercentileProcessor percentileProcessor;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    @Test
    public void itShouldCreate() throws IOException {
        final int beforePercentileCount = countRowsInTable(jdbcTemplate, "percentile");
        final int beforePercentileScoreCount = countRowsInTable(jdbcTemplate, "percentile_score");

        assertThat(percentileProcessor
                .process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles.csv")), -99))
                .isEqualTo("Percentiles created: 3 updated: 0");

        assertThat(countRowsInTable(jdbcTemplate, "percentile")).isEqualTo(beforePercentileCount + 3);
        assertThat(countRowsInTable(jdbcTemplate, "percentile_score")).isEqualTo(beforePercentileScoreCount + (3 * 19));
    }

    @Test
    public void itShouldUpdate() throws IOException {
        final int beforePercentileCount = countRowsInTable(jdbcTemplate, "percentile");
        final int beforePercentileScoreCount = countRowsInTable(jdbcTemplate, "percentile_score");

        assertThat(percentileProcessor
                .process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles.csv")), -99))
                .isEqualTo("Percentiles created: 3 updated: 0");

        assertThat(countRowsInTable(jdbcTemplate, "percentile")).isEqualTo(beforePercentileCount + 3);
        assertThat(countRowsInTable(jdbcTemplate, "percentile_score")).isEqualTo(beforePercentileScoreCount + (3 * 19));

        assertThat(percentileProcessor
                .process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles.csv")), -98))
                .isEqualTo("Percentiles created: 0 updated: 3");

        assertThat(countRowsInTable(jdbcTemplate, "percentile")).isEqualTo(beforePercentileCount + 3);
        assertThat(countRowsInTable(jdbcTemplate, "percentile_score")).isEqualTo(beforePercentileScoreCount + (3 * 19));

        assertThat(percentileProcessor
                .process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles-update.csv")), -97))
                .isEqualTo("Percentiles created: 1 updated: 2");

        assertThat(countRowsInTable(jdbcTemplate, "percentile_score")).isEqualTo(beforePercentileScoreCount + 19 + 3 + 9 + 19);
    }

    @Test
    public void itShouldFailOverlappingDates() throws IOException {
        final int beforePercentileCount = countRowsInTable(jdbcTemplate, "percentile");
        final int beforePercentileScoreCount = countRowsInTable(jdbcTemplate, "percentile_score");

        assertThat(percentileProcessor
                .process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles.csv")), -99))
                .isEqualTo("Percentiles created: 3 updated: 0");

        assertThat(countRowsInTable(jdbcTemplate, "percentile")).isEqualTo(beforePercentileCount + 3);
        assertThat(countRowsInTable(jdbcTemplate, "percentile_score")).isEqualTo(beforePercentileScoreCount + (3 * 19));

        thrown.expect(ImportException.class);
        thrown.expectMessage(containsString("start_date and end_date overlap " + 1 + " existing percentile(s) for the same assessment"));
        thrown.expect(hasProperty("status", is(ImportStatus.BAD_DATA)));
        percentileProcessor.process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles-overlap.csv")), -98);

        assertThat(countRowsInTable(jdbcTemplate, "percentile")).isEqualTo(beforePercentileCount + 3);
        assertThat(countRowsInTable(jdbcTemplate, "percentile_score")).isEqualTo(beforePercentileScoreCount + (3 * 19));
    }

    @Test
    public void itShouldThrowOnBadData() throws IOException {
        final int beforePercentileCount = countRowsInTable(jdbcTemplate, "percentile");
        final int beforePercentileScoreCount = countRowsInTable(jdbcTemplate, "percentile_score");

        thrown.expect(ImportException.class);
        thrown.expectMessage(containsString("\"messages\":"));
        thrown.expect(hasProperty("status", is(ImportStatus.BAD_DATA)));
        percentileProcessor.process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/percentile/percentiles-bad-order.csv")), -99);
        assertThat(countRowsInTable(jdbcTemplate, "percentile")).isEqualTo(beforePercentileCount);
        assertThat(countRowsInTable(jdbcTemplate, "percentile")).isEqualTo(beforePercentileCount);
    }

}