package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.collect.Iterables;
import com.google.common.io.ByteStreams;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.PackageProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@ContextConfiguration(classes = {PackageProcessorApplication.class})
public class DefaultAssessmentParserIT {

    @Autowired
    private AssessmentParser assessmentParser;

    @Test
    public void itShouldCatchAllErrorsAndReturnNoObjectsWhenParsingBadData() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();

        assertThat(assessmentParser.parse(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/IAB_ICA_Combined.bad-asmt.csv")), elementErrorCollector)).isEmpty();
        assertThat(elementErrorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"AssessmentId\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-5-Winter-2016-2017], AssessmentName\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-6-Winter-2016-2017], AssessmentSubject\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-7-Winter-2016-2017], AssessmentGrade\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-8-Winter-2016-2017], AssessmentGrade\",\"value\":\"something\",\"error\":\"Unknown value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-9-Winter-2016-2017], AssessmentSubtype\",\"value\":\"something\",\"error\":\"Unknown value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-10-Winter-2016-2017], ScaledLow1\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-10-Winter-2016-2017], ScaledHigh4\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-10-Winter-2016-2017], ScaledHigh2\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017], ScaledLow1\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017], ScaledHigh4\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017], ScaledHigh1\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017], ScaledHigh2\",\"value\":\"\",\"error\":\"Invalid value\"}," +
                "{\"elementName\":\"Asmt id [(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017], ScaledHigh3\",\"value\":\"\",\"error\":\"Invalid value\"}]}");
    }

    @Test
    public void itShouldHaveNoErrorsAndReturnObjectsWhenParsingGoodData() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();

        final List<Assessment> assessments = assessmentParser.parse(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/IAB_ICA_Combined.items.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(9);
        assertThat(elementErrorCollector.isEmpty()).isTrue();

        for (final Assessment assessment : assessments) {
            switch (assessment.getNaturalId()) {
                case "(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(6);
                    assertThat(assessment.getCutPoint1()).isNull();
                    break;
                case "(SBAC)SBAC-IAB-FIXED-G11E-Editing-ELA-11-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(15);
                    assertThat(assessment.getCutPoint3()).isNull();
                    break;
                case "(SBAC)SBAC-IAB-FIXED-G11E-ListenInterpet-ELA-11-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(15);
                    break;
                case "(SBAC)SBAC-IAB-FIXED-G11E-Perf-Explanatory-Marshmallow-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(3);
                    break;
                case "(SBAC)SBAC-ICA-FIXED-G11E-COMBINED-2017-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(16);
                    break;
                case "(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(4);
                    break;
            }
        }
    }

    @Test
    public void itShouldHandleFileWithOneRow() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<Assessment> assessments = assessmentParser.parse(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/IAB_ICA_Combined.items.one.row.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();

        // demonstrate that it reads cut-points
        final Assessment assessment = assessments.get(0);
        assertThat(assessment.getMinScore()).isEqualTo(2300);
        assertThat(assessment.getCutPoint1()).isEqualTo(2490);
        assertThat(assessment.getCutPoint2()).isEqualTo(2580);
        assertThat(assessment.getCutPoint3()).isEqualTo(2680);
        assertThat(assessment.getMaxScore()).isEqualTo(2800);

        assertThat(assessment.getItems().size()).isEqualTo(1);
        assertThat(assessment.getItems().get(0).getClaimCodeId()).isEqualTo(3);
        assertThat(assessment.getItems().get(0).getTargetId()).isNotNull();
        assertThat(Iterables.size(assessment.getItems().get(0).getOtherTargets())).isEqualTo(2);
        assertThat(Iterables.size(assessment.getItems().get(0).getCommonCoreStandards())).isEqualTo(2);
    }
}