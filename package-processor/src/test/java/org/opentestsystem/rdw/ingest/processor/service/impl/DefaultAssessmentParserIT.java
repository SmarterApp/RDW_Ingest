package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.collect.Iterables;
import com.google.common.io.ByteStreams;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.RepoAndServiceTestConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Item;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        RepoAndServiceTestConfiguration.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
public class DefaultAssessmentParserIT {

    @Autowired
    private AssessmentParser assessmentParser;

    @Sql(statements = {
            "UPDATE subject_asmt_type SET performance_level_count=6 WHERE asmt_type_id=1 AND subject_id=2"
    })
    @Test
    public void itShouldCatchAllErrorsAndReturnNoObjectsWhenParsingBadData() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();

        assertThat(assessmentParser.parse(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/IAB_ICA_Combined.bad-asmt.csv")), elementErrorCollector)).isEmpty();
        assertThat(elementErrorCollector.toJson()).isEqualTo("{\"messages\":[" +
                "{\"elementName\":\"AssessmentId\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-5-Winter-2016-2017], AssessmentName\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-6-Winter-2016-2017], AssessmentSubject\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-7-Winter-2016-2017], AssessmentGrade\",\"value\":\"\",\"error\":\"value may not be blank\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-8-Winter-2016-2017], AssessmentGrade\",\"value\":\"something\",\"error\":\"unknown grade code [something]\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-9-Winter-2016-2017], AssessmentSubtype\",\"value\":\"something\",\"error\":\"invalid value\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-10-Winter-2016-2017], ScaledLow1\",\"value\":\"\",\"error\":\"invalid value, must be 1500.0 - 3500.0\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-10-Winter-2016-2017], ScaledHigh4\",\"value\":\"\",\"error\":\"invalid value, must be 1500.0 - 3500.0\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-10-Winter-2016-2017], ScaledHigh2\",\"value\":\"\",\"error\":\"invalid value, must be 1500.0 - 3500.0\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017], ScaledLow1\",\"value\":\"\",\"error\":\"invalid value, must be 1500.0 - 3500.0\"}," +
                "{\"elementName\":\"ScaledHigh6\",\"value\":\"n/a\",\"error\":\"Missing column :ScaledHigh6\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017], ScaledHigh1\",\"value\":\"\",\"error\":\"invalid value, must be 1500.0 - 3500.0\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017], ScaledHigh2\",\"value\":\"\",\"error\":\"invalid value, must be 1500.0 - 3500.0\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017], ScaledHigh3\",\"value\":\"\",\"error\":\"invalid value, must be 1500.0 - 3500.0\"}," +
                "{\"elementName\":\"[(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017], ScaledHigh4\",\"value\":\"\",\"error\":\"invalid value, must be 1500.0 - 3500.0\"}," +
                "{\"elementName\":\"ScaledHigh5\",\"value\":\"n/a\",\"error\":\"Missing column :ScaledHigh5\"}," +
                "{\"elementName\":\"[assessment id], AssessmentLabel\",\"value\":\"ELA IAB G11 BriefWrites very  very very very very very very very very very very very very very very very very very very very very very  very very very very very very very very very  very very very very very very very very very very very very very very very very very very very very very very very long label\",\"error\":\"string is too long, max length is 255\"}," +
                "{\"elementName\":\"[assessment id with long version], AssessmentVersion\",\"value\":\"version that is very very very very very very very very very very very very very very very very very very very very long\",\"error\":\"string is too long, max length is 30\"}," +
                "{\"elementName\":\"[assessment id with long name], AssessmentName\",\"value\":\" assessment name that is very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very long\",\"error\":\"string is too long, max length is 250\"}," +
                "{\"elementName\":\"AssessmentId\",\"value\":\"assessment id that is very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very long\",\"error\":\"string is too long, max length is 250\"}," +
                "{\"elementName\":\"[asmt with invalid type], AssessmentSubtype\",\"value\":\"something\",\"error\":\"invalid value\"}" +
                "]}");
    }

    @Test
    public void itShouldHaveNoErrorsAndReturnObjectsWhenParsingGoodData() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();

        final List<Assessment> assessments = assessmentParser.parse(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/IAB_ICA_Combined.items.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(9);
        assertThat(elementErrorCollector.isEmpty()).isTrue();

        for (final Assessment assessment : assessments) {
            switch (assessment.getNaturalId()) {
                case "(SBAC)SBAC-IAB-FIXED-G11E-BriefWrites-ELA-11-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(6);
                    assertThat(assessment.getItems().stream().map(Item::getPosition)).contains(1, 2, 3, 4, 5, 6);
                    assertThat(assessment.getCutPoint1()).isNull();
                    break;
                case "(SBAC)SBAC-IAB-FIXED-G11E-Editing-ELA-11-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(15);
                    assertThat(assessment.getCutPoint3()).isNull();
                    break;
                case "(SBAC)SBAC-IAB-FIXED-G11E-ListenInterpet-ELA-11-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(15);
                    break;
                case "(SBAC)SBAC-IAB-FIXED-G11E-Perf-Explanatory-Marshmallow-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(3);
                    break;
                case "(SBAC)SBAC-ICA-FIXED-G11E-COMBINED-2017-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(16);
                    break;
                case "(SBAC)SBAC-ICA-FIXED-G11M-Winter-2016-2017":
                    assertThat(assessment.getItems().size()).isEqualTo(4);
                    assertThat(assessment.getItems().stream().map(Item::getPosition)).contains(3, 6, 7, 9);
                    break;
            }
        }
    }

    @Sql(statements = {
            "UPDATE subject_asmt_type SET performance_level_count=1 WHERE asmt_type_id=1 AND subject_id=2"
    })
    @Test
    public void itShouldHandleSubjectWithOnePerformanceLevelCount() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<Assessment> assessments = assessmentParser.parse(ByteStreams.toByteArray(this.getClass()
                .getResourceAsStream("/Cutpoints.test.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();

        // demonstrate that it reads cut-points
        final Assessment assessment = assessments.get(0);
        assertThat(assessment.getMinScore()).isEqualTo(2300);
        assertThat(assessment.getMaxScore()).isEqualTo(2490);
        assertThat(assessment.getCutPoint1()).isNull();
        assertThat(assessment.getCutPoint2()).isNull();
        assertThat(assessment.getCutPoint3()).isNull();
    }

    @Sql(statements = {
            "UPDATE subject_asmt_type SET performance_level_count=6 WHERE asmt_type_id=1 AND subject_id=2"
    })
    @Test
    public void itShouldHandleSubjectWithMaxPerformanceLevelCount() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<Assessment> assessments = assessmentParser.parse(ByteStreams.toByteArray(this.getClass()
                .getResourceAsStream("/Cutpoints.test.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();

        // demonstrate that it reads cut-points
        final Assessment assessment = assessments.get(0);
        assertThat(assessment.getMinScore()).isEqualTo(2300);
        assertThat(assessment.getCutPoint1()).isEqualTo(2490);
        assertThat(assessment.getCutPoint2()).isEqualTo(2580);
        assertThat(assessment.getCutPoint3()).isEqualTo(2680);
        assertThat(assessment.getCutPoint4()).isEqualTo(2800);
        assertThat(assessment.getCutPoint5()).isEqualTo(2850);
        assertThat(assessment.getMaxScore()).isEqualTo(2900);
    }

    @Test
    public void itShouldHandleFileWithEmptyRowsAndComments() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<Assessment> assessments = assessmentParser.parse(ByteStreams.toByteArray(this.getClass()
                .getResourceAsStream("/IAB_ICA_Combined.items.emptyrows.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();
    }

    @Test
    public void itShouldHandleFileWithBOM() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<Assessment> assessments = assessmentParser.parse(ByteStreams.toByteArray(this.getClass()
                .getResourceAsStream("/IAB_ICA_Combined.items.bom.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();
    }

    @Test
    public void itShouldHandleFileWithOneRow() throws IOException {
        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<Assessment> assessments = assessmentParser.parse(ByteStreams.toByteArray(this.getClass()
                .getResourceAsStream("/IAB_ICA_Combined.items.one.row.csv")), elementErrorCollector);

        assertThat(assessments.size()).isEqualTo(1);
        assertThat(elementErrorCollector.isEmpty()).isTrue();

        // demonstrate that it reads cut-points
        final Assessment assessment = assessments.get(0);
        assertThat(assessment.getMinScore()).isEqualTo(2300);
        assertThat(assessment.getCutPoint1()).isEqualTo(2490);
        assertThat(assessment.getCutPoint2()).isEqualTo(2580);
        assertThat(assessment.getCutPoint3()).isEqualTo(2680);
        assertThat(assessment.getMaxScore()).isEqualTo(2800);

        assertThat(assessment.getItems().size()).isEqualTo(1);
        final Item item = assessment.getItems().get(0);
        assertThat(item.getClaimId()).isEqualTo(3);
        assertThat(item.getTargetId()).isNotNull();
        assertThat(item.getMaxPoints()).isEqualTo(10);
        assertThat(Iterables.size(item.getOtherTargets())).isEqualTo(2);
        assertThat(Iterables.size(item.getCommonCoreStandards())).isEqualTo(2);
    }
}
