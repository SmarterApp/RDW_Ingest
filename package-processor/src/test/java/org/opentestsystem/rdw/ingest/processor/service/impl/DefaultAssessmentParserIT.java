package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.PackageProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.service.DataElementErrorCollector;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@ContextConfiguration(classes = {PackageProcessorApplication.class})
public class DefaultAssessmentParserIT {

    @Autowired
    private DefaultAssessmentParser assessmentParser;
    
    @Test
    public void itShouldCatchAllErrorsAndReturnNoObjectsWhenParsingBadData() throws IOException{
        DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        HashSet<Assessment> asmtSet = new HashSet<Assessment>();
        assertThat(errorCollector.isEmpty());
        assertThat(asmtSet.isEmpty());
        final Iterable<CSVRecord> records =
                CSVFormat.RFC4180.withFirstRecordAsHeader().parse(new InputStreamReader(this.getClass().getResourceAsStream("/IAB_English-bad.items.csv")));

        for (CSVRecord record : records) {
            asmtSet.add(assessmentParser.parse(record, errorCollector));
        }
        assertThat(!errorCollector.isEmpty());
        assertThat(asmtSet.isEmpty());
    }

    @Test
    public void itShouldHaveNoErrorsAndReturnObjectsWhenParsingGoodData() throws IOException{
        DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        HashSet<Assessment> asmtSet = new HashSet<Assessment>();
        assertThat(errorCollector.isEmpty());
        assertThat(asmtSet.isEmpty());
        final Iterable<CSVRecord> records =
                CSVFormat.RFC4180.withFirstRecordAsHeader()
                        .parse(new InputStreamReader(this.getClass()
                                .getResourceAsStream("/IAB_English.items.csv"))); //9 unique assessments

        for (CSVRecord record : records) {
            asmtSet.add(assessmentParser.parse(record, errorCollector));
        }
        assertThat(errorCollector.isEmpty());
        assertThat(asmtSet.size() == 9);
    }

}