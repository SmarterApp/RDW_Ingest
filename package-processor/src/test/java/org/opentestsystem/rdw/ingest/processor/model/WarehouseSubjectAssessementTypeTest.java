package org.opentestsystem.rdw.ingest.processor.model;

import com.google.common.collect.ImmutableList;
import org.junit.Test;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.ScoreType;
import org.opentestsystem.rdw.common.model.subject.AltScoring;
import org.opentestsystem.rdw.common.model.subject.OverallScoring;
import org.opentestsystem.rdw.common.model.subject.PerformanceLevel;
import org.opentestsystem.rdw.common.model.subject.PerformanceLevels;
import org.opentestsystem.rdw.common.model.subject.SubjectAssessmentType;

import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.common.model.AssessmentType.ICA;

public class WarehouseSubjectAssessementTypeTest {

    @Test
    public void itShouldCopyASubjectAssessmentType() {
        final SubjectAssessmentType src = SubjectAssessmentType.builder()
                .type(ICA)
                .targetReport(false)
                .printedReport(true)
                .overallScoring(OverallScoring.builder()
                        .minScore(1000d)
                        .maxScore(3500d)
                        .performanceLevels(PerformanceLevels.builder()
                                .standardCutoff(1)
                                .performanceLevels(ImmutableList.of(
                                    PerformanceLevel.builder().level(1).build(),
                                    PerformanceLevel.builder().level(2).build()))
                                .build())
                        .build())
                .altScoring(AltScoring.builder()
                        .minScore(0d)
                        .maxScore(100d)
                        .performanceLevels(PerformanceLevels.builder()
                                .standardCutoff(1)
                                .performanceLevels(ImmutableList.of(
                                    PerformanceLevel.builder().level(1).build(),
                                    PerformanceLevel.builder().level(2).build()))
                                .build())
                        .build())
                .build();

        final WarehouseSubjectAssessmentType type = WarehouseSubjectAssessmentType.builder().copy(src).build();
        assertThat(type.getAssessmentType()).isEqualTo(ICA);
        assertThat(type.isTargetReport()).isFalse();
        assertThat(type.isPrintedReport()).isTrue();
        assertThat(type.getScorings()).hasSize(2);
        assertThat(type.getScoring(ScoreType.OVERALL).getPerformanceLevelCount()).isEqualTo(2);
        assertThat(type.getScoring(ScoreType.ALT).getMaxScore()).isEqualTo(100);
        assertThat(type.getScoring(ScoreType.CLAIM)).isNull();
    }

    @Test
    public void itShouldIgnoreOrderWhenComparingScorings() {
        final WarehouseSubjectAssessmentType type1 = WarehouseSubjectAssessmentType.builder()
                .scoring(WarehouseSubjectAssessmentScoring.builder().type(ScoreType.OVERALL).performanceLevelCount(2).build())
                .scoring(WarehouseSubjectAssessmentScoring.builder().type(ScoreType.ALT).performanceLevelCount(1).build())
                .scoring(WarehouseSubjectAssessmentScoring.builder().type(ScoreType.CLAIM).performanceLevelCount(3).build())
                .build();
        final WarehouseSubjectAssessmentType type2 = WarehouseSubjectAssessmentType.builder()
                .scoring(WarehouseSubjectAssessmentScoring.builder().type(ScoreType.CLAIM).performanceLevelCount(3).build())
                .scoring(WarehouseSubjectAssessmentScoring.builder().type(ScoreType.ALT).performanceLevelCount(1).build())
                .scoring(WarehouseSubjectAssessmentScoring.builder().type(ScoreType.OVERALL).performanceLevelCount(2).build())
                .build();
        final WarehouseSubjectAssessmentType type3 = WarehouseSubjectAssessmentType.builder()
                .scoring(WarehouseSubjectAssessmentScoring.builder().type(ScoreType.OVERALL).performanceLevelCount(2).build())
                .scoring(WarehouseSubjectAssessmentScoring.builder().type(ScoreType.ALT).performanceLevelCount(2).build())
                .scoring(WarehouseSubjectAssessmentScoring.builder().type(ScoreType.CLAIM).performanceLevelCount(3).build())
                .build();

        assertThat(type1.equals(type2)).isTrue();
        assertThat(type1.equals(type3)).isFalse();

        assertThat(type1.hashCode()).isEqualTo(type2.hashCode());
        assertThat(type1.hashCode()).isNotEqualTo(type3.hashCode());
    }
}
