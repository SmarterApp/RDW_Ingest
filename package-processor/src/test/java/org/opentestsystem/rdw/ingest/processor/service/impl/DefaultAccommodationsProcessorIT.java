package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.ByteStreams;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.PackageProcessorApplication;
import org.opentestsystem.rdw.ingest.processor.service.AccommodationsProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@ContextConfiguration(classes = {PackageProcessorApplication.class})
public class DefaultAccommodationsProcessorIT {

    @Autowired
    private AccommodationsProcessor processor;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    public void itShouldProcessAccommodations() throws IOException {
        final int beforeAccommodationCount = countRowsInTable(jdbcTemplate, "accommodation");
        final int beforeTranslationCount = countRowsInTable(jdbcTemplate, "accommodation_translation");

        //create
        assertThat(processor.process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/AccessibilityConfig.xml")), 1L)).isEqualTo("11 accommodations processed");

        assertThat(countRowsInTable(jdbcTemplate, "accommodation")).isEqualTo(beforeAccommodationCount + 11);
        assertThat(countRowsInTable(jdbcTemplate, "accommodation_translation")).isEqualTo(beforeTranslationCount + 12);

        final List<Integer> accIds = jdbcTemplate.queryForList("SELECT id FROM accommodation ORDER BY id", Integer.class);

        //update with no changes
        assertThat(processor.process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/AccessibilityConfig.xml")), 1L)).isEqualTo("11 accommodations processed");

        assertThat(countRowsInTable(jdbcTemplate, "accommodation")).isEqualTo(beforeAccommodationCount + 11);
        assertThat(countRowsInTable(jdbcTemplate, "accommodation_translation")).isEqualTo(beforeTranslationCount + 12);

        assertThat(jdbcTemplate.queryForObject("SELECT count(*) FROM accommodation_translation act JOIN accommodation a ON a.id = act.accommodation_id WHERE a.code = 'NEA_MT'", Integer.class)).isEqualTo(2);
        assertThat(jdbcTemplate.queryForObject("SELECT label FROM accommodation_translation act JOIN accommodation a ON a.id = act.accommodation_id WHERE a.code = 'NEA_MT' AND act.language_code = 'eng'", String.class)).isEqualTo("Multiplication Table");
        assertThat(jdbcTemplate.queryForObject("SELECT count(*) FROM accommodation_translation act JOIN accommodation a ON a.id = act.accommodation_id WHERE a.code = 'NEA_MT'", Integer.class)).isEqualTo(2);
        assertThat(jdbcTemplate.queryForObject("SELECT count(*) FROM accommodation_translation act JOIN accommodation a ON a.id = act.accommodation_id WHERE a.code = 'test'", Integer.class)).isEqualTo(0);

        //confirm that running update did not change accommodation ids
        assertThat(jdbcTemplate.queryForList("SELECT id FROM accommodation ORDER BY id", Integer.class)).isEqualTo(accIds);

        //update with some changes
        assertThat(processor.process(ByteStreams.toByteArray(this.getClass().getResourceAsStream("/AccessibilityConfig.update.xml")), 1L)).isEqualTo("11 accommodations processed");
        //NOTE: even though some accommodations/translations are removed, the counter is not decreased; this is because we do not remove accommodations and translations
        assertThat(countRowsInTable(jdbcTemplate, "accommodation")).isEqualTo(beforeTranslationCount + 12);
        assertThat(countRowsInTable(jdbcTemplate, "accommodation_translation")).isEqualTo(beforeTranslationCount + 13);

        assertThat(jdbcTemplate.queryForObject("SELECT count(*) FROM accommodation_translation act JOIN accommodation a ON a.id = act.accommodation_id WHERE a.code = 'NEA_MT'", Integer.class)).isEqualTo(2);
        assertThat(jdbcTemplate.queryForObject("SELECT label FROM accommodation_translation act JOIN accommodation a ON a.id = act.accommodation_id WHERE a.code = 'NEA_MT' AND act.language_code = 'eng'", String.class)).isEqualTo("Multiplication Table Updated");
        assertThat(jdbcTemplate.queryForObject("SELECT count(*) FROM accommodation_translation act JOIN accommodation a ON a.id = act.accommodation_id WHERE a.code = 'test'", Integer.class)).isEqualTo(1);
    }
}