package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import org.opentestsystem.rdw.ingest.processor.repository.SubjectRepository;

import static org.assertj.core.api.Assertions.assertThat;

@Import(JdbcSubjectRepository.class)
@Sql(statements = {
        "INSERT INTO subject (id, code, import_id, update_import_id) VALUES (-99, 'test1', 1, 1);",
        "INSERT INTO subject (id, code, import_id, update_import_id) VALUES (-88, 'test2', 1, 1);",
        "INSERT INTO subject (id, code, import_id, update_import_id) VALUES (-55, 'test55', 1, 1);"
})
public class JdbcSubjectRepositoryIT extends TenantAwareRepositoryIT {

    @Autowired
    private SubjectRepository repository;

    @Autowired
    private NamedParameterJdbcTemplate template;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findIdByCode("test1")).isEqualTo(-99);
        assertThat(repository.findIdByCode("test2")).isEqualTo(-88);
    }

    @Test
    public void itShouldReturnNullForUnknownId() {
        assertThat(repository.findIdByCode("unknown")).isNull();
    }

    @Test
    public void itShouldReturnNullWhenNameIsUnknown() {
        assertThat(repository.findIdByCode("something")).isEqualTo(null);
    }

    @Test
    public void itShouldInsertANewSubject() {
        final int id = repository.create("new_sub", 123);
        assertThat(id).isGreaterThan(2);

        final long importId = template.queryForObject(
                "SELECT import_id FROM subject WHERE code = :code",
                new MapSqlParameterSource("code", "new_sub"),
                Long.class);
        assertThat(importId).isEqualTo(123L);
    }

    @Test(expected = DuplicateKeyException.class)
    public void itShouldNotInsertADuplicateSubject() {
        repository.create("new_sub", 123);
        repository.create("new_sub", 456);
    }

    @Test
    public void itShouldUpdateAnExistingSubject() {
        repository.create("new_sub", 123);
        repository.update("new_sub", 456);

        final long importId = template.queryForObject(
                "SELECT update_import_id FROM subject WHERE code = :code",
                new MapSqlParameterSource("code", "new_sub"),
                Long.class);
        assertThat(importId).isEqualTo(456L);
    }

}
