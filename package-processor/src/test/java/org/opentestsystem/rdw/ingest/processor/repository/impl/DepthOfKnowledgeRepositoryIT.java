package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.repository.DepthOfKnowledgeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.interceptor.SimpleKey;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO subject (id, name) VALUES (-11, 'TMath'),(-12, 'TELA');",
        "INSERT INTO depth_of_knowledge (id, level, subject_id, description, reference) VALUES \n" +
                "(-11, 11, -11, 'test1', 'reference');",
        "INSERT INTO depth_of_knowledge (id, level, subject_id, description, reference) VALUES \n" +
                "(-12, 12, -11, 'test2', 'reference');",
        "INSERT INTO depth_of_knowledge (id, level, subject_id, description, reference) VALUES \n" +
                "(-13, 13, -11, 'test3', 'reference');"
})
public class DepthOfKnowledgeRepositoryIT {

    @Autowired
    private DepthOfKnowledgeRepository repository;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findIdByLevelAndSubject(11, -11)).isEqualTo(-11);
        assertThat(repository.findIdByLevelAndSubject(12, -11)).isEqualTo(-12);
    }

    @Test
    public void itShouldReturnNullWhenLevelIsUnknown() {
        assertThat(repository.findIdByLevelAndSubject(14, -12)).isEqualTo(null);
    }

    @Test
    public void itShouldReturnNullWhenSubjectIsUnknown() {
        assertThat(repository.findIdByLevelAndSubject(11, -1)).isEqualTo(null);
    }

    @Test
    public void itShouldCacheReturnedId() {
        final Cache practices = this.cacheManager.getCache("dokId");
        assertThat(practices.get(new SimpleKey(13, -11))).isNull();

        assertThat(repository.findIdByLevelAndSubject(13, -11)).isEqualTo(-13);

        assertThat(practices.get(new SimpleKey(13, -11), Integer.class)).isEqualTo(-13);
    }
}