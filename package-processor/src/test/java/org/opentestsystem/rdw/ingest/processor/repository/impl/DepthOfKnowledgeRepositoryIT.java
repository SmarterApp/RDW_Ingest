package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.repository.DepthOfKnowledgeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@CachingTest
@Sql(statements = {
        "INSERT INTO depth_of_knowledge (level, description) VALUES (11, 'test1');",
        "INSERT INTO depth_of_knowledge (level, description) VALUES (22, 'test2');",
        "INSERT INTO depth_of_knowledge (level, description) VALUES (55, 'test5');"
})
public class DepthOfKnowledgeRepositoryIT {

    @Autowired
    private DepthOfKnowledgeRepository repository;

    @Autowired
    private CacheManager cacheManager;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findByLevel(11)).isEqualTo(11);
        assertThat(repository.findByLevel(22)).isEqualTo(22);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowExceptionWhenCodeIsUnknown() {
        repository.findByLevel(44);
    }

    @Test
    public void itShouldCacheReturnedId() {
        final Cache practices = this.cacheManager.getCache("dokLevel");
        assertThat(practices.get(55)).isNull();

        assertThat(repository.findByLevel(55)).isEqualTo(55);

        assertThat(practices.get(55, Integer.class)).isEqualTo(55);
    }
}