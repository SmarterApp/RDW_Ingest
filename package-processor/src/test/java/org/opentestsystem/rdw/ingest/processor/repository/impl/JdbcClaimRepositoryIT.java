package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.repository.ClaimRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcClaimRepository.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class
})
@Transactional
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO subject (id, code) VALUES (-12, 'name1');",
        "INSERT INTO subject (id, code) VALUES (-13, 'name2');",
        "INSERT INTO subject (id, code) VALUES (-14, 'name3');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (-122, -12, 'ccode1', 'name1', 'description');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (-133, -13, 'ccode2', 'name2', 'description');",
        "INSERT INTO claim (id, subject_id, code, name, description) VALUES (-144, -14, 'ccode44','name3', 'description');"
})
public class JdbcClaimRepositoryIT {

    @Autowired
    private ClaimRepository repository;

    @Test
    public void itShouldReturnId() {
        assertThat(repository.findIdByCode(-12, "ccode1")).isEqualTo(-122);
        assertThat(repository.findIdByCode(-13, "ccode2")).isEqualTo(-133);
    }

    @Test
    public void itShouldReturnNullnWhenCodeIsUnknown() {
        assertThat(repository.findIdByCode(-12, "blah")).isEqualTo(null);
    }

    @Test
    public void itShouldReturnClaimsForASubject() {
        final Set<String> claimCodes = repository.findCodesBySubject("ELA");
        assertThat(claimCodes).containsOnly("1-IT", "1-LT", "2-W", "3-L", "3-S", "4-CR", "NA");
    }

    @Test
    public void itShouldReturnEmptyClaimsForAnUnknownSubject() {
        assertThat(repository.findCodesBySubject("unknown")).isEmpty();
    }

    @Test
    @Sql("/LoadTestSubject.sql")
    public void itShouldCreateAClaim() {
        assertThat(repository.findCodesBySubject("test")).isEmpty();

        repository.create("test", "claim_a");
        assertThat(repository.findCodesBySubject("test")).containsOnly("claim_a");
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowIfUnableToCreateAClaim() {
        repository.create("test", "claim_a");
    }

    @Test
    @Sql("/LoadTestSubject.sql")
    public void itShouldDeleteAClaim() {
        repository.create("test", "claim_a");
        repository.create("test", "claim_b");
        assertThat(repository.findCodesBySubject("test"))
                .containsOnly("claim_a", "claim_b");

        repository.delete("test", "claim_a");
        assertThat(repository.findCodesBySubject("test"))
                .containsOnly("claim_b");
    }

    @Test
    @Sql("/PreloadExams.sql")
    public void itShouldDetectIfAClaimHasAssessmentItems() {
        assertThat(repository.hasItems("Math", "2")).isFalse();
        assertThat(repository.hasItems("Math", "1")).isTrue();
    }
}