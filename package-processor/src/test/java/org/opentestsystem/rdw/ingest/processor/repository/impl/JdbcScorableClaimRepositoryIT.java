package org.opentestsystem.rdw.ingest.processor.repository.impl;

import com.google.common.collect.ImmutableList;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseScorableClaim;
import org.opentestsystem.rdw.ingest.processor.repository.ScorableClaimRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import static com.google.common.collect.ImmutableMultiset.of;
import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcScorableClaimRepository.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql(statements = {
        "INSERT INTO subject (id, code) VALUES (-99, 'test1'), (-88, 'test2');",
        "INSERT INTO subject_claim_score (id, subject_id, asmt_type_id, code, display_order) VALUES (-1, -99, 1, 'claim_a', 1), (-2, -99, 1, 'claim_b', 2);"
})
public class JdbcScorableClaimRepositoryIT {

    @Autowired
    private ScorableClaimRepository repository;

    @Test
    public void itShouldFindAllClaimsForASubject() {
        assertThat(repository.findBySubject("test1"))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnly(
                        WarehouseScorableClaim.builder().id(-1).code("claim_a").asmtTypeCode("ica").displayOrder(1).build(),
                        WarehouseScorableClaim.builder().id(-2).code("claim_b").asmtTypeCode("ica").displayOrder(2).build()
                );
        assertThat(repository.findBySubject("test2")).isEmpty();
    }

    @Test
    public void itShouldCreateClaims() {
        final List<WarehouseScorableClaim> claims = newArrayList();
        claims.add(WarehouseScorableClaim.builder().code("claim_1").asmtTypeCode("ica").displayOrder(1).build());
        claims.add(WarehouseScorableClaim.builder().code("claim_2").asmtTypeCode("ica").displayOrder(2).build());
        claims.add(WarehouseScorableClaim.builder().code("claim_1").asmtTypeCode("sum").displayOrder(1).build());
        claims.add(WarehouseScorableClaim.builder().code("claim_2").asmtTypeCode("sum").displayOrder(2).build());
        repository.create("test2", claims);

        assertThat(repository.findBySubject("test2").stream()
                .map(claim -> claim.getCode() + claim.getAsmtTypeCode()))
                .containsOnly("claim_1ica", "claim_2ica", "claim_1sum", "claim_2sum");
    }

    @Test
    public void itShouldUpdateClaimDisplayOrder() {
        final List<WarehouseScorableClaim> updatedClaims = newArrayList();
        updatedClaims.add(WarehouseScorableClaim.builder().id(-1).code("claim_a").displayOrder(4).build());
        updatedClaims.add(WarehouseScorableClaim.builder().id(-2).code("claim_b").displayOrder(5).build());
        repository.update(updatedClaims);

        assertThat(repository.findBySubject("test1").stream().map(WarehouseScorableClaim::getDisplayOrder))
                .containsOnly(4, 5);
    }

    @Test
    public void itShouldDeleteClaims() {
        repository.delete(ImmutableList.of(-1, -2));
        assertThat(repository.findBySubject("test1")).isEmpty();
    }

    @Test
    @Sql(
            scripts = "/PreloadAsmt.sql",
            statements = {
                    "INSERT INTO subject (id, code) VALUES (-99, 'test1'), (-88, 'test2');",
                    "INSERT INTO subject_claim_score (id, subject_id, asmt_type_id, code, display_order) VALUES (-1, -99, 1, 'claim_a', 1), (-2, -99, 1, 'claim_b', 2);"
            }
    )
    public void itShouldDetermineIfClaimsHaveAssessments() {
        assertThat(repository.isReferenced(of(-1, -2))).isNull();

        final Set<Integer> elaClaimIds = repository.findBySubject("ELA").stream()
                .map(WarehouseScorableClaim::getId)
                .collect(Collectors.toSet());
        assertThat(repository.isReferenced(elaClaimIds)).isNotNull();
    }
}