package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.ByteStreams;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.MockitoAnnotations;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.common.repository.SchoolRepository;
import org.opentestsystem.rdw.ingest.processor.service.OrganizationProcessor;

import java.io.IOException;
import java.util.Collection;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

public class OrganizationParserTest {

    @Captor
    private ArgumentCaptor<Collection<School>> schoolsCaptor;

    @Before
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void itShouldProcessJson() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/organization.json"));

        final SchoolRepository schoolRepository = mock(SchoolRepository.class);
        final OrganizationProcessor processor = new DefaultOrganizationProcessor(schoolRepository);

        assertThat(processor.process(payload, 1L)).isEqualTo("5 schools processed");
        verify(schoolRepository).upsert(schoolsCaptor.capture(), eq(1L));
        assertThat(schoolsCaptor.getValue()).hasSize(5);
    }

    @Test
    public void itShouldProcessCalpads() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/CA_schools.csv"));

        final SchoolRepository schoolRepository = mock(SchoolRepository.class);
        final OrganizationProcessor processor = new DefaultOrganizationProcessor(schoolRepository);

        assertThat(processor.process(payload, 1L)).isEqualTo("23 schools processed");
        verify(schoolRepository).upsert(schoolsCaptor.capture(), eq(1L));
        assertThat(schoolsCaptor.getValue()).hasSize(23);
    }

    @Test
    public void itShouldFailToProcessUnknownFormat() throws IOException {
        assertThat(processForImportException("/organization.xml"))
                .isEqualTo("invalid organization payload format");
    }

    @Test
    public void itShouldFailJsonForMissingParent() throws IOException {
        assertThat(processForImportException("/organization.noparent.json"))
                .isEqualTo("{\"messages\":[{\"elementName\":\"DS1111 district\",\"value\":\"DoesNotExist\",\"error\":\"unknown district [DoesNotExist]\"}]}");
    }

    @Test
    public void itShouldFailJsonForLongId() throws IOException {
        assertThat(processForImportException("/organization.idtoolong.json"))
                .isEqualTo("{\"messages\":[{\"elementName\":\"entityId\",\"value\":\"AnIdThatIsMoreThan40CharactersWhichIsTheLimit\",\"error\":\"string is too long, max length is 40\"}]}");
    }

    @Test
    public void itShouldFailJsonForLongName() throws IOException {
        assertThat(processForImportException("/organization.nametoolong.json"))
                .isEqualTo("{\"messages\":[{\"elementName\":\"entityName\",\"value\":\"District 9 - Prawn Town - With A Suffix That Makes The Name At Least A Little Longer Than 100 Characters\",\"error\":\"string is too long, max length is 100\"}]}");
    }

    @Test
    public void itShouldFailJsonForMissingName() throws IOException {
        assertThat(processForImportException("/organization.noname.json"))
                .isEqualTo("{\"messages\":[{\"elementName\":\"entityName\"},{\"elementName\":\"entityName\",\"error\":\"value may not be blank\"}]}");
    }

    @Test
    public void itShouldFailCalpadsWithErrors() throws IOException {
        assertThat(processForImportException("/CA_schools.baddata.csv")).isEqualTo("{\"messages\":["+
            "{\"elementName\":\"County-District Code\",\"value\":\"01000168901234567890123456789012345\",\"error\":\"string is too long, max length is 33\"},"+
            "{\"elementName\":\"Auth CDS Code\",\"value\":\"0161259010006556789012345678901234567890123\",\"error\":\"string is too long, max length is 40\"},"+
            "{\"elementName\":\"School Name\",\"value\":\"Lodge Pole Elementary (Alternative) with trailing text that makes the name much too long to be handled by our system\",\"error\":\"string is too long, max length is 100\"}"+
            "]}");
    }

    private String processForImportException(final String resource) throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream(resource));
        final SchoolRepository schoolRepository = mock(SchoolRepository.class);
        final OrganizationProcessor processor = new DefaultOrganizationProcessor(schoolRepository);

        try {
            processor.process(payload, 1L);
            fail("processing " + resource + " should have failed");
            return null;
        } catch (final ImportException e) {
            return e.getMessage();
        }
    }
}
