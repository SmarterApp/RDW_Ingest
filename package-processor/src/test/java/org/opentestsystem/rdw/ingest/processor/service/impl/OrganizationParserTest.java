package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.ByteStreams;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.District;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.common.repository.SchoolRepository;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.common.util.ParserHelper;
import org.opentestsystem.rdw.ingest.processor.service.OrganizationProcessor;
import org.opentestsystem.rdw.ingest.processor.service.impl.DefaultOrganizationProcessor.OrgTreeParser;

import java.io.IOException;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.fail;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

public class OrganizationParserTest {

    @Test
    public void itShouldUpsertSchools() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/organization.json"));

        final SchoolRepository schoolRepository = mock(SchoolRepository.class);
        final OrganizationProcessor processor = new DefaultOrganizationProcessor(schoolRepository);

        processor.process(payload, 1L);
        verify(schoolRepository, times(5)).upsert(any(School.class), eq(1L));
    }

    @Test
    public void itShouldFailForMissingParent() throws IOException {
        assertThat(processForImportException("/organization.noparent.json"))
                .isEqualTo("{\"messages\":[{\"elementName\":\"DS1111 district\",\"value\":\"DoesNotExist\",\"error\":\"unknown district [DoesNotExist]\"}]}");
    }

    @Test
    public void itShouldFailForLongId() throws IOException {
        assertThat(processForImportException("/organization.idtoolong.json"))
                .isEqualTo("{\"messages\":[{\"elementName\":\"entityId\",\"value\":\"AnIdThatIsMoreThan40CharactersWhichIsTheLimit\",\"error\":\"string is too long, max length is 40\"}]}");
    }

    @Test
    public void itShouldFailForLongName() throws IOException {
        assertThat(processForImportException("/organization.nametoolong.json"))
                .isEqualTo("{\"messages\":[{\"elementName\":\"entityName\",\"value\":\"District 9 - Prawn Town - With A Suffix That Makes The Name At Least A Little Longer Than 100 Characters\",\"error\":\"string is too long, max length is 100\"}]}");
    }

    @Test
    public void itShouldFailForMissingName() throws IOException {
        assertThat(processForImportException("/organization.noname.json"))
                .isEqualTo("{\"messages\":[{\"elementName\":\"entityName\"},{\"elementName\":\"entityName\",\"error\":\"value may not be blank\"}]}");
    }

    @Test
    public void testOrgParser() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/organization.noparent.json"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        final OrgTreeParser parser = new OrgTreeParser(new ParserHelper(errorCollector));
        parser.extractDistrictsAndSchools(payload);

        assertThat(errorCollector.size()).isEqualTo(1);

        final Map<String, School> schools = parser.getSchools();
        assertThat(schools).hasSize(5);

        final School ds9001 = schools.get("DS9001");
        assertThat(ds9001.getName()).isEqualTo("District 9 Institution 1");

        final District district9 = ds9001.getDistrict();
        assertThat(district9.getNaturalId()).isEqualTo("DISTRICT9");
        assertThat(district9.getName()).isEqualTo("District 9 - Prawn Town");
        assertThat(district9.getStateCode()).isEqualTo("CA");

        assertThat(schools.get("DS1111").getDistrict()).isNull();
    }

    private String processForImportException(final String resource) throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream(resource));
        final SchoolRepository schoolRepository = mock(SchoolRepository.class);
        final OrganizationProcessor processor = new DefaultOrganizationProcessor(schoolRepository);

        try {
            processor.process(payload, 1L);
            fail("processing " + resource + " should have failed");
            return null;
        } catch (final ImportException e) {
            return e.getMessage();
        }
    }
}
