package org.opentestsystem.rdw.ingest.processor.service.impl.validator;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.subject.ItemClaim;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.common.model.subject.Target;
import org.opentestsystem.rdw.ingest.processor.model.SubjectValidationContext;
import org.opentestsystem.rdw.ingest.processor.model.SubjectValidationFailure;

import java.util.concurrent.atomic.AtomicInteger;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;

public class ClaimValidatorTest {

    private AtomicInteger claimDisplayOrder;
    private SubjectValidationContext context;
    private ClaimValidator validator;

    @Before
    public void setup() {
        claimDisplayOrder = new AtomicInteger(1);
        context = new SubjectValidationContext();
        validator = new ClaimValidator();
    }

    @Test
    public void itShouldDetectDuplicateClaimCodes() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1").build(),
                        claim("claim_1").build(),
                        claim("claim_2").build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("Claim(claim_1)");
        assertThat(failure.getMessage()).isEqualTo("Duplicate code found: claim_1");
    }

    @Test
    public void itShouldDetectANonOrganizationalNonScorableClaim() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1").scorable(false).organizational(false).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("Claim(claim_1)");
        assertThat(failure.getMessage()).isEqualTo("Claim must be scorable, organizational, or both");
    }

    @Test
    public void itShouldDetectAMissingDisplayOrder() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1").displayOrder(null).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("Claim(claim_1)");
        assertThat(failure.getMessage()).isEqualTo("Scorable Claims must have a displayOrder defined");
    }

    @Test
    public void itShouldDetectADuplicateDisplayOrder() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1").displayOrder(1).build(),
                        claim("claim_2").displayOrder(1).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("Claim(claim_2)");
        assertThat(failure.getMessage()).isEqualTo("Duplicate display order found: 1");
    }

    @Test
    public void itShouldDetectTargetsOnNonOrganizationalClaims() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1")
                                .organizational(false)
                                .targets(of(
                                        target("A").build(),
                                        target("B").build()
                                ))
                                .build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("Claim(claim_1)");
        assertThat(failure.getMessage()).isEqualTo("A non-organizational claim cannot contain targets");
    }

    @Test
    public void itShouldDetectDuplicateTargetCodesWithinAClaim() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1")
                                .targets(of(
                                        target("A").build(),
                                        target("B").build(),
                                        target("A").build()
                                ))
                                .build(),
                        claim("claim_2")
                                .targets(of(
                                        target("A").build(),
                                        target("B").build()
                                ))
                                .build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getFailures()).hasSize(1);
        final SubjectValidationFailure failure = context.getFailures().get(0);
        assertThat(failure.getLocation()).isEqualTo("Claim(claim_1):Targets");
        assertThat(failure.getMessage()).isEqualTo("Duplicate target code found: A");
    }

    private ItemClaim.Builder claim(final String code) {
        return ItemClaim.builder()
                .code(code)
                .displayOrder(claimDisplayOrder.getAndIncrement());

    }

    private Target.Builder target(final String code) {
        return Target.builder()
                .code(code);
    }

}