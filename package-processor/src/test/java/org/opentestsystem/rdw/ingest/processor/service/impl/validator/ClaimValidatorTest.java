package org.opentestsystem.rdw.ingest.processor.service.impl.validator;

import org.junit.Before;
import org.junit.Test;

import java.util.concurrent.atomic.AtomicInteger;
import org.opentestsystem.rdw.common.model.subject.Claim;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.common.model.subject.Target;
import org.opentestsystem.rdw.ingest.common.util.DataElementError;
import org.opentestsystem.rdw.ingest.common.util.LocationAwareErrorCollector;

import static com.google.common.collect.ImmutableList.of;
import static org.assertj.core.api.Assertions.assertThat;

public class ClaimValidatorTest {

    private AtomicInteger claimOrder;
    private LocationAwareErrorCollector context;
    private ClaimValidator validator;

    @Before
    public void setup() {
        claimOrder = new AtomicInteger(1);
        context = new LocationAwareErrorCollector();
        validator = new ClaimValidator();
    }

    @Test
    public void itShouldDetectDuplicateClaimCodes() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1").build(),
                        claim("claim_1").build(),
                        claim("claim_2").build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("Claim(claim_1)");
        assertThat(failure.getError()).isEqualTo("Duplicate code found: claim_1");
    }

    @Test
    public void itShouldDetectANonOrganizationalNonScorableClaim() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1").scorable(false).organizational(false).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("Claim(claim_1)");
        assertThat(failure.getError()).isEqualTo("Claim must be scorable, organizational, or both");
    }

    @Test
    public void itShouldDetectAMissingDisplayOrder() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1").displayOrder(null).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("Claim(claim_1)");
        assertThat(failure.getError()).isEqualTo("Scorable Claims must have a displayOrder defined");
    }

    @Test
    public void itShouldDetectAMissingDataOrder() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1").dataOrder(null).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("Claim(claim_1)");
        assertThat(failure.getError()).isEqualTo("Scorable Claims must have a dataOrder defined");
    }

    @Test
    public void itShouldDetectADuplicateDisplayOrder() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1").displayOrder(1).build(),
                        claim("claim_2").displayOrder(1).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("Claim(claim_2)");
        assertThat(failure.getError()).isEqualTo("Duplicate displayOrder found: 1");
    }

    @Test
    public void itShouldDetectADuplicateDataOrder() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1").dataOrder(1).build(),
                        claim("claim_2").dataOrder(1).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("Claim(claim_2)");
        assertThat(failure.getError()).isEqualTo("Duplicate dataOrder found: 1");
    }

    @Test
    public void itShouldDetectTargetsOnNonOrganizationalClaims() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1")
                                .organizational(false)
                                .targets(of(
                                        target("A").build(),
                                        target("B").build()
                                ))
                                .build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("Claim(claim_1)");
        assertThat(failure.getError()).isEqualTo("A non-organizational claim cannot contain targets");
    }

    @Test
    public void itShouldDetectDuplicateTargetCodesWithinAClaim() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1")
                                .targets(of(
                                        target("A").build(),
                                        target("B").build(),
                                        target("A").build()
                                ))
                                .build(),
                        claim("claim_2")
                                .targets(of(
                                        target("A").build(),
                                        target("B").build()
                                ))
                                .build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("Claim(claim_1):Targets");
        assertThat(failure.getError()).isEqualTo("Duplicate target code found: A");
    }

    @Test
    public void itShouldOnlyAllowSixScorableClaims() {
        final Subject subject = Subject.builder()
                .claims(of(
                        claim("claim_1").build(),
                        claim("claim_2").build(),
                        claim("claim_3").build(),
                        claim("claim_4").build(),
                        claim("claim_5").build(),
                        claim("claim_6").build(),
                        claim("claim_7").build(),
                        claim("claim_8").scorable(false).build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("Claims");
        assertThat(failure.getError()).isEqualTo("A maximum number of 6 scorable claims are supported, but found: 7");
    }

    private Claim.Builder claim(final String code) {
        final int order = claimOrder.getAndIncrement();
        return Claim.builder()
                .code(code)
                .dataOrder(order)
                .displayOrder(order);

    }

    private Target.Builder target(final String code) {
        return Target.builder()
                .code(code);
    }

}
