package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseSubjectAssessmentType;
import org.opentestsystem.rdw.ingest.processor.repository.SubjectAssessmentTypeRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcSubjectAssessmentTypeRepository.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql("/LoadTestSubject.sql")
public class JdbcSubjectAssessmentTypeRepositoryIT {

    @Autowired
    public SubjectAssessmentTypeRepository repository;

    @Autowired
    public NamedParameterJdbcTemplate template;

    @Test
    public void itShouldHandleEmptyTypes() {
        assertThat(repository.findBySubject("unknown")).isEmpty();
    }

    @Test
    public void itShouldRetrieveAllTypesForASubject() {
        final WarehouseSubjectAssessmentType ica = repository.create(type().build());
        final WarehouseSubjectAssessmentType sum = repository.create(type().assessmentTypeCode("sum").build());

        assertThat(repository.findBySubject(ica.getSubjectCode()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnly(ica, sum);
    }

    @Test
    public void itShouldRetrieveBySubjectIdAndAsmtTypeId() {
        assertThat(repository.findBySubjectIdAndAsmtTypeId(-2, 2))
                .isEqualTo(WarehouseSubjectAssessmentType.builder()
                        .assessmentTypeCode("iab")
                        .subjectCode("test2")
                        .performanceLevelCount(10)
                        .performanceLevelCutoff(3)
                        .claimScorePerformanceLevelCount(6)
                        .build());
    }

    @Test
    public void itShouldReturnNullForUnknownSubjectAssessmentType() {
        assertThat(repository.findBySubjectIdAndAsmtTypeId(-42, 2)).isNull();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotCreateATypeForAnUnknownAssessmentType() {
        final WarehouseSubjectAssessmentType type = type()
                .assessmentTypeCode("unknown")
                .build();
        repository.create(type);
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotCreateATypeForAnUnknownSubject() {
        final WarehouseSubjectAssessmentType type = type()
                .subjectCode("unknown")
                .build();
        repository.create(type);
    }

    @Test
    public void itShouldUpdateAType() {
        final WarehouseSubjectAssessmentType ica = repository.create(type().build());
        final WarehouseSubjectAssessmentType update = WarehouseSubjectAssessmentType.builder()
                .copy(ica)
                .performanceLevelCount(5)
                .performanceLevelCutoff(4)
                .claimScorePerformanceLevelCount(5)
                .build();

        repository.update(update);

        assertThat(repository.findBySubject(update.getSubjectCode()))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnly(update);
    }

    @Test
    public void itShouldDeleteAType() {
        final WarehouseSubjectAssessmentType ica = repository.create(type().build());
        repository.delete(ica.getSubjectCode(), ica.getAssessmentTypeCode());

        assertThat(repository.findBySubject(ica.getSubjectCode())).isEmpty();
    }

    @Test
    public void itShouldDetermineATypeHasNoExams() {
        final WarehouseSubjectAssessmentType ica = repository.create(type().build());
        assertThat(repository.isReferenced(ica)).isFalse();
    }

    @Test
    @Sql("/PreloadExams.sql")
    public void itShouldDetermineATypeHasAssessments() {
        final WarehouseSubjectAssessmentType mathIab = type()
                .subjectCode("Math")
                .assessmentTypeCode("iab")
                .build();
        assertThat(repository.isReferenced(mathIab)).isTrue();
    }

    private WarehouseSubjectAssessmentType.Builder type() {
        return WarehouseSubjectAssessmentType.builder()
                .subjectCode("test")
                .assessmentTypeCode("ica")
                .performanceLevelCount(4)
                .performanceLevelCutoff(3)
                .claimScorePerformanceLevelCount(3);
    }
}