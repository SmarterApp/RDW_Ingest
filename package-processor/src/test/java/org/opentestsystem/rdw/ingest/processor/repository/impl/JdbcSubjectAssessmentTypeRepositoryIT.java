package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.ScoreType;
import org.opentestsystem.rdw.ingest.common.test.CachingTest;
import org.opentestsystem.rdw.ingest.processor.configuration.DataSourceConfiguration;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseSubjectAssessmentScoring;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseSubjectAssessmentType;
import org.opentestsystem.rdw.ingest.processor.repository.SubjectAssessmentTypeRepository;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = {
        JdbcSubjectAssessmentTypeRepository.class,
        DataSourceConfiguration.class,
        YamlPropertiesConfigurator.class
})
@Transactional
@CachingTest
@ActiveProfiles("test")
@Sql("/LoadTestSubject.sql")
public class JdbcSubjectAssessmentTypeRepositoryIT {

    private static final int EmptySubjectId = -1;
    private static final int TestSubjectId = -2;

    @Autowired
    public SubjectAssessmentTypeRepository repository;

    @Autowired
    public NamedParameterJdbcTemplate template;

    @Test
    public void itShouldHandleUnknownSubjects() {
        assertThat(repository.findBySubjectId(-42)).isEmpty();
    }

    @Test
    public void itShouldHandleTypeWithNoScoring() {
        // this is a bizarre corner case that will seldom happen in real life
        assertThat(repository.findBySubjectId(EmptySubjectId)).isEmpty();
    }

    @Test
    public void itShouldRetrieveAllTypesForASubject() {
        final WarehouseSubjectAssessmentType ica = repository.create(EmptySubjectId, WarehouseSubjectAssessmentType.builder()
                        .assessmentType(AssessmentType.ICA)
                        .build());
        final WarehouseSubjectAssessmentType sum = repository.create(EmptySubjectId, WarehouseSubjectAssessmentType.builder()
                        .assessmentType(AssessmentType.SUMMATIVE)
                        .build());

        assertThat(repository.findBySubjectId(EmptySubjectId))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnly(ica, sum);
    }

    @Test
    public void itShouldRetrieveBySubjectIdAndAsmtTypeId() {
        final WarehouseSubjectAssessmentType expected = WarehouseSubjectAssessmentType.builder()
                .assessmentType(AssessmentType.IAB)
                .scoring(WarehouseSubjectAssessmentScoring.builder()
                        .type(ScoreType.OVERALL)
                        .performanceLevelCount(10)
                        .performanceLevelCutoff(3)
                        .build())
                .build();

        assertThat(repository.findBySubjectIdAndAsmtTypeId(TestSubjectId, AssessmentType.IAB.id())).isEqualTo(expected);
    }

    @Test
    public void itShouldReturnNullForUnknownSubjectAssessmentType() {
        assertThat(repository.findBySubjectIdAndAsmtTypeId(-42, 2)).isNull();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldNotCreateATypeForAnUnknownSubject() {
        repository.create(-42, WarehouseSubjectAssessmentType.builder().assessmentType(AssessmentType.ICA).build());
    }

    @Test
    public void itShouldUpdateAType() {
        final WarehouseSubjectAssessmentType src = WarehouseSubjectAssessmentType.builder()
                .assessmentType(AssessmentType.ICA)
                .targetReport(true)
                .printedReport(true)
                .scoring(WarehouseSubjectAssessmentScoring.builder()
                        .type(ScoreType.OVERALL)
                        .minScore(1100d)
                        .maxScore(3500d)
                        .performanceLevelCount(3)
                        .performanceLevelCutoff(2)
                        .build())
                .build();
        repository.create(EmptySubjectId, src);
        assertThat(repository.findBySubjectId(EmptySubjectId))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnly(src);

        final WarehouseSubjectAssessmentType update = WarehouseSubjectAssessmentType.builder()
                .assessmentType(AssessmentType.ICA)
                .targetReport(true)
                .printedReport(false)
                .scoring(WarehouseSubjectAssessmentScoring.builder()
                        .type(ScoreType.OVERALL)
                        .minScore(1000d)
                        .maxScore(3500d)
                        .performanceLevelCount(4)
                        .performanceLevelCutoff(3)
                        .build())
                .build();
        repository.update(EmptySubjectId, update);
        assertThat(repository.findBySubjectId(EmptySubjectId))
                .usingRecursiveFieldByFieldElementComparator()
                .containsOnly(update);
    }

    @Test
    public void itShouldDeleteAType() {
        repository.create(EmptySubjectId, WarehouseSubjectAssessmentType.builder()
                .assessmentType(AssessmentType.ICA).targetReport(true).printedReport(true).build());
        assertThat(repository.findBySubjectId(EmptySubjectId)).hasSize(1);

        repository.delete(EmptySubjectId, AssessmentType.ICA);
        assertThat(repository.findBySubjectId(EmptySubjectId)).isEmpty();
    }

    @Test
    public void itShouldDetermineATypeHasNoExams() {
        assertThat(repository.isReferenced(EmptySubjectId, AssessmentType.ICA)).isFalse();
    }

    @Test
    @Sql("/PreloadExams.sql")
    public void itShouldDetermineATypeHasAssessments() {
        assertThat(repository.isReferenced(1, AssessmentType.IAB)).isTrue();
    }
}
