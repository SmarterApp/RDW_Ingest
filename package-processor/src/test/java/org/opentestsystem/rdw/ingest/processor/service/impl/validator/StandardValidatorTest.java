package org.opentestsystem.rdw.ingest.processor.service.impl.validator;

import com.google.common.collect.ImmutableList;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.model.subject.Standard;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.utils.DataElementError;
import org.opentestsystem.rdw.utils.LocationAwareErrorCollector;

import static org.assertj.core.api.Assertions.assertThat;

public class StandardValidatorTest {

    private LocationAwareErrorCollector context;
    private StandardValidator validator;

    @Before
    public void setup() {
        context = new LocationAwareErrorCollector();
        validator = new StandardValidator();
    }

    @Test
    public void itShouldDetectDuplicateStandardCodes() {
        final Subject subject = Subject.builder()
                .standards(ImmutableList.of(
                        standard("A").build(),
                        standard("B").build(),
                        standard("A").build()
                ))
                .build();

        validator.validate(context, subject);

        assertThat(context.getMessages()).hasSize(1);
        final DataElementError failure = context.getMessages().get(0);
        assertThat(failure.getElementName()).isEqualTo("Standards");
        assertThat(failure.getError()).isEqualTo("Duplicate standard code found: A");
    }

    private Standard.Builder standard(final String code) {
        return Standard.builder()
                .code(code);
    }
}