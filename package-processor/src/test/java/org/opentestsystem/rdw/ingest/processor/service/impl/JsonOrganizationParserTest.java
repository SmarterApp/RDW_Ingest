package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.io.ByteStreams;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.common.model.District;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.common.util.ParserHelper;

import java.io.IOException;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

public class JsonOrganizationParserTest {

    @Test
    public void testOrgParser() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/organization.noparent.json"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        final JsonOrganizationParser parser = new JsonOrganizationParser();
        parser.parse(payload, new ParserHelper(errorCollector));

        assertThat(errorCollector.size()).isEqualTo(1);

        final Map<String, School> schools = parser.getSchools();
        assertThat(schools).hasSize(5);

        final School ds9001 = schools.get("DS9001");
        assertThat(ds9001.getName()).isEqualTo("District 9 Institution 1");

        final District district9 = ds9001.getDistrict();
        assertThat(district9.getNaturalId()).isEqualTo("DISTRICT9");
        assertThat(district9.getName()).isEqualTo("District 9 - Prawn Town");
        assertThat(district9.getStateCode()).isEqualTo("CA");

        assertThat(schools.get("DS1111").getDistrict()).isNull();
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowForUnknownFormatCsv() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/CA_schools.csv"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        final JsonOrganizationParser parser = new JsonOrganizationParser();
        parser.parse(payload, new ParserHelper(errorCollector));
    }

    @Test(expected = IllegalArgumentException.class)
    public void itShouldThrowForUnknownFormatXml() throws IOException {
        final byte[] payload = ByteStreams.toByteArray(this.getClass().getResourceAsStream("/organization.xml"));
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        final JsonOrganizationParser parser = new JsonOrganizationParser();
        parser.parse(payload, new ParserHelper(errorCollector));
    }

}
