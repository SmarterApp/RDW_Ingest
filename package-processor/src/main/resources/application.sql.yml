sql:
  #JdbcAssessmentTypeRepository
  asmtType:
    findIdByCode: >-
      SELECT id FROM asmt_type WHERE code= :code

  #JdbcGradeRepository
  grade:
    findIdByCode: >-
      SELECT id FROM grade WHERE code= :code

  #JdbcAssessmentPackageRepository
  assessment:
    findOneByNaturalId: >-
        SELECT a.id, a.natural_id, a.grade_id, a.type_id, a.subject_id, a.school_year, a.name, a.label, a.version, s.cut_point_1, s.cut_point_2, s.cut_point_3, s.min_score, s.max_score
           FROM asmt a JOIN asmt_score s ON s.asmt_id = a.id WHERE a.natural_id= :natural_id

    update: >-
       UPDATE asmt a
        SET
          a.school_year = :schoolYear,
          a.name = :name,
          a.label = :label,
          a.version = :version,
          a.update_import_id = :update_import_id
        WHERE a.id = :id

    create: >-
        INSERT INTO asmt (natural_id, grade_id, type_id, subject_id, school_year, name, label, version, import_id, update_import_id) VALUES
                         (:naturalId, :gradeId, :typeId, :subjectId, :schoolYear, :name, :label, :version, :import_id, :update_import_id)

    assessmentScore:
       create: >-
         INSERT INTO asmt_score (asmt_id, cut_point_1, cut_point_2, cut_point_3, min_score, max_score) SELECT (SELECT id FROM asmt WHERE natural_id=:asmtId), :cutPoint1, :cutPoint2, :cutPoint3, :minScore, :maxScore

       update: >-
         UPDATE asmt_score s
           SET
             s.cut_point_1 = :cutPoint1,
             s.cut_point_2 = :cutPoint2,
             s.cut_point_3 = :cutPoint3,
             s.min_score = :minScore,
             s.max_score = :maxScore
          WHERE s.asmt_id = :asmt_id

    item:
      findAll: >-
        SELECT i.id, i.claim_id, i.target_id, i.natural_id, i.math_practice, i.allow_calc, i.dok_id, i.position, i.difficulty, i.max_points, i.field_test, i.active, i.type, i.options_count, i.answer_key, i.performance_task_writing_type
          FROM item i WHERE i.asmt_id= :asmt_id

      create: >-
        INSERT INTO item (asmt_id, claim_id, target_id, natural_id, math_practice, allow_calc, dok_id, position, difficulty, max_points, field_test, active, type, options_count, answer_key, performance_task_writing_type)
          select (select id as asmt_id from asmt where natural_id=:asmtId), :claimId, :targetId, :itemId, :mathPractice, :allowCalc, :dokId, :position, :difficulty, :maxPoints, :fieldTest, :active, :type, :optionsCount, :answerKey, :performance_task_writing_type

      update: >-
        UPDATE item i
          SET
             i.claim_id = :claimId,
             i.target_id = :targetId,
             i.math_practice = :mathPractice,
             i.allow_calc = :allowCalc,
             i.dok_id = :dokId,
             i.position = :position,
             i.difficulty = :difficulty,
             i.max_points = :maxPoints,
             i.field_test = :fieldTest,
             i.active = :active,
             i.type = :type,
             i.options_count= :optionsCount,
             i.answer_key = :answerKey,
             i.performance_task_writing_type = :performance_task_writing_type
          WHERE i.id = :id

      updateDifficultyCode:
        update item i
          join asmt a on i.asmt_id = a.id
          join item_difficulty_cuts c on a.subject_id = c.subject_id and a.grade_id = c.grade_id
        set
          i.difficulty_code = if(i.difficulty < c.moderate_low_end, 'E', if(i.difficulty < c.difficult_low_end, 'M', 'D' ))
        where a.natural_id in (:asmt_natural_ids)

      commonCoreStandard:
        findAll: >-
              SELECT iccs.item_id, iccs.common_core_standard_id FROM item_common_core_standard iccs JOIN item i on i.id = iccs.item_id  WHERE i.asmt_id= :asmt_id

        create: >-
          INSERT INTO item_common_core_standard(item_id, common_core_standard_id)
              SELECT (SELECT i.id from item i join asmt a on i.asmt_id = a.id where i.natural_id = :item_natural_id and a.natural_id=:asmtId) , :common_core_standard_id

        delete: >-
          DELETE FROM item_common_core_standard where item_id in (:item_ids)

      otherTarget:
        create: >-
          INSERT INTO item_other_target(item_id, target_id)
            SELECT (SELECT i.id from item i join asmt a on i.asmt_id = a.id  where i.natural_id = :item_natural_id and a.natural_id=:asmtId), :target_id

        findAll: >-
          SELECT iot.item_id, iot.target_id FROM item_other_target iot JOIN item i on i.id = iot.item_id WHERE i.asmt_id= :asmt_id

        delete: >-
          DELETE FROM item_other_target where item_id in (:item_ids)

  #JdbcClaimRepository
  claim:
    findIdBySubjectAndCode: >-
      SELECT c.id
      FROM claim c
        JOIN subject s ON s.id = c.subject_id
      WHERE c.code = :code
        AND s.id = :subject_id

    findCodesBySubject: >-
      SELECT c.code
      FROM claim c
        JOIN subject s ON s.id = c.subject_id
      WHERE s.code = :subject_code

    insert: >-
      INSERT INTO claim (subject_id, code)
        SELECT
          s.id,
          :claim_code
        FROM subject s
        WHERE s.code = :subject_code

    delete: >-
      DELETE c FROM claim c
        JOIN subject s ON s.id = c.subject_id
      WHERE s.code = :subject_code
        AND c.code = :claim_code

    hasItems: >-
      SELECT EXISTS(
        SELECT 1
        FROM item i
          JOIN asmt a ON a.id = i.asmt_id
          JOIN subject s ON s.id = a.subject_id
          JOIN claim c ON c.id = i.claim_id
        WHERE s.code = :subject_code
          AND c.code = :claim_code
        LIMIT 1)

  #JdbcDepthOfKnowledgeRepository
  dok:
    findIdByLevelAndSubject: >-
      SELECT id FROM depth_of_knowledge WHERE level= :level and subject_id = :subjectId

    findBySubject: >-
      SELECT
        dok.id,
        dok.level,
        dok.reference
      FROM depth_of_knowledge dok
        JOIN subject s ON s.id = dok.subject_id
      WHERE s.code = :subject_code

    insert: >-
      INSERT INTO depth_of_knowledge (level, reference, subject_id)
        SELECT
          :level,
          :reference,
          s.id
        FROM subject s
        WHERE s.code = :subject_code

    hasItems: >-
      SELECT
        i.dok_id
      FROM item i
      WHERE i.dok_id IN (:depth_ids)
      LIMIT 1

    delete: >-
      DELETE FROM depth_of_knowledge
      WHERE id IN (:depth_ids)

    update: >-
      UPDATE depth_of_knowledge
      SET reference = :reference
      WHERE id = :depth_id

  itemDifficulty:
    findBySubject: >-
      SELECT
        idc.id,
        idc.moderate_low_end,
        idc.difficult_low_end,
        g.code
      FROM item_difficulty_cuts idc
        JOIN subject s on s.id = idc.subject_id
        JOIN grade g on g.id = idc.grade_id
      WHERE s.code = :subject_code

    insert: >-
      INSERT INTO item_difficulty_cuts (subject_id, grade_id, moderate_low_end, difficult_low_end)
        SELECT
          s.id,
          g.id,
          :moderate_low_end,
          :difficult_low_end
        FROM subject s
          JOIN grade g ON g.code = :grade_code
        WHERE s.code = :subject_code

    delete: >-
      DELETE FROM item_difficulty_cuts
      WHERE id IN (:difficulty_ids)

    hasItems: >-
      SELECT
        idc.id
      FROM item_difficulty_cuts idc
        JOIN subject s ON s.id = idc.subject_id
        JOIN asmt a ON a.subject_id = s.id AND a.grade_id = idc.grade_id
      WHERE idc.id IN (:difficulty_ids)
      LIMIT 1

    update: >-
      UPDATE item_difficulty_cuts
      SET
        moderate_low_end = :moderate_low_end,
        difficult_low_end = :difficult_low_end
      WHERE id = :id

  #JdbcMathPracticeRepository
  mathPractice:
    findByPractice: >-
      SELECT practice FROM math_practice WHERE practice= :practice

  #JdbcTargetRepository
  target:
    findIdByNaturalIdAndClaimId: >-
      SELECT id FROM target WHERE natural_id= :naturalId AND claim_id = :claimId

    findBySubject: >-
      SELECT
        t.id,
        t.natural_id,
        c.code as claim_code
      FROM target t
        JOIN claim c ON c.id = t.claim_id
        JOIN subject s ON s.id = c.subject_id
      WHERE s.code = :subject_code

    insert: >-
      INSERT INTO target (claim_id, natural_id)
        SELECT
          c.id,
          ?
        FROM claim c
          JOIN subject s ON s.id = c.subject_id
        WHERE c.code = ?
          AND s.code = ?

    delete: >-
      DELETE FROM target
      WHERE id IN (:target_ids)

    hasItems: >-
      SELECT
        i.target_id
      FROM item i
      WHERE i.target_id IN (:target_ids)
      UNION
      SELECT
        iot.target_id
      FROM item_other_target iot
      WHERE iot.target_id IN (:target_ids)
      LIMIT 1

  #JdbcCommonCoreStandardRepository
  commonCoreStandard:
    findIdsBySubjectIdAndNaturalIds: >-
       SELECT id FROM common_core_standard WHERE natural_id in (:naturalIds) AND subject_id = :subjectId

  #JdbcAccommodationTranslationRepository
  accommodationTranslation:
    accommodation:
      create: >-
        INSERT IGNORE INTO accommodation (code) VALUES (:code)

    upsert: >-
      INSERT INTO accommodation_translation (accommodation_id, language_code, label)
         SELECT (SELECT id AS accommodation_id FROM accommodation WHERE code = :accCode), :languageCode, :label
           ON DUPLICATE KEY UPDATE label=:label

  status:
    readTest: >-
      SELECT code FROM asmt_type

    writeTest: >-
      INSERT INTO asmt_type (id, code, name) VALUES (47, 'tst', 'status test')

    writeRevert: >-
      DELETE FROM asmt_type WHERE id = 47

  #JdbcSchoolRepository
  district:
    findAll: >-
      SELECT id, natural_id, name, external_id FROM district
    insert: >-
      INSERT INTO district (natural_id, name, external_id) VALUES (:natural_id, :name, :external_id)
    update: >-
      UPDATE district SET name = :name, external_id = :external_id WHERE id = :id

  districtGroup:
    findAll: >-
      SELECT id, natural_id, name, external_id FROM district_group
    insert: >-
      INSERT INTO district_group (natural_id, name, external_id) VALUES (:natural_id, :name, :external_id)
    update: >-
      UPDATE district_group SET name = :name, external_id = :external_id WHERE id = :id

  school:
    findAll: >-
      SELECT id, natural_id, name, external_id, district_id, district_group_id, school_group_id
        FROM school
    insert: >-
      INSERT INTO school (natural_id, name, external_id, district_id, district_group_id, school_group_id, import_id, update_import_id)
        VALUES (:natural_id, :name, :external_id, :district_id, :district_group_id, :school_group_id, :import_id, :import_id)
    update: >-
      UPDATE school SET
          name = :name,
          external_id = :external_id,
          district_id = :district_id,
          district_group_id = :district_group_id,
          school_group_id = :school_group_id,
          update_import_id = :update_import_id
        WHERE id = :id

  schoolGroup:
    findAll: >-
      SELECT id, natural_id, name, external_id FROM school_group
    insert: >-
      INSERT INTO school_group (natural_id, name, external_id) VALUES (:natural_id, :name, :external_id)
    update: >-
      UPDATE school_group SET name = :name, external_id = :external_id WHERE id = :id

  scorableClaim:
    findBySubject: >-
      SELECT
        scs.id,
        scs.code,
        scs.display_order
      FROM subject_claim_score scs
        JOIN subject s ON s.id = scs.subject_id
      WHERE s.code = :subject_code

    insert: >-
      INSERT INTO subject_claim_score (subject_id, code, display_order)
        SELECT
          s.id,
          :claim_code,
          :display_order
        FROM subject s
        WHERE s.code = :subject_code

    update: >-
      UPDATE subject_claim_score
      SET display_order = :display_order
      WHERE id = :id

    delete: >-
      DELETE FROM subject_claim_score
      WHERE id IN (:ids)

    hasAssessment: >-
      SELECT
        scs.id
      FROM subject_claim_score scs
        JOIN asmt a ON a.subject_id = scs.subject_id
      WHERE scs.id IN (:ids)
      LIMIT 1

  #JdbcPercentileRepository
  percentile:
    create: >-
      INSERT INTO percentile (asmt_id, start_date, end_date, count, mean, standard_deviation, min_score, max_score, import_id, update_import_id) VALUES
        (:asmt_id, :start_date, :end_date, :count, :mean, :standard_deviation, :min_score, :max_score, :import_id, :update_import_id)

    update: >-
      UPDATE percentile p
       SET
         p.count = :count,
         p.mean = :mean,
         p.standard_deviation = :standard_deviation,
         p.min_score = :min_score,
         p.max_score = :max_score,
         p.update_import_id = :update_import_id
       WHERE p.id = :id

    findIdByKey: >-
      SELECT id FROM percentile WHERE asmt_id=:asmt_id AND start_date=:start_date AND end_date=:end_date

    findIdsByDateOverlap: >-
      SELECT id FROM percentile WHERE asmt_id=:asmt_id AND (:end_date >= start_date AND end_date >= :start_date)

    percentileScore:
      create: >-
        INSERT INTO percentile_score (percentile_id, percentile_rank, score, min_inclusive, max_exclusive)
        SELECT (SELECT id FROM percentile WHERE asmt_id=:asmt_id AND start_date=:start_date AND end_date=:end_date),
                :percentile_rank, :score, :min_inclusive, :max_exclusive

      insert: >-
        INSERT INTO percentile_score (percentile_id, percentile_rank, score, min_inclusive, max_exclusive) VALUES
          (:percentile_id, :percentile_rank, :score, :min_inclusive, :max_exclusive)

      delete: >-
        DELETE FROM percentile_score WHERE percentile_id=:percentile_id

  standard:
    findBySubject: >-
      SELECT
        ccs.id,
        ccs.natural_id
      FROM common_core_standard ccs
        JOIN subject s ON s.id = ccs.subject_id
      WHERE s.code = :subject_code

    insert: >-
      INSERT INTO common_core_standard (subject_id, natural_id)
        SELECT
          s.id,
          :standard_code
        FROM subject s
        WHERE s.code = :subject_code

    delete: >-
      DELETE FROM common_core_standard
      WHERE id IN (:ids)

    hasItem: >-
      SELECT
        iccs.common_core_standard_id
      FROM item_common_core_standard iccs
      WHERE iccs.common_core_standard_id IN (:ids)
      LIMIT 1

  subject:
    findIdByCode: >-
      SELECT id FROM subject WHERE code = :code

    insert: >-
      INSERT INTO subject (code, import_id, update_import_id) VALUES (:code, :import_id, :import_id)

    update: >-
      UPDATE subject SET update_import_id = :update_import_id WHERE code = :code

    assessmentType:
      findBySubject: >-
        SELECT
          at.code as asmt_type_code,
          s.code as subject_code,
          sat.performance_level_count,
          sat.performance_level_standard_cutoff,
          sat.sub_score_performance_level_count,
          sat.sub_score_performance_level_standard_cutoff
        FROM subject_asmt_type sat
          JOIN asmt_type at ON at.id = sat.asmt_type_id
          JOIN subject s ON s.id = sat.subject_id
        WHERE s.code = :subject_code

      insert: >-
        INSERT INTO subject_asmt_type (asmt_type_id, subject_id, performance_level_count, performance_level_standard_cutoff, sub_score_performance_level_count, sub_score_performance_level_standard_cutoff)
          SELECT
            asmt_type.id,
            subject.id,
            :performance_level_count,
            :performance_level_standard_cutoff,
            :sub_score_performance_level_count,
            :sub_score_performance_level_standard_cutoff
          FROM subject
            JOIN asmt_type ON asmt_type.code = :asmt_type_code
          WHERE subject.code = :subject_code

      update: >-
        UPDATE subject_asmt_type
          JOIN subject ON subject.id = subject_asmt_type.subject_id
          JOIN asmt_type ON asmt_type.id = subject_asmt_type.asmt_type_id
        SET
          subject_asmt_type.performance_level_count = :performance_level_count,
          subject_asmt_type.performance_level_standard_cutoff = :performance_level_standard_cutoff,
          subject_asmt_type.sub_score_performance_level_count = :sub_score_performance_level_count,
          subject_asmt_type.sub_score_performance_level_standard_cutoff = :sub_score_performance_level_standard_cutoff
        WHERE subject.code = :subject_code
          AND asmt_type.code = :asmt_type_code

      delete: >-
        DELETE subject_asmt_type FROM subject_asmt_type
          JOIN subject ON subject.id = subject_asmt_type.subject_id
          JOIN asmt_type ON asmt_type.id = subject_asmt_type.asmt_type_id
        WHERE subject.code = :subject_code
          AND asmt_type.code = :asmt_type_code

      hasAssessments: >-
        SELECT EXISTS(
          SELECT 1
          FROM asmt a
            JOIN subject s ON s.id = a.subject_id
            JOIN asmt_type at ON at.id = a.type_id
          WHERE s.code = :subject_code
            AND at.code = :asmt_type_code
          LIMIT 1)

  subjectTranslation:
    findBySubject: >-
      SELECT
        st.label_code,
        st.label
      FROM subject_translation st
        JOIN subject s ON s.id = st.subject_id
      WHERE s.code = :subject_code

    insert: >-
      INSERT INTO subject_translation (subject_id, label_code, label)
        SELECT
          s.id,
          :label_code,
          :label
        FROM subject s
        WHERE s.code = :subject_code

    update: >-
      UPDATE subject_translation st
        JOIN subject s ON s.id = st.subject_id
      SET st.label = :label
      WHERE st.label_code = :label_code
        AND s.code = :subject_code

    delete: >-
      DELETE st FROM subject_translation st
        JOIN subject s ON s.id = st.subject_id
      WHERE s.code = :subject_code
        AND st.label_code IN (:label_codes)