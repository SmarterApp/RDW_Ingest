package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Item;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

@Repository
class JdbcAssessmentPackageRepository implements AssessmentPackageRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.item.create}")
    private String sqlItemCreate;

    @Value("${sql.item.updateDifficultyCode}")
    private String sqlUpdateDifficultyCode;

    @Value("${sql.item.commonCoreStandardCreate}")
    private String sqlItemCommonCoreStandardCreate;

    @Value("${sql.item.otherTargetCreate}")
    private String sqlItemOtherTargetCreate;

    @Value("${sql.assessment.assessmentScore.create}")
    private String sqlAssessmentScoreCreate;

    @Value("${sql.assessment.create}")
    private String sqlAssessmentCreate;

    @Autowired
    public JdbcAssessmentPackageRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    @Transactional
    public void createPackage(final Collection<Assessment> assessments, final long importId) {
        if (assessments.isEmpty()) return;

        final List<String> assessmentNaturalIds = newArrayList();
        final List<MapSqlParameterSource> asmtBatchParams = newArrayList();
        final List<MapSqlParameterSource> scoreBatchParams = newArrayList();
        final List<MapSqlParameterSource> itemBatchParams = newArrayList();
        final List<MapSqlParameterSource> itemCommonCoreBatchParams = newArrayList();
        final List<MapSqlParameterSource> otherTargetBatchParams = newArrayList();

        for (final Assessment assessment : assessments) {
            assessmentNaturalIds.add(assessment.getNaturalId());
            asmtBatchParams.add(newAssessmentParameterSource(assessment, importId));
            scoreBatchParams.add(newScoreParam(assessment));

            for (final Item item : assessment.getItems()) {
                itemBatchParams.add(newItemParam(item, assessment.getNaturalId()));

                for (final Integer commonCore : item.getCommonCoreStandards()) {
                    itemCommonCoreBatchParams.add(new MapSqlParameterSource()
                            .addValue("item_natural_id", item.getNaturalId())
                            .addValue("asmtId", assessment.getNaturalId())
                            .addValue("common_core_standard_id", commonCore));
                }

                for (final Integer otherTarget : item.getOtherTargets()) {
                    otherTargetBatchParams.add(new MapSqlParameterSource()
                            .addValue("item_natural_id", item.getNaturalId())
                            .addValue("asmtId", assessment.getNaturalId())
                            .addValue("target_id", otherTarget));
                }
            }
        }
        jdbcTemplate.batchUpdate(sqlAssessmentCreate, asmtBatchParams.toArray(new MapSqlParameterSource[asmtBatchParams.size()]));
        if (!scoreBatchParams.isEmpty()) jdbcTemplate.batchUpdate(sqlAssessmentScoreCreate, scoreBatchParams.toArray(new MapSqlParameterSource[scoreBatchParams.size()]));
        if (!itemBatchParams.isEmpty()) jdbcTemplate.batchUpdate(sqlItemCreate, itemBatchParams.toArray(new MapSqlParameterSource[itemBatchParams.size()]));
        if (!itemCommonCoreBatchParams.isEmpty()) jdbcTemplate.batchUpdate(sqlItemCommonCoreStandardCreate, itemCommonCoreBatchParams.toArray(new MapSqlParameterSource[itemCommonCoreBatchParams.size()]));
        if (!otherTargetBatchParams.isEmpty()) jdbcTemplate.batchUpdate(sqlItemOtherTargetCreate, otherTargetBatchParams.toArray(new MapSqlParameterSource[otherTargetBatchParams.size()]));
        if (!assessmentNaturalIds.isEmpty()) jdbcTemplate.update(sqlUpdateDifficultyCode, new MapSqlParameterSource("asmt_natural_ids", assessmentNaturalIds));
    }

    private MapSqlParameterSource newAssessmentParameterSource(final Assessment assessment, final long importId) {
        return new MapSqlParameterSource()
                .addValue("naturalId", assessment.getNaturalId())
                .addValue("gradeId", assessment.getGradeId())
                .addValue("typeId", assessment.getTypeId())
                .addValue("subjectId", assessment.getSubjectId()) //yep, magic numbers
                .addValue("schoolYear", assessment.getsSchoolYear())
                .addValue("name", assessment.getName())
                .addValue("label", assessment.getLabel())
                .addValue("version", assessment.getVersion())
                .addValue("import_id", importId)
                .addValue("update_import_id", importId);
    }

    private MapSqlParameterSource newScoreParam(final Assessment assessment) {
        return new MapSqlParameterSource()
                .addValue("asmtId", assessment.getNaturalId())
                .addValue("minScore", assessment.getMinScore())
                .addValue("maxScore", assessment.getMaxScore())
                .addValue("cutPoint1", assessment.getCutPoint1())
                .addValue("cutPoint2", assessment.getCutPoint2())
                .addValue("cutPoint3", assessment.getCutPoint3());
    }

    private MapSqlParameterSource newItemParam(final Item item, final String asmtNaturalId) {
        return new MapSqlParameterSource()
                .addValue("claimId", item.getClaimId())
                .addValue("targetId", item.getTargetId())
                .addValue("itemId", item.getNaturalId())
                .addValue("asmtId", asmtNaturalId)
                .addValue("dokId", item.getDokId())
                .addValue("position", item.getPosition())
                .addValue("difficulty", item.getDifficulty())
                .addValue("maxPoints", item.getMaxPoints())
                .addValue("mathPractice", item.getMathPractice())
                .addValue("allowCalc", item.getAllowCalculator());
    }
}
