package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.model.Student;
import org.opentestsystem.rdw.ingest.processor.repository.StudentRepository;
import org.opentestsystem.rdw.multitenant.cache.TenantCacheable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.time.Instant;
import java.util.Collection;
import java.util.Optional;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.apache.commons.lang3.StringUtils.trimToNull;

@Repository
public class JdbcStudentRepository implements StudentRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.student.update}")
    private String sqlStudentUpdate;

    @Value("${sql.student.findBySsid}")
    private String sqlFindIdBySsid;

    @Autowired
    JdbcStudentRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public void update(Collection<Student> students, long importId) {
        if (!students.isEmpty()) {
            jdbcTemplate.batchUpdate(sqlStudentUpdate, students.stream()
                .filter(s -> isNotBlank(s.getSsid()))
                .map((Student student) -> toSqlParams(student, Optional.empty()))
                .map(params -> params.addValue("import_id", importId))
                .toArray(MapSqlParameterSource[]::new));
        }
    }

    @Override
    @TenantCacheable("ssid")
    public Integer findBySsid(final String ssid) {
        try {
            return jdbcTemplate.queryForObject(sqlFindIdBySsid, new MapSqlParameterSource("ssid", ssid), Integer.class);
        } catch (final EmptyResultDataAccessException ignore) {
            throw new IllegalArgumentException("unknown ssid code [" +ssid + "]");
        }
    }

    private static MapSqlParameterSource toSqlParams(final Student student, final Optional<Instant> updateTime) {
        return new MapSqlParameterSource()
            .addValue("ssid", trimToNull(student.getSsid()))
            .addValue("first_name", trimToNull(student.getFirstName()))
            .addValue("last_name", trimToNull(student.getLastOrSurname()))
            .addValue("middle_name", trimToNull(student.getMiddleName()))
            .addValue("alias_name", trimToNull(student.getAliasName()))
            .addValue("gender_id", student.getGenderId())
            .addValue("birthday", student.getBirthday())
            .addValue("first_entry", student.getFirstEntryIntoUSSchoolAt())
            .addValue("lep_entry", student.getLepEntryAt())
            .addValue("lep_exit", student.getLepExitAt())
            .addValue("school_id", student.getSchoolId())
            .addValue("latest_info_update", updateTime.orElse(Instant.now()));
    }
}
