package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.repository.SubjectRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import static org.opentestsystem.rdw.ingest.common.util.JdbcUtil.getNullable;

/**
 * JDBC-backed implementation of a SubjectRepository
 */
@Repository
class JdbcSubjectRepository implements SubjectRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.subject.findIdByCode}")
    private String sqlFindIdByCode;

    @Value("${sql.subject.insert}")
    private String sqlCreateSubject;

    @Value("${sql.subject.update}")
    private String sqlUpdateSubject;

    @Autowired
    public JdbcSubjectRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    @Cacheable(value = "subject")
    public Integer findIdByCode(final String code) {
        try {
            return jdbcTemplate.queryForObject(sqlFindIdByCode,
                    new MapSqlParameterSource("code", code),
                    (row, rowNum) -> getNullable(row, row.getInt("id")));
        } catch (final EmptyResultDataAccessException ignore) {
            return null;
        }
    }

    @Override
    public Integer create(final String code, final long importId) {
        final KeyHolder keyHolder = new GeneratedKeyHolder();
        jdbcTemplate.update(sqlCreateSubject,
                new MapSqlParameterSource()
                        .addValue("code", code)
                        .addValue("import_id", importId),
                keyHolder);

        return keyHolder.getKey().intValue();
    }

    @Override
    public void update(final String code, final long importId) {
        jdbcTemplate.update(sqlUpdateSubject,
                new MapSqlParameterSource()
                        .addValue("code", code)
                        .addValue("update_import_id", importId));
    }


}
