package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.common.model.subject.Standard;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseStandard;
import org.opentestsystem.rdw.ingest.processor.repository.CommonCoreStandardRepository;
import org.opentestsystem.rdw.ingest.processor.service.SubjectStandardService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static com.google.common.collect.Lists.newArrayList;

/**
 * Default implementation of a SubjectStandardService
 */
@Service
class DefaultSubjectStandardService implements SubjectStandardService {

    private final CommonCoreStandardRepository repository;

    @Autowired
    public DefaultSubjectStandardService(final CommonCoreStandardRepository repository) {
        this.repository = repository;
    }

    @Override
    public void upsert(final Subject subject) {
        final String subjectCode = subject.getCode();
        final Map<String, WarehouseStandard> existingByCode = repository.findBySubject(subjectCode).stream()
                .collect(Collectors.toMap(
                        WarehouseStandard::getCode,
                        standard -> standard
                ));

        final List<String> newStandards = newArrayList();
        for (final Standard standard : subject.getStandards()) {
            if (existingByCode.remove(standard.getCode()) == null) {
                newStandards.add(standard.getCode());
            }
        }
        repository.create(subjectCode, newStandards);

        if (existingByCode.isEmpty()) return;

        final Map<Integer, WarehouseStandard> staleById = existingByCode.values().stream()
                .collect(Collectors.toMap(
                        WarehouseStandard::getId,
                        standard -> standard
                ));
        final Integer referencedId = repository.hasItem(staleById.keySet());
        if (referencedId != null) {
            final WarehouseStandard referencedStandard = staleById.get(referencedId);
            throw new IllegalArgumentException("Cannot remove standard: " + referencedId +
                    " code: " + referencedStandard.getCode() +
                    " because it is referenced by an assessment item.");
        }
        repository.delete(staleById.keySet());
    }
}
