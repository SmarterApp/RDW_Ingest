package org.opentestsystem.rdw.ingest.processor;

import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.processor.service.AccommodationsProcessor;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentPackageProcessor;
import org.opentestsystem.rdw.ingest.processor.service.OrganizationProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.Message;

import java.util.function.ObjLongConsumer;

@EnableBinding(ImportPayloadSink.class)
public class PackageProcessorConfiguration {
    private static final Logger logger = LoggerFactory.getLogger(PackageProcessorConfiguration.class);

    private final ImportRepository importRepository;
    private final AssessmentPackageProcessor packageProcessor;
    private final AccommodationsProcessor accommodationsProcessor;
    private final OrganizationProcessor organizationProcessor;

    @Autowired
    public PackageProcessorConfiguration(final ImportRepository importRepository,
                                         final AssessmentPackageProcessor packageProcessor,
                                         final AccommodationsProcessor accommodationsProcessor,
                                         final OrganizationProcessor organizationProcessor) {
        this.importRepository = importRepository;
        this.packageProcessor = packageProcessor;
        this.accommodationsProcessor = accommodationsProcessor;
        this.organizationProcessor = organizationProcessor;
    }


    @ServiceActivator(inputChannel = ImportPayloadSink.CODES_INPUT)
    public void processCodes(final Message<?> message) {
        handleIncomingMessage(message, (payload, importId) -> accommodationsProcessor.process(payload));
    }

    @ServiceActivator(inputChannel = ImportPayloadSink.ORGANIZATION_INPUT)
    public void processOrganization(final Message<?> message) {
        handleIncomingMessage(message, organizationProcessor::process);
    }

    @ServiceActivator(inputChannel = ImportPayloadSink.PACKAGE_INPUT)
    public void processPackage(final Message<?> message) {
        handleIncomingMessage(message, packageProcessor::process);
    }

    private void handleIncomingMessage(final Message<?> message, final ObjLongConsumer<byte[]> processor) {
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(message);
        final byte[] payload = (byte[]) message.getPayload();
        final long importId = accessor.getImportId();

        logger.info("received " + accessor.getContent());
        try {
            processor.accept(payload, importId);
            importRepository.updateStatusAndMessageById(importId, ImportStatus.PROCESSED, null);
        } catch (final ImportException ie) {
            logger.error("failed with an import error: " + ie);
            importRepository.updateStatusAndMessageById(importId, ie.getStatus(), ie.getMessage());
        } catch (final Exception e) {
            logger.error("failed with an unexpected error: " + e);
            importRepository.updateStatusAndMessageById(importId, ImportStatus.BAD_DATA, e.getMessage());
        }
    }

}
