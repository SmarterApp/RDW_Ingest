package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.repository.MathPracticeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

@Repository
class JdbcMathPracticeRepository implements MathPracticeRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.mathPractice.findByPractice}")
    private String findByPracticeSql;

    @Autowired
    public JdbcMathPracticeRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * Finds an practice of the target by its code
     *
     * @param practice the practice of the math practice
     * @return the practice if it exists, null if it doesn't
     */
    @Override
    @Cacheable(value = "mathPractice")
    public Integer findByPractice(final int practice) {
        try {
            return jdbcTemplate.queryForObject(findByPracticeSql, new MapSqlParameterSource("practice", practice), Integer.class);
        } catch (final EmptyResultDataAccessException ignore) {
            return null;
        }
    }
}
