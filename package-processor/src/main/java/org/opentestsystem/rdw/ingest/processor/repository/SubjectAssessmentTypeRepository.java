package org.opentestsystem.rdw.ingest.processor.repository;

import java.util.List;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseSubjectAssessmentType;

/**
 * Implementations of this interface are responsible for persisting
 * {@link WarehouseSubjectAssessmentType} instances.
 */
public interface SubjectAssessmentTypeRepository {

    /**
     * Return the existing subject assessment types for the given subject.
     *
     * @param subjectId A subject id
     * @return the subject assessment types or empty collection if none exist
     */
    List<WarehouseSubjectAssessmentType> findBySubjectId(int subjectId);

    /**
     * Return the existing subject assessment types for the given subject id and assessment type id.
     *
     * @param subjectId  A subject id
     * @param asmtTypeId An assessment type id
     * @return the subject assessment type or NULL if none exist
     */
    WarehouseSubjectAssessmentType findBySubjectIdAndAsmtTypeId(int subjectId, int asmtTypeId);

    /**
     * Create the given subject assessment types in the repository.
     *
     * @param subjectId  A subject id
     * @param type The subject assessment type
     * @return The persisted subject assessment type
     */
    WarehouseSubjectAssessmentType create(int subjectId, WarehouseSubjectAssessmentType type);

    /**
     * Update the given subject assessment type in the repository.
     *
     * @param subjectId  A subject id
     * @param type The subject assessment type
     * @return The persisted subject assessment type
     * @throws IllegalArgumentException if attempting to update a definition that has exams bound to it.
     */
    WarehouseSubjectAssessmentType update(int subjectId, WarehouseSubjectAssessmentType type);

    /**
     * Delete the given subject assessment type from the repository.
     *
     * @param subjectId subject id
     * @param asmtType assessment type
     * @throws IllegalArgumentException if attempting to delete a definition that has exams bound to it.
     */
    void delete(int subjectId, AssessmentType asmtType);

    /**
     * Test if the given subject assessment type has associated assessments.
     *
     * @param subjectId subject id
     * @param asmtType assessment type
     * @return True if assessments of the given subject and assessment type exist
     */
    boolean isReferenced(int subjectId, AssessmentType asmtType);
}
