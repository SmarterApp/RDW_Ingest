package org.opentestsystem.rdw.ingest.processor.status;

import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A {@link StatusIndicator} for database status.
 */
@Component
public class DatabaseStatusIndicator extends AbstractStatusIndicator {

    @Value("${sql.status.readTest}")
    private String sqlReadTest;

    @Value("${sql.status.writeTest}")
    private String sqlWriteTest;

    @Value("${sql.status.writeRevert}")
    private String sqlWriteRevert;

    private final JdbcTemplate jdbcTemplate;
    private final TenantProperties tenantProperties;

    @Autowired
    DatabaseStatusIndicator(final JdbcTemplate jdbcTemplate, final TenantProperties tenantProperties) {
        this.jdbcTemplate = jdbcTemplate;
        this.tenantProperties = tenantProperties;
    }

    @Override
    public String name() {
        return "database";
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ReadDatabase.isLessThanOrEqualTo(level);
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        for (final Tenant tenant : tenantProperties.getTenants().values()) {
            TenantContextHolder.setTenantId(tenant.getId());

            final List<Status> ops = doDatabaseStatusCheck(level);
            builder.detail("databaseOperations - " + tenant.getId(), ops);
            builder.worstRating(ops);

            TenantContextHolder.clear();
        }
    }

    private List<Status> doDatabaseStatusCheck(final int level) {
        final List<Status> ops = newArrayList();

        // READ
        if (DiagnosticLevel.ReadDatabase.isLessThanOrEqualTo(level)) {
            final Status.Builder opBuilder = Status.builder().detail("schema", "warehouse").detail("type", "READ");
            final List<String> codes = responseTime(opBuilder, 50, () -> jdbcTemplate.queryForList(sqlReadTest, String.class));
            if (codes.size() != AssessmentType.values().length) {
                opBuilder.rating(Rating.Warning);
                opBuilder.detail("warning", "asmt_type table not loaded properly");
            }
            ops.add(opBuilder.build());
        }

        // WRITE
        if (DiagnosticLevel.WriteDatabase.isLessThanOrEqualTo(level)) {
            final Status.Builder opBuilder = Status.builder().detail("schema", "warehouse").detail("type", "WRITE");
            final int[] rowsAffected = responseTime(opBuilder, 200, () -> jdbcTemplate.batchUpdate(sqlWriteTest, sqlWriteRevert));
            if (rowsAffected.length != 2 || rowsAffected[0] != 1 || rowsAffected[1] != 1) {
                opBuilder.rating(Rating.Warning);
                opBuilder.detail("warning", "write test produced unexpected results");
            }
            ops.add(opBuilder.build());
        }

        return ops;
    }
}
