package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.apache.commons.csv.CSVRecord;
import org.apache.commons.validator.routines.FloatValidator;
import org.apache.commons.validator.routines.IntegerValidator;
import org.opentestsystem.rdw.ingest.processor.model.Item;
import org.opentestsystem.rdw.ingest.processor.repository.*;
import org.opentestsystem.rdw.ingest.processor.service.ItemParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * ItemParserImpl - parses and validates item parameters from package
 */
@Service
public class DefaultItemParser implements ItemParser {
    private final IntegerValidator intValidator;
    private final FloatValidator floatValidator;
    private final AssessmentRepository assessmentRepository;
    private final ClaimRepository claimRepository;
    private final TargetRepository targetRepository;
    private final DepthOfKnowledgeRepository depthOfKnowledgeRepository;
    private final MathPracticeRepository mathPracticeRepository;

    @Autowired
    public DefaultItemParser(final AssessmentRepository assessmentRepository,
                             final ClaimRepository claimRepository,
                             final TargetRepository targetRepository,
                             final DepthOfKnowledgeRepository depthOfKnowledgeRepository,
                             final MathPracticeRepository mathPracticeRepository) {
        this.assessmentRepository = assessmentRepository;
        this.claimRepository = claimRepository;
        this.targetRepository = targetRepository;
        this.depthOfKnowledgeRepository = depthOfKnowledgeRepository;
        this.mathPracticeRepository = mathPracticeRepository;
        this.intValidator = IntegerValidator.getInstance();
        this.floatValidator = FloatValidator.getInstance();
    }

    @Override
    public Item parse(CSVRecord record) throws IllegalArgumentException{
        String claimCode = record.get("Claim").replaceAll("\"", "").trim();
        String targetCode = record.get("Target").replaceAll("\"", "").trim();
        Item.Builder itemBuilder = Item.builder()
                .naturalId(record.get("ItemId"))
                .claimId(claimRepository.findIdByCode(claimCode))
                .targetId(targetRepository.findIdByCodeAndClaim(targetCode, claimRepository.findIdByCode(claimCode)))
                .difficulty(floatValidator.validate(record.get("avg_b")))
                .dok(parseDOK(record.get("DOK")));
        //Optional fields
        if(!record.get("AllowCalculator").isEmpty()) {
            itemBuilder.allowCalculator(record.get("AllowCalculator").equals("Yes"));
        }

        if(!record.get("MathematicalPractice").isEmpty()) {
            itemBuilder.mathPractice(parseMathPractice(record.get("MathematicalPractice")));
        }
        return itemBuilder.build();
    }

    //Parse the dok value, looking for a valid integer. If it isn't valid, intValidator will return null.
    private int parseDOK(String dok) throws IllegalArgumentException {
        try {
            return depthOfKnowledgeRepository.findByLevel(intValidator.validate(dok).intValue());
        }catch (NullPointerException npe) {
            throw new IllegalArgumentException("invalid depth of knowledge level [" + dok + "]");
        }
    }

    //Parse the math practice value, looking for a valid integer. If it isn't valid, intValidator will return null.
    private int parseMathPractice(String mathPractice) throws IllegalArgumentException {
        try {
            return mathPracticeRepository.findByPractice(intValidator.validate(mathPractice).intValue());
        }catch (NullPointerException npe) {
            throw new IllegalArgumentException("invalid math practice [" + mathPractice + "]");
        }
    }
}
