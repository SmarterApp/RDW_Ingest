package org.opentestsystem.rdw.ingest.processor;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

import org.opentestsystem.rdw.common.model.assessment.AssessmentSerializationService;
import org.opentestsystem.rdw.common.model.assessment.TabulatorService;
import org.opentestsystem.rdw.common.model.subject.SubjectSerializationService;
import org.opentestsystem.rdw.common.model.subject.XmlSubjectSerializationService;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.opentestsystem.rdw.ingest.common.repository.PipelineRepository;
import org.opentestsystem.rdw.ingest.common.script.DefaultPipelineService;
import org.opentestsystem.rdw.ingest.common.script.PipelineService;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.script.PipelineFactory;
import org.opentestsystem.rdw.script.ScriptPipelineConfiguration;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;

@Configuration
@Import({
        PackageProcessor.class,
        StatusConfiguration.class,
        YamlPropertiesConfigurator.class,
        ScriptPipelineConfiguration.class,
})
public class ApplicationConfiguration {

    @Bean
    public SubjectSerializationService subjectSerializationService() {
        return new XmlSubjectSerializationService();
    }

    @Bean
    public AssessmentSerializationService assessmentSerializationService() {
        return new TabulatorService();
    }

    @Bean
    public PipelineService pipelineService(final TenantIdResolver tenantIdResolver,
                                           final PipelineFactory pipelineFactory,
                                           final PipelineRepository pipelineRepository,
                                           @Value("${pipeline.cache.versions:maximumSize=100,expireAfterWrite=300s}")
                                           final String cacheConfig) {
        return new DefaultPipelineService(tenantIdResolver, pipelineFactory, pipelineRepository, cacheConfig);
    }
}
