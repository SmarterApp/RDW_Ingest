package org.opentestsystem.rdw.ingest.processor.utils;

import org.opentestsystem.rdw.ingest.common.error.DataElementError;
import org.opentestsystem.rdw.ingest.processor.service.DataElementErrorCollector;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.function.BiFunction;
import java.util.function.Function;

/**
 * Helper methods for parsing
 */
public class ParserHelper {

    private final DataElementErrorCollector elementErrorCollector;


    public ParserHelper(DataElementErrorCollector elementErrorCollector) {
        this.elementErrorCollector = elementErrorCollector;
    }

    //Basic validation for types (integer, float, double, empty strings, etc), that don't require a query against the database
    public <T> T basicValidation(final String name, final String value, Function<String, T> fx) {
        T validatedT = fx.apply(value);
        if (validatedT == null)
            elementErrorCollector.addDataElementError(new DataElementError(name, value, "Invalid value"));
        return validatedT;
    }

    //Validation of values against a supplied repository query, checking for valid primitive type first
    public <T, R> R repositoryValidation(final String name, final String value,
                                         Function<String, T> fx, Function<T, R> repoFx) {
        T validatedVal = basicValidation(name, value, fx);
        R returnVal = null;
        if (validatedVal == null) return returnVal;

        returnVal = repoFx.apply(validatedVal);
        if (returnVal == null)
            elementErrorCollector.addDataElementError(new DataElementError(name, value, "Unknown value"));

        return returnVal;
    }

    public <T,U,R> R repositoryBiValidation(final String name1, final String value1, Function<String, T> fx1,
                                           final String name2, final String value2, Function<String, U> fx2,
                                           BiFunction<T, U, R> repoFx) {
        T validatedVal1 = basicValidation(name1, value1, fx1);
        U validatedVal2 = basicValidation(name2, value2, fx2);
        R returnVal = null;
        if (validatedVal1 == null || validatedVal2 == null) return returnVal;

        returnVal = repoFx.apply(validatedVal1, validatedVal2);

        if (returnVal == null)
            elementErrorCollector.addDataElementError(new DataElementError(String.format("%s and %s", name1, name2),
                    String.format("%s and %s", value1, value2), "Unknown value combination"));

        return returnVal;
    }

}
