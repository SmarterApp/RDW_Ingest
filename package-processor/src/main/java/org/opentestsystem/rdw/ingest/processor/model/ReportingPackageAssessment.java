package org.opentestsystem.rdw.ingest.processor.model;

import com.google.common.collect.Lists;
import com.mysql.jdbc.StringUtils;
import java.util.List;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Lists.newArrayList;

/**
 * An assessment definition
 */
public class ReportingPackageAssessment {
    private Integer id;
    private final int gradeId;
    private final String type;
    private final int subjectId;
    private final int academicYear;
    private final String naturalId;
    private String name;
    private String label;
    private String version;

    private List<Item> items;

    private ReportingPackageAssessment(final String naturalId, final int gradeId, final String type, final int subjectId, final int academicYear) {
        checkArgument(!StringUtils.isNullOrEmpty(naturalId), "invalid natural id");
        this.naturalId = naturalId;
        this.gradeId = gradeId;
        this.type = type;
        this.subjectId = subjectId;
        this.academicYear = academicYear;
    }

    public List<Item> getItems() {
        return items == null ? newArrayList() : Lists.newArrayList(items);
    }


    public Integer getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getLabel() {
        return label;
    }

    public String getVersion() {
        return version;
    }

    public int getGradeId() {
        return gradeId;
    }

    public String getTypeId() {
        return type;
    }

    public int getSubjectId() {
        return subjectId;
    }

    public int getAcademicYear() {
        return academicYear;
    }

    public static Builder builder() {
        return new Builder();
    }

    public String getNaturalId() {
        return naturalId;
    }

    /**
     * The Builder for the {@link ReportingPackageAssessment}
     */
    public static class Builder {
        private Integer id;
        private String naturalId;
        private int gradeId;
        private String type;
        private int subjectId;
        private int academicYear;
        private String name;
        private String label;
        private String version;
        private List<Item> items;

        public ReportingPackageAssessment build() {
            final ReportingPackageAssessment assessment = new ReportingPackageAssessment(naturalId, gradeId, type, subjectId, academicYear);
            assessment.id = id;
            assessment.label = label;
            assessment.name = name;
            assessment.version = version;
            assessment.items = items;
            return assessment;
        }

        public Builder withId(final Integer id) {
            this.id = id;
            return this;
        }

        public Builder withNaturalId(final String naturalId) {
            this.naturalId = naturalId;
            return this;
        }

        public Builder withGradeId(final int gradeId) {
            this.gradeId = gradeId;
            return this;
        }

        public Builder withTypeId(final String type) {
            this.type = type;
            return this;
        }

        public Builder withAcademicYear(final int academicYear) {
            this.academicYear = academicYear;
            return this;
        }

        public Builder withSubjectId(final int subjectId) {
            this.subjectId = subjectId;
            return this;
        }

        public Builder withName(final String name) {
            this.name = name;
            return this;
        }

        public Builder withLabel(final String label) {
            this.label = label;
            return this;
        }

        public Builder withVersion(final String version) {
            this.version = version;
            return this;
        }


        public Builder withCopy(final ReportingPackageAssessment assessment) {
            withId(assessment.getId());
            withNaturalId(assessment.getNaturalId());
            withGradeId(assessment.getGradeId());
            withTypeId(assessment.getTypeId());
            withSubjectId(assessment.getSubjectId());
            withAcademicYear(assessment.getAcademicYear());
            withLabel(assessment.getLabel());
            withName(assessment.getName());
            withVersion(assessment.getVersion());
            return this;
        }
    }
}

