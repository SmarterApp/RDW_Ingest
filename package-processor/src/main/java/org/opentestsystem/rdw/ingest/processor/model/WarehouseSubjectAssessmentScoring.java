package org.opentestsystem.rdw.ingest.processor.model;

import java.util.Objects;
import org.opentestsystem.rdw.common.model.ScoreType;
import org.opentestsystem.rdw.common.model.subject.PerformanceLevels;
import org.opentestsystem.rdw.common.model.subject.Scoring;

/**
 * This model represents the definition of assessment scoring for a Subject
 */
public class WarehouseSubjectAssessmentScoring {

    private ScoreType type;
    private Double minScore;
    private Double maxScore;
    private int performanceLevelCount;
    private Integer performanceLevelStandardCutoff;

    public ScoreType getType() {
        return type;
    }

    public Double getMinScore() {
        return minScore;
    }

    public Double getMaxScore() {
        return maxScore;
    }

    public int getPerformanceLevelCount() {
        return performanceLevelCount;
    }

    public Integer getPerformanceLevelStandardCutoff() {
        return performanceLevelStandardCutoff;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        final WarehouseSubjectAssessmentScoring that = (WarehouseSubjectAssessmentScoring) o;
        return performanceLevelCount == that.performanceLevelCount &&
                Objects.equals(type, that.type) &&
                Objects.equals(minScore, that.minScore) &&
                Objects.equals(maxScore, that.maxScore) &&
                Objects.equals(performanceLevelStandardCutoff, that.performanceLevelStandardCutoff);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, minScore, maxScore, performanceLevelCount, performanceLevelStandardCutoff);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private ScoreType type;
        private Double minScore;
        private Double maxScore;
        private int performanceLevelCount;
        private Integer performanceLevelCutoff;

        public WarehouseSubjectAssessmentScoring build() {
            if (type == null) throw new IllegalArgumentException("ScoreType must be set");

            final WarehouseSubjectAssessmentScoring value = new WarehouseSubjectAssessmentScoring();
            value.type = type;
            value.minScore = minScore;
            value.maxScore = maxScore;
            value.performanceLevelCount = performanceLevelCount;
            value.performanceLevelStandardCutoff = performanceLevelCutoff;
            return value;
        }

        public Builder copy(final Scoring scoring) {
            type = scoring.getScoreType();
            minScore = scoring.getMinScore();
            maxScore = scoring.getMaxScore();
            final PerformanceLevels levels = scoring.getPerformanceLevels();
            if (levels != null) {
                performanceLevelCount = levels.getPerformanceLevels().size();
                performanceLevelCutoff = levels.getStandardCutoff();
            }
            return this;
        }

        public Builder type(final ScoreType type) {
            this.type = type;
            return this;
        }

        public Builder minScore(final Double minScore) {
            this.minScore = minScore;
            return this;
        }

        public Builder maxScore(final Double maxScore) {
            this.maxScore = maxScore;
            return this;
        }

        public Builder performanceLevelCount(final int performanceLevelCount) {
            this.performanceLevelCount = performanceLevelCount;
            return this;
        }

        public Builder performanceLevelCutoff(final Integer performanceLevelCutoff) {
            this.performanceLevelCutoff = performanceLevelCutoff;
            return this;
        }
    }
}
