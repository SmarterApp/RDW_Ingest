package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.common.repository.SchoolRepository;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.common.util.ParserHelper;
import org.opentestsystem.rdw.ingest.processor.service.OrganizationProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.ingest.common.model.ImportStatus.BAD_DATA;
import static org.opentestsystem.rdw.ingest.common.model.ImportStatus.BAD_FORMAT;

/**
 * Process a payload with organization information. It uses multiple parsers to handle different formats:<ul>
 *     <li>JSON format similar to ART output</li>
 *     <li>CALPADS schools CSV</li>
 * </ul>
 */
@Service
class DefaultOrganizationProcessor implements OrganizationProcessor {
    private static final Logger logger = LoggerFactory.getLogger(DefaultOrganizationProcessor.class);

    private final SchoolRepository schoolRepository;
    private final List<OrganizationParser> parsers;

    @Autowired
    public DefaultOrganizationProcessor(final SchoolRepository schoolRepository) {
        this.schoolRepository = schoolRepository;
        parsers = newArrayList(new JsonOrganizationParser(), new CalpadsSchoolsParser());
    }

    @Override
    public void process(final byte[] payload, final long importId) throws ImportException {
        for (final OrganizationParser parser : parsers) {
            final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
            try {
                final Collection<School> schools = parser.parse(payload, new ParserHelper(errorCollector));
                if (!errorCollector.isEmpty()) {
                    throw new ImportException(BAD_DATA, errorCollector.toJson());
                }
                for (final School school : schools) {
                    schoolRepository.upsert(school, importId);
                }
                logger.info("{} schools upserted", schools.size());
                return;
            } catch (final IllegalArgumentException iae) {
                // expected, just loop
            }
        }
        // if we get here, no parser could deal with the payload
        throw new ImportException(BAD_FORMAT, "invalid organization payload format");
    }
}
