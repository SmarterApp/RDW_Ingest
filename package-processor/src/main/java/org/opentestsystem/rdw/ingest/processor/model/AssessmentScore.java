package org.opentestsystem.rdw.ingest.processor.model;

import java.util.Objects;

/**
 * Score details for an assessment; used to marshal to the database
 */
public class AssessmentScore {
    private Integer subjectScoreId;
    private Double minScore;
    private Double maxScore;
    private Double cutPoint1;
    private Double cutPoint2;
    private Double cutPoint3;
    private Double cutPoint4;
    private Double cutPoint5;

    /**
     * Assessment score details are linked to a specific subject score metadata.
     * This will be null for OVERALL since there is no record for overall metadata.
     *
     * @return id of subject_score, null for OVERALL
     */
    public Integer getSubjectScoreId() {
        return subjectScoreId;
    }

    public Double getMinScore() {
        return minScore;
    }

    public Double getMaxScore() {
        return maxScore;
    }

    public Double getCutPoint1() {
        return cutPoint1;
    }

    public Double getCutPoint2() {
        return cutPoint2;
    }

    public Double getCutPoint3() {
        return cutPoint3;
    }

    public Double getCutPoint4() {
        return cutPoint4;
    }

    public Double getCutPoint5() {
        return cutPoint5;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * The Builder for the {@link AssessmentScore}
     */
    public static class Builder {
        private Integer subjectScoreId;
        private Double cutPoint1;
        private Double cutPoint2;
        private Double cutPoint3;
        private Double cutPoint4;
        private Double cutPoint5;
        private Double minScore;
        private Double maxScore;

        /**
         * Builds an {@link AssessmentScore} object
         *
         * @return the assembled object
         * @throws NullPointerException if there was a problem processing any of the required data elements
         */
        public AssessmentScore build() {
            final AssessmentScore assessmentScore = new AssessmentScore();
            assessmentScore.subjectScoreId = subjectScoreId;
            assessmentScore.minScore = minScore;
            assessmentScore.maxScore = maxScore;
            assessmentScore.cutPoint1 = cutPoint1;
            assessmentScore.cutPoint2 = cutPoint2;
            assessmentScore.cutPoint3 = cutPoint3;
            assessmentScore.cutPoint4 = cutPoint4;
            assessmentScore.cutPoint5 = cutPoint5;
            return assessmentScore;
        }

        public Builder subjectScoreId(final Integer subjectScoreId) {
            this.subjectScoreId = subjectScoreId;
            return this;
        }

        public Builder cutPoint1(final Double cutPoint1) {
            this.cutPoint1 = cutPoint1;
            return this;
        }

        public Builder cutPoint2(final Double cutPoint2) {
            this.cutPoint2 = cutPoint2;
            return this;
        }

        public Builder cutPoint3(final Double cutPoint3) {
            this.cutPoint3 = cutPoint3;
            return this;
        }

        public Builder cutPoint4(final Double cutPoint4) {
            this.cutPoint4 = cutPoint4;
            return this;
        }

        public Builder cutPoint5(final Double cutPoint5) {
            this.cutPoint5 = cutPoint5;
            return this;
        }

        public Builder cutPoint(final int cp, final Double cutPoint) {
            switch(cp) {
                case 1: return cutPoint1(cutPoint);
                case 2: return cutPoint2(cutPoint);
                case 3: return cutPoint3(cutPoint);
                case 4: return cutPoint4(cutPoint);
                case 5: return cutPoint5(cutPoint);
            }
            throw new IllegalArgumentException("Invalid cutpoint: " + cp);
        }

        public Builder minScore(final Double minScore) {
            this.minScore = minScore;
            return this;
        }

        public Builder maxScore(final Double maxScore) {
            this.maxScore = maxScore;
            return this;
        }
    }

}
