package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.repository.TraitRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;

/**
 * JDBC-backed implementation of a TraitRepository.
 */
@Repository
class JdbcTraitRepository implements TraitRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.trait.findCodesBySubject}")
    private String sqlFindCodesBySubject;

    @Value("${sql.trait.insert}")
    private String sqlInsertTrait;

    @Value("${sql.trait.delete}")
    private String sqlDeleteTrait;

    @Value("${sql.trait.isReferenced}")
    private String sqlTraitIsReferenced;

    @Autowired
    public JdbcTraitRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Set<String> findCodesBySubject(final String subjectCode) {
        final Set<String> results = newHashSet();
        jdbcTemplate.query(sqlFindCodesBySubject,
                new MapSqlParameterSource("subject_code", subjectCode),
                (row) -> { results.add(row.getString("code")); });
        return results;
    }

    @Override
    public void create(final String subjectCode, final String code, final String purpose, final String category, final int maxScore) {
        final int insertCount;
        try {
            insertCount = jdbcTemplate.update(sqlInsertTrait,
                new MapSqlParameterSource("subject_code", subjectCode)
                    .addValue("code", code)
                    .addValue("purpose", purpose)
                    .addValue("category", category)
                    .addValue("max_score", maxScore)
            );
        } catch (final DataIntegrityViolationException e) {
            // catches violations of the unique key
            throw new IllegalArgumentException("Unable to create trait: " + code + " for subject: " + subjectCode);
        }
        if (insertCount != 1) {
            throw new IllegalArgumentException("Unable to create trait: " + code + " for subject: " + subjectCode);
        }
    }

    @Override
    public void delete(final String subjectCode, final String code) {
        jdbcTemplate.update(sqlDeleteTrait,
                new MapSqlParameterSource("subject_code", subjectCode)
                        .addValue("code", code));
    }

    @Override
    public boolean isReferenced(final String subjectCode, final String code) {
        return jdbcTemplate.queryForObject(sqlTraitIsReferenced,
                new MapSqlParameterSource()
                        .addValue("subject_code", subjectCode)
                        .addValue("code", code),
                Boolean.class);
    }
}
