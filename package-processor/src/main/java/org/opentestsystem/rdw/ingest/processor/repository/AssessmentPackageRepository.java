package org.opentestsystem.rdw.ingest.processor.repository;

import org.opentestsystem.rdw.ingest.processor.model.WarehouseAssessment;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseAssessmentItem;

import java.util.Collection;

/**
 * AssessmentPackageRepository - Interface for bulk inserting an assessment "package", which is a
 * collection of Assessments and corresponding Items
 */
public interface AssessmentPackageRepository {
    /**
     * Method to create new {@link WarehouseAssessment}s
     *
     * @param assessments collection of {@link WarehouseAssessment}s
     * @param importId    id of the import that is creating the {@link WarehouseAssessment}s
     */
    void create(Collection<WarehouseAssessment> assessments, long importId);

    /**
     * Method to update {@link WarehouseAssessment}s.
     * In this case each {@link WarehouseAssessment} represents modifications, and it assumes the caller had applied the following logic:
     * </ul>
     * <li> each {@link WarehouseAssessment} has its db ids initialized.</li>
     * <li> delta logic on the items has been applied, only newly addedded or updated items are expected</li>
     * <li>if an {@link WarehouseAssessmentItem} is updated, its db id is initialized </li>
     * </ul>
     * Note that items are not deleted.
     *
     * @param assessments collection of {@link WarehouseAssessment}s
     * @param importId    id of the import that is updating the {@link WarehouseAssessment}s
     */
    void update(Collection<WarehouseAssessment> assessments, long importId);

    /**
     * Finds an {@link WarehouseAssessment} by its natural id.
     *
     * @param naturalId the natural id
     * @return the found {@link WarehouseAssessment}; null if not found
     */
    WarehouseAssessment findOneByNaturalId(String naturalId);
}

