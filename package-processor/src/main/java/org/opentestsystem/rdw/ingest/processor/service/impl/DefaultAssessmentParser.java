package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.sun.javaws.exceptions.InvalidArgumentException;
import org.apache.commons.csv.CSVRecord;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentTypeRepository;
import org.opentestsystem.rdw.ingest.processor.repository.GradeRepository;
import org.opentestsystem.rdw.ingest.processor.repository.SubjectRepository;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentParser;
import org.opentestsystem.rdw.ingest.processor.utils.ParseUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * AssessmentParserImpl - parses and validates assessment parameters from package
 */
@Service
public class DefaultAssessmentParser implements AssessmentParser {
    private final GradeRepository gradeRepository;
    private final SubjectRepository subjectRepository;
    private final AssessmentTypeRepository typeRepository;

    @Autowired
    public DefaultAssessmentParser(final GradeRepository gradeRepository,
                                   final SubjectRepository subjectRepository,
                                   final AssessmentTypeRepository assessmentTypeRepository) {
        this.gradeRepository = gradeRepository;
        this.subjectRepository = subjectRepository;
        this.typeRepository = assessmentTypeRepository;
    }

    public Assessment parse(CSVRecord record) throws IllegalArgumentException {
        Assessment.Builder assessmentBuilder = new Assessment.Builder();
        assessmentBuilder
                .naturalId(record.get("AssessmentId"))
                .name(record.get("AssessmentName"))
                .academicYear(Integer.parseInt(record.get("AcademicYear").split("-")[0]))
                .label(record.get("AssessmentLabel"))
                .version(record.get("AssessmentVersion"));

        //Lookup grade code, subject code, and type code from database. If they are there, then add parameter and finish building
        //Otherwise, invalidate the parse.
        assessmentBuilder
                .gradeCode(gradeRepository.findIdByCode(record.get("AssessmentGrade")))
                .subjectCode(subjectRepository.findIdByName(record.get("AssessmentSubject")))
                .typeCode(typeRepository.findIdByCode(toTypeCode(record.get("AssessmentType"))));

        // TODO: 3/30/17 get CutPoints and calculate min/max score (if cut points are there)

        return assessmentBuilder.build();
    }


    //Not sure if this is OBE (overcome by events) or not, but in case the tabulator isn't outputing the right
    //data, this should help convert it to what the database expects.
    private String toTypeCode(final String value) throws IllegalArgumentException {

        if ("summative".equalsIgnoreCase(value)) return "sum";
        if ("ica".equalsIgnoreCase(value) || "iab".equalsIgnoreCase(value)) return value.toLowerCase();
        if ("interim".equalsIgnoreCase(value)) return "ica";

        throw new IllegalArgumentException("an invalid type [" + value + "]");
    }
}