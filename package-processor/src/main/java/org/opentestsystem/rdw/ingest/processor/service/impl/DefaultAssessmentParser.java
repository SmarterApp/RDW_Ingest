package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.apache.commons.csv.CSVRecord;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentTypeRepository;
import org.opentestsystem.rdw.ingest.processor.repository.GradeRepository;
import org.opentestsystem.rdw.ingest.processor.repository.SubjectRepository;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * AssessmentParserImpl - parses and validates assessment parameters from package
 */
@Service
public class DefaultAssessmentParser implements AssessmentParser {
    private final GradeRepository gradeRepository;
    private final SubjectRepository subjectRepository;
    private final AssessmentTypeRepository typeRepository;

    @Autowired
    public DefaultAssessmentParser(final GradeRepository gradeRepository,
                                   final SubjectRepository subjectRepository,
                                   final AssessmentTypeRepository assessmentTypeRepository) {
        this.gradeRepository = gradeRepository;
        this.subjectRepository = subjectRepository;
        this.typeRepository = assessmentTypeRepository;
    }

    public Assessment parse(CSVRecord record) throws IllegalArgumentException {
        Assessment.Builder assessmentBuilder = new Assessment.Builder();
        assessmentBuilder
                .naturalId(record.get("AssessmentId"))
                .name(record.get("AssessmentName"))
                .academicYear(Integer.parseInt(record.get("AcademicYear").split("-")[0]))
                .label(record.get("AssessmentLabel"))
                .version(record.get("AssessmentVersion"));

        //Lookup grade code, subject code, and type code from database. If they are there, then add parameter and finish building
        //Otherwise, invalidate the parse.
        assessmentBuilder
                .gradeId(gradeRepository.findIdByCode(toGradeCode(record.get("AssessmentGrade"))))
                .subjectId(subjectRepository.findIdByName(record.get("AssessmentSubject")))
                .typeId(typeRepository.findIdByCode(toTypeCode(record.get("AssessmentSubtype"))));


        assessmentBuilder.cutPoints(parseCutPoints(record.get("ScaledHigh1"),
                record.get("ScaledHigh2"),
                record.get("ScaledHigh3")));

        assessmentBuilder.minScore(parseScaleScore(record.get("ScaledLow1")));
        assessmentBuilder.maxScore(parseScaleScore(record.get("ScaledHigh4")));

        return assessmentBuilder.build();
    }


    //Not sure if this is OBE (overcome by events) or not, but in case the tabulator isn't outputting the right
    //data, this should help convert it to what the database expects.
    private String toTypeCode(final String value) throws IllegalArgumentException {

        if ("summative".equalsIgnoreCase(value)) return "sum";
        if ("ica".equalsIgnoreCase(value) || "iab".equalsIgnoreCase(value)) return value.toLowerCase();

        throw new IllegalArgumentException("invalid typeCode [" + value + "]");
    }

    private String toGradeCode(final String value) {
        if (value.length() == 1) return "0" + value;
        return  value;
    }

    private List<Integer> parseCutPoints(String... cutPoints) throws IllegalArgumentException {
        ArrayList<Integer> cutPointArray = new ArrayList<Integer>();
        try {
            for(String cutPoint : cutPoints) {
                cutPointArray.add((int) Double.parseDouble(cutPoint));
            }
            return cutPointArray;
        } catch (NumberFormatException | NullPointerException ex) {
            throw new IllegalArgumentException("invalid cut points " + Arrays.toString(cutPoints));
        }
    }

    private int parseScaleScore(String value) {
        try {
             return (int) Double.parseDouble(value);
        } catch (NumberFormatException | NullPointerException ex) {
            throw new IllegalArgumentException("invalid scale score  [" + value + "]" );
        }
    }
}