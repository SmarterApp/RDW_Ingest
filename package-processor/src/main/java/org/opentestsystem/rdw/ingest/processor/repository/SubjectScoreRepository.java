package org.opentestsystem.rdw.ingest.processor.repository;

import java.util.Collection;
import java.util.List;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseSubjectScore;

/**
 * This repository is responsible for working with subject score details (alt/claim).
 */
public interface SubjectScoreRepository {

    /**
     * Return the existing scores for the given subject.
     *
     * @param subjectId A subject id
     * @return the subject scores (by dataOrder) or empty collection if none exist
     */
    List<WarehouseSubjectScore> findBySubjectId(int subjectId);

    /**
     * Return the subject score metadata for the given subject, assessment type and score type.
     * <p>
     * Note that there is no metadata for score type OVERALL.
     * Only ALT and CLAIM score types have metadata.
     * </p>
     *
     * @param subjectId subject id
     * @param asmtTypeId assessment type id, e.g. 1 (ICA)
     * @param scoreTypeId score type id, e.g. 2 (ALT)
     * @return the subject scores (by dataOrder) or empty collection if none exist
     */
    List<WarehouseSubjectScore> findBySubjectIdAndAsmtTypeIdAndScoreTypeId(int subjectId, int asmtTypeId, int scoreTypeId);

    /**
     * Create the given subject scores in the repository.
     *
     * @param subjectId A subject id
     * @param scores the subject scores to create
     */
    void create(int subjectId, Collection<WarehouseSubjectScore> scores);

    /**
     * Update the non-key fields of the given subject scores in the repository.
     *
     * @param scores the subject scores to update
     */
    void update(Collection<WarehouseSubjectScore> scores);

    /**
     * Delete the given subject scores from the repository.
     *
     * @param scoreIds the score ids to delete
     */
    void delete(Collection<Integer> scoreIds);

    /**
     * Test if any of the subject scores are referenced by any assessment.
     *
     * @param scoreIds The score ids to test
     * @return The first score id that is reference by an assessment, null if none are referenced
     */
    Integer isReferenced(Collection<Integer> scoreIds);
}
