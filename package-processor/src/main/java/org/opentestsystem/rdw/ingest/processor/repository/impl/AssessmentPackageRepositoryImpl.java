package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Item;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

/**
 * AssessmentPackageRepositoryImpl - Provides for bulk inserting an assessment "package", which is a
 * collection of Assessments and corresponding Items
 */
@Repository
public class AssessmentPackageRepositoryImpl implements AssessmentPackageRepository {

    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.item.create}")
    private String sqlItemCreate;

    @Value("${sql.assessment.assessmentScore.create}")
    private String sqlAssessmentScoreCreate;

    @Value("${sql.assessment.create}")
    private String sqlAssessmentCreate;

    @Autowired
    public AssessmentPackageRepositoryImpl(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * Method for bulk insertion of an Assessment Package
     *
     * @param assessments array of {@link Assessment} objects
     * @param items       array of {@link Item} objects
     */
    @Override
    @Transactional
    public void createPackage(final Assessment[] assessments, final Item[] items) {
        bulkCreateAssessments(assessments);
        bulkCreateScores(assessments);
        bulkCreateItems(items);
    }

    private void bulkCreateAssessments(final Assessment[] assessments) {
        if (assessments.length == 0) return;

        final MapSqlParameterSource[] batchParameters = new MapSqlParameterSource[assessments.length];
        for (int i = 0; i < assessments.length; i++) {
            batchParameters[i] = new MapSqlParameterSource()

                    .addValue("naturalId", assessments[i].getNaturalId())
                    .addValue("gradeId", assessments[i].getGradeId())
                    .addValue("typeId", assessments[i].getTypeId())
                    .addValue("subjectId", assessments[i].getSubjectId()) //yep, magic numbers
                    .addValue("schoolYear", assessments[i].getsSchoolYear())
                    .addValue("name", assessments[i].getName())
                    .addValue("label", assessments[i].getLabel())
                    .addValue("version", assessments[i].getVersion());

        }
        jdbcTemplate.batchUpdate(sqlAssessmentCreate, batchParameters);
    }

    private void bulkCreateItems(final Item[] items) {
        if (items.length == 0) return;

        final MapSqlParameterSource[] batchParameters = new MapSqlParameterSource[items.length];
        for (int i = 0; i < items.length; i++) {

            batchParameters[i] = new MapSqlParameterSource()
                    .addValue("claimId", items[i].getClaimCodeId())
                    .addValue("targetId", items[i].getTargetId())
                    .addValue("itemId", items[i].getNaturalId())
                    .addValue("asmtId", items[i].getAssessmentNaturalId())
                    .addValue("dokId", items[i].getDokId())
                    .addValue("difficulty", items[i].getDifficulty())
                    .addValue("maxPoints", items[i].getMaxPoints())
                    .addValue("mathPractice", items[i].getMathPractice())
                    .addValue("allowCalc", items[i].getAllowCalculator());
        }
        jdbcTemplate.batchUpdate(sqlItemCreate, batchParameters);
    }

    private void bulkCreateScores(final Assessment[] assessments) {
        if (assessments.length == 0) return;

        final MapSqlParameterSource[] batchParameters = new MapSqlParameterSource[assessments.length];
        for (int i = 0; i < assessments.length; i++) {
            batchParameters[i] = new MapSqlParameterSource()

                    .addValue("asmtId", assessments[i].getNaturalId())
                    .addValue("minScore", assessments[i].getMinScore())
                    .addValue("maxScore", assessments[i].getMaxScore())
                    .addValue("cutPoint1", assessments[i].getCutPoints().get(0)) //yep, magic numbers
                    .addValue("cutPoint2", assessments[i].getCutPoints().get(1))
                    .addValue("cutPoint3", assessments[i].getCutPoints().get(2));

        }
        jdbcTemplate.batchUpdate(sqlAssessmentScoreCreate, batchParameters);
    }

}
