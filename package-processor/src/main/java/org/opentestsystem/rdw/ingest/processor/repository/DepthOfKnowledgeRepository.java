package org.opentestsystem.rdw.ingest.processor.repository;

import org.opentestsystem.rdw.ingest.processor.model.WarehouseDepthOfKnowledge;

import java.util.Collection;

/**
 * DepthOfKnowledgeRepository - responsible for dealing with depth of knowledge translation table
 */
public interface DepthOfKnowledgeRepository {

    /**
     *  Finds an id of the depth of knowledge by its level and subjectId. Returns null if not found.
     *
     * @param level the dok level
     * @param subjectId the corresponding subject id of the for this item
     * @return the id if it exists, null if it doesn't
     */
    Integer findIdByLevelAndSubject(int level, int subjectId);

    /**
     * Find all depth of knowledge definitions for the given subject.
     *
     * @param subjectCode A subject code
     * @return  The depth of knowledge definitions for the given subject
     */
    Collection<WarehouseDepthOfKnowledge> findBySubject(final String subjectCode);

    /**
     * Create the given depth of knowledge definitions for the given subject.
     *
     * @param subjectCode   A subject code
     * @param depths        The depth of knowledge definitions to create
     */
    void create(String subjectCode, Collection<WarehouseDepthOfKnowledge> depths);

    /**
     * Given a collection of depth of knowledge ids, return the first that
     * is referenced by an existing assessment item, or null if none are referenced.
     *
     * @param depthIds A collection of depth ids
     * @return A referenced depth id or null if none are referenced
     */
    Integer isReferenced(Collection<Integer> depthIds);

    /**
     * Delete the given depth of knowledge ids.
     *
     * @param depthIds A collection of depth ids
     */
    void delete(Collection<Integer> depthIds);

    /**
     * Update the references for the given depths of knowledge.
     *
     * @param depths The depths of knowledge to update
     */
    void update(Collection<WarehouseDepthOfKnowledge> depths);

}
