package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.model.WarehouseSubjectAssessmentType;
import org.opentestsystem.rdw.ingest.processor.repository.SubjectAssessmentTypeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Collection;

import static org.opentestsystem.rdw.ingest.common.util.JdbcUtil.getNullable;

/**
 * JDBC-backed implementation of a SubjectAssessmentTypeRepository
 */
@Repository
class JdbcSubjectAssessmentTypeRepository implements SubjectAssessmentTypeRepository {

    private final NamedParameterJdbcTemplate template;

    @Value("${sql.subject.assessmentType.findBySubject}")
    private String sqlFindBySubject;

    @Value("${sql.subject.assessmentType.insert}")
    private String sqlCreateAssessmentType;

    @Value("${sql.subject.assessmentType.update}")
    private String sqlUpdateAssessmentType;

    @Value("${sql.subject.assessmentType.delete}")
    private String sqlDeleteAssessmentType;

    @Value("${sql.subject.assessmentType.hasAssessments}")
    private String sqlAssessmentTypeHasAssessments;

    @Autowired
    public JdbcSubjectAssessmentTypeRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public Collection<WarehouseSubjectAssessmentType> findBySubject(final String subjectCode) {
        return template.query(sqlFindBySubject,
                new MapSqlParameterSource().addValue("subject_code", subjectCode),
                (row, rowNum) -> WarehouseSubjectAssessmentType.builder()
                            .subjectCode(subjectCode)
                            .assessmentTypeCode(row.getString("asmt_type_code"))
                            .performanceLevelCount(row.getInt("performance_level_count"))
                            .performanceLevelCutoff(getNullable(row, row.getInt("performance_level_standard_cutoff")))
                            .subScorePerformanceLevelCount(getNullable(row, row.getInt("sub_score_performance_level_count")))
                            .subScorePerformanceLevelCutoff(getNullable(row, row.getInt("sub_score_performance_level_standard_cutoff")))
                            .build()
        );
    }

    @Override
    public WarehouseSubjectAssessmentType create(final WarehouseSubjectAssessmentType type) {
        final int insertCount = template.update(sqlCreateAssessmentType,
                new MapSqlParameterSource()
                        .addValue("subject_code", type.getSubjectCode())
                        .addValue("asmt_type_code", type.getAssessmentTypeCode())
                        .addValue("performance_level_count", type.getPerformanceLevelCount())
                        .addValue("performance_level_standard_cutoff", type.getPerformanceLevelCutoff())
                        .addValue("sub_score_performance_level_count", type.getSubScorePerformanceLevelCount())
                        .addValue("sub_score_performance_level_standard_cutoff", type.getSubScorePerformanceLevelCutoff())
        );

        if (insertCount != 1) {
            throw new IllegalArgumentException("Failed to create WarehouseSubjectAssessmentType for subject: " + type.getSubjectCode() + " assessment type: " + type.getAssessmentTypeCode());
        }
        return type;
    }

    @Override
    public WarehouseSubjectAssessmentType update(final WarehouseSubjectAssessmentType type) {
        final int updated = template.update(sqlUpdateAssessmentType,
                new MapSqlParameterSource()
                        .addValue("subject_code", type.getSubjectCode())
                        .addValue("asmt_type_code", type.getAssessmentTypeCode())
                        .addValue("performance_level_count", type.getPerformanceLevelCount())
                        .addValue("performance_level_standard_cutoff", type.getPerformanceLevelCutoff())
                        .addValue("sub_score_performance_level_count", type.getSubScorePerformanceLevelCount())
                        .addValue("sub_score_performance_level_standard_cutoff", type.getSubScorePerformanceLevelCutoff())
        );

        if (updated != 1) {
            throw new IllegalArgumentException("Failed to update WarehouseSubjectAssessmentType for subject: " + type.getSubjectCode() + " assessment type: " + type.getAssessmentTypeCode());
        }
        return type;
    }

    @Override
    public void delete(final String subjectCode, final String assessmentTypeCode) {
        template.update(sqlDeleteAssessmentType,
                new MapSqlParameterSource()
                        .addValue("subject_code", subjectCode)
                        .addValue("asmt_type_code", assessmentTypeCode)
        );
    }

    @Override
    public boolean hasAssessments(final WarehouseSubjectAssessmentType type) {
        return template.queryForObject(sqlAssessmentTypeHasAssessments,
                new MapSqlParameterSource()
                        .addValue("subject_code", type.getSubjectCode())
                        .addValue("asmt_type_code", type.getAssessmentTypeCode()),
                Boolean.class
        );
    }
}
