package org.opentestsystem.rdw.ingest.processor.service.impl.validator;

import org.springframework.stereotype.Component;

import java.util.Set;
import org.opentestsystem.rdw.common.model.subject.AltScore;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.common.model.subject.Target;
import org.opentestsystem.rdw.utils.LocationAwareErrorCollector;
import org.opentestsystem.rdw.ingest.processor.service.SubjectValidator;

import static com.google.common.collect.Sets.newHashSet;
import static org.opentestsystem.rdw.common.model.AssessmentBoundaries.MaxScorableClaims;

/**
 * This validator is responsible for validating {@link AltScore} models as well
 * as their child {@link Target} models.
 */
@Component
class AltScoreValidator implements SubjectValidator {

    @Override
    public void validate(final LocationAwareErrorCollector context, final Subject subject) {
        if (subject.getAltScores() == null) return;

        final Set<String> codes = newHashSet();
        final Set<Integer> displayOrders = newHashSet();
        final Set<Integer> dataOrders = newHashSet();
        int scorableCount = 0;
        for (final AltScore score : subject.getAltScores()) {
            final String code = score.getCode();
            context.push("AltScore", code);
            if (!codes.add(code)) {
                context.failure("Duplicate code found: " + code);
                continue;
            }

            ++scorableCount;

            if (score.getDisplayOrder() == null) {
                context.failure("AltScores must have a displayOrder defined");
            } else if (!displayOrders.add(score.getDisplayOrder())) {
                context.failure("Duplicate display order found: " + score.getDisplayOrder());
            }

            if (score.getDataOrder() == null) {
                context.failure("AltScores must have a dataOrder defined");
            } else if (!dataOrders.add(score.getDataOrder())) {
                context.failure("Duplicate dataOrder found: " + score.getDataOrder());
            }

            context.pop();
        }
        if (scorableCount > MaxScorableClaims) {
            context.push("AltScores");
            context.failure("A maximum number of " + MaxScorableClaims + " AltScores are supported, but found: " + scorableCount);
            context.pop();
        }
    }
}
