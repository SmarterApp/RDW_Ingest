package org.opentestsystem.rdw.ingest.processor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.Message;

import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.model.ImportException;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.common.script.PipelineProcessor;
import org.opentestsystem.rdw.ingest.common.script.PipelineService;
import org.opentestsystem.rdw.ingest.common.script.PipelineType;
import org.opentestsystem.rdw.ingest.processor.service.AccommodationsProcessor;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentPackageProcessor;
import org.opentestsystem.rdw.ingest.processor.service.ImportPayloadProcessor;
import org.opentestsystem.rdw.ingest.processor.service.NormsProcessor;
import org.opentestsystem.rdw.ingest.processor.service.OrganizationProcessor;
import org.opentestsystem.rdw.ingest.processor.service.SubjectProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;

@EnableBinding(ImportPayloadSink.class)
public class PackageProcessor extends PipelineProcessor {
    private static final Logger logger = LoggerFactory.getLogger(PackageProcessor.class);

    private final AssessmentPackageProcessor packageProcessor;
    private final AccommodationsProcessor accommodationsProcessor;
    private final OrganizationProcessor organizationProcessor;
    private final NormsProcessor normsProcessor;
    private final SubjectProcessor subjectProcessor;

    @Autowired
    public PackageProcessor(final ImportRepository importRepository,
                            final AssessmentPackageProcessor packageProcessor,
                            final AccommodationsProcessor accommodationsProcessor,
                            final OrganizationProcessor organizationProcessor,
                            final NormsProcessor normsProcessor,
                            final SubjectProcessor subjectProcessor,
                            final ArchiveService archiveService,
                            final PipelineService pipelineService) {
        super(importRepository, pipelineService, archiveService);
        this.packageProcessor = packageProcessor;
        this.accommodationsProcessor = accommodationsProcessor;
        this.organizationProcessor = organizationProcessor;
        this.normsProcessor = normsProcessor;
        this.subjectProcessor = subjectProcessor;
    }


    @ServiceActivator(inputChannel = ImportPayloadSink.CODES_INPUT)
    public void processCodes(final Message<?> message) {
        handleIncomingMessage(message, accommodationsProcessor);
    }

    @ServiceActivator(inputChannel = ImportPayloadSink.ORGANIZATION_INPUT)
    public void processOrganization(final Message<?> message) {
        handleIncomingMessage(message, organizationProcessor);
    }

    @ServiceActivator(inputChannel = ImportPayloadSink.PACKAGE_INPUT)
    public void processPackage(final Message<?> message) {
        // This is the handler for assessments
        handleIncomingMessage(message, packageProcessor, PipelineType.Assessment);
    }


    @ServiceActivator(inputChannel = ImportPayloadSink.NORMS_INPUT)
    public void processNorms(final Message<?> message) {
        handleIncomingMessage(message, normsProcessor);
    }

    @ServiceActivator(inputChannel = ImportPayloadSink.SUBJECT_INPUT)
    public void processSubject(final Message<?> message) {
        handleIncomingMessage(message, subjectProcessor);
    }

    private void handleIncomingMessage(final Message<?> message, final ImportPayloadProcessor processor) {
        handleIncomingMessage(message, processor, null);
    }

    private void handleIncomingMessage(final Message<?> message,
                                       final ImportPayloadProcessor processor,
                                       final PipelineType pipelineType) {

        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(message);
        final byte[] payload = (byte[]) message.getPayload();
        final long importId = accessor.getImportId();

        // set tenant context from message
        final String tenantId = accessor.getTenantId();
        if (tenantId == null) {
            logger.error("No tenant id found in {} message header for import {}", accessor.getContent(), importId);
            // updating the import status might seem like a good idea here, something like:
            // importRepository.updateStatusAndMessageById(importId, ImportStatus.INVALID, "System error: no tenant id found in message header");
            // but that won't work since we don't have a tenant context
            return;
        }
        TenantContextHolder.setTenantId(tenantId);

        // package processing is rarer so log at INFO level
        logger.info("received {} import {} for tenant id {}", accessor.getContent(), importId, tenantId);

        // Process payload by pipeline if one exists
        byte[] preProcessedPayload  = payload;
        if (pipelineType != null) {
            try {
                preProcessedPayload = processByPipeline(pipelineType, payload, importId);
            } catch (final Exception e) {
                // processByPipeline has already updated the import record so just log a bit more and return
                logger.info("Failed to process {} import {} for tenant id {}: {}",
                        accessor.getContent(), importId, tenantId, e.getMessage());
                return;
            }
        }

        try {
            final String msg = processor.process(preProcessedPayload, importId);
            importRepository.updateStatusAndMessageById(importId, ImportStatus.PROCESSED, msg);
        } catch (final ImportException ie) {
            logger.warn("failed with an import error: " + ie);
            importRepository.updateStatusAndMessageById(importId, ie.getStatus(), ie.getMessage());
        } catch (final Exception e) {
            logger.warn("failed with an unexpected error: " + e);
            importRepository.updateStatusAndMessageById(importId, ImportStatus.BAD_DATA, e.getMessage());
        }
    }
}
