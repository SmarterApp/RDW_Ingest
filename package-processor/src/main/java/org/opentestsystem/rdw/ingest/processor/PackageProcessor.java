package org.opentestsystem.rdw.ingest.processor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.Message;

import java.util.Optional;
import org.opentestsystem.rdw.common.model.ImportException;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.processor.service.AccommodationsProcessor;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentPackageProcessor;
import org.opentestsystem.rdw.ingest.processor.service.ImportPayloadProcessor;
import org.opentestsystem.rdw.ingest.processor.service.NormsProcessor;
import org.opentestsystem.rdw.ingest.processor.service.OrganizationProcessor;
import org.opentestsystem.rdw.ingest.processor.service.SubjectProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;

@EnableBinding(ImportPayloadSink.class)
public class PackageProcessor {
    private static final Logger logger = LoggerFactory.getLogger(PackageProcessor.class);

    private final ImportRepository importRepository;
    private final AssessmentPackageProcessor packageProcessor;
    private final AccommodationsProcessor accommodationsProcessor;
    private final OrganizationProcessor organizationProcessor;
    private final NormsProcessor normsProcessor;
    private final SubjectProcessor subjectProcessor;

    @Autowired
    public PackageProcessor(final ImportRepository importRepository,
                            final AssessmentPackageProcessor packageProcessor,
                            final AccommodationsProcessor accommodationsProcessor,
                            final OrganizationProcessor organizationProcessor,
                            final NormsProcessor normsProcessor,
                            final SubjectProcessor subjectProcessor) {
        this.importRepository = importRepository;
        this.packageProcessor = packageProcessor;
        this.accommodationsProcessor = accommodationsProcessor;
        this.organizationProcessor = organizationProcessor;
        this.normsProcessor = normsProcessor;
        this.subjectProcessor = subjectProcessor;
    }


    @ServiceActivator(inputChannel = ImportPayloadSink.CODES_INPUT)
    public void processCodes(final Message<?> message) {
        handleIncomingMessage(message, accommodationsProcessor);
    }

    @ServiceActivator(inputChannel = ImportPayloadSink.ORGANIZATION_INPUT)
    public void processOrganization(final Message<?> message) {
        handleIncomingMessage(message, organizationProcessor);
    }

    @ServiceActivator(inputChannel = ImportPayloadSink.PACKAGE_INPUT)
    public void processPackage(final Message<?> message) {
        handleIncomingMessage(message, packageProcessor);
    }

    @ServiceActivator(inputChannel = ImportPayloadSink.NORMS_INPUT)
    public void processNorms(final Message<?> message) {
        handleIncomingMessage(message, normsProcessor);
    }

    @ServiceActivator(inputChannel = ImportPayloadSink.SUBJECT_INPUT)
    public void processSubject(final Message<?> message) {
        handleIncomingMessage(message, subjectProcessor);
    }

    private void handleIncomingMessage(final Message<?> message, final ImportPayloadProcessor processor) {
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(message);
        final byte[] payload = (byte[]) message.getPayload();
        final long importId = accessor.getImportId();

        // set tenant context from message
        final String tenantId = Optional.ofNullable(accessor.getTenantId()).orElseThrow(() ->
                new IllegalArgumentException("no tenant id in " + accessor.getContent() + " message for import " + importId));
        TenantContextHolder.setTenantId(tenantId);

        // package processing is rarer so log at INFO level
        logger.info("received {} import {} for tenant id {}", accessor.getContent(), importId, tenantId);

        try {
            final String msg = processor.process(payload, importId);
            importRepository.updateStatusAndMessageById(importId, ImportStatus.PROCESSED, msg);
        } catch (final ImportException ie) {
            logger.warn("failed with an import error: " + ie);
            importRepository.updateStatusAndMessageById(importId, ie.getStatus(), ie.getMessage());
        } catch (final Exception e) {
            logger.warn("failed with an unexpected error: " + e);
            importRepository.updateStatusAndMessageById(importId, ImportStatus.BAD_DATA, e.getMessage());
        }
    }

}
