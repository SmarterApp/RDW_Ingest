package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.model.WarehouseDepthOfKnowledge;
import org.opentestsystem.rdw.ingest.processor.repository.DepthOfKnowledgeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.net.URI;
import java.util.Collection;

@Repository
class JdbcDepthOfKnowledgeRepository implements DepthOfKnowledgeRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.dok.findIdByLevelAndSubject}")
    private String findIdByLevelAndSubject;

    @Value("${sql.dok.findBySubject}")
    private String findBySubject;

    @Value("${sql.dok.insert}")
    private String sqlCreate;

    @Value("${sql.dok.hasItems}")
    private String sqlHasItems;

    @Value("${sql.dok.delete}")
    private String sqlDelete;

    @Value("${sql.dok.update}")
    private String sqlUpdate;

    @Autowired
    public JdbcDepthOfKnowledgeRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Integer findIdByLevelAndSubject(final int level, final int subjectId) {
        try {
            return jdbcTemplate.queryForObject(findIdByLevelAndSubject,
                    new MapSqlParameterSource()
                            .addValue("level", level)
                            .addValue("subjectId", subjectId), Integer.class);
        } catch (final EmptyResultDataAccessException ignore) {
            return null;
        }
    }

    @Override
    public Collection<WarehouseDepthOfKnowledge> findBySubject(final String subjectCode) {
        return jdbcTemplate.query(findBySubject,
                new MapSqlParameterSource("subject_code", subjectCode),
                (row, rowNum) -> WarehouseDepthOfKnowledge.builder()
                        .id(row.getInt("id"))
                        .level(row.getInt("level"))
                        .reference(URI.create(row.getString("reference")))
                        .build());
    }

    @Override
    public void create(final String subjectCode, final Collection<WarehouseDepthOfKnowledge> depths) {
        if (depths.isEmpty()) return;

        final MapSqlParameterSource[] batchParamters = depths.stream()
                .map(depth -> new MapSqlParameterSource("level", depth.getLevel())
                        .addValue("reference", depth.getReference().toASCIIString())
                        .addValue("subject_code", subjectCode))
                .toArray(MapSqlParameterSource[]::new);

        final int[] insertCounts = jdbcTemplate.batchUpdate(sqlCreate, batchParamters);

        for (int i = 0; i < insertCounts.length; i++) {
            if (insertCounts[i] != 1) {
                throw new IllegalArgumentException("Unable to insert Depth of Knowledge level: " + batchParamters[i].getValue("level") +
                        " reference: " + batchParamters[i].getValue("reference") +
                        " subject: " + subjectCode);
            }
        }
    }

    @Override
    public Integer hasItems(final Collection<Integer> depthIds) {
        if (depthIds.isEmpty()) return null;

        try {
            return jdbcTemplate.queryForObject(sqlHasItems,
                    new MapSqlParameterSource("depth_ids", depthIds),
                    Integer.class);
        } catch (final EmptyResultDataAccessException e) {
            return null;
        }
    }

    @Override
    public void delete(final Collection<Integer> depthIds) {
        if (depthIds.isEmpty()) return;

        jdbcTemplate.update(sqlDelete,
                new MapSqlParameterSource("depth_ids", depthIds));
    }

    @Override
    public void update(final Collection<WarehouseDepthOfKnowledge> depths) {
        if (depths.isEmpty()) return;

        final MapSqlParameterSource[] batchParamters = depths.stream()
                .map(depth -> new MapSqlParameterSource("depth_id", depth.getId())
                        .addValue("reference", depth.getReference().toASCIIString()))
                .toArray(MapSqlParameterSource[]::new);

        final int[] updateCounts = jdbcTemplate.batchUpdate(sqlUpdate, batchParamters);

        for (int i = 0; i < updateCounts.length; i++) {
            if (updateCounts[i] != 1) {
                throw new IllegalArgumentException("Unable to update Depth of Knowledge id: " + batchParamters[i].getValue("depth_id") +
                        " reference: " + batchParamters[i].getValue("reference"));
            }
        }
    }

}
