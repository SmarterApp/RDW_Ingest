package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.repository.DepthOfKnowledgeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

@Repository
class JdbcDepthOfKnowledgeRepository implements DepthOfKnowledgeRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.dok.findIdByLevelAndSubject}")
    private String findIdByLevelAndSubject;

    @Autowired
    public JdbcDepthOfKnowledgeRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * Finds an id of the depth of knowledge by its level and subjectId. Returns null if not found.
     *
     * @param level the dok level
     * @param subjectName the corresponding subject name of the for this item
     */
    @Override
    @Cacheable(value = "dokId")
    public Integer findIdByLevelAndSubject(final int level, final String subjectName) {
        try {
            return jdbcTemplate.queryForObject(findIdByLevelAndSubject,
                    new MapSqlParameterSource()
                            .addValue("level", level)
                            .addValue("subjectName", subjectName), Integer.class);
        } catch (final EmptyResultDataAccessException ignore) {
            return null;
        }
    }

}
