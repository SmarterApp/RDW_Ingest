package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.validator.Validator;
import org.apache.commons.validator.routines.FloatValidator;
import org.apache.commons.validator.routines.IntegerValidator;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Item;
import org.opentestsystem.rdw.ingest.processor.service.ReportingPackageProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.io.StringReader;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.opentestsystem.rdw.ingest.common.model.ImportStatus.BAD_DATA;
import static org.opentestsystem.rdw.ingest.common.model.ImportStatus.BAD_FORMAT;


@Service
public class DefaultAssessmentPackageProcessor implements ReportingPackageProcessor {
    private static final Logger logger = LoggerFactory.getLogger(DefaultAssessmentPackageProcessor.class);

    private Set<Assessment> assessments;
    private List<Item> items;
    private IntegerValidator intValidator;
    private FloatValidator floatValidator;

    @Autowired
    public DefaultAssessmentPackageProcessor() {
        this.assessments = new HashSet<Assessment>();
        this.items = new ArrayList<Item>();
        this.intValidator = IntegerValidator.getInstance();
        this.floatValidator = FloatValidator.getInstance();
    }

    @Override
    public void process(String assessment) throws ImportException {
        try {
            Iterable<CSVRecord> records = CSVFormat.RFC4180.withFirstRecordAsHeader().parse(new StringReader(assessment));

            // consider pulling these out to separate processing modules - one for assessments and one for items
            for(CSVRecord record : records) {
                assessments.add(Assessment.builder()
                        .withNaturalId(record.get("AssessmentId"))
                        .withName(record.get("AssessmentName"))
                        .withAcademicYear(Integer.parseInt(record.get("AcademicYear").split("-")[0]))
                        .withGrade(record.get("AssessmentGrade"))
                        .withSubject(record.get("AssessmentSubject"))
                        .withType(record.get("AssessmentType"))
                        .withLabel(record.get("AssessmentLabel"))
                        .withVersion(record.get("AssessmentVersion"))
                        .build());

               items.add(Item.builder()
                        .withItemKey(record.get("ItemId"))
                        .withClaimCode(record.get("Claim"))
                        .withTarget(record.get("Target"))
                        .withAllowCalculator(record.get("AllowCalculator").equals("Y"))
                        .withDifficulty(floatValidator.validate(record.get("avg_b")))
                        .withDOK(intValidator.validate(record.get("DOK")))
                        .withMathPractice(intValidator.validate(record.get("MathematicalPractice")))
                        .build());

            }
            logger.info(String.format("Processed %d assesssments and %d items", assessments.size(), items.size()));
        } catch (final IllegalArgumentException e) {
            throw new ImportException(BAD_DATA, e.toString());
        } catch (final IOException ioe) {
            throw new ImportException(BAD_FORMAT, ioe.toString());
        }

    }
}
