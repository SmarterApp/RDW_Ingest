package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentPackageRepository;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentPackageProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.Charset;
import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;
import static org.opentestsystem.rdw.ingest.common.model.ImportStatus.BAD_DATA;
import static org.opentestsystem.rdw.ingest.common.model.ImportStatus.BAD_FORMAT;

@Service
public class DefaultAssessmentPackageProcessor implements AssessmentPackageProcessor {
    private static final Logger logger = LoggerFactory.getLogger(DefaultAssessmentPackageProcessor.class);
    private final AssessmentParser assessmentParser;
    private final AssessmentPackageRepository packageRepository;

    @Autowired
    public DefaultAssessmentPackageProcessor(final AssessmentParser assessmentParser,
                                             final AssessmentPackageRepository packageRepository) {
        this.assessmentParser = assessmentParser;
        this.packageRepository = packageRepository;
    }

    @Override
    public void process(final byte[] assessmentPackage, final long importId) {
        // at this point we need a Reader so assume UTF-8 payload
        try (final Reader reader = new InputStreamReader(new ByteArrayInputStream(assessmentPackage), Charset.forName("utf8"))) {
            final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
            final Map<String, Assessment> assessments = newHashMap();

            //Throw bad data import exception
            for (final CSVRecord record : CSVFormat.RFC4180.withFirstRecordAsHeader().parse(reader)) {
                final Assessment asmt = assessmentParser.parse(record, errorCollector);
                if (asmt != null) assessments.put(asmt.getNaturalId(), asmt);
            }

            //If there are errors in the container, don't insert anything into the database, just bail out
            if (!errorCollector.isEmpty()) {
                throw new ImportException(BAD_DATA, errorCollector.toJson());
            }

            //Insert into database
            packageRepository.createPackage(assessments.values(), importId);

            logger.info(String.format("Processed %d assessments", assessments.size()));
        } catch (final IllegalArgumentException e) {
            throw new ImportException(BAD_DATA, e.toString());
        } catch (final IOException ioe) {
            throw new ImportException(BAD_FORMAT, ioe.toString());
        }
    }
}
