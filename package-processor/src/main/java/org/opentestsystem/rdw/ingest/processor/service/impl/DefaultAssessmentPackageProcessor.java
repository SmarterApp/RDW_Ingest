package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.processor.model.Assessment;
import org.opentestsystem.rdw.ingest.processor.model.Item;
import org.opentestsystem.rdw.ingest.processor.repository.AssessmentPackageRepository;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentPackageProcessor;
import org.opentestsystem.rdw.ingest.processor.service.AssessmentParser;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.service.ItemParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import static org.opentestsystem.rdw.ingest.common.model.ImportStatus.BAD_DATA;
import static org.opentestsystem.rdw.ingest.common.model.ImportStatus.BAD_FORMAT;


@Service
public class DefaultAssessmentPackageProcessor implements AssessmentPackageProcessor {
    private static final Logger logger = LoggerFactory.getLogger(DefaultAssessmentPackageProcessor.class);
    private final AssessmentParser assessmentParser;
    private final ItemParser itemParser;
    private final AssessmentPackageRepository packageRepository;

    @Autowired
    public DefaultAssessmentPackageProcessor(final AssessmentParser assessmentParser,
                                             final ItemParser itemParser,
                                             final AssessmentPackageRepository packageRepository) {
        this.assessmentParser = assessmentParser;
        this.itemParser = itemParser;
        this.packageRepository = packageRepository;
    }

    @Override
    public void process(final String assessmentPackage, final long importId) {
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();
        try {
            final Iterable<CSVRecord> records = CSVFormat.RFC4180.withFirstRecordAsHeader().parse(new StringReader(assessmentPackage));

            final List<Item> items = new ArrayList<>();
            final Set<Assessment> assessments = new LinkedHashSet<>();

            //Throw bad data import exception
            for (final CSVRecord record : records) {
                final Assessment asmt = assessmentParser.parse(record, errorCollector);
                final Item item = itemParser.parse(record, errorCollector);

                if (asmt != null && item != null) {
                    assessments.add(asmt);
                    items.add(item);
                }
            }

            //If there are errors in the container, don't insert anything into the database, just bail out
            if (!errorCollector.isEmpty()) {
                throw new ImportException(BAD_DATA, errorCollector.toJson());
            }

            //Insert into database
            packageRepository.createPackage(assessments.toArray(new Assessment[assessments.size()]),
                    items.toArray(new Item[items.size()]), importId);

            logger.info(String.format("Processed %d assessments and %d items", assessments.size(), items.size()));
        } catch (final IllegalArgumentException e) {
            throw new ImportException(BAD_DATA, e.toString());
        } catch (final IOException ioe) {
            throw new ImportException(BAD_FORMAT, ioe.toString());
        }
    }
}
