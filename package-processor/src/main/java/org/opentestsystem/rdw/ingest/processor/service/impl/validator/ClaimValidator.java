package org.opentestsystem.rdw.ingest.processor.service.impl.validator;

import org.opentestsystem.rdw.common.model.subject.ItemClaim;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.common.model.subject.Target;
import org.opentestsystem.rdw.ingest.processor.model.SubjectValidationContext;
import org.opentestsystem.rdw.ingest.processor.service.SubjectValidator;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;

/**
 * This validator is responsible for validating {@link ItemClaim} models as well
 * as their child {@link Target} models.
 */
@Component
class ClaimValidator implements SubjectValidator {

    @Override
    public void validate(final SubjectValidationContext context, final Subject subject) {
        if (subject.getClaims() == null) return;

        final Set<String> claimCodes = newHashSet();
        final Set<Integer> displayOrders = newHashSet();
        int scorableClaimCount = 0;
        for (final ItemClaim claim : subject.getClaims()) {
            final String code = claim.getCode();
            context.push("Claim", code);
            if (!claimCodes.add(code)) {
                context.failure("Duplicate code found: " + code);
                continue;
            }

            if (!claim.isScorable() && !claim.isOrganizational()) {
                context.failure("Claim must be scorable, organizational, or both");
            }

            if (claim.isScorable()) {
                scorableClaimCount++;
                if (claim.getDisplayOrder() == null) {
                    context.failure("Scorable Claims must have a displayOrder defined");
                } else if (!displayOrders.add(claim.getDisplayOrder())) {
                    context.failure("Duplicate display order found: " + claim.getDisplayOrder());
                }
            }

            if (!claim.isOrganizational()
                    && claim.getTargets() != null
                    && !claim.getTargets().isEmpty()) {
                context.failure("A non-organizational claim cannot contain targets");
            }

            if (claim.isOrganizational()) {
                validateTargets(context, claim.getTargets());
            }

            context.pop();
        }
        if (scorableClaimCount > 6) {
            context.push("Claims");
            context.failure("A maximum number of 6 scorable claims are supported, but found: " + scorableClaimCount);
            context.pop();
        }
    }

    private void validateTargets(final SubjectValidationContext context, final Collection<Target> targets) {
        if (targets == null) return;

        context.push("Targets");
        final Set<String> targetCodes = newHashSet();
        for (final Target target : targets) {
            final String code = target.getCode();
            if (!targetCodes.add(code)) {
                context.failure("Duplicate target code found: " + code);
            }
        }
        context.pop();
    }
}
