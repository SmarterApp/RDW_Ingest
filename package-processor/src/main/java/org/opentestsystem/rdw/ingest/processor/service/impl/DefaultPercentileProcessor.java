package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.processor.model.Percentile;
import org.opentestsystem.rdw.ingest.processor.repository.PercentileRepository;
import org.opentestsystem.rdw.ingest.processor.service.PercentileProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

import static org.opentestsystem.rdw.common.model.ImportStatus.BAD_DATA;

@Service
class DefaultPercentileProcessor implements PercentileProcessor {
    private static final Logger logger = LoggerFactory.getLogger(DefaultPercentileProcessor.class);
    private final PercentileRepository percentileRepository;
    private final PercentileParser parser;

    @Autowired
    public DefaultPercentileProcessor(final PercentileRepository percentileRepository, final PercentileParser parser) {
        this.percentileRepository = percentileRepository;
        this.parser = parser;
    }

    @Override
    public String process(final byte[] payload, final long importId) {

        final DataElementErrorCollector elementErrorCollector = new DataElementErrorCollector();
        final List<Percentile> percentiles = parser.parse(payload, elementErrorCollector);

        // Do not persist any percentiles if there are any errors in the payload.
        // todo: why not exception verse empty list
        if (!elementErrorCollector.isEmpty()) throw new ImportException(BAD_DATA, elementErrorCollector.toJson());

        percentileRepository.create(percentiles, importId);

        final String message = "Percentiles processed: " + percentiles.size();
        logger.info(message);
        return message;
    }

}