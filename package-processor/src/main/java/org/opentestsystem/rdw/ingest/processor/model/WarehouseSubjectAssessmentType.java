package org.opentestsystem.rdw.ingest.processor.model;

import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import org.opentestsystem.rdw.common.model.AssessmentType;
import org.opentestsystem.rdw.common.model.ScoreType;
import org.opentestsystem.rdw.common.model.subject.SubjectAssessmentType;

import static com.google.common.collect.Lists.newArrayList;

/**
 * This model represents the definition of an AssessmentType's attributes
 * within the context of a Subject.
 */
public class WarehouseSubjectAssessmentType {

    private AssessmentType assessmentType;
    private boolean targetReport;
    private boolean printedReport;
    private List<WarehouseSubjectAssessmentScoring> scorings;

    public AssessmentType getAssessmentType() {
        return assessmentType;
    }

    public boolean isTargetReport() {
        return targetReport;
    }

    public boolean isPrintedReport() {
        return printedReport;
    }

    public List<WarehouseSubjectAssessmentScoring> getScorings() {
        return scorings;
    }

    /**
     * Convenience method for getting scoring info for a particular ScoreType
     *
     * @param scoreType score type of interest
     * @return scoring info for score type or null if not present
     */
    public WarehouseSubjectAssessmentScoring getScoring(final ScoreType scoreType) {
        return scorings.stream().filter(s -> s.getType() == scoreType).findFirst().orElse(null);
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) return true;
        if (obj.getClass() != WarehouseSubjectAssessmentType.class) return false;

        final WarehouseSubjectAssessmentType other = (WarehouseSubjectAssessmentType) obj;
        return Objects.equals(assessmentType, other.assessmentType)
                && Objects.equals(targetReport, other.targetReport)
                && Objects.equals(printedReport, other.printedReport)
                && Objects.equals(scorings, other.scorings);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                assessmentType,
                targetReport,
                printedReport,
                scorings);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static class Builder {
        private AssessmentType assessmentType;
        private boolean targetReport;
        private boolean printedReport;
        private List<WarehouseSubjectAssessmentScoring> scorings;

        public WarehouseSubjectAssessmentType build() {
            final WarehouseSubjectAssessmentType type = new WarehouseSubjectAssessmentType();
            type.assessmentType = assessmentType;
            type.targetReport = targetReport;
            type.printedReport = printedReport;
            // force the scorings to be in a consistent order so equals and hashCode work as expected
            if (scorings != null) {
                scorings.sort(Comparator.comparing(WarehouseSubjectAssessmentScoring::getType));
            }
            type.scorings = scorings;
            return type;
        }

        public Builder copy(final SubjectAssessmentType type) {
            this.assessmentType = type.getAssessmentType();
            this.targetReport = type.isTargetReport();
            this.printedReport = type.isPrintedReport();
            if (type.getOverallScoring() != null) {
                scoring(WarehouseSubjectAssessmentScoring.builder().copy(type.getOverallScoring()).build());
            }
            if (type.getAltScoring() != null) {
                scoring(WarehouseSubjectAssessmentScoring.builder().copy(type.getAltScoring()).build());
            }
            if (type.getClaimScoring() != null) {
                scoring(WarehouseSubjectAssessmentScoring.builder().copy(type.getClaimScoring()).build());
            }
            return this;
        }

        public Builder assessmentType(final AssessmentType assessmentType) {
            this.assessmentType = assessmentType;
            return this;
        }

        public Builder targetReport(final boolean targetReport) {
            this.targetReport = targetReport;
            return this;
        }

        public Builder printedReport(final boolean printedReport) {
            this.printedReport = printedReport;
            return this;
        }

        public Builder scoring(final WarehouseSubjectAssessmentScoring scoring) {
            if (scorings == null) scorings = newArrayList();
            scorings.add(scoring);
            return this;
        }
    }
}
