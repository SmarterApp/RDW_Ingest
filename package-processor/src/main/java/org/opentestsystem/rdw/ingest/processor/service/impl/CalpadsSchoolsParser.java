package org.opentestsystem.rdw.ingest.processor.service.impl;

import com.google.common.collect.Iterables;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;
import org.opentestsystem.rdw.ingest.common.model.District;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.common.util.ParserHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.util.Collection;
import java.util.Map;

import static com.google.common.collect.Maps.newHashMap;

/**
 * Parses CALPADS schools CSV format. This is a caret-delimited file, see samples in tests.
 */
class CalpadsSchoolsParser implements OrganizationParser {
    private static final Logger logger = LoggerFactory.getLogger(CalpadsSchoolsParser.class);

    // Columns in CALPADS schools CSV
    private static final String DistrictCode = "County-District Code";
//    private static final String SchoolCode = "SchoolCode";
    private static final String AuthCdsCode = "Auth CDS Code";
//    private static final String CountyName = "County Name";
    private static final String DistrictName = "District Name";
    private static final String SchoolName = "School Name";
//    private static final String CharterSchool = "Charter School";
//    private static final String CharterStatus = "Charter Status";
//    private static final String NpsSchool = "NPS School";

    private static final CSVFormat CalpadsCSVFormat = CSVFormat.DEFAULT
            .withDelimiter('^')
            .withCommentMarker('#')
            .withFirstRecordAsHeader();

    @Override
    public Collection<School> parse(final byte[] payload, final ParserHelper parserHelper) {
        final Map<String, District> districts = newHashMap();
        final Map<String, School> schools = newHashMap();

        try (final Reader reader = new InputStreamReader(new ByteArrayInputStream(payload), StandardCharsets.UTF_8)) {
            final District.Builder districtBuilder = District.builder();
            final School.Builder schoolBuilder = School.builder();

            int count = 0;
            for (final CSVRecord record : CalpadsCSVFormat.parse(reader)) {
                if (Iterables.all(record, value -> value == null || value.trim().isEmpty())) continue;

                final String districtId = parserHelper.validate(DistrictCode, record.get(DistrictCode), 33, true) + "0000000";
                final District district = districts.computeIfAbsent(districtId, id -> districtBuilder
                        .naturalId(id)
                        .name(parserHelper.validate(DistrictName, record.get(DistrictName), 100, true))
                        .build());

                final String schoolId = parserHelper.validate(AuthCdsCode, record.get(AuthCdsCode), 40, true);
                schools.computeIfAbsent(schoolId, id -> schoolBuilder
                        .naturalId(id)
                        .name(parserHelper.validate(SchoolName, record.get(SchoolName), 100, true))
                        .district(district)
                        .build());

                ++count;
            }
            logger.info("parsed {} rows", count);
            return schools.values();

        } catch (final IOException ioe) {
            throw new IllegalArgumentException("invalid CALPADS schools payload", ioe);
        }
    }
}
