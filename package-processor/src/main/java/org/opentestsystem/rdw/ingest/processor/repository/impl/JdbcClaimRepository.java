package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.repository.ClaimRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;

/**
 * JDBC-backed implementation of a ClaimRepository.
 */
@Repository
class JdbcClaimRepository implements ClaimRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.claim.findIdBySubjectAndCode}")
    private String sqlFindIdByCode;

    @Value("${sql.claim.findCodesBySubject}")
    private String sqlFindCodesBySubject;

    @Value("${sql.claim.insert}")
    private String sqlInsertClaim;

    @Value("${sql.claim.delete}")
    private String sqlDeleteClaim;

    @Value("${sql.claim.isReferenced}")
    private String sqlClaimIsReferenced;

    @Autowired
    public JdbcClaimRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public Integer findIdByCode(final int subjectId, final String code) {
        try {
            return jdbcTemplate.queryForObject(sqlFindIdByCode,
                    new MapSqlParameterSource("code", code)
                            .addValue("subject_id", subjectId),
                    Integer.class);
        } catch (final EmptyResultDataAccessException ignore) {
            return null;
        }
    }

    @Override
    public Set<String> findCodesBySubject(final String subjectCode) {
        final Set<String> results = newHashSet();
        jdbcTemplate.query(sqlFindCodesBySubject,
                new MapSqlParameterSource("subject_code", subjectCode),
                (row) -> {
                        results.add(row.getString("code"));
                });
        return results;
    }

    @Override
    public void create(final String subjectCode, final String claimCode) {
        final int insertCount = jdbcTemplate.update(sqlInsertClaim,
                new MapSqlParameterSource("subject_code", subjectCode)
                        .addValue("claim_code", claimCode));
        if (insertCount != 1) {
            throw new IllegalArgumentException("Unable to create claim: " + claimCode + " for subject: " + subjectCode);
        }
    }

    @Override
    public void delete(final String subjectCode, final String claimCode) {
        jdbcTemplate.update(sqlDeleteClaim,
                new MapSqlParameterSource("subject_code", subjectCode)
                        .addValue("claim_code", claimCode));
    }

    @Override
    public boolean isReferenced(final String subjectCode, final String claimCode) {
        return jdbcTemplate.queryForObject(sqlClaimIsReferenced,
                new MapSqlParameterSource()
                        .addValue("subject_code", subjectCode)
                        .addValue("claim_code", claimCode),
                Boolean.class);
    }
}
