package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.repository.DepthOfKnowledgeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

/**
 * DepthOfKnowledgeRepositoryImpl - provides interaction with the depth of knowledge table
 */
@Repository
public class DepthOfKnowledgeRepositoryImpl implements DepthOfKnowledgeRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.dok.findByLevel}")
    private String findByLevelSql;

    @Autowired
    public DepthOfKnowledgeRepositoryImpl(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * Finds an id of the target by its code
     *
     * @param level the target level
     * @return the level if it exists
     * @throws IllegalArgumentException if the given level is not found
     */
    @Override
    @Cacheable(value = "dokLevel")
    public Integer findByLevel(int level) {
        try {
            return jdbcTemplate.queryForObject(findByLevelSql, new MapSqlParameterSource("level", level), Integer.class);
        } catch (EmptyResultDataAccessException ignore) {
            return null;
        }
    }

}
