package org.opentestsystem.rdw.ingest.processor.repository.impl;

import org.opentestsystem.rdw.ingest.processor.repository.TargetRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

@Repository
class JdbcTargetRepository implements TargetRepository {
    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.target.findIdByNaturalIdAndClaim}")
    private String findIdByCodeAndClaimSql;

    @Autowired
    JdbcTargetRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }


    @Override
    @Cacheable(value = "target")
    public Integer findIdByNaturalIdAndClaim(final String naturalId, final String claimCode) {
        //ClaimId is validated by this point
        try {
            return jdbcTemplate.queryForObject(findIdByCodeAndClaimSql,
                    new MapSqlParameterSource()
                            .addValue("naturalId", naturalId)
                            .addValue("claimCode", claimCode), Integer.class);
        } catch (final EmptyResultDataAccessException ignore) {
            return null;
        }
    }
}
