package org.opentestsystem.rdw.ingest.processor.model;

import java.util.Collection;
import java.util.Objects;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;
import static org.opentestsystem.rdw.ingest.common.util.JdbcUtil.equivalent;

/**
 * This is a representation of metadata for an item from the Tabulator processing of an assessment package
 */
public class Item {
    private Integer id;
    private String naturalId;
    private int claimId;
    private int targetId;
    private double difficulty;
    private int dokId;
    private Integer position;
    private Integer mathPractice;
    private Boolean allowCalculator;
    private double maxPoints;
    private Set<Integer> commonCoreStandards;
    private Set<Integer> otherTargets;
    private Boolean isFieldTest;
    private Boolean isActive;
    private Integer optionsCount;
    private String type;
    private String answerKey;

    public Integer getId() {
        return id;
    }

    public String getNaturalId() {
        return naturalId;
    }

    public int getClaimId() {
        return claimId;
    }

    public int getTargetId() {
        return targetId;
    }

    public double getDifficulty() {
        return difficulty;
    }

    public int getDokId() {
        return dokId;
    }

    public Integer getPosition() {
        return position;
    }

    public Integer getMathPractice() {
        return mathPractice;
    }

    public Boolean getAllowCalculator() {
        return allowCalculator;
    }

    public double getMaxPoints() {
        return maxPoints;
    }

    public Iterable<Integer> getCommonCoreStandards() {
        return commonCoreStandards == null ? newHashSet() : newHashSet(commonCoreStandards);
    }

    public Iterable<Integer> getOtherTargets() {
        return otherTargets == null ? newHashSet() : newHashSet(otherTargets);
    }

    public Boolean getFieldTest() {
        return isFieldTest;
    }

    public Boolean getActive() {
        return isActive;
    }

    public Integer getOptionsCount() {
        return optionsCount;
    }

    public String getType() {
        return type;
    }

    public String getAnswerKey() {
        return answerKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        final Item that = (Item) o;

        return Objects.equals(id, that.id)
                && Objects.equals(naturalId, that.naturalId)
                && (claimId == that.claimId)
                && (targetId == that.targetId)
                && equivalent(difficulty, that.difficulty)
                && (dokId == that.dokId)
                && Objects.equals(position, that.position)
                && Objects.equals(mathPractice, that.mathPractice)
                && Objects.equals(allowCalculator, that.allowCalculator)
                && equivalent(maxPoints, that.maxPoints)
                && (isFieldTest == that.isFieldTest)
                && (isActive == that.isActive)
                && (optionsCount == that.optionsCount)
                && Objects.equals(type, that.type)
                && Objects.equals(answerKey, that.answerKey)
                && Objects.equals(commonCoreStandards, that.commonCoreStandards)
                && Objects.equals(otherTargets, that.otherTargets);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, naturalId, claimId, targetId, difficulty, dokId, position, mathPractice, allowCalculator, maxPoints,
                isFieldTest, isActive, optionsCount, type, answerKey, commonCoreStandards == null ? null : commonCoreStandards.hashCode(), otherTargets == null ? null : otherTargets.hashCode());
    }

    /**
     * Builder class for the Item object
     */
    public static class Builder {
        private Integer id;
        private String naturalId;
        private Integer claimId;
        private Integer targetId;
        private Double difficulty;
        private Integer dokId;
        private Integer position;
        private Integer mathPractice;
        private Boolean allowCalculator;
        private Double maxPoints;
        private Set<Integer> commonCoreStandards = newHashSet();
        private Set<Integer> otherTargets = newHashSet();
        private Boolean isFieldTest;
        private Boolean isActive;
        private Integer optionsCount;
        private String type;
        private String answerKey;

        public Item build() {
            final Item item = new Item();
            item.id = id;
            item.naturalId = naturalId;
            item.claimId = claimId;
            item.targetId = targetId;
            item.difficulty = difficulty;
            item.dokId = dokId;
            item.position = position;
            item.mathPractice = mathPractice;
            item.allowCalculator = allowCalculator;
            item.maxPoints = maxPoints;
            item.commonCoreStandards = commonCoreStandards;
            item.otherTargets = otherTargets;
            item.isFieldTest = isFieldTest;
            item.isActive = isActive;
            item.optionsCount = optionsCount;
            item.type = type;
            item.answerKey = answerKey;
            return item;
        }

        public Builder copy(final Item toCopy) {
            this.id = toCopy.id;
            this.naturalId = toCopy.naturalId;
            this.claimId = toCopy.claimId;
            this.targetId = toCopy.targetId;
            this.difficulty = toCopy.difficulty;
            this.dokId = toCopy.dokId;
            this.position = toCopy.position;
            this.mathPractice = toCopy.mathPractice;
            this.allowCalculator = toCopy.allowCalculator;
            this.maxPoints = toCopy.maxPoints;
            this.commonCoreStandards = toCopy.commonCoreStandards;
            this.otherTargets = toCopy.otherTargets;
            this.isFieldTest = toCopy.isFieldTest;
            this.isActive = toCopy.isActive;
            this.optionsCount = toCopy.optionsCount;
            this.type = toCopy.type;
            this.answerKey = toCopy.answerKey;
            return this;
        }

        public Builder id(final Integer id) {
            this.id = id;
            return this;
        }

        public Integer getId() {
            return id;
        }

        public Builder commonCoreStandards(final Collection<Integer> commonCoreStandards) {
            this.commonCoreStandards = commonCoreStandards == null ? newHashSet() : newHashSet(commonCoreStandards);
            return this;
        }

        public Builder otherTargets(final Iterable<Integer> otherTargets) {
            this.otherTargets = otherTargets == null ? newHashSet() : newHashSet(otherTargets);
            return this;
        }

        public Builder naturalId(final String naturalId) {
            this.naturalId = naturalId;
            return this;
        }

        public Builder claimId(final Integer claimId) {
            this.claimId = claimId;
            return this;
        }

        public Builder targetId(final Integer targetId) {
            this.targetId = targetId;
            return this;
        }

        public Builder difficulty(final Double difficulty) {
            this.difficulty = difficulty;
            return this;
        }

        public Builder dokId(final Integer dokId) {
            this.dokId = dokId;
            return this;
        }

        public Builder position(final Integer position) {
            this.position = position;
            return this;
        }

        public Builder mathPractice(final Integer mathPractice) {
            this.mathPractice = mathPractice;
            return this;
        }

        public Builder allowCalculator(final Boolean allowCalculator) {
            this.allowCalculator = allowCalculator;
            return this;
        }

        public Builder maxPoints(final Double maxPoints) {
            this.maxPoints = maxPoints;
            return this;
        }

        public Builder fieldTest(final Boolean fieldTest) {
            isFieldTest = fieldTest;
            return this;
        }

        public Builder active(final Boolean active) {
            isActive = active;
            return this;
        }

        public Builder optionsCount(final Integer optionsCount) {
            this.optionsCount = optionsCount;
            return this;
        }

        public Builder type(final String type) {
            this.type = type;
            return this;
        }

        public Builder answerKey(final String answerKey) {
            this.answerKey = answerKey;
            return this;
        }
    }
}