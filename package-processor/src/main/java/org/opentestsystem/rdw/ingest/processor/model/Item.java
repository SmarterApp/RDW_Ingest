package org.opentestsystem.rdw.ingest.processor.model;

import javax.validation.constraints.NotNull;
import java.util.Objects;

/**
 * This is a representation of metadata for an item from the Tabulator processing of an assessment package
 */
public class Item {
    private final String itemKey;
    private final String claimCode;
    private final String target;
    private final float difficulty;
    private final int dok;
    private Integer mathPractice;
    private Boolean allowCalculator;
    private Integer maxScore;

    private Item(@NotNull final String itemKey, @NotNull final String claimCode, @NotNull final String target,
                @NotNull final float difficulty, @NotNull final int dok) {
        this.itemKey = itemKey;
        this.claimCode = claimCode;
        this.target = target;
        this.difficulty = difficulty;
        this.dok = dok;
        this.mathPractice = mathPractice;
        this.allowCalculator = allowCalculator;
    }

    public String getItemKey() {
        return itemKey;
    }

    public String getClaimCode() {
        return claimCode;
    }

    public String getTarget() {
        return target;
    }

    public float getDifficulty() {
        return difficulty;
    }

    public Integer getDok() {
        return dok;
    }

    public Integer getMathPractice() {
        return mathPractice;
    }

    public boolean isAllowCalculator() {
        return allowCalculator;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * This instance is equal to all instances of {@code Assessment} that have equal attribute values.
     * @return {@code true} if {@code this} is equal to {@code another} instance
     */
    @Override
    public boolean equals(Object another) {
        if (this == another) return true;
        return another instanceof Item
                && equalTo((Item) another);
    }

    private boolean equalTo(Item another) {
        return Objects.equals(itemKey, another.itemKey) &&
            Objects.equals(claimCode, another.claimCode) &&
            Objects.equals(target, another.target) &&
            difficulty == another.difficulty &&
            dok == another.dok &&
            mathPractice == another.mathPractice &&
            Objects.equals(allowCalculator, another.allowCalculator);
    }

    /**
     * Computes a hash code from attributes.
     * @return hashCode value
     */
    @Override
    public int hashCode() {
        return Objects.hash(itemKey, claimCode, target, difficulty, dok, mathPractice, allowCalculator); }

    public static class Builder {
        private String itemKey;
        private String claimCode;
        private String target;
        private float difficulty;
        private int dok;
        private Integer mathPractice;
        private Boolean allowCalculator;

        public Item build() {
            final Item item = new Item(itemKey, claimCode, target, difficulty, dok);
            mathPractice = item.mathPractice;
            allowCalculator = item.allowCalculator;
            return item;
        }

        public Builder itemKey(String itemKey){
            this.itemKey = itemKey;
            return this;
        }
        public Builder claimCode(String claimCode){
            this.claimCode = claimCode;
            return this;
        }
        public Builder target(String target){
            this.target = target;
            return this;
        }
        public Builder difficulty(float difficulty){
            this.difficulty = difficulty;
            return this;
        }
        public Builder dok(Integer dok){
            this.dok = dok;
            return this;
        }
        public Builder mathPractice(Integer mathPractice){
            this.mathPractice = mathPractice;
            return this;
        }
        public Builder allowCalculator(Boolean allowCalculator){
            this.allowCalculator = allowCalculator;
            return this;
        }
    }
}