package org.opentestsystem.rdw.ingest.processor.model;

import com.mysql.jdbc.StringUtils;

import javax.validation.constraints.NotNull;
import java.util.Objects;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

/**
 * This is a representation of metadata for an item from the Tabulator processing of an assessment package
 */
public class Item {
    private final String naturalId;
    private final int claimId;
    private final int targetId;
    private final float difficulty;
    private final int dokId;
    private Integer mathPractice;
    private Boolean allowCalculator;
    private String assessmentNaturalId;

    private Item(@NotNull Builder builder) {
        this.naturalId = builder.naturalId;
        this.claimId = builder.claimId;
        this.targetId = builder.targetId;
        this.difficulty = builder.difficulty;
        this.dokId = builder.dokId;
        this.mathPractice = builder.mathPractice;
        this.allowCalculator = builder.allowCalculator;
        this.assessmentNaturalId = builder.assessmentNaturalId;
    }

    public String getNaturalId() {
        return naturalId;
    }

    public int getClaimCodeId() {
        return claimId;
    }

    public int getTargetId() {
        return targetId;
    }

    public float getDifficulty() {
        return difficulty;
    }

    public int getDokId() {
        return dokId;
    }

    public Integer getMathPractice() {
        return mathPractice;
    }

    public boolean isAllowCalculator() {
        return allowCalculator;
    }

    public String getAssessmentNaturalId() {
        return assessmentNaturalId;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * This instance is equal to all instances of {@code Assessment} that have equal attribute values.
     * @return {@code true} if {@code this} is equal to {@code another} instance
     */
    @Override
    public boolean equals(Object another) {
        if (this == another) return true;
        return another instanceof Item
                && equalTo((Item) another);
    }

    private boolean equalTo(Item another) {
        return Objects.equals(naturalId, another.naturalId) &&
                claimId == another.claimId &&
                targetId == another.targetId &&
                difficulty == another.difficulty &&
                dokId == another.dokId &&
                assessmentNaturalId == another.assessmentNaturalId &&
                mathPractice == another.mathPractice &&
                Objects.equals(allowCalculator, another.allowCalculator);
    }

    /**
     * Computes a hash code from attributes.
     * @return hashCode value
     */
    @Override
    public int hashCode() {
        return Objects.hash(naturalId, claimId, targetId, difficulty, dokId, mathPractice, allowCalculator); }

    public static class Builder {
        private String naturalId;
        private Integer claimId;
        private Integer targetId;
        private Float difficulty;
        private Integer dokId;
        private String assessmentNaturalId;
        //Optional fields if this is a math item
        private Integer mathPractice;
        private Boolean allowCalculator;


        public Item build() {
            checkArgument(!StringUtils.isNullOrEmpty(naturalId), "Item naturalId cannot be null");
            checkArgument(!StringUtils.isNullOrEmpty(assessmentNaturalId), "Item assessmentNaturalId cannot be null");

            try {
                checkNotNull(claimId, "Item claimId cannot be null");
                checkNotNull(targetId, "Item targetId cannot be null");
                checkNotNull(difficulty, "Item difficulty cannot be null");
                checkNotNull(dokId, "Item dokId cannot be null");
            }catch (NullPointerException npe) {
                throw new IllegalArgumentException(npe.getMessage());
            }

            final Item item = new Item(this);
            return item;
        }

        public Builder naturalId(String naturalId){
            this.naturalId = naturalId;
            return this;
        }
        public Builder claimId(int claimId){
            this.claimId = claimId;
            return this;
        }
        public Builder targetId(int targetId){
            this.targetId = targetId;
            return this;
        }
        public Builder difficulty(float difficulty){
            this.difficulty = difficulty;
            return this;
        }
        public Builder dokId(int dokId){
            this.dokId = dokId;
            return this;
        }
        public Builder mathPractice(Integer mathPractice){
            this.mathPractice = mathPractice;
            return this;
        }
        public Builder allowCalculator(Boolean allowCalculator){
            this.allowCalculator = allowCalculator;
            return this;
        }

        public Builder assessmentNaturalId(String asmtNaturalId) {
            this.assessmentNaturalId = asmtNaturalId;
            return this;
        }
    }
}