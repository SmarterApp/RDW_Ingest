package org.opentestsystem.rdw.ingest.processor.model;

import javax.validation.constraints.NotNull;
import java.util.Objects;

/**
 * This is a representation of metadata for an item from the Tabulator processing of an assessment package
 */
public class Item {
    private final String naturalId;
    private final int claimId;
    private final int targetId;
    private final double difficulty;
    private final int dok;
    private Integer mathPractice;
    private Boolean allowCalculator;
    private String assessmentNaturalId;
    private final int maxPoints;

    private Item(@NotNull Builder builder) {
        this.naturalId = builder.naturalId;
        this.claimId = builder.claimId;
        this.targetId = builder.targetId;
        this.difficulty = builder.difficulty;
        this.dok = builder.dok;
        this.mathPractice = builder.mathPractice;
        this.allowCalculator = builder.allowCalculator;
        this.assessmentNaturalId = builder.assessmentNaturalId;
        this.maxPoints = builder.maxPoints;
    }

    public static Builder builder() {
        return new Builder();
    }

    public String getNaturalId() {
        return naturalId;
    }

    public int getClaimCodeId() {
        return claimId;
    }

    public int getTargetId() {
        return targetId;
    }

    public double getDifficulty() {
        return difficulty;
    }

    public int getDok() {
        return dok;
    }

    public Integer getMathPractice() {
        return mathPractice;
    }

    public Boolean getAllowCalculator() {
        return allowCalculator;
    }

    public String getAssessmentNaturalId() {
        return assessmentNaturalId;
    }

    public int getMaxPoints() {
        return maxPoints;
    }

    /**
     * This instance is equal to all instances of {@code Assessment} that have equal attribute values.
     *
     * @return {@code true} if {@code this} is equal to {@code another} instance
     */
    @Override
    public boolean equals(Object another) {
        if (this == another) return true;
        return another instanceof Item
                && equalTo((Item) another);
    }

    private boolean equalTo(Item another) {
        return Objects.equals(naturalId, another.naturalId) &&
                claimId == another.claimId &&
                targetId == another.targetId &&
                difficulty == another.difficulty &&
                dok == another.dok &&
                maxPoints == another.maxPoints &&
                assessmentNaturalId.equals(another.assessmentNaturalId) &&
                mathPractice.equals(another.mathPractice) &&
                allowCalculator.equals(another.allowCalculator);
    }

    /**
     * Computes a hash code from attributes.
     *
     * @return hashCode value
     */
    @Override
    public int hashCode() {
        return Objects.hash(naturalId, claimId, targetId, difficulty, dok, mathPractice, allowCalculator, maxPoints);
    }

    /**
     * Builder class for the Item object
     */
    public static class Builder {
        private String naturalId;
        private Integer claimId;
        private Integer targetId;
        private Double difficulty;
        private Integer dok;
        private String assessmentNaturalId;
        //Optional fields if this is a math item
        private Integer mathPractice;
        private Boolean allowCalculator;
        private Integer maxPoints;


        public Item build() {
            final Item item = new Item(this);
            return item;
        }

        public Builder naturalId(String naturalId) {
            this.naturalId = naturalId;
            return this;
        }

        public Builder claimId(Integer claimId) {
            this.claimId = claimId;
            return this;
        }

        public Builder targetId(Integer targetId) {
            this.targetId = targetId;
            return this;
        }

        public Builder difficulty(Double difficulty) {
            this.difficulty = difficulty;
            return this;
        }

        public Builder dok(Integer dok) {
            this.dok = dok;
            return this;
        }

        public Builder mathPractice(Integer mathPractice) {
            this.mathPractice = mathPractice;
            return this;
        }

        public Builder allowCalculator(Boolean allowCalculator) {
            this.allowCalculator = allowCalculator;
            return this;
        }

        public Builder assessmentNaturalId(String asmtNaturalId) {
            this.assessmentNaturalId = asmtNaturalId;
            return this;
        }

        public Builder maxPoints(Integer maxPoints) {
            this.maxPoints = maxPoints;
            return this;
        }
    }
}