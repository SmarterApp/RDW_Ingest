package org.opentestsystem.rdw.ingest.processor.model;

import javax.validation.constraints.NotNull;
import java.util.Collection;
import java.util.Set;

import static com.google.common.collect.Sets.newHashSet;

/**
 * This is a representation of metadata for an item from the Tabulator processing of an assessment package
 */
public class Item {
    private final String naturalId;
    private final int claimId;
    private final int targetId;
    private final double difficulty;
    private final int dokId;
    private final Integer position;
    private final Integer mathPractice;
    private final Boolean allowCalculator;
    private final double maxPoints;
    private final Set<Integer> commonCoreStandards;
    private final Set<Integer> otherTargets;

    private Item(@NotNull final Builder builder) {
        this.naturalId = builder.naturalId;
        this.claimId = builder.claimId;
        this.targetId = builder.targetId;
        this.difficulty = builder.difficulty;
        this.dokId = builder.dokId;
        this.position = builder.position;
        this.mathPractice = builder.mathPractice;
        this.allowCalculator = builder.allowCalculator;
        this.maxPoints = builder.maxPoints;
        this.commonCoreStandards = builder.commonCoreStandards;
        this.otherTargets = builder.otherTargets;
    }

    public static Builder builder() {
        return new Builder();
    }

    public String getNaturalId() {
        return naturalId;
    }

    public int getClaimId() {
        return claimId;
    }

    public int getTargetId() {
        return targetId;
    }

    public double getDifficulty() {
        return difficulty;
    }

    public int getDokId() {
        return dokId;
    }

    public Integer getPosition() {
        return position;
    }

    public Integer getMathPractice() {
        return mathPractice;
    }

    public Boolean getAllowCalculator() {
        return allowCalculator;
    }

    public double getMaxPoints() {
        return maxPoints;
    }

    public Iterable<Integer> getCommonCoreStandards() {
        return commonCoreStandards;
    }

    public Iterable<Integer> getOtherTargets() {
        return otherTargets;
    }

    /**
     * Builder class for the Item object
     */
    public static class Builder {
        private String naturalId;
        private Integer claimId;
        private Integer targetId;
        private Double difficulty;
        private Integer dokId;
        private Integer position;
        //Optional fields if this is a math item
        private Integer mathPractice;
        private Boolean allowCalculator;
        private Double maxPoints;
        private Set<Integer> commonCoreStandards = newHashSet();
        private Set<Integer> otherTargets = newHashSet();

        public Item build() {
            return new Item(this);
        }

        public Builder commonCoreStandards(final Collection<Integer> commonCoreStandards) {
            if (commonCoreStandards != null) {
                this.commonCoreStandards.addAll(commonCoreStandards);
            }
            return this;
        }

        public Builder otherTargets(final Iterable<Integer> otherTargets) {
            this.otherTargets = otherTargets == null ? newHashSet() : newHashSet(otherTargets);
            return this;
        }

        public Builder naturalId(final String naturalId) {
            this.naturalId = naturalId;
            return this;
        }

        public Builder claimId(final Integer claimId) {
            this.claimId = claimId;
            return this;
        }

        public Builder targetId(final Integer targetId) {
            this.targetId = targetId;
            return this;
        }

        public Builder difficulty(final Double difficulty) {
            this.difficulty = difficulty;
            return this;
        }

        public Builder dokId(final Integer dokId) {
            this.dokId = dokId;
            return this;
        }

        public Builder position(final Integer position) {
            this.position = position;
            return this;
        }

        public Builder mathPractice(final Integer mathPractice) {
            this.mathPractice = mathPractice;
            return this;
        }

        public Builder allowCalculator(final Boolean allowCalculator) {
            this.allowCalculator = allowCalculator;
            return this;
        }

        public Builder maxPoints(final Double maxPoints) {
            this.maxPoints = maxPoints;
            return this;
        }
    }
}