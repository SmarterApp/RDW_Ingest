package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.common.model.LocationStrategy;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.common.model.subject.SubjectSerializationService;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.util.LocationAwareErrorCollector;
import org.opentestsystem.rdw.ingest.processor.service.SubjectAssessmentTypeService;
import org.opentestsystem.rdw.ingest.processor.service.SubjectClaimService;
import org.opentestsystem.rdw.ingest.processor.service.SubjectProcessor;
import org.opentestsystem.rdw.ingest.processor.service.SubjectService;
import org.opentestsystem.rdw.ingest.processor.service.SubjectTargetService;
import org.opentestsystem.rdw.ingest.processor.service.SubjectValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.io.InputStream;
import java.util.Set;

import static org.opentestsystem.rdw.common.model.ImportContent.SUBJECT;
import static org.opentestsystem.rdw.common.model.ImportStatus.BAD_FORMAT;

/**
 * This processor is responsible for processing Subject definition inserts and updates.
 */
@Service
class DefaultSubjectProcessor implements SubjectProcessor {
    private static final Logger logger = LoggerFactory.getLogger(DefaultSubjectProcessor.class);

    private final ArchiveService archiveService;
    private final SubjectSerializationService serializationService;
    private final Set<SubjectValidator> validators;
    private final SubjectService subjectService;
    private final SubjectAssessmentTypeService subjectAssessmentTypeService;
    private final SubjectClaimService claimService;
    private final SubjectTargetService targetService;

    @Autowired
    public DefaultSubjectProcessor(final ArchiveService archiveService,
                                   final SubjectSerializationService serializationService,
                                   final Set<SubjectValidator> validators,
                                   final SubjectService subjectService,
                                   final SubjectAssessmentTypeService subjectAssessmentTypeService,
                                   final SubjectClaimService claimService,
                                   final SubjectTargetService targetService) {
        this.archiveService = archiveService;
        this.serializationService = serializationService;
        this.validators = validators;
        this.subjectService = subjectService;
        this.subjectAssessmentTypeService = subjectAssessmentTypeService;
        this.claimService = claimService;
        this.targetService = targetService;
    }

    @Override
    @Transactional
    public String process(final byte[] payload, final long importId) throws ImportException {
        final String digest = new String(payload);
        final String location = new LocationStrategy.ImportContentLocationStrategy(SUBJECT).location(digest);
        try (final InputStream subjectData = archiveService.openResource(location)) {
            final Subject subject = serializationService.parseSubject(subjectData);

            final LocationAwareErrorCollector validationContext = validate(subject);
            if (!validationContext.isValid()) {
                throw new ImportException(BAD_FORMAT, validationContext.toJson());
            }

            subjectService.upsert(subject, importId);
            subjectAssessmentTypeService.upsert(subject);
            claimService.upsert(subject);
            targetService.upsert(subject);
            //TODO scorableClaimService, standardService, translationService

            return "Subject " + subject.getName() + " (" + subject.getCode() + ") processed";
        } catch (final IOException e) {
            logger.warn("Unable to read Subject resource", e);
            throw new ImportException(BAD_FORMAT, "Unable to read Subject resource: " + e.getMessage());
        }
    }

    private LocationAwareErrorCollector validate(final Subject subject) {
        final LocationAwareErrorCollector context = new LocationAwareErrorCollector();
        for (final SubjectValidator validator : validators) {
            validator.validate(context, subject);
        }
        return context;
    }

}
