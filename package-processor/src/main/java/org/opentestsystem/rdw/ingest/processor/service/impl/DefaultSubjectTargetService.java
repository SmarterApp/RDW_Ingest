package org.opentestsystem.rdw.ingest.processor.service.impl;

import org.opentestsystem.rdw.common.model.subject.ItemClaim;
import org.opentestsystem.rdw.common.model.subject.Subject;
import org.opentestsystem.rdw.common.model.subject.Target;
import org.opentestsystem.rdw.ingest.processor.model.WarehouseTarget;
import org.opentestsystem.rdw.ingest.processor.repository.TargetRepository;
import org.opentestsystem.rdw.ingest.processor.service.SubjectTargetService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Default implementation of a SubjectTargetService
 */
@Service
class DefaultSubjectTargetService  implements SubjectTargetService {

    private final TargetRepository repository;

    @Autowired
    public DefaultSubjectTargetService(final TargetRepository repository) {
        this.repository = repository;
    }

    @Override
    public void upsert(final Subject subject) {
        final Map<String, WarehouseTarget> existing = repository.findBySubject(subject.getCode()).stream()
                .collect(Collectors.toMap(
                        this::getKey,
                        target -> target
                ));

        for (final ItemClaim claim : subject.getClaims()) {
            if (!claim.isOrganizational()) continue;

            final List<Target> submitted = claim.getTargets();
            if (submitted == null) continue;

            for (final Target target : submitted) {
                if (existing.remove(getKey(claim, target)) != null) continue;

                repository.create(subject.getCode(), claim.getCode(), target.getCode());
            }
        }

        for (final WarehouseTarget staleTarget : existing.values()) {
            if (repository.hasItems(staleTarget.getId())) {
                throw new IllegalArgumentException("Cannot remove target: " + staleTarget.getNaturalId() +
                        " for claim: " + staleTarget.getClaimCode() + " subject: " + subject.getCode() +
                        " because it is referenced by assessment items");
            }
            repository.delete(staleTarget.getId());
        }
    }

    private String getKey(final WarehouseTarget target) {
        return target.getClaimCode() + "|" + target.getNaturalId();
    }

    private String getKey(final ItemClaim claim, final Target target) {
        return claim.getCode() + "|" + target.getCode();
    }
}
