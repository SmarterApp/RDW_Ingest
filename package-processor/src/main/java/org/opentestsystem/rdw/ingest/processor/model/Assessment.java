package org.opentestsystem.rdw.ingest.processor.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * An assessment used to marshal data in to the database
 */
public class Assessment {
    private final String naturalId;
    private final String name;
    private final int gradeId;
    private final String label;
    private final int typeId;
    private final int subjectId;
    private final int academicYear;
    private final String version;
    private final double minScore;
    private final double maxScore;
    private final List<Double> cutPoints;


    private Assessment(Builder asmtBuilder) {
        this.naturalId = asmtBuilder.naturalId;
        this.name = asmtBuilder.name;
        this.gradeId = asmtBuilder.gradeId;
        this.typeId = asmtBuilder.typeId;
        this.subjectId = asmtBuilder.subjectId;
        this.academicYear = asmtBuilder.academicYear;
        this.label = asmtBuilder.label;
        this.version = asmtBuilder.version;
        this.minScore = asmtBuilder.minScore;
        this.maxScore = asmtBuilder.maxScore;
        this.cutPoints = asmtBuilder.cutPoints;
    }

    public String getNaturalId() {
        return naturalId;
    }

    public String getName() {
        return name;
    }

    public int getGradeId() {
        return gradeId;
    }

    public String getLabel() {
        return label;
    }

    public int getTypeId() {
        return typeId;
    }

    public int getSubjectId() {
        return subjectId;
    }

    public int getAcademicYear() {
        return academicYear;
    }

    public String getVersion() {
        return version;
    }

    public double getMinScore() {
        return minScore;
    }

    public double getMaxScore() {
        return maxScore;
    }

    public List<Double> getCutPoints() {
        return cutPoints;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * This instance is equal to all instances of {@code Assessment} that have equal attribute values.
     * @return {@code true} if {@code this} is equal to {@code another} instance
     */
    @Override
    public boolean equals(Object another) {
        if (this == another) return true;
        return another instanceof Assessment
                && equalTo((Assessment) another);
    }

    private boolean equalTo(Assessment another) {
        return academicYear == another.academicYear &&
                Objects.equals(minScore, another.minScore) &&
                Objects.equals(maxScore, another.maxScore) &&
                Objects.equals(naturalId, another.naturalId) &&
                Objects.equals(gradeId, another.gradeId) &&
                Objects.equals(typeId, another.typeId) &&
                Objects.equals(subjectId, another.subjectId) &&
                Objects.equals(name, another.name) &&
                Objects.equals(label, another.label) &&
                Objects.equals(version, another.version) &&
                Objects.equals(cutPoints, another.cutPoints);
    }

    /**
     * Computes a hash code from attributes.
     * @return hashCode value
     */
    @Override
    public int hashCode() {
        return Objects.hash(naturalId, gradeId, typeId, subjectId, academicYear, name, label, version, minScore,
                maxScore, cutPoints);
    }


    /**
     * The Builder for the {@link Assessment}
     */
    public static class Builder {
        private String naturalId;
        private String name;
        private String label;
        private Integer academicYear;
        private String version;

        //The following are validated against translation tables in the database
        private Integer gradeId;
        private Integer typeId;
        private Integer subjectId;
        //Not checked against database, but required to exist
        private List<Double> cutPoints;
        private Double minScore;
        private Double maxScore;

        public Assessment build() {

            final Assessment assessment = new Assessment(this);
            return assessment;
        }

        public Builder naturalId(final String naturalId) {
            this.naturalId = naturalId;
            return this;
        }

        public Builder gradeId(final Integer gradeId) {
            this.gradeId = gradeId;
            return this;
        }

        public Builder typeId(final Integer typeId) {
            this.typeId = typeId;
            return this;
        }

        public Builder academicYear(final Integer academicYear) {
            this.academicYear = academicYear;
            return this;
        }

        public Builder subjectId(final Integer subjectId) {
            this.subjectId = subjectId;
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder label(final String label) {
            this.label = label;
            return this;
        }

        public Builder version(final String version) {
            this.version = version;
            return this;
        }

        public Builder cutPoints(final Double... cutPoints) {
            this.cutPoints = new ArrayList<Double>();

            this.cutPoints.addAll(Arrays.asList(cutPoints));

            return this;
        }

        public Builder minScore(final Double minScore) {
            this.minScore = minScore;
            return this;
        }

        public Builder maxScore(final Double maxScore) {
            this.maxScore = maxScore;
            return this;
        }

    }
}

