package org.opentestsystem.rdw.ingest.processor.model;

import com.mysql.jdbc.StringUtils;

import java.util.List;
import java.util.Objects;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Lists.newArrayList;

/**
 * An assessment used to marshal data in to the database
 */
public class Assessment {
    private final String naturalId;
    private final String name;
    private final int gradeCode;
    private final String label;
    private final int typeCode;
    private final int subjectCode;
    private final int academicYear;
    private final String version;

    // TODO: 3/29/17 Shrink size of constructor
    private Assessment(final String naturalId, final String name, final int gradeCode, final String label,
                       final int typeCode, final int subjectCode, final int academicYear, final String version) {
        checkArgument(!StringUtils.isNullOrEmpty(naturalId), "invalid natural id");
        this.naturalId = naturalId;
        this.name = name;
        this.gradeCode = gradeCode;
        this.typeCode = typeCode;
        this.subjectCode = subjectCode;
        this.academicYear = academicYear;
        this.label = label;
        this.version = version;
    }

    public String getName() {
        return name;
    }

    public String getLabel() {
        return label;
    }

    public String getVersion() {
        return version;
    }

    public int getGrade() {
        return gradeCode;
    }

    public int getType() {
        return typeCode;
    }

    public int getSubject() {
        return subjectCode;
    }

    public int getAcademicYear() {
        return academicYear;
    }

    public String getNaturalId() {
        return naturalId;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * This instance is equal to all instances of {@code Assessment} that have equal attribute values.
     * @return {@code true} if {@code this} is equal to {@code another} instance
     */
    @Override
    public boolean equals(Object another) {
        if (this == another) return true;
        return another instanceof Assessment
                && equalTo((Assessment) another);
    }

    private boolean equalTo(Assessment another) {
        return academicYear == another.academicYear &&
                Objects.equals(naturalId, another.naturalId) &&
                Objects.equals(gradeCode, another.gradeCode) &&
                Objects.equals(typeCode, another.typeCode) &&
                Objects.equals(subjectCode, another.subjectCode) &&
                Objects.equals(name, another.name) &&
                Objects.equals(label, another.label) &&
                Objects.equals(version, another.version);
    }

    /**
     * Computes a hash code from attributes.
     * @return hashCode value
     */
    @Override
    public int hashCode() {
        return Objects.hash(naturalId, gradeCode, typeCode, subjectCode, academicYear, name, label, version);
    }


    /**
     * The Builder for the {@link Assessment}
     */
    public static class Builder {
        private String naturalId;
        private String name;
        private int gradeCode;
        private String label;
        private int typeCode;
        private int subjectCode;
        private int academicYear;
        private String version;
        private List<Integer> cutPoints;
        private Integer minScore;
        private Integer maxScore;

        public Assessment build() {
            final Assessment assessment = new Assessment(naturalId, name, gradeCode, label, typeCode, subjectCode, academicYear, version);
            return assessment;
        }

        public Builder naturalId(final String naturalId) {
            this.naturalId = naturalId;
            return this;
        }

        public Builder gradeCode(final int gradeCode) {
            this.gradeCode = gradeCode;
            return this;
        }

        public Builder typeCode(final int typeCode) {
            this.typeCode = typeCode;
            return this;
        }

        public Builder academicYear(final int academicYear) {
            this.academicYear = academicYear;
            return this;
        }

        public Builder subjectCode(final int subjectCode) {
            this.subjectCode = subjectCode;
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder label(final String label) {
            this.label = label;
            return this;
        }

        public Builder version(final String version) {
            this.version = version;
            return this;
        }

        public Builder cutPoints(final List<Integer> cutPoints) {
            this.cutPoints = cutPoints;
            return this;
        }

        public Builder copy(final Assessment assessment) {
            naturalId(assessment.getNaturalId());
            gradeCode(assessment.getGrade());
            typeCode(assessment.getType());
            subjectCode(assessment.getSubject());
            academicYear(assessment.getAcademicYear());
            label(assessment.getLabel());
            name(assessment.getName());
            version(assessment.getVersion());
            return this;
        }
    }
}

