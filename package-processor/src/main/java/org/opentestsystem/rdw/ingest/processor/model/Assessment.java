package org.opentestsystem.rdw.ingest.processor.model;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * An assessment used to marshal data in to the database
 */
public class Assessment {
    private Integer id;
    private String naturalId;
    private String name;
    private int gradeId;
    private String label;
    private int typeId;
    private int subjectId;
    private int schoolYear;
    private String version;
    private List<AssessmentScore> scores;
    private List<Item> items;

    public Integer getId() {
        return id;
    }

    public String getNaturalId() {
        return naturalId;
    }

    public String getName() {
        return name;
    }

    public int getGradeId() {
        return gradeId;
    }

    public String getLabel() {
        return label;
    }

    public int getTypeId() {
        return typeId;
    }

    public int getSubjectId() {
        return subjectId;
    }

    public int getSchoolYear() {
        return schoolYear;
    }

    public String getVersion() {
        return version;
    }

    public List<AssessmentScore> getScores() { return scores; }

    public List<Item> getItems() {
        return items == null ? newArrayList() : newArrayList(items);
    }

    public Item findItem(final String itemNaturalId) {
        for (final Item item : getItems()) {
            if (item.getNaturalId().equals(itemNaturalId)) return item;
        }
        return null;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * The Builder for the {@link Assessment}
     */
    public static class Builder {
        private Integer id;
        private String naturalId;
        private String name;
        private String label;
        private Integer schoolYear;
        private String version;
        private Integer gradeId;
        private Integer typeId;
        private Integer subjectId;
        private List<AssessmentScore> scores = newArrayList();
        private List<Item> items = newArrayList();

        /**
         * Builds an {@link Assessment} object
         *
         * @return the assembled object
         * @throws NullPointerException if there was a problem processing any of the required data elements
         */
        public Assessment build() {
            validate();

            final Assessment assessment = new Assessment();
            assessment.id = id;
            assessment.naturalId = naturalId;
            assessment.name = name;
            assessment.gradeId = gradeId;
            assessment.typeId = typeId;
            assessment.subjectId = subjectId;
            assessment.schoolYear = schoolYear;
            assessment.label = label;
            assessment.version = version;
            assessment.scores = scores;
            assessment.items = items;
            return assessment;
        }

        public Builder copyWithoutItems(final Assessment that) {
            this.id = that.id;
            this.naturalId = that.naturalId;
            this.name = that.name;
            this.gradeId = that.gradeId;
            this.typeId = that.typeId;
            this.subjectId = that.subjectId;
            this.schoolYear = that.schoolYear;
            this.label = that.label;
            this.version = that.version;
            this.scores = newArrayList(that.scores);
            return this;
        }

        public Builder id(final Integer id) {
            this.id = id;
            return this;
        }

        public Builder naturalId(final String naturalId) {
            this.naturalId = naturalId;
            return this;
        }

        public Builder item(final Item item) {
            this.items.add(item);
            return this;
        }

        public Builder items(final List<Item> items) {
            this.items = newArrayList(items);
            return this;
        }

        public Builder gradeId(final Integer gradeId) {
            this.gradeId = gradeId;
            return this;
        }

        public Builder typeId(final Integer typeId) {
            this.typeId = typeId;
            return this;
        }

        public Builder schoolYear(final Integer schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder subjectId(final Integer subjectId) {
            this.subjectId = subjectId;
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder score(final AssessmentScore score) {
            this.scores.add(score);
            return this;
        }

        public Builder scores(final List<AssessmentScore> scores) {
            this.scores = scores == null ? newArrayList() : newArrayList(scores);
            return this;
        }

        public Builder label(final String label) {
            this.label = label;
            return this;
        }

        public Builder version(final String version) {
            this.version = version;
            return this;
        }

        void validate() {
            if (typeId == null) {
                throw new IllegalArgumentException("TypeId must be set");
            }
            if (subjectId == null) {
                throw new IllegalArgumentException("SubjectId must be set");
            }
            if (gradeId == null) {
                throw new IllegalArgumentException("GradeId must be set");
            }
            if (!scores.isEmpty()) {
                if (scores.stream().map(AssessmentScore::getSubjectScoreId).distinct().count() != scores.size()) {
                    throw new IllegalArgumentException("AssessmentScores must have distinct subject score ids");
                }
            }
        }
    }
}

