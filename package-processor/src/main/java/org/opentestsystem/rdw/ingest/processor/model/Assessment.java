package org.opentestsystem.rdw.ingest.processor.model;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * An assessment used to marshal data in to the database
 */
public class Assessment {
    private Integer id;
    private String naturalId;
    private String name;
    private int gradeId;
    private String label;
    private int typeId;
    private int subjectId;
    private int schoolYear;
    private String version;
    private Double minScore;
    private Double maxScore;
    private Double cutPoint1;
    private Double cutPoint2;
    private Double cutPoint3;
    private Double cutPoint4;
    private Double cutPoint5;
    private List<Item> items;

    public Integer getId() {
        return id;
    }

    public String getNaturalId() {
        return naturalId;
    }

    public String getName() {
        return name;
    }

    public int getGradeId() {
        return gradeId;
    }

    public String getLabel() {
        return label;
    }

    public int getTypeId() {
        return typeId;
    }

    public int getSubjectId() {
        return subjectId;
    }

    public int getSchoolYear() {
        return schoolYear;
    }

    public String getVersion() {
        return version;
    }

    public Double getMinScore() {
        return minScore;
    }

    public Double getMaxScore() {
        return maxScore;
    }

    public Double getCutPoint1() {
        return cutPoint1;
    }

    public Double getCutPoint2() {
        return cutPoint2;
    }

    public Double getCutPoint3() {
        return cutPoint3;
    }

    public Double getCutPoint4() {
        return cutPoint4;
    }

    public Double getCutPoint5() {
        return cutPoint5;
    }

    public List<Item> getItems() {
        return items == null ? newArrayList() : newArrayList(items);
    }

    public Item findItem(final String itemNaturalId) {
        for (final Item item : getItems()) {
            if (item.getNaturalId().equals(itemNaturalId)) return item;
        }
        return null;
    }

    public static Builder builder() {
        return new Builder();
    }

    /**
     * The Builder for the {@link Assessment}
     */
    public static class Builder {
        private Integer id;
        private String naturalId;
        private String name;
        private String label;
        private Integer schoolYear;
        private String version;
        private Integer gradeId;
        private Integer typeId;
        private Integer subjectId;
        private Double cutPoint1;
        private Double cutPoint2;
        private Double cutPoint3;
        private Double cutPoint4;
        private Double cutPoint5;
        private Double minScore;
        private Double maxScore;
        private List<Item> items = newArrayList();

        /**
         * Builds an {@link Assessment} object
         *
         * @return the assembled object
         * @throws NullPointerException if there was a problem processing any of the required data elements
         */
        public Assessment build() {
            final Assessment assessment = new Assessment();
            assessment.id = id;
            assessment.naturalId = naturalId;
            assessment.name = name;
            assessment.gradeId = gradeId;
            assessment.typeId = typeId;
            assessment.subjectId = subjectId;
            assessment.schoolYear = schoolYear;
            assessment.label = label;
            assessment.version = version;
            assessment.minScore = minScore;
            assessment.maxScore = maxScore;
            assessment.cutPoint1 = cutPoint1;
            assessment.cutPoint2 = cutPoint2;
            assessment.cutPoint3 = cutPoint3;
            assessment.cutPoint4 = cutPoint4;
            assessment.cutPoint5 = cutPoint5;
            assessment.items = items;
            return assessment;
        }

        public Builder copyWithoutItems(final Assessment assessmentToCopy) {
            this.id = assessmentToCopy.id;
            this.naturalId = assessmentToCopy.naturalId;
            this.name = assessmentToCopy.name;
            this.gradeId = assessmentToCopy.gradeId;
            this.typeId = assessmentToCopy.typeId;
            this.subjectId = assessmentToCopy.subjectId;
            this.schoolYear = assessmentToCopy.schoolYear;
            this.label = assessmentToCopy.label;
            this.version = assessmentToCopy.version;
            this.minScore = assessmentToCopy.minScore;
            this.maxScore = assessmentToCopy.maxScore;
            this.cutPoint1 = assessmentToCopy.cutPoint1;
            this.cutPoint2 = assessmentToCopy.cutPoint2;
            this.cutPoint3 = assessmentToCopy.cutPoint3;
            this.cutPoint4 = assessmentToCopy.cutPoint4;
            this.cutPoint5 = assessmentToCopy.cutPoint5;
            return this;
        }

        public Builder id(final Integer id) {
            this.id = id;
            return this;
        }

        public Builder naturalId(final String naturalId) {
            this.naturalId = naturalId;
            return this;
        }

        public Builder item(final Item item) {
            this.items.add(item);
            return this;
        }

        public Builder items(final List<Item> items) {
            this.items = newArrayList(items);
            return this;
        }

        public Builder gradeId(final Integer gradeId) {
            this.gradeId = gradeId;
            return this;
        }

        public Builder typeId(final Integer typeId) {
            this.typeId = typeId;
            return this;
        }

        public Builder schoolYear(final Integer schoolYear) {
            this.schoolYear = schoolYear;
            return this;
        }

        public Builder subjectId(final Integer subjectId) {
            this.subjectId = subjectId;
            return this;
        }

        public Builder name(final String name) {
            this.name = name;
            return this;
        }

        public Builder cutPoint1(final Double cutPoint1) {
            this.cutPoint1 = cutPoint1;
            return this;
        }

        public Builder cutPoint2(final Double cutPoint2) {
            this.cutPoint2 = cutPoint2;
            return this;
        }

        public Builder cutPoint3(final Double cutPoint3) {
            this.cutPoint3 = cutPoint3;
            return this;
        }

        public Builder cutPoint4(final Double cutPoint4) {
            this.cutPoint4 = cutPoint4;
            return this;
        }

        public Builder cutPoint5(final Double cutPoint5) {
            this.cutPoint5 = cutPoint5;
            return this;
        }

        public Builder label(final String label) {
            this.label = label;
            return this;
        }

        public Builder version(final String version) {
            this.version = version;
            return this;
        }

        public Builder minScore(final Double minScore) {
            this.minScore = minScore;
            return this;
        }

        public Builder maxScore(final Double maxScore) {
            this.maxScore = maxScore;
            return this;
        }
    }
}

