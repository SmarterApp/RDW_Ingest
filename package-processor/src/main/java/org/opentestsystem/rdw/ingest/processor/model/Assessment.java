package org.opentestsystem.rdw.ingest.processor.model;

import com.mysql.jdbc.StringUtils;

import java.util.Objects;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.collect.Lists.newArrayList;

/**
 * An assessment definition
 */
public class Assessment {
    private final String grade;
    private final String type;
    private final String subject;
    private final int academicYear;
    private final String naturalId;
    private String name;
    private String label;
    private String version;

    private Assessment(final String naturalId, final String name, final String grade, final String type, final String subject, final int academicYear) {
        checkArgument(!StringUtils.isNullOrEmpty(naturalId), "invalid natural id");
        this.naturalId = naturalId;
        this.name = name;
        this.grade = grade;
        this.type = type;
        this.subject = subject;
        this.academicYear = academicYear;
    }

    public String getName() {
        return name;
    }

    public String getLabel() {
        return label;
    }

    public String getVersion() {
        return version;
    }

    public String getGrade() {
        return grade;
    }

    public String getType() {
        return type;
    }

    public String getSubject() {
        return subject;
    }

    public int getAcademicYear() {
        return academicYear;
    }

    public static Builder builder() {
        return new Builder();
    }

    public String getNaturalId() {
        return naturalId;
    }

    /**
     * This instance is equal to all instances of {@code Assessment} that have equal attribute values.
     * @return {@code true} if {@code this} is equal to {@code another} instance
     */
    @Override
    public boolean equals(Object another) {
        if (this == another) return true;
        return another instanceof Assessment
                && equalTo((Assessment) another);
    }

    private boolean equalTo(Assessment another) {
        return academicYear == another.academicYear &&
                Objects.equals(naturalId, another.naturalId) &&
                Objects.equals(grade, another.grade) &&
                Objects.equals(type, another.type) &&
                Objects.equals(subject, another.subject) &&
                Objects.equals(name, another.name) &&
                Objects.equals(label, another.label) &&
                Objects.equals(version, another.version);
    }

    /**
     * Computes a hash code from attributes.
     * @return hashCode value
     */
    @Override
    public int hashCode() {
        return Objects.hash(naturalId, grade, type, subject, academicYear, name, label, version);
    }


    /**
     * The Builder for the {@link Assessment}
     */
    public static class Builder {
        private String naturalId;
        private String grade;
        private String type;
        private String subject;
        private int academicYear;
        private String name;
        private String label;
        private String version;

        public Assessment build() {
            final Assessment assessment = new Assessment(naturalId, name, grade, type, subject, academicYear);
            assessment.label = label;
            assessment.name = name;
            assessment.version = version;
            return assessment;
        }

        public Builder withNaturalId(final String naturalId) {
            this.naturalId = naturalId;
            return this;
        }

        public Builder withGrade(final String grade) {
            this.grade = grade;
            return this;
        }

        public Builder withType(final String type) {
            this.type = type;
            return this;
        }

        public Builder withAcademicYear(final int academicYear) {
            this.academicYear = academicYear;
            return this;
        }

        public Builder withSubject(final String subject) {
            this.subject = subject;
            return this;
        }

        public Builder withName(final String name) {
            this.name = name;
            return this;
        }

        public Builder withLabel(final String label) {
            this.label = label;
            return this;
        }

        public Builder withVersion(final String version) {
            this.version = version;
            return this;
        }

        public Builder withCopy(final Assessment assessment) {
            withNaturalId(assessment.getNaturalId());
            withGrade(assessment.getGrade());
            withType(assessment.getType());
            withSubject(assessment.getSubject());
            withAcademicYear(assessment.getAcademicYear());
            withLabel(assessment.getLabel());
            withName(assessment.getName());
            withVersion(assessment.getVersion());
            return this;
        }
    }
}

