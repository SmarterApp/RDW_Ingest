package org.opentestsystem.rdw.ingest.group.service.impl;

import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.group.RepositoryBackedIT;
import org.opentestsystem.rdw.ingest.group.service.ProcessingUserImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

@SuppressWarnings("SqlResolve")
@Import(DefaultProcessingUserImportService.class)
@Sql(scripts = {
        "classpath:WarehouseImportSetup.sql",
        "classpath:WarehouseCodesSetup.sql",
        "classpath:WarehouseEntitiesSetup.sql",
        "classpath:WarehouseUserImportServiceSetup.sql"
})
public class DefaultProcessingUserImportServiceIT extends RepositoryBackedIT {

    @Autowired
    public ProcessingUserImportService service;

    @Autowired
    public NamedParameterJdbcTemplate template;

    private static final long ImportId = -84;

    @Test
    public void itShouldProcessStudents() {
        service.processStudents(ImportId);

        final List<Map<String, Object>> rows = template.queryForList(
                "SELECT * from upload_student_group WHERE import_id=:import_id ORDER BY student_ssid",
                ImmutableMap.of("import_id", ImportId));

        assertThat(rows).hasSize(6);

        // it should set existing student id
        assertThat(rows.stream()
                .filter(row -> "88".equals(row.get("student_ssid")))
                .map(row -> (int) row.get("student_id"))
                .findFirst().orElse(0)).isEqualTo(-88);

        // it should ignore non-student records
        assertThat(rows.get(0).get("student_id")).isNull();

        // it should create new students
        assertThat(template.queryForList(
                "SELECT ssid FROM student WHERE import_id=:import_id",
                ImmutableMap.of("import_id", ImportId), String.class))
                .containsOnly("unknown_student1", "unknown_student2", "unknown_student3");

        // it should undelete students
        assertThat(template.queryForList(
                "SELECT ssid FROM student WHERE update_import_id=:import_id AND import_id<>:import_id AND deleted=0",
                ImmutableMap.of("import_id", ImportId), String.class))
                .containsOnly("89");
    }
}