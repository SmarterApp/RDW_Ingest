package org.opentestsystem.rdw.ingest.group.service.impl;

import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.group.RepositoryBackedIT;
import org.opentestsystem.rdw.ingest.group.service.ProcessingGroupImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;

@Import(DefaultProcessingGroupImportService.class)
@Sql(scripts = {
        "classpath:WarehouseImportSetup.sql",
        "classpath:WarehouseCodesSetup.sql",
        "classpath:WarehouseEntitiesSetup.sql",
        "classpath:WarehouseGroupImportServiceSetup.sql"
})
public class DefaultProcessingGroupImportServiceIT extends RepositoryBackedIT {

    @Autowired
    public ProcessingGroupImportService service;

    @Autowired
    public NamedParameterJdbcTemplate template;

    @Test
    public void itShouldStageNewGroupsForImport() {
        service.createImports(33);

        final List<Map<String, Object>> imports = template.queryForList(
                "SELECT * from upload_student_group_import WHERE batch_id=33 AND ref_type = 2",
                new HashMap<>());

        //NOTE: This also stages the "deleted" groups for import
        assertThat(imports).hasSize(3);
        final List<Integer> schoolIds = imports.stream()
                .map(record -> (int) record.get("school_id"))
                .collect(Collectors.toList());
        assertThat(schoolIds).containsOnly(-98, -1, -99);
    }

    @Test
    public void itShouldStageGroupMembershipChangesForImport() {
        service.createImports(33);

        final List<Map<String, Object>> imports = template.queryForList(
                "SELECT * from upload_student_group_import WHERE batch_id=33 AND ref_type = 3",
                new HashMap<>());

        assertThat(imports).hasSize(2);
        final List<Integer> schoolIds = imports.stream()
                .map(record -> (int) record.get("school_id"))
                .collect(Collectors.toList());
        assertThat(schoolIds).containsOnly(-98, -1);
    }

    @Test
    public void itShouldStageGroupUserChangesForImport() {
        service.createImports(33);

        final List<Map<String, Object>> imports = template.queryForList(
                "SELECT * from upload_student_group_import WHERE batch_id=33 AND ref_type = 4",
                new HashMap<>());

        assertThat(imports).hasSize(2);
        final List<Integer> schoolIds = imports.stream()
                .map(record -> (int) record.get("school_id"))
                .collect(Collectors.toList());
        assertThat(schoolIds).containsOnly(-98, -1);
    }

    @Test
    public void itShouldStageGroupSubjectChangesForImport() {
        service.createImports(33);

        final List<Map<String, Object>> imports = template.queryForList(
                "SELECT * from upload_student_group_import WHERE batch_id=33 AND ref_type = 5",
                new HashMap<>());

        assertThat(imports).hasSize(1);
        final List<Integer> schoolIds = imports.stream()
                .map(record -> (int) record.get("school_id"))
                .collect(Collectors.toList());
        assertThat(schoolIds).containsOnly(-1);
    }

    @Test
    public void itShouldCreateAnImportPerSchool() {
        service.createImports(33);

        final List<Map<String, Object>> imports = template.queryForList(
                "SELECT * from import WHERE batch='33'",
                new HashMap<>());

        assertThat(imports).hasSize(3);
        final List<Integer> schoolIds = imports.stream()
                .map(record -> Integer.valueOf((String) record.get("digest")))
                .collect(Collectors.toList());
        assertThat(schoolIds).containsOnly(-1, -98, -99);
    }

    @Test
    public void itShouldUpdateImportReferences() {
        service.createImports(33);

        final List<Map<String, Object>> records = template.queryForList(
                "SELECT * from upload_student_group WHERE batch_id=33",
                new HashMap<>());

        final Map<Long, Integer> importToSchool = new HashMap<>();
        records.forEach(row -> {
                    final Long importId = (long) row.get("import_id");
                    final Integer schoolId = (int) row.get("school_id");
                    importToSchool.put(importId, schoolId);
                });
        assertThat(importToSchool.values()).containsOnly(-1, -98, -99);
    }

    @Test
    public void itShouldInsertNewGroups() {
        final List<Integer> existingGroups = template.queryForList(
                "SELECT id from student_group",
                new HashMap<>(),
                Integer.class);

        service.createImports(33);
        service.insertMissingGroups(33);

        final List<Map<String, Object>> newGroups = template.queryForList(
                "SELECT * from student_group WHERE id NOT IN (:existing_groups)",
                ImmutableMap.of("existing_groups", existingGroups));

        assertThat(newGroups).hasSize(2);
        final List<String> groupNames = newGroups.stream()
                .map(record -> (String) record.get("name"))
                .collect(Collectors.toList());
        assertThat(groupNames).containsOnly("New Group 1", "New Group 2");
    }

    @Test
    public void itShouldUpdateDeletedGroups() {
        service.createImports(33);
        service.insertMissingGroups(33);
        service.updateDeletedGroups(33);

        final Map<String, Object> deletedGroup = template.queryForMap(
                "SELECT * from student_group WHERE name = 'Test Student Group 9 - updated school'",
                new HashMap<>());

        assertThat(deletedGroup.get("deleted")).isEqualTo(0);
    }

    @Test
    public void itShouldAssignCreatedAndUnDeletedGroupIds() {
        service.createImports(33);
        service.insertMissingGroups(33);
        service.updateDeletedGroups(33);
        service.updateModifiedGroups(33);

        final List<Map<String, Object>> noGroupId = template.queryForList(
                "SELECT * from upload_student_group WHERE group_id IS NULL",
                new HashMap<>());

        assertThat(noGroupId).isEmpty();
    }

    @Test
    public void itShouldUpdateModifiedGroupSubjects() {
        service.createImports(33);
        service.insertMissingGroups(33);
        service.updateDeletedGroups(33);
        service.updateModifiedGroups(33);

        final Map<String, Object> modifiedGroup = template.queryForMap(
                "SELECT * from student_group WHERE name = 'Test Student Group 8'",
                new HashMap<>());

        assertThat(modifiedGroup.get("subject_id")).isEqualTo(1);
    }

    @Test
    public void itShouldUpdateModifiedGroupUsers() {
        service.createImports(33);
        service.insertMissingGroups(33);
        service.updateDeletedGroups(33);
        service.updateModifiedGroups(33);
        service.updateModifiedGroupUsers(33);

        final List<Map<String, Object>> group8Users = template.queryForList(
                "SELECT * from user_student_group WHERE student_group_id = -8",
                new HashMap<>());
        assertThat(group8Users).hasSize(2);
        assertThat(group8Users.stream().map(row -> row.get("user_login")))
                .containsOnly("user1@somewhere.com", "user2@somewhere.com");

        final List<Map<String, Object>> group7Users = template.queryForList(
                "SELECT * from user_student_group WHERE student_group_id = -7",
                new HashMap<>());
        assertThat(group7Users).hasSize(1);
        assertThat(group7Users.stream().map(row -> row.get("user_login")))
                .containsOnly("user3@somewhere.com");

        final List<Map<String, Object>> unchangedUsers = template.queryForList(
                "SELECT * from user_student_group WHERE student_group_id = -6",
                new HashMap<>());
        assertThat(unchangedUsers).hasSize(2);
        assertThat(unchangedUsers.stream().map(row -> row.get("user_login")))
                .containsOnly("dwtest@example.com-6-1", "dwtest@example.com-6-2");
    }

    @Test
    public void itShouldUpdateModifiedGroupStudents() {
        service.createImports(33);
        service.insertMissingGroups(33);
        service.updateDeletedGroups(33);
        service.updateModifiedGroups(33);
        service.updateModifiedGroupUsers(33);
        service.updateModifiedGroupStudents(33);

        final List<Map<String, Object>> group8Students = template.queryForList(
                "SELECT * from student_group_membership WHERE student_group_id = -8",
                new HashMap<>());
        assertThat(group8Students).hasSize(2);
        assertThat(group8Students.stream().map(row -> row.get("student_id")))
                .containsOnly(-88, -86);

        final List<Map<String, Object>> group7Students = template.queryForList(
                "SELECT * from student_group_membership WHERE student_group_id = -7",
                new HashMap<>());
        assertThat(group7Students).hasSize(1);
        assertThat(group7Students.stream().map(row -> row.get("student_id")))
                .containsOnly(-88);

        final List<Map<String, Object>> unchangedUsers = template.queryForList(
                "SELECT * from student_group_membership WHERE student_group_id = -6",
                new HashMap<>());
        assertThat(unchangedUsers).hasSize(3);
        assertThat(unchangedUsers.stream().map(row -> row.get("student_id")))
                .containsOnly(-87, -86, -33);
    }

    @Test
    public void itShouldTriggerAMigration() {
        service.createImports(33);
        service.insertMissingGroups(33);
        service.updateDeletedGroups(33);
        service.updateModifiedGroups(33);
        service.updateModifiedGroupUsers(33);
        service.updateModifiedGroupStudents(33);

        final List<Long> importIds = template.queryForList(
                "SELECT DISTINCT import_id from upload_student_group WHERE batch_id = 33",
                new HashMap<>(),
                Long.class);

        service.triggerImport(33);

        final List<Map<String, Object>> imports = template.queryForList(
                "SELECT * FROM import WHERE id IN (:import_ids)",
                ImmutableMap.of("import_ids", importIds));

        assertThat(imports).hasSize(3);
        assertThat(imports.stream().map(row -> row.get("status")))
                .containsOnly(1);
    }

}