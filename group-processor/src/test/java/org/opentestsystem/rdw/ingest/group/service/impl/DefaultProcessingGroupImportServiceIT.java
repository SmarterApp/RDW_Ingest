package org.opentestsystem.rdw.ingest.group.service.impl;

import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.group.RepositoryBackedIT;
import org.opentestsystem.rdw.ingest.group.service.ProcessingGroupImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.sql.Timestamp;
import java.time.Duration;
import java.time.Instant;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import static org.assertj.core.api.Assertions.assertThat;

@SuppressWarnings("SqlResolve")
@Import(DefaultProcessingGroupImportService.class)
@Sql(scripts = {
        "classpath:WarehouseImportSetup.sql",
        "classpath:WarehouseCodesSetup.sql",
        "classpath:WarehouseEntitiesSetup.sql",
        "classpath:WarehouseGroupImportServiceSetup.sql"
})
public class DefaultProcessingGroupImportServiceIT extends RepositoryBackedIT {

    private static final long ImportId = -84;

    @Autowired
    public ProcessingGroupImportService service;

    @Autowired
    public NamedParameterJdbcTemplate template;

    @Test
    public void itShouldProcessGroups() {
        service.processGroups(ImportId);

        final List<Map<String, Object>> records = template.queryForList(
                "SELECT * from upload_student_group WHERE import_id=:import_id",
                ImmutableMap.of("import_id", ImportId));

        // check school ids
        assertThat(records.stream().map(row -> (int) row.get("school_id")).collect(Collectors.toSet()))
                .containsOnly(-1, -98, -99);

        // check subject
        assertThat(records.stream()
                .map(row -> (Integer) row.get("subject_id"))
                .filter(Objects::nonNull)
                .collect(Collectors.toSet()))
                .containsOnly(1);
    }

    @Test
    public void itShouldInsertNewGroups() {
        final List<Integer> existingGroups =
                template.queryForList("SELECT id from student_group", ImmutableMap.of(), Integer.class);

        service.processGroups(ImportId);

        final List<Map<String, Object>> groups = template.queryForList(
                "SELECT * from student_group WHERE id NOT IN (:existing_groups)",
                ImmutableMap.of("existing_groups", existingGroups));

        assertThat(groups).hasSize(2);
        assertThat(groups.stream().map(row -> (String)row.get("name")).collect(Collectors.toSet()))
                .containsOnly("New Group 1", "New Group 2");
    }

    @Test
    public void itShouldUpdateDeletedGroups() {
        service.processGroups(ImportId);

        final Map<String, Object> deletedGroup = template.queryForMap(
                "SELECT * from student_group WHERE name = 'Test Student Group 9 - updated school'",
                ImmutableMap.of());

        assertThat(deletedGroup.get("deleted")).isEqualTo(0);
    }

    @Test
    public void itShouldAssignCreatedAndUnDeletedGroupIds() {
        assertThat(template.queryForList(
                "SELECT * from upload_student_group WHERE import_id = :import_id AND group_id IS NULL",
                ImmutableMap.of("import_id", ImportId))).hasSize(4);

        service.processGroups(ImportId);

        assertThat(template.queryForList(
                "SELECT * from upload_student_group WHERE import_id = :import_id AND group_id IS NULL",
                ImmutableMap.of("import_id", ImportId))).isEmpty();
    }

    @Test
    public void itShouldUpdateModifiedGroupSubjects() {
        service.processGroups(ImportId);

        assertThat(template.queryForObject("SELECT subject_id FROM student_group WHERE name = 'Test Student Group 8'",
                ImmutableMap.of(), Integer.class)).isEqualTo(1);
    }

    @Test
    public void itShouldNotUpdateUnaffectedGroups() {
        service.processGroups(ImportId);

        final Map<String, Object> group = template.queryForMap("SELECT * from student_group WHERE id = -6", ImmutableMap.of());

        assertThat(group.get("updated")).isEqualTo(group.get("created"));
    }

    @Test
    public void itShouldUpdateModifiedGroupUsers() {
        final Instant AMinuteAgo = Instant.now().minus(Duration.ofMinutes(1));

        service.processGroups(ImportId);
        service.processGroupUsers(ImportId);

        // should replace existing with two new ones
        assertThat(template.queryForObject("SELECT updated FROM student_group WHERE id = -8",
                ImmutableMap.of(), Timestamp.class).toInstant()).isAfter(AMinuteAgo);
        assertThat(template.queryForList("SELECT user_login from user_student_group WHERE student_group_id = -8",
                ImmutableMap.of(), String.class)).hasSize(2).containsOnly("user1@somewhere.com", "user2@somewhere.com");

        // should replace existing with new one
        assertThat(template.queryForObject("SELECT updated FROM student_group WHERE id = -7",
                ImmutableMap.of(), Timestamp.class).toInstant()).isAfter(AMinuteAgo);
        assertThat(template.queryForList("SELECT user_login from user_student_group WHERE student_group_id = -7",
                ImmutableMap.of(), String.class)).hasSize(1).containsOnly("user3@somewhere.com");

        // should be unchanged
        assertThat(template.queryForObject("SELECT updated FROM student_group WHERE id = -6",
                ImmutableMap.of(), Timestamp.class).toInstant()).isBefore(AMinuteAgo);
        assertThat(template.queryForList("SELECT user_login from user_student_group WHERE student_group_id = -6",
                ImmutableMap.of(), String.class)).hasSize(2).containsOnly("dwtest@example.com-6-1", "dwtest@example.com-6-2");

        // add user to empty existing group
        assertThat(template.queryForObject("SELECT updated FROM student_group WHERE id = -4",
                ImmutableMap.of(), Timestamp.class).toInstant()).isAfter(AMinuteAgo);
        assertThat(template.queryForList("SELECT user_login from user_student_group WHERE student_group_id = -4",
                ImmutableMap.of(), String.class)).hasSize(1).containsOnly("user1@somewhere.com");

        // remove users from existing group
        assertThat(template.queryForObject("SELECT updated FROM student_group WHERE id = -2",
                ImmutableMap.of(), Timestamp.class).toInstant()).isAfter(AMinuteAgo);
        assertThat(template.queryForList("SELECT user_login from user_student_group WHERE student_group_id = -2",
                ImmutableMap.of(), String.class)).isEmpty();
    }

    @Test
    public void itShouldUpdateModifiedGroupStudents() {
        final Instant AMinuteAgo = Instant.now().minus(Duration.ofMinutes(1));

        service.processGroups(ImportId);
        service.processGroupMembership(ImportId);

        assertThat(template.queryForObject("SELECT updated FROM student_group WHERE id = -8",
                ImmutableMap.of(), Timestamp.class).toInstant()).isAfter(AMinuteAgo);
        assertThat(template.queryForList("SELECT student_id FROM student_group_membership WHERE student_group_id = -8",
                ImmutableMap.of(), Integer.class)).hasSize(2).containsOnly(-88, -86);

        assertThat(template.queryForObject("SELECT updated FROM student_group WHERE id = -7",
                ImmutableMap.of(), Timestamp.class).toInstant()).isAfter(AMinuteAgo);
        assertThat(template.queryForList("SELECT student_id FROM student_group_membership WHERE student_group_id = -7",
                ImmutableMap.of(), Integer.class)).hasSize(1).containsOnly(-88);

        // should be unchanged
        assertThat(template.queryForObject("SELECT updated FROM student_group WHERE id = -6",
                ImmutableMap.of(), Timestamp.class).toInstant()).isBefore(AMinuteAgo);
        assertThat(template.queryForList("SELECT student_id FROM student_group_membership WHERE student_group_id = -6",
                ImmutableMap.of(), Integer.class)).hasSize(3).containsOnly(-87, -86, -33);

        // adds student to empty group
        assertThat(template.queryForObject("SELECT updated FROM student_group WHERE id = -5",
                ImmutableMap.of(), Timestamp.class).toInstant()).isAfter(AMinuteAgo);
        assertThat(template.queryForList("SELECT student_id FROM student_group_membership WHERE student_group_id = -5",
                ImmutableMap.of(), Integer.class)).hasSize(1).containsOnly(-33);

        // removes all students from existing group
        assertThat(template.queryForObject("SELECT updated FROM student_group WHERE id = -3",
                ImmutableMap.of(), Timestamp.class).toInstant()).isAfter(AMinuteAgo);
        assertThat(template.queryForList("SELECT student_id FROM student_group_membership WHERE student_group_id = -3",
                ImmutableMap.of(), Integer.class)).isEmpty();
    }

    @Test
    public void itShouldFailInsertingMissingGroupsForBadSchoolYear() {
        // This test plays with the situation where an invalid school year was set for a group
        // (the CSV validation has been improved so this shouldn't happen any more but ...)
        //
        // The problem is that `insertMissingGroups` silently fails to insert the missing group
        // because of a data integrity violation. After that, other steps no-op because they are
        // joining to the student_group table which doesn't have an entry.
        //
        // All that said, the worst that will happen is the import will be marked PROCESSED which
        // might be misleading since nothing was imported.
        //
        // These things are never simple: turns out that the current version of Aurora doesn't
        // silently fail; i.e. it treats the FK constraint violation as an error not a warning
        // so the INSERT IGNORE doesn't ignore it. Although i feel that is the correct behavior
        // it is inconsistent with MySQL and it may change with version upgrades. So this test
        // has to be written to handle either behavior. Sigh. Maybe i should delete the test?

        try {
            // import_id = -78 for this test
            service.processGroups(-78);
            service.processGroupUsers(-78);
            service.processGroupMembership(-78);

        } catch (final DataIntegrityViolationException e) {
            // if it hits here, it is actually doing what we want so this is a pass
            // continue on asserting that nothing really happened
        }

        // the insert will fail silently so no record added
        assertThat(template.queryForObject("SELECT count(*) FROM student_group WHERE name='Bad Year'",
                ImmutableMap.of(), Long.class)).isEqualTo(0);

        // the students for that group should be only in other groups
        assertThat(template.queryForList("SELECT student_group_id FROM student_group_membership WHERE student_id IN (-86, -87, -88)",
                ImmutableMap.of(), Integer.class)).containsOnly(-91, -8, -7, -6);
    }
}
