package org.opentestsystem.rdw.ingest.group.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.opentestsystem.rdw.ingest.group.service.ProcessingGroupImportService;
import org.opentestsystem.rdw.ingest.group.service.ProcessingLoadService;
import org.opentestsystem.rdw.ingest.group.service.ProcessingUserImportService;

import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.inOrder;

@RunWith(MockitoJUnitRunner.class)
public class DefaultGroupMessageProcessorTest {

    @Mock
    private ProcessingUserImportService userImportService;

    @Mock
    private ProcessingLoadService loadService;

    @Mock
    private ProcessingGroupImportService groupImportService;

    private DefaultGroupMessageProcessor processor;
    private final String digest = "ABCD";
    private final long importId = 123L;

    @Before
    public void setup() {
        processor = new DefaultGroupMessageProcessor(loadService, userImportService, groupImportService);
    }

    @Test
    public void itShouldCallServiceMethodsInOrder() {

        processor.process(digest, importId);

        final InOrder inOrder = inOrder(loadService, userImportService, groupImportService);

        inOrder.verify(loadService).loadGroup(digest, importId);
        inOrder.verify(userImportService).processStudents(importId);
        inOrder.verify(groupImportService).processGroups(importId);
        inOrder.verify(groupImportService).processGroupUsers(importId);
        inOrder.verify(groupImportService).processGroupMembership(importId);
        inOrder.verify(loadService).cleanup(importId);
    }

    @Test(expected = RuntimeException.class)
    public void itPropagatesExceptions() {
        doThrow(new RuntimeException("Bad juju")).when(loadService).loadGroup(anyString(), anyLong());
        processor.process(digest, importId);
    }
}