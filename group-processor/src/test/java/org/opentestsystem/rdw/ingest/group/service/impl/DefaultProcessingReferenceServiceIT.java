package org.opentestsystem.rdw.ingest.group.service.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.group.RepositoryBackedIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

@Import(DefaultProcessingReferenceService.class)
@Sql(scripts = {
        "classpath:WarehouseImportSetup.sql",
        "classpath:WarehouseCodesSetup.sql",
        "classpath:WarehouseEntitiesSetup.sql",
        "classpath:WarehouseReferenceServiceSetup.sql"
 })
public class DefaultProcessingReferenceServiceIT extends RepositoryBackedIT {

    @Autowired
    public DefaultProcessingReferenceService service;

    @Autowired
    public NamedParameterJdbcTemplate template;

    @Test
    public void itShouldUpdateSchoolReferences() {
        service.lookupBatchReferences(33);

        final List<Map<String, Object>> rows = template.queryForList(
                "SELECT * from upload_student_group WHERE batch_id=33 ORDER BY name",
                new HashMap<>());

        assertThat(rows.size()).isEqualTo(2);

        final Map<String, Object> row1 = rows.get(0);
        assertThat(row1.get("school_id")).isEqualTo(-98);

        final Map<String, Object> row2 = rows.get(1);
        assertThat(row2.get("school_id")).isEqualTo(-1);
    }

    @Test
    public void itShouldUpdateStudentReferences() {
        service.lookupBatchReferences(33);

        final List<Map<String, Object>> rows = template.queryForList(
                "SELECT * from upload_student_group WHERE batch_id=33 ORDER BY name",
                new HashMap<>());

        assertThat(rows.size()).isEqualTo(2);

        final Map<String, Object> row1 = rows.get(0);
        assertThat(row1.get("student_id")).isEqualTo(-87);

        final Map<String, Object> row2 = rows.get(1);
        assertThat(row2.get("student_id")).isEqualTo(-88);
    }

    @Test
    public void itShouldUpdateGroupReferences() {
        service.lookupBatchReferences(33);

        final List<Map<String, Object>> rows = template.queryForList(
                "SELECT * from upload_student_group WHERE batch_id=33 ORDER BY name",
                new HashMap<>());

        assertThat(rows.size()).isEqualTo(2);

        final Map<String, Object> row1 = rows.get(0);
        assertThat(row1.get("group_id")).isEqualTo(-7);

        final Map<String, Object> row2 = rows.get(1);
        assertThat(row2.get("group_id")).isEqualTo(-8);
    }

}