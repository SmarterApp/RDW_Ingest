package org.opentestsystem.rdw.ingest.group.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.ingest.common.model.EntitySqls;
import org.opentestsystem.rdw.ingest.common.repository.SqlListExecutionRepository;
import org.opentestsystem.rdw.ingest.common.util.LocationStrategy;
import org.opentestsystem.rdw.ingest.group.configuration.GroupProcessingSqlConfiguration;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.entry;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;


@RunWith(MockitoJUnitRunner.class)
public class DefaultProcessingLoadServiceTest{

    @Mock
    private ArchiveService archiveService;

    @Mock
    private SqlListExecutionRepository repository;

    @Mock
    private GroupProcessingSqlConfiguration sqlConfiguration;

    private DefaultProcessingLoadService service;

    @Before
    public void createLoadService() throws IOException {
        service = new DefaultProcessingLoadService(archiveService, repository, sqlConfiguration);
        service.rawSql = "%s";
    }

    @Test
    public void itShouldCreateLocalSql() {
        String digest = "ABCDEF";
        String location = new LocationStrategy.GroupUploadContentLocationStrategy().location(digest);
        Properties prop = new Properties();
        prop.setProperty(DefaultProcessingLoadService.rawURI, "file:///tmp/location");
        Map<String, EntitySqls> entityMap = new HashMap<>();

        when(archiveService.readProperties(location)).thenReturn(prop);
        when(archiveService.exists(location)).thenReturn(true);
        when(sqlConfiguration.getEntities()).thenReturn(entityMap);

        service.loadBatch(digest, 1L);

        ArgumentCaptor<List> sqlListCaptor = ArgumentCaptor.forClass(List.class);
        ArgumentCaptor<Map> mapCaptor = ArgumentCaptor.forClass(Map.class);

        verify(repository).execute(sqlListCaptor.capture(), mapCaptor.capture());
        String sql = (String) sqlListCaptor.getValue().get(0);
        assertThat(sql).isEqualTo("LOCAL INFILE");
        assertThat(mapCaptor.getValue()).contains(entry("batch_id",1L), entry("uri", "/tmp/location"));
    }

    @Test
    public void itShouldCreateS3Sql() {
        String digest = "ABCDEF";
        String location = new LocationStrategy.GroupUploadContentLocationStrategy().location(digest);
        Properties prop = new Properties();
        prop.setProperty(DefaultProcessingLoadService.rawURI, "s3://lo/ca/location");
        Map<String, EntitySqls> entityMap = new HashMap<>();

        when(archiveService.readProperties(location)).thenReturn(prop);
        when(archiveService.exists(location)).thenReturn(true);
        when(sqlConfiguration.getEntities()).thenReturn(entityMap);

        service.loadBatch(digest, 1L);

        ArgumentCaptor<List> sqlListCaptor = ArgumentCaptor.forClass(List.class);
        ArgumentCaptor<Map> mapCaptor = ArgumentCaptor.forClass(Map.class);

        verify(repository).execute(sqlListCaptor.capture(), mapCaptor.capture());
        String sql = (String) sqlListCaptor.getValue().get(0);
        assertThat(sql).isEqualTo("FROM S3");
        assertThat(mapCaptor.getValue()).contains(entry("batch_id",1L), entry("uri", "s3://lo/ca/location"));
    }
}