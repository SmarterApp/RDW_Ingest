package org.opentestsystem.rdw.ingest.group;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.group.service.GroupProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.springframework.http.MediaType;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.GenericMessage;

import java.io.IOException;
import java.io.UnsupportedEncodingException;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

public class GroupProcessorConfigurationTest {


    private GroupProcessorConfiguration processor;
    private GroupProcessor groupProcessor;
    private Message message;
    private final String textMessage = "Basic text message";

    @Before
    public void createProcessor() throws IOException {
        RdwMessageHeaderAccessor accessor;
        groupProcessor = mock(GroupProcessor.class);
        processor = new GroupProcessorConfiguration(groupProcessor);

        accessor = RdwMessageHeaderAccessor.wrap(null);
        accessor.setContentType(MediaType.TEXT_PLAIN_VALUE);

        message = new GenericMessage(textMessage, accessor.getMessageHeaders());
    }

    @Test
    public void itShouldProcessMessageWithTextContent() throws UnsupportedEncodingException {

        processor.process(message);

        verify(groupProcessor, times(1)).process(textMessage);
    }


    @Test
    public void itShouldHandleAnyException() throws UnsupportedEncodingException {

        doThrow(new RuntimeException("any message")).when(groupProcessor).process(any(String.class));
        processor.process(message);

        verify(groupProcessor, times(1)).process(textMessage);
    }

}