package org.opentestsystem.rdw.ingest.group;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.ingest.common.model.GroupMessage;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.group.repository.StudentGroupBatchRepository;
import org.opentestsystem.rdw.ingest.group.service.GroupProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.springframework.http.MediaType;
import org.springframework.messaging.Message;
import org.springframework.messaging.support.GenericMessage;

import java.io.IOException;
import java.io.UnsupportedEncodingException;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class GroupProcessorConfigurationTest {

    @Mock
    private GroupProcessor groupProcessor;

    @Mock
    private StudentGroupBatchRepository repository;

    private Message message;
    private GroupMessage groupMessage;
    private GroupProcessorConfiguration processor;

    @Before
    public void createProcessor() throws IOException {
        processor = new GroupProcessorConfiguration(groupProcessor, repository);
        groupMessage = GroupMessage.builder().digest("abcdef").uploadId(123L).build();
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(null);
        accessor.setImportId(123L);
        accessor.setContentType(MediaType.APPLICATION_JSON);

        message = new GenericMessage(groupMessage.toJson().getBytes("UTF-8"), accessor.getMessageHeaders());
    }

    @Test
    public void itShouldProcessMessageWithBinaryContent() throws UnsupportedEncodingException {

        processor.process(message);

        verify(groupProcessor, times(1)).process(groupMessage);
        verify(repository).updateBatchStatus(123L, ImportStatus.PROCESSED, "");
    }

    @Test
    public void itShouldHandleAnyException() throws UnsupportedEncodingException {
        doThrow(new RuntimeException("any message")).when(groupProcessor).process(any(GroupMessage.class));
        processor.process(message);

        verify(groupProcessor, times(1)).process(groupMessage);
    }

    @Test
    public void itShouldUpdateBatchStatusOnImportExceptionIfIdIsKnown() throws Exception {
        doThrow(new ImportException(ImportStatus.INVALID, "any message")).when(groupProcessor).process(any(GroupMessage.class));
        processor.process(message);

        verify(repository).updateBatchStatus(123L, ImportStatus.INVALID, "any message");
    }

    @Test
    public void itShouldUpdateBatchStatusOnExceptionIfIdIsKnown() throws Exception {
        doThrow(new RuntimeException("Bad Juju")).when(groupProcessor).process(any(GroupMessage.class));
        processor.process(message);

        verify(repository).updateBatchStatus(123L, ImportStatus.BAD_DATA, "Bad Juju");
    }

}