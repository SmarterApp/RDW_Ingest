package org.opentestsystem.rdw.ingest.group.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.ingest.common.model.GroupMessage;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.group.service.BatchingGroupImportService;
import org.opentestsystem.rdw.ingest.group.service.BatchingUserImportService;
import org.opentestsystem.rdw.ingest.group.service.ProcessingLoadService;
import org.opentestsystem.rdw.ingest.group.service.ProcessingReferenceService;
import org.opentestsystem.rdw.ingest.group.service.ProcessingStandardizationService;

import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.inOrder;

@RunWith(MockitoJUnitRunner.class)
public class DefaultGroupProcessorTest {

    @Mock
    private ProcessingStandardizationService standardizationService;

    @Mock
    private ProcessingReferenceService referenceService;

    @Mock
    private BatchingUserImportService userImportService;

    @Mock
    private ProcessingLoadService loadService;

    @Mock
    private BatchingGroupImportService groupImportService;

    private GroupMessage message;
    private DefaultGroupProcessor processor;

    @Before
    public void setup() {
        processor = new DefaultGroupProcessor(standardizationService, referenceService, userImportService, loadService, groupImportService);

        message = GroupMessage.builder()
                .digest("ABCD")
                .uploadId(123L)
                .build();
    }

    @Test
    public void itShouldCallServiceMethodsInOrder() {

        processor.process(message);

        final InOrder inOrder = inOrder(loadService, standardizationService, referenceService, userImportService, groupImportService);

        final long batchId = message.getUploadId();
        inOrder.verify(loadService).loadBatch(eq(message.getDigest()), eq(batchId));

        inOrder.verify(standardizationService).standardizeBatch(batchId);

        inOrder.verify(referenceService).lookupBatchReferences(batchId);

        inOrder.verify(userImportService).processBatch(batchId);

        inOrder.verify(groupImportService).processBatch(batchId);
    }

    @Test(expected = ImportException.class)
    public void itShouldThrowOnProcessingError() {
        doThrow(new RuntimeException("Bad juju"))
                .when(loadService).loadBatch(anyString(), anyLong());

        processor.process(message);
    }

}