package org.opentestsystem.rdw.ingest.group.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.ingest.common.model.GroupMessage;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.group.repository.StudentGroupBatchRepository;
import org.opentestsystem.rdw.ingest.group.service.ProcessingGroupImportService;
import org.opentestsystem.rdw.ingest.group.service.ProcessingLoadService;
import org.opentestsystem.rdw.ingest.group.service.ProcessingReferenceService;
import org.opentestsystem.rdw.ingest.group.service.ProcessingStandardizationService;
import org.opentestsystem.rdw.ingest.group.service.ProcessingUserImportService;

import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class DefaultGroupProcessorTest {

    @Mock
    public ProcessingStandardizationService standardizationService;

    @Mock
    public ProcessingReferenceService referenceService;

    @Mock
    public ProcessingUserImportService userImportService;

    @Mock
    public ProcessingLoadService loadService;

    @Mock
    public ProcessingGroupImportService groupImportService;

    @Mock
    public StudentGroupBatchRepository groupBatchRepository;

    private GroupMessage message;
    private DefaultGroupProcessor processor;

    @Before
    public void setup() {
        processor = new DefaultGroupProcessor(standardizationService, referenceService, userImportService, loadService, groupImportService, groupBatchRepository);

        message = GroupMessage.builder()
                .digest("ABCD")
                .uploadId(123L)
                .build();
    }

    @Test
    public void itShouldCallServiceMethodsInOrder() {

        processor.process(message);

        final InOrder inOrder = inOrder(loadService, standardizationService, referenceService, userImportService, groupImportService, groupBatchRepository);

        final long batchId = message.getUploadId();
        inOrder.verify(loadService).loadBatch(eq(message.getDigest()), eq(batchId));

        inOrder.verify(standardizationService).standardizeBatch(batchId);

        inOrder.verify(referenceService).lookupBatchReferences(batchId);

        inOrder.verify(userImportService).createImports(batchId);
        inOrder.verify(userImportService).insertMissingStudents(batchId);
        inOrder.verify(userImportService).updateDeletedStudents(batchId);
        inOrder.verify(userImportService).triggerImport(batchId);

        inOrder.verify(groupImportService).createImports(batchId);
        inOrder.verify(groupImportService).insertMissingGroups(batchId);
        inOrder.verify(groupImportService).updateDeletedGroups(batchId);
        inOrder.verify(groupImportService).updateModifiedGroups(batchId);
        inOrder.verify(groupImportService).updateModifiedGroupUsers(batchId);
        inOrder.verify(groupImportService).updateModifiedGroupStudents(batchId);
        inOrder.verify(groupImportService).triggerImport(batchId);

        inOrder.verify(groupBatchRepository).updateBatchStatus(batchId, ImportStatus.PROCESSED, "");
    }

    @Test
    public void itShouldHandleAProcessingErrorAndMarkBatchAsFailed() {
        doThrow(new RuntimeException("Bad juju"))
                .when(loadService).loadBatch(anyString(), anyLong());

        processor.process(message);

        final long batchId = message.getUploadId();
        verify(groupBatchRepository).updateBatchStatus(batchId, ImportStatus.INVALID, "Bad juju");
    }

}