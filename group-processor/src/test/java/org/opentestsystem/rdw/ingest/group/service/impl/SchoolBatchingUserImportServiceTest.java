package org.opentestsystem.rdw.ingest.group.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.opentestsystem.rdw.ingest.group.repository.SchoolBatchRepository;
import org.opentestsystem.rdw.ingest.group.service.ProcessingUserImportService;

import java.util.Set;

import static com.google.common.collect.ImmutableSet.of;
import static org.mockito.Mockito.inOrder;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class SchoolBatchingUserImportServiceTest {

    @Mock
    private SchoolBatchRepository repository;

    @Mock
    private ProcessingUserImportService importService;

    private SchoolBatchingUserImportService service;

    @Before
    public void setup() {
        service = new SchoolBatchingUserImportService(importService, repository);
    }

    @Test
    public void itShouldIngestUsersForABatchOneSchoolAtATime() {
        final long batchId = 33;
        final Set<Integer> schoolIds = of(1, 2, 3);
        when(repository.findSchoolIdsForBatch(batchId)).thenReturn(schoolIds);

        service.processBatch(batchId);

        for (final int schoolId : schoolIds) {
            final InOrder order = inOrder(importService);
            order.verify(importService).createImports(batchId, schoolId);
            order.verify(importService).insertMissingStudents(batchId, schoolId);
            order.verify(importService).updateDeletedStudents(batchId, schoolId);
            order.verify(importService).triggerImport(batchId, schoolId);
        }

        verify(importService).cleanupBatch(batchId);
    }
}