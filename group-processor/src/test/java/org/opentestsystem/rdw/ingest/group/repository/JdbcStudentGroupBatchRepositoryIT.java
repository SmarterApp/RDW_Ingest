package org.opentestsystem.rdw.ingest.group.repository;

import org.junit.Test;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.group.RepositoryBackedIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.util.HashMap;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

@Import(JdbcStudentGroupBatchRepository.class)
@Sql(scripts = {
        "classpath:WarehouseImportSetup.sql",
        "classpath:WarehouseCodesSetup.sql",
        "classpath:WarehouseEntitiesSetup.sql",
        "classpath:WarehouseBatchRepositorySetup.sql"
})
public class JdbcStudentGroupBatchRepositoryIT extends RepositoryBackedIT {

    @Autowired
    public StudentGroupBatchRepository repository;

    @Autowired
    public NamedParameterJdbcTemplate template;

    @Test
    public void itShouldUpdateBatchStatusAndMessage() {
        final String message = "some message";

        repository.updateBatch(33, ImportStatus.INVALID, message);

        final Map<String, Object> batch =  getUploadStudentGroupBatch();

        assertThat(batch.get("status")).isEqualTo(ImportStatus.INVALID.getValue());
        assertThat(batch.get("message")).isEqualTo(message);
    }

    @Test
    public void itShouldNotClearAcceptedMessage() {
        final String message = "some accepted message";

        repository.updateBatch(33, ImportStatus.ACCEPTED, message);

        final Map<String, Object> batchAccepted =  getUploadStudentGroupBatch();

        assertThat(batchAccepted.get("status")).isEqualTo(ImportStatus.ACCEPTED.getValue());
        assertThat(batchAccepted.get("message")).isEqualTo(message);

        repository.updateBatch(33, ImportStatus.PROCESSED);
        final Map<String, Object> batchProcessed =  getUploadStudentGroupBatch();

        assertThat(batchProcessed.get("status")).isEqualTo(ImportStatus.PROCESSED.getValue());
        assertThat(batchProcessed.get("message")).isEqualTo(message);
    }

    @Test
    public void itShouldClearAcceptedWhenEmptyStringMessage() {
        final String message = "some accepted message";

        repository.updateBatch(33, ImportStatus.ACCEPTED, message);

        final Map<String, Object> batchAccepted =  getUploadStudentGroupBatch();

        assertThat(batchAccepted.get("status")).isEqualTo(ImportStatus.ACCEPTED.getValue());
        assertThat(batchAccepted.get("message")).isEqualTo(message);

        repository.updateBatch(33, ImportStatus.INVALID, "");
        final Map<String, Object> batchInvalid = getUploadStudentGroupBatch();

        assertThat(batchInvalid.get("status")).isEqualTo(ImportStatus.INVALID.getValue());
        assertThat(batchInvalid.get("message")).isEqualTo("");
    }

    private Map<String, Object> getUploadStudentGroupBatch() {
        return template.queryForMap("SELECT * from upload_student_group_batch WHERE id = 33",  new HashMap<>());
    }
}