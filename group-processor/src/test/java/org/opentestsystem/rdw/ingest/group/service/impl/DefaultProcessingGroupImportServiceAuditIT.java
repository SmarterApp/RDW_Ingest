
package org.opentestsystem.rdw.ingest.group.service.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.group.RepositoryBackedIT;
import org.opentestsystem.rdw.ingest.group.service.ProcessingGroupImportService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.jdbc.Sql;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTable;
import static org.springframework.test.jdbc.JdbcTestUtils.countRowsInTableWhere;

@Import({DefaultProcessingGroupImportService.class})
@Sql(scripts = {
        "classpath:PreloadWarehouseForAudit.sql",
})
public class DefaultProcessingGroupImportServiceAuditIT extends RepositoryBackedIT {

    @Autowired
    ProcessingGroupImportService service;

    @Autowired
    public JdbcTemplate jdbcTemplate;

    @Autowired
    private NamedParameterJdbcTemplate namedParameterTemplate;

    /**
     *  Test multiple batches, the state of student group tables and their related audit tables.
     *  The database is set up with the minimum data set to process groups.
     */
    @Test
    public void itShouldProcessBatches() {
        assertThat(countRowsInTable(jdbcTemplate, "upload_student_group")).isEqualTo(48);

        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(1);
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(8);
        assertThat(countRowsInTable(jdbcTemplate, "student")).isEqualTo(12);

        assertThat(countRowsInTable(jdbcTemplate, "student_group")).isEqualTo(1);
        assertThat(countRowsInTable(jdbcTemplate, "student_group_membership")).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "user_student_group")).isEqualTo(0);

        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group", "name='StudentGroup001'")).isEqualTo(1);

        assertThat(countRowsInTable(jdbcTemplate, "audit_student_group")).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "audit_student_group_membership")).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "audit_user_student_group")).isEqualTo(0);

        // Process each batch and check group related and audit tables.
        processBatchOne();
        processBatchTwo();
        processBatchThree();
    }

    private void processBatchOne() {
        final long importId = -1;
        final List<String> studentGroupNamesToUpdate = Stream.of("StudentGroup001").collect(Collectors.toList());

        final List<Map<String, Object>> studentGroupsToUpdate = namedParameterTemplate.queryForList(
                "SELECT * FROM student_group WHERE name IN (:group_names_to_update)",
                new MapSqlParameterSource().addValue("group_names_to_update", studentGroupNamesToUpdate));
        assertThat(studentGroupsToUpdate.size()).isEqualTo(1);

        // At least one comparison between audit and actual must have no null values in actual to assure all columns are audited.
        // In the case of student_group this must be a group with a specific subject.
        studentGroupsToUpdate.get(0).forEach((k, v) -> assertThat(v).isNotNull());

        service.processGroups(importId);
        service.processGroupUsers(importId);
        service.processGroupMembership(importId);

        // Check audit tables
        assertThat(countRowsInTable(jdbcTemplate, "audit_student_group")).isEqualTo(1);
        assertThat(countRowsInTable(jdbcTemplate, "audit_student_group_membership")).isEqualTo(0);
        assertThat(countRowsInTable(jdbcTemplate, "audit_user_student_group")).isEqualTo(0);
        compareAuditStudentGroupToActual(studentGroupsToUpdate);

        // Check other tables
        assertThat(countRowsInTable(jdbcTemplate, "upload_student_group")).isEqualTo(48);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(1);
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(8);
        assertThat(countRowsInTable(jdbcTemplate, "student")).isEqualTo(12);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group", "name IN ('StudentGroup001','StudentGroup002','StudentGroup003','StudentGroup004') AND deleted=0")).isEqualTo(4);

        assertThat(countRowsInTable(jdbcTemplate, "student_group_membership")).isEqualTo(6);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup001')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID001','SSID002','SSID003'))")).isEqualTo(3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup003')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID007', 'SSID008'))")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup004')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID010'))")).isEqualTo(1);

        assertThat(countRowsInTable(jdbcTemplate, "user_student_group")).isEqualTo(5);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup001')) AND user_login IN ('teacher01@example.com', 'teacher02@example.com')")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup003')) AND user_login IN ('teacher07@example.com', 'teacher08@example.com')")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup004')) AND user_login IN ('teacher10@example.com')")).isEqualTo(1);
    }

    private void processBatchTwo() {
        final long importId = -2;
        final List<String> studentGroupNamesToUpdate = Stream.of("StudentGroup001", "StudentGroup002", "StudentGroup004").collect(Collectors.toList());

        final List<Map<String, Object>> studentGroupsToUpdate = namedParameterTemplate.queryForList(
                "SELECT * FROM student_group WHERE name IN (:group_names_to_update)",
                new MapSqlParameterSource().addValue("group_names_to_update", studentGroupNamesToUpdate));
        assertThat(studentGroupsToUpdate.size()).isEqualTo(3);

        final List<Map<String, Object>> membershipToUpdate = jdbcTemplate.queryForList("SELECT * FROM student_group_membership " +
                "WHERE ( student_group_id IN (SELECT id FROM student_group WHERE name = 'StudentGroup001') AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID002', 'SSID003') ) ) " +
                "   OR ( student_group_id IN (SELECT id FROM student_group WHERE name = 'StudentGroup004') AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID010') ) )");
        assertThat(membershipToUpdate.size()).isEqualTo(3);

        final List<Map<String, Object>> usersToUpdate = jdbcTemplate.queryForList("SELECT * FROM user_student_group " +
                "WHERE student_group_id IN (SELECT id FROM student_group WHERE name = 'StudentGroup001') AND user_login IN ('teacher01@example.com') ");
        assertThat(usersToUpdate.size()).isEqualTo(1);

        // At least one comparison between audit and actual must have no null values in actual to assure all columns are audited.
        membershipToUpdate.get(0).forEach((k, v) -> assertThat(v).isNotNull());
        usersToUpdate.get(0).forEach((k, v) -> assertThat(v).isNotNull());

        service.processGroups(importId);
        service.processGroupUsers(importId);
        service.processGroupMembership(importId);

        // Check audit tables
        assertThat(countRowsInTable(jdbcTemplate, "audit_student_group")).isEqualTo(4);
        assertThat(countRowsInTable(jdbcTemplate, "audit_student_group_membership")).isEqualTo(3);
        assertThat(countRowsInTable(jdbcTemplate, "audit_user_student_group")).isEqualTo(1);
        compareAuditStudentGroupToActual(studentGroupsToUpdate);
        compareAuditStudentGroupMembershipToActual(membershipToUpdate);
        compareAuditUserStudentGroupToActual(usersToUpdate);

        // Check other tables
        assertThat(countRowsInTable(jdbcTemplate, "upload_student_group")).isEqualTo(48);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(1);
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(8);
        assertThat(countRowsInTable(jdbcTemplate, "student")).isEqualTo(12);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group", "name IN ('StudentGroup001','StudentGroup002','StudentGroup003','StudentGroup004') AND deleted=0")).isEqualTo(4);

        assertThat(countRowsInTable(jdbcTemplate, "student_group_membership")).isEqualTo(10);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup001')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID001','SSID004','SSID005','SSID006'))")).isEqualTo(4);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup002')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID001','SSID002'))")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup003')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID007', 'SSID008'))")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup004')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID011','SSID012'))")).isEqualTo(2);

        assertThat(countRowsInTable(jdbcTemplate, "user_student_group")).isEqualTo(7);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup001')) AND user_login IN ('teacher02@example.com', 'teacher03@example.com','teacher04@example.com')")).isEqualTo(3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup002')) AND user_login IN ('teacher04@example.com')")).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup003')) AND user_login IN ('teacher07@example.com', 'teacher08@example.com')")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup004')) AND user_login IN ('teacher10@example.com')")).isEqualTo(1);
    }

    private void processBatchThree() {
        final long importId = -3;

        final List<String> studentGroupNamesToUpdate = Stream.of("StudentGroup001", "StudentGroup002").collect(Collectors.toList());
        final List<Map<String, Object>> studentGroupsToUpdate = namedParameterTemplate.queryForList(
                "SELECT * FROM student_group WHERE name IN (:group_names_to_update)",
                new MapSqlParameterSource().addValue("group_names_to_update", studentGroupNamesToUpdate));
        assertThat(studentGroupsToUpdate.size()).isEqualTo(2);

        final List<Map<String, Object>> membershipToUpdate = jdbcTemplate.queryForList("SELECT * FROM student_group_membership " +
                "WHERE ( student_group_id IN (SELECT id FROM student_group WHERE name = 'StudentGroup001') AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID006') ) ) " +
                "   OR ( student_group_id IN (SELECT id FROM student_group WHERE name = 'StudentGroup002') AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID002') ) )");
        assertThat(membershipToUpdate.size()).isEqualTo(2);

        final List<Map<String, Object>> usersToUpdate = jdbcTemplate.queryForList("SELECT * FROM user_student_group " +
                "WHERE ( student_group_id IN (SELECT id FROM student_group WHERE name = 'StudentGroup001') AND user_login IN ('teacher03@example.com', 'teacher04@example.com') ) " +
                "   OR ( student_group_id IN (SELECT id FROM student_group WHERE name = 'StudentGroup002') AND user_login IN ('teacher04@example.com') )");
        assertThat(usersToUpdate.size()).isEqualTo(3);

        service.processGroups(importId);
        service.processGroupUsers(importId);
        service.processGroupMembership(importId);

        // Check audit tables
        assertThat(countRowsInTable(jdbcTemplate, "audit_student_group")).isEqualTo(6);
        assertThat(countRowsInTable(jdbcTemplate, "audit_student_group_membership")).isEqualTo(5);
        assertThat(countRowsInTable(jdbcTemplate, "audit_user_student_group")).isEqualTo(4);
        compareAuditStudentGroupToActual(studentGroupsToUpdate);
        compareAuditStudentGroupMembershipToActual(membershipToUpdate);
        compareAuditUserStudentGroupToActual(usersToUpdate);

        // Check other tables
        assertThat(countRowsInTable(jdbcTemplate, "upload_student_group")).isEqualTo(48);
        assertThat(countRowsInTable(jdbcTemplate, "district")).isEqualTo(1);
        assertThat(countRowsInTable(jdbcTemplate, "school")).isEqualTo(8);
        assertThat(countRowsInTable(jdbcTemplate, "student")).isEqualTo(12);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group", "name IN ('StudentGroup001','StudentGroup002','StudentGroup003','StudentGroup004','StudentGroup005') AND deleted=0")).isEqualTo(5);

        assertThat(countRowsInTable(jdbcTemplate, "student_group_membership")).isEqualTo(14);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup001')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID001','SSID002','SSID004','SSID005'))")).isEqualTo(4);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup002')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID001','SSID005','SSID006'))")).isEqualTo(3);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup003')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID007','SSID008'))")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup004')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID011','SSID012'))")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "student_group_membership", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup005')) AND student_id IN (SELECT id FROM student WHERE ssid IN ('SSID001','SSID010','SSID011'))")).isEqualTo(3);

        assertThat(countRowsInTable(jdbcTemplate, "user_student_group")).isEqualTo(7);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup001')) AND user_login IN ('teacher01@example.com', 'teacher02@example.com')")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup002')) AND user_login IN ('teacher03@example.com')")).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup003')) AND user_login IN ('teacher07@example.com', 'teacher08@example.com')")).isEqualTo(2);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup004')) AND user_login IN ('teacher10@example.com')")).isEqualTo(1);
        assertThat(countRowsInTableWhere(jdbcTemplate, "user_student_group", "student_group_id IN (SELECT id FROM student_group WHERE name IN ('StudentGroup005')) AND user_login IN ('teacher10@example.com')")).isEqualTo(1);
    }

    private void compareAuditStudentGroupToActual(final List<Map<String, Object>> studentGroupsToUpdate) {
        studentGroupsToUpdate.forEach((studentGroupValues) -> {
            final Map<String, Object> auditStudentGroupValues = namedParameterTemplate.queryForMap(
                    "SELECT * FROM audit_student_group WHERE student_group_id = :student_group_id " +
                            "AND action = 'update' " +
                            "ORDER BY audited DESC LIMIT 1",
                    new MapSqlParameterSource()
                            .addValue("student_group_id", studentGroupValues.get("id")));

            assertThat(auditStudentGroupValues.remove("id")).isNotNull();
            assertThat(auditStudentGroupValues.remove("action")).isEqualTo("update");
            assertThat(auditStudentGroupValues.remove("audited")).isNotNull();
            assertThat(auditStudentGroupValues.remove("database_user")).isNotNull();
            assertThat(auditStudentGroupValues.remove("student_group_id")).isEqualTo(studentGroupValues.remove("id"));
            assertThat(studentGroupValues).isEqualTo(auditStudentGroupValues);
        });
    }

    private void compareAuditStudentGroupMembershipToActual(final List<Map<String, Object>> membershipToUpdate) {
        membershipToUpdate.forEach((membershipValues) -> {
            final Map<String, Object> auditMembershipValues = namedParameterTemplate.queryForMap(
                    "SELECT * FROM audit_student_group_membership WHERE student_id = :student_id " +
                            "AND student_group_id = :student_group_id " +
                            "ORDER BY audited DESC LIMIT 1",
                    new MapSqlParameterSource()
                            .addValue("student_id", membershipValues.get("student_id"))
                            .addValue("student_group_id", membershipValues.get("student_group_id")));

            assertThat(auditMembershipValues.remove("id")).isNotNull();
            assertThat(auditMembershipValues.remove("action")).isEqualTo("delete");
            assertThat(auditMembershipValues.remove("audited")).isNotNull();
            assertThat(auditMembershipValues.remove("database_user")).isNotNull();
            assertThat(membershipValues).isEqualTo(auditMembershipValues);
        });
    }

    private void compareAuditUserStudentGroupToActual(final List<Map<String, Object>> usersToUpdate) {
        usersToUpdate.forEach((userValues) -> {
            final Map<String, Object> auditUserValues = namedParameterTemplate.queryForMap(
                    "SELECT * FROM audit_user_student_group WHERE user_login = :user_login " +
                            "AND student_group_id = :student_group_id " +
                            "ORDER BY audited DESC LIMIT 1",
                    new MapSqlParameterSource()
                            .addValue("user_login", userValues.get("user_login"))
                            .addValue("student_group_id", userValues.get("student_group_id")));

            assertThat(auditUserValues.remove("id")).isNotNull();
            assertThat(auditUserValues.remove("action")).isEqualTo("delete");
            assertThat(auditUserValues.remove("audited")).isNotNull();
            assertThat(auditUserValues.remove("database_user")).isNotNull();
            assertThat(userValues).isEqualTo(auditUserValues);
        });
    }
}
