sql:
  process-batch:
    entities:
      # ------------ Standardize NULLS
      # Replace empty values with NULLs
      standardize:
        sql:
          student: >-
            UPDATE upload_student_group
            SET group_user_login = NULL
            WHERE group_user_login = ''
                  AND batch_id = :batch_id

          group: >-
            UPDATE upload_student_group
            SET student_ssid = NULL
            WHERE student_ssid = ''
                  AND batch_id = :batch_id;

          subject: >-
            UPDATE upload_student_group
            SET subject_code = NULL
            WHERE subject_code = ''
                  AND batch_id = :batch_id;

      # ------------ Setup DB Ids
      # Set DB ids for known schools, students, groups
      bind-references:
        sql:
          school: >-
            UPDATE upload_student_group sgl
              JOIN school s ON sgl.school_natural_id = s.natural_id
              LEFT JOIN subject sub ON sub.code = sgl.subject_code
            SET school_id = s.id,
              subject_id  =
              CASE WHEN sub.code IS NULL OR sub.code = 'All'
                THEN NULL
              ELSE sub.id
              END
            WHERE batch_id = :batch_id

          student: >-
            UPDATE upload_student_group sgl
              JOIN student s ON sgl.student_ssid = s.ssid
            SET student_id = s.id
            WHERE s.deleted = 0
                  AND batch_id = :batch_id

          group: >-
            UPDATE upload_student_group sgl
              JOIN student_group sg
                ON sgl.group_name = sg.name
                  AND sgl.school_year = sg.school_year
                  AND sgl.school_id = sg.school_id
            SET group_id = sg.id
            WHERE sg.deleted = 0
                  AND batch_id = :batch_id

      # ------------ Import Student SSIDs
      # Import deleted/non-existent student SSIDs
      import-students:
        sql:
          stage-new: >-
            INSERT IGNORE INTO upload_student_group_import (batch_id, school_id, ref, ref_type)
              SELECT
                batch_id,
                school_id,
                student_ssid,
                1
              FROM upload_student_group sgl
              WHERE sgl.student_id IS NULL
                    AND sgl.student_ssid IS NOT NULL
                    AND sgl.batch_id = :batch_id

          #TODO review this, should we modify import table to have batch_ref_id and ref_id fields to avoid casting?
          create-imports: >-
            INSERT INTO import (status, content, contentType, digest, batch)
              SELECT DISTINCT
                0                           AS status,
                5                           AS content,
                'group batch student'       AS contentType,
                cast(school_id as CHAR(32)) AS digest,
                cast(:batch_id AS CHAR(50)) AS batch
              FROM upload_student_group_import sgl
              WHERE ref_type = 1
                    AND batch_id = :batch_id

          assign-imports: >-
            UPDATE upload_student_group_import sgl
              JOIN (SELECT
                      id,
                      cast(digest AS SIGNED INTEGER) AS school_id
                    FROM import
                    WHERE status = 0
                          AND contentType = 'group batch student'
                          AND cast(batch AS UNSIGNED) = :batch_id) AS si
                ON si.school_id = sgl.school_id
            SET sgl.import_id = si.id
            WHERE sgl.ref_type = 1
                  AND sgl.batch_id = :batch_id

          propagate-imports: >-
            UPDATE upload_student_group sgl
              JOIN ( select distinct school_id, import_id from upload_student_group_import where batch_id = :batch_id) i
                ON i.school_id = sgl.school_id
            SET sgl.import_id = i.import_id
            WHERE student_id IS NULL
                  AND sgl.batch_id = :batch_id

          insert-missing: >-
            INSERT IGNORE INTO student (ssid, import_id, update_import_id)
              SELECT
                DISTINCT
                student_ssid,
                sgl.import_id,
                sgl.import_id
              FROM upload_student_group sgl
                LEFT JOIN student s ON sgl.student_ssid = s.ssid
              WHERE s.id IS NULL
                    AND sgl.student_ssid IS NOT NULL
                    AND sgl.import_id IS NOT NULL
                    AND sgl.batch_id = :batch_id

          update-deleted: >-
            UPDATE student s
              JOIN upload_student_group sgl ON sgl.student_id = s.id
            SET
              s.deleted          = 0,
              s.update_import_id = sgl.import_id
            WHERE s.deleted = 1
                  AND sgl.student_ssid IS NOT NULL
                  AND sgl.import_id IS NOT NULL
                  AND sgl.batch_id = :batch_id

          update-migration: >-
            UPDATE import i
              JOIN upload_student_group_import sgli ON sgli.import_id = i.id
            SET i.status = :import_status
            WHERE i.status = 0
                  AND sgli.ref_type = 1
                  AND sgli.batch_id = :batch_id

          assign-imported-students: >-
            UPDATE upload_student_group sgl
              JOIN student s ON sgl.student_ssid = s.ssid
            SET sgl.student_id = s.id
            WHERE student_id IS NULL
                  AND batch_id = :batch_id

          clean-import-refs: >-
            UPDATE upload_student_group sgl
            SET import_id = NULL
            WHERE batch_id = :batch_id

          clean-import-stage: >-
            DELETE FROM upload_student_group_import
            WHERE batch_id = :batch_id

      import-groups:
        sql:
          stage-new: >-
            INSERT IGNORE INTO upload_student_group_import (batch_id, school_id, ref, ref_type)
              SELECT
                sgl.batch_id,
                sgl.school_id,
                concat(sgl.group_name, sgl.school_id, sgl.school_year),
                2
              FROM upload_student_group sgl
              WHERE sgl.group_id IS NULL
                    AND batch_id = :batch_id

          stage-membership-change: >-
            INSERT IGNORE INTO upload_student_group_import (batch_id, school_id, ref, ref_type)
              SELECT
                batch_id,
                school_id,
                concat(loading.group_name, loading.school_id, loading.school_year),
                3
              FROM (
                     SELECT
                       batch_id,
                       school_id,
                       group_id,
                       group_name,
                       GROUP_CONCAT(student_id ORDER BY student_id) AS students,
                       school_year
                     FROM upload_student_group
                     WHERE student_id IS NOT NULL AND batch_id = :batch_id
                     GROUP BY group_id) AS loading
                JOIN
                (
                  SELECT
                    student_group_id,
                    GROUP_CONCAT(student_id ORDER BY student_id) AS students
                  FROM student_group_membership
                  GROUP BY student_group_id
                ) AS existing
                  ON existing.student_group_id = loading.group_id
              WHERE existing.students <> loading.students;

          stage-user-change: >-
            INSERT IGNORE INTO upload_student_group_import (batch_id, school_id, ref, ref_type)
              SELECT
                batch_id,
                school_id,
                concat(loading.group_name, loading.school_id, loading.school_year),
                4
              FROM (
                     SELECT
                       batch_id,
                       school_id,
                       group_id,
                       group_name,
                       GROUP_CONCAT(group_user_login ORDER BY group_user_login) AS users,
                       school_year
                     FROM
                       (select DISTINCT batch_id, school_id, group_id, group_name, school_year, group_user_login from upload_student_group) u
                     WHERE group_user_login IS NOT NULL AND batch_id = :batch_id
                     GROUP BY group_id) AS loading
                JOIN
                (
                  SELECT
                    student_group_id,
                    GROUP_CONCAT(user_login ORDER BY user_login) AS users
                  FROM user_student_group
                  GROUP BY student_group_id
                ) AS existing
                  ON existing.student_group_id = loading.group_id
              WHERE existing.users <> loading.users;

          stage-subject-change: >-
            INSERT IGNORE INTO upload_student_group_import (batch_id, school_id, ref, ref_type)
              SELECT
              	loading.batch_id,
              	loading.school_id,
              	concat(loading.group_name, loading.school_id, loading.school_year),
              	5
              FROM (
              	 SELECT
              	   batch_id,
              	   school_id,
              	   group_id,
              	   group_name,
              	   subject_id,
              	   school_year
              	 FROM
              	   (SELECT DISTINCT batch_id, school_id, group_id, group_name, school_year, subject_id from upload_student_group ORDER BY ISNULL(subject_id), subject_id) u
              	 WHERE batch_id = :batch_id
              	 GROUP BY group_id) AS loading
              JOIN student_group sg
                ON sg.id = loading.group_id
              WHERE NOT sg.subject_id <=> loading.subject_id;

          create-imports: >-
            INSERT INTO import (status, content, contentType, digest, batch)
              SELECT DISTINCT
                0                           AS status,
                5                           AS content,
                'group batch'               AS contentType,
                cast(school_id as CHAR(32)) AS digest,
                cast(:batch_id AS CHAR(50)) AS batch
              FROM upload_student_group_import sgl
              WHERE ref_type IN (2, 3, 4, 5)
                    AND batch_id = :batch_id

          assign-imports: >-
            UPDATE upload_student_group_import sgl
              JOIN (SELECT
                      id,
                      cast(digest AS SIGNED INTEGER) AS school_id
                    FROM import
                    WHERE status = 0
                          AND contentType = 'group batch'
                          AND cast(batch AS UNSIGNED) = :batch_id) AS si
            SET sgl.import_id = si.id
            WHERE si.school_id = sgl.school_id
                  AND sgl.ref_type IN (2, 3, 4, 5)
                  AND sgl.batch_id = :batch_id

          propagate-imports: >-
            UPDATE upload_student_group sgl
              JOIN (SELECT DISTINCT school_id, import_id
                    FROM upload_student_group_import
                    WHERE ref_type IN (2, 3, 4, 5) AND batch_id = :batch_id) i
                ON sgl.school_id = i.school_id
            SET sgl.import_id = i.import_id
            WHERE sgl.batch_id = :batch_id

          insert-missing: >-
            INSERT IGNORE INTO student_group (name, school_id, active, school_year, subject_id, creator, import_id, update_import_id)
              SELECT
                sgl.group_name,
                sgl.school_id,
                1,
                sgl.school_year,
                sgl.subject_id,
                sgl.creator,
                sgl.import_id,
                sgl.import_id
              FROM upload_student_group sgl
                LEFT JOIN student_group sg
                  ON sgl.group_name = sg.name
                  AND sgl.school_id = sg.school_id
                  AND sgl.school_year = sg.school_year
              WHERE sg.id IS NULL
                    AND sgl.group_id IS NULL
                    AND sgl.batch_id = :batch_id

          update-deleted: >-
            UPDATE student_group sg
              JOIN upload_student_group sgl
                ON sgl.school_id = sg.school_id
                AND sgl.group_name = sg.name
                AND sgl.school_year = sg.school_year
            SET sg.deleted = 0,
                sg.update_import_id = sgl.import_id
            WHERE sg.deleted = 1
                  AND sgl.batch_id = :batch_id

          assign-imported-groups: >-
            UPDATE upload_student_group sgl
              JOIN student_group sg
                ON sgl.group_name = sg.name
                  AND sgl.school_year = sg.school_year
                  AND sgl.school_id = sg.school_id
            SET sgl.group_id = sg.id
            WHERE sgl.group_id IS NULL
                  AND batch_id = :batch_id

          update-modified: >-
            UPDATE student_group sg
              JOIN (SELECT
                      import_id,
                      group_id,
                      subject_id
                    FROM
                      (SELECT DISTINCT batch_id, school_id, group_id, group_name, school_year, subject_id, import_id from upload_student_group ORDER BY ISNULL(subject_id), subject_id DESC) u
                    WHERE import_id IS NOT NULL
                          AND batch_id = :batch_id
                    GROUP BY group_id) AS loading
                ON sg.id = loading.group_id
            SET sg.subject_id = loading.subject_id,
              sg.update_import_id = loading.import_id
            WHERE NOT sg.subject_id <=> loading.subject_id;

          clear-updated-users: >-
            DELETE users FROM user_student_group users
              JOIN (SELECT DISTINCT
                      group_id
                    FROM upload_student_group upload
                    WHERE upload.import_id IS NOT NULL
                          AND upload.batch_id = :batch_id) updated
                ON updated.group_id = users.student_group_id
            WHERE users.student_group_id IS NOT NULL

          add-updated-users: >-
            INSERT INTO user_student_group (student_group_id, user_login)
              SELECT
                upload.group_id,
                upload.group_user_login
              FROM upload_student_group upload
              WHERE upload.import_id IS NOT NULL
                    AND upload.group_user_login IS NOT NULL
                    AND upload.batch_id = :batch_id

          clear-updated-students: >-
            DELETE students FROM student_group_membership students
              JOIN (SELECT DISTINCT
                      group_id
                    FROM upload_student_group upload
                    WHERE upload.import_id IS NOT NULL
                          AND upload.batch_id = :batch_id) updated
                ON updated.group_id = students.student_group_id
            WHERE students.student_group_id IS NOT NULL

          add-updated-students: >-
            INSERT INTO student_group_membership (student_group_id, student_id)
              SELECT
                upload.group_id,
                upload.student_id
              FROM upload_student_group upload
              WHERE upload.import_id IS NOT NULL
                    AND upload.student_id IS NOT NULL
                    AND upload.batch_id = :batch_id

          update-migration: >-
            UPDATE import i
              JOIN upload_student_group_import sgli ON sgli.import_id = i.id
            SET i.status = :import_status
            WHERE i.status = 0
                  AND sgli.ref_type IN (2, 3, 4, 5)
                  AND sgli.batch_id = :batch_id

          clean-import-stage: >-
            DELETE FROM upload_student_group_import
            WHERE batch_id = :batch_id

          clean-import-upload: >-
            DELETE FROM upload_student_group
            WHERE batch_id = :batch_id
