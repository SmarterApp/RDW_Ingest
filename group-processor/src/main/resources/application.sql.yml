sql:
  process-batch:
    entities:
      # ------------ Import Student SSIDs
      # Assign existing students with matching SSIDs and import deleted/non-existent student SSIDs
      # NOTE: the updated timestamps are randomized a bit to spread out the migrate work
      import-students:
        sql:
          assign-existing: >-
            UPDATE upload_student_group sgl
              JOIN student s ON sgl.student_ssid = s.ssid
            SET sgl.student_id = s.id
            WHERE s.deleted = 0
              AND sgl.import_id = :import_id

          insert-new: >-
            INSERT IGNORE INTO student (ssid, import_id, update_import_id, updated)
              SELECT
                DISTINCT student_ssid,
                sgl.import_id,
                sgl.import_id,
                TIMESTAMPADD(MICROSECOND, FLOOR(rand()*1000), CURRENT_TIMESTAMP(6))
              FROM upload_student_group sgl
                LEFT JOIN student s ON sgl.student_ssid = s.ssid
              WHERE s.id IS NULL
                AND sgl.student_id IS NULL
                AND sgl.student_ssid IS NOT NULL
                AND sgl.import_id = :import_id

          update-deleted: >-
            UPDATE student s
              JOIN upload_student_group sgl ON sgl.student_ssid = s.ssid
            SET s.deleted = 0,
              s.update_import_id = sgl.import_id,
              s.updated = TIMESTAMPADD(MICROSECOND, FLOOR(rand()*1000), CURRENT_TIMESTAMP(6))
            WHERE s.deleted = 1
              AND sgl.student_ssid IS NOT NULL
              AND sgl.import_id = :import_id

          assign-new: >-
            UPDATE upload_student_group sgl
              JOIN student s ON sgl.student_ssid = s.ssid
            SET sgl.student_id = s.id
            WHERE sgl.student_id IS NULL
              AND sgl.import_id = :import_id

      # ------------ Student Groups
      # Assign schools and subjects.
      # Assign existing groups, import deleted/non-existent groups.
      # Import modified groups including metadata, student and user membership.
      # NOTE: the updated timestamps are randomized a bit to spread out the migrate work
      import-groups:
        sql:
          assign-school-and-subject: >-
            UPDATE upload_student_group sgl
              JOIN school s ON sgl.school_natural_id = s.natural_id
              LEFT JOIN subject sub ON sub.code = sgl.subject_code
            SET sgl.school_id = s.id,
              subject_id = sub.id
            WHERE sgl.import_id = :import_id

          assign-existing: >-
            UPDATE upload_student_group sgl
              JOIN student_group sg ON sgl.group_name = sg.name AND sgl.school_year = sg.school_year AND sgl.school_id = sg.school_id
            SET sgl.group_id = sg.id
            WHERE sg.deleted = 0
              AND sgl.import_id = :import_id

          insert-new: >-
            INSERT IGNORE INTO student_group (name, school_id, active, school_year, subject_id, creator, import_id, update_import_id, updated)
              SELECT
                sgl.group_name,
                sgl.school_id,
                1,
                sgl.school_year,
                sgl.subject_id,
                sgl.creator,
                sgl.import_id,
                sgl.import_id,
                TIMESTAMPADD(MICROSECOND, 1000 + FLOOR(rand()*100), CURRENT_TIMESTAMP(6))
              FROM upload_student_group sgl
                LEFT JOIN student_group sg ON sgl.group_name = sg.name AND sgl.school_id = sg.school_id AND sgl.school_year = sg.school_year
              WHERE sg.id IS NULL
                AND sgl.group_id IS NULL
                AND sgl.import_id = :import_id

          # this also sets the subject_id to avoid updating a deleted group twice (both for undelete and modify)
          update-deleted: >-
            UPDATE student_group sg
              JOIN upload_student_group sgl ON sgl.school_id = sg.school_id AND sgl.group_name = sg.name AND sgl.school_year = sg.school_year
            SET sg.deleted = 0,
              sg.subject_id = sgl.subject_id,
              sg.update_import_id = sgl.import_id,
              sg.updated = TIMESTAMPADD(MICROSECOND, 1000 + FLOOR(rand()*100), CURRENT_TIMESTAMP(6))
            WHERE sg.deleted = 1
              AND sgl.import_id = :import_id

          # because we match on name/school/year, the only field that the user can modify is: subject
          # and, of course, user/student membership can change
          update-modified: >-
            UPDATE student_group sg
              JOIN (SELECT loading.group_id, loading.subject_id FROM
                (SELECT esg.id AS group_id,
                        MAX(esg.subject_id) AS subject_id,
                        GROUP_CONCAT(usg.user_login ORDER BY usg.user_login) AS users,
                        GROUP_CONCAT(sgm.student_id ORDER BY sgm.student_id) AS students
                 FROM student_group esg
                   JOIN upload_student_group upload ON upload.group_id = esg.id
                   LEFT JOIN user_student_group usg ON usg.student_group_id = esg.id
                   LEFT JOIN student_group_membership sgm ON sgm.student_group_id = esg.id
                 WHERE upload.import_id = :import_id
                 GROUP BY esg.id) existing
                JOIN
                (SELECT group_id,
                   MAX(subject_id) AS subject_id,
                   GROUP_CONCAT(group_user_login ORDER BY group_user_login) AS users,
                   GROUP_CONCAT(student_id ORDER BY student_id) AS students
                 FROM upload_student_group
                 WHERE import_id = :import_id
                 GROUP BY group_id) loading
                  ON loading.group_id = existing.group_id
                     AND (NOT loading.subject_id <=> existing.subject_id OR NOT loading.users <=> existing.users OR NOT loading.students <=> existing.students)
                ) sub ON sub.group_id = sg.id
            SET sg.subject_id = sub.subject_id,
            sg.update_import_id = :import_id,
            sg.updated = TIMESTAMPADD(MICROSECOND, 1000 + FLOOR(rand()*100), CURRENT_TIMESTAMP(6))

          assign-new: >-
            UPDATE upload_student_group sgl
              JOIN student_group sg ON sgl.group_name = sg.name AND sgl.school_year = sg.school_year AND sgl.school_id = sg.school_id
            SET sgl.group_id = sg.id
            WHERE sgl.group_id IS NULL
              AND sgl.import_id = :import_id

          remove-users: >-
            DELETE users FROM user_student_group users
              JOIN (SELECT DISTINCT group_id
                    FROM upload_student_group upload
                    WHERE upload.import_id = :import_id) updated
                ON updated.group_id = users.student_group_id
              LEFT JOIN upload_student_group uploaded_user
                ON uploaded_user.group_id = users.student_group_id
                  AND uploaded_user.group_user_login = users.user_login
                  AND uploaded_user.import_id = :import_id
            WHERE users.student_group_id IS NOT NULL
              AND uploaded_user.id IS NULL

          add-users: >-
            INSERT IGNORE INTO user_student_group (student_group_id, user_login)
              SELECT DISTINCT upload.group_id, upload.group_user_login
              FROM upload_student_group upload
              WHERE upload.import_id = :import_id
                AND upload.group_user_login IS NOT NULL

          remove-students: >-
            DELETE students FROM student_group_membership students
              JOIN (SELECT DISTINCT group_id
                    FROM upload_student_group upload
                    WHERE upload.import_id = :import_id) updated
                ON updated.group_id = students.student_group_id
              LEFT JOIN upload_student_group uploaded_student
                ON uploaded_student.group_id = students.student_group_id
                  AND uploaded_student.student_id = students.student_id
                  AND uploaded_student.import_id = :import_id
            WHERE students.student_group_id IS NOT NULL
              AND uploaded_student.id IS NULL

          add-students: >-
            INSERT IGNORE INTO student_group_membership (student_group_id, student_id)
              SELECT DISTINCT upload.group_id, upload.student_id
              FROM upload_student_group upload
              WHERE upload.import_id = :import_id
                AND upload.student_id IS NOT NULL

  # ------------ Load from S3 or local ---------------------------------------------------------
  # The system scans the input file when it is submitted and determines the line terminator.
  # Those settings are injected into this statement in DefaultProcessingLoadService. Note that
  # there is no capacity to deal with different line terminators in the same file. The values
  # used to be hard-coded into the string, so here is a recap of line termination. Recall ...
  #   '\r' == CR == 0x0D : default for Mac
  #   '\n' == LF == 0x0A : default for Linux
  #   '\r\n' : default for Windows
  # By using '\r' as the terminator and trimming '\n' from the first field, this will handle any
  # file produced on a Mac or Windows. I don't think there is any setting that will handle all
  # possible source files because the line termination handling is static. But our users won't
  # be using Linux and, if they do, they'll have to tweak the newline character.
  load-csv: >-
    LOAD DATA %s :uri INTO TABLE upload_student_group
    FIELDS TERMINATED BY '%s' OPTIONALLY ENCLOSED BY '"'
    LINES TERMINATED BY '%s'
    IGNORE 1 LINES
    (@vgroup_name, @vschool_natural_id, school_year, @vsubject_code, @vstudent_ssid, @vgroup_user_login)
    SET
      import_id = :import_id,
      group_name = TRIM(@vgroup_name),
      school_natural_id = TRIM(@vschool_natural_id),
      subject_code = NULLIF(TRIM(@vsubject_code), ''),
      student_ssid = NULLIF(TRIM(@vstudent_ssid), ''),
      group_user_login = NULLIF(TRIM(REPLACE(@vgroup_user_login, '\r', '')), '')

  cleanup: >-
    DELETE FROM upload_student_group
    WHERE import_id = :import_id

  # As noted above, the updated values are randomly shifted to avoid overloading migrate.
  # So we need to pause a bit before moving on and updating the import record. Since the
  # maximum random shift is 1100us, sleeping for 10ms will be more than enough.
  wait: >-
    SELECT SLEEP(0.010);