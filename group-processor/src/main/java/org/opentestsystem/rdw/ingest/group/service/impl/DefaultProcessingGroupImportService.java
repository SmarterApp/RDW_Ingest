package org.opentestsystem.rdw.ingest.group.service.impl;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.ingest.common.repository.SqlListExecutionRepository;
import org.opentestsystem.rdw.ingest.common.util.SqlListBuilder;
import org.opentestsystem.rdw.ingest.group.configuration.GroupProcessingSqlConfiguration;
import org.opentestsystem.rdw.ingest.group.service.ProcessingGroupImportService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * Default implementation of a ProcessingGroupImportService
 */
public class DefaultProcessingGroupImportService implements ProcessingGroupImportService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultProcessingUserImportService.class);

    private final SqlListExecutionRepository repository;
    private final GroupProcessingSqlConfiguration sqlConfiguration;

    public DefaultProcessingGroupImportService(final SqlListExecutionRepository repository,
                                               final GroupProcessingSqlConfiguration configuration) {
        this.repository = repository;
        this.sqlConfiguration = configuration;
    }

    @Override
    public void createImports(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-groups", "stage-new")
                .addNext("import-groups", "stage-membership-change")
                .addNext("import-groups", "stage-user-change")
                .addNext("import-groups", "stage-subject-change")
                .addNext("import-groups", "create-imports")
                .addNext("import-groups", "assign-imports")
                .addNext("import-groups", "propagate-imports")
                .build();

        try {
            repository.execute(sql, ImmutableMap.of("batch_id", batchId));
        } catch (final Exception e) {
            logger.error("Failure creating Group imports", e);
            abortImports(batchId);
            throw e;
        }
    }

    @Override
    @Transactional
    public void insertMissingGroups(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-groups", "insert-missing")
                .build();

        try {
            repository.execute(sql, ImmutableMap.of("batch_id", batchId));
        } catch (final Exception e) {
            logger.error("Failure creating new groups", e);
            abortImports(batchId);
            throw e;
        }
    }

    @Override
    @Transactional
    public void updateDeletedGroups(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-groups", "update-deleted")
                .build();

        try {
            repository.execute(sql, ImmutableMap.of("batch_id", batchId));
        } catch (final Exception e) {
            logger.error("Failure updating deleted groups", e);
            abortImports(batchId);
            throw e;
        }
    }

    @Override
    @Transactional
    public void updateModifiedGroups(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-groups", "assign-imported-groups")
                .addNext("import-groups", "update-modified")
                .build();

        try {
            repository.execute(sql, ImmutableMap.of("batch_id", batchId));
        } catch (final Exception e) {
            logger.error("Failure updating modified groups", e);
            abortImports(batchId);
            throw e;
        }
    }

    @Override
    @Transactional
    public void updateModifiedGroupUsers(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-groups", "clear-updated-users")
                .addNext("import-groups", "add-updated-users")
                .build();

        try {
            repository.execute(sql, ImmutableMap.of("batch_id", batchId));
        } catch (final Exception e) {
            logger.error("Failure updating modified group users", e);
            abortImports(batchId);
            throw e;
        }
    }

    @Override
    @Transactional
    public void updateModifiedGroupStudents(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-groups", "clear-updated-students")
                .addNext("import-groups", "add-updated-students")
                .build();

        try {
            repository.execute(sql, ImmutableMap.of("batch_id", batchId));
        } catch (final Exception e) {
            logger.error("Failure updating modified group students", e);
            abortImports(batchId);
            throw e;
        }
    }

    @Override
    public void triggerImport(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-groups", "update-migration")
                .addNext("import-groups", "clean-import-stage")
                .addNext("import-groups", "clean-import-upload")
                .build();

        try {
            repository.execute(sql, ImmutableMap.of(
                    "batch_id", batchId,
                    "import_status", 1));
        } catch (final Exception e) {
            logger.error("Failure triggering group import", e);
            abortImports(batchId);
            throw e;
        }
    }

    private void abortImports(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-groups", "update-migration")
                .build();
        repository.execute(sql, ImmutableMap.of(
                "batch_id", batchId,
                "import_status", -1));
    }
}
