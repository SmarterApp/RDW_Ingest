package org.opentestsystem.rdw.ingest.group;

import org.opentestsystem.rdw.ingest.group.service.GroupProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Processor;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.Message;


@EnableBinding(Sink.class)
public class GroupProcessorConfiguration {
    private static final Logger logger = LoggerFactory.getLogger(GroupProcessorConfiguration.class);

    private final GroupProcessor examMigrator;

    @Autowired
    public GroupProcessorConfiguration(final GroupProcessor examMigrator) {
        this.examMigrator = examMigrator;
    }

    @ServiceActivator(inputChannel = Processor.INPUT)
    public void process(final Message<?> message) {

        // todo: need to define message for migrate.  Need Jira for this.  Start with generation in exam-processor?
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(message);
        final String payload = (String) message.getPayload();

        logger.info("Received payload: " + (payload.length() > 80 ? payload.substring(0, 80) + "..." : payload));

        try {
            examMigrator.process(payload);
        } catch (final Exception e) {
            logger.error("failed with an unexpected import error: " + e.getMessage());
        }
    }

}
