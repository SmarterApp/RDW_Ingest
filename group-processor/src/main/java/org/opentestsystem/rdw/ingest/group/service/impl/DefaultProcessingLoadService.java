package org.opentestsystem.rdw.ingest.group.service.impl;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.ingest.common.repository.SqlListExecutionRepository;
import org.opentestsystem.rdw.ingest.common.util.LocationStrategy;
import org.opentestsystem.rdw.ingest.common.util.SqlListBuilder;
import org.opentestsystem.rdw.ingest.group.configuration.GroupProcessingSqlConfiguration;
import org.opentestsystem.rdw.ingest.group.service.ProcessingLoadService;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Properties;


/**
 * DefaultProcessingLoadService - <description here>
 */
@Service
public class DefaultProcessingLoadService implements ProcessingLoadService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultProcessingLoadService.class);
    private final String s3Prefix = "s3://";

    private final ArchiveService archiveService;

    private final SqlListExecutionRepository repository;
    private final GroupProcessingSqlConfiguration sqlConfiguration;

    @Autowired
    public DefaultProcessingLoadService(final ArchiveService archiveService,
                                        final SqlListExecutionRepository repository,
                                        final GroupProcessingSqlConfiguration sqlConfiguration) {
        this.archiveService = archiveService;
        this.repository = repository;
        this.sqlConfiguration = sqlConfiguration;
    }

    @Override
    public void loadBatch(final String digest, final long batchId) {
        final String location = new LocationStrategy.GroupUploadContentLocationStrategy().location(digest);

        //Check if file already exists in ArchiveService
        if (archiveService.exists(location)) {
            Properties props = archiveService.readProperties(location);
            List<String> sql;
            final String uri = props.getProperty("rootURI") + "/" + location;
            logger.info(props.getProperty("rootURI") + "/" + location);

            final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());

            if(uri.startsWith(s3Prefix)) {
                sql = sqlListBuilder.addNext("load", "fromS3").build();
            }
            else {
                sql = sqlListBuilder.addNext("load", "fromLocal").build();
            }
            repository.execute(sql, ImmutableMap.of("uri", props.getProperty("rootURI") + "/" + location,
                    "batch_id", batchId));
        }

    }

}
