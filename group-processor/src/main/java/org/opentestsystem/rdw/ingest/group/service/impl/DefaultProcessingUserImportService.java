package org.opentestsystem.rdw.ingest.group.service.impl;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.ingest.common.repository.SqlListExecutionRepository;
import org.opentestsystem.rdw.ingest.common.util.SqlListBuilder;
import org.opentestsystem.rdw.ingest.group.configuration.GroupProcessingSqlConfiguration;
import org.opentestsystem.rdw.ingest.group.service.ProcessingUserImportService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * Default implementation of a ProcessingUserImportService
 */
@Service
public class DefaultProcessingUserImportService implements ProcessingUserImportService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultProcessingUserImportService.class);

    private final SqlListExecutionRepository repository;
    private final GroupProcessingSqlConfiguration sqlConfiguration;

    @Autowired
    public DefaultProcessingUserImportService(final SqlListExecutionRepository repository,
                                              final GroupProcessingSqlConfiguration sqlConfiguration) {
        this.repository = repository;
        this.sqlConfiguration = sqlConfiguration;
    }

    @Override
    public void createImports(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-students", "stage-new")
                .addNext("import-students", "stage-deleted")
                .addNext("import-students", "create-imports")
                .addNext("import-students", "assign-imports")
                .addNext("import-students", "propagate-imports")
                .build();

        try {
            repository.execute(sql, ImmutableMap.of("batch_id", batchId));
        } catch (final Exception e) {
            logger.error("Failure creating User imports", e);
            abortImports(batchId);
            throw e;
        }
    }

    @Override
    @Transactional
    public void insertMissingStudents(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-students", "insert-missing")
                .build();

        try {
            repository.execute(sql, ImmutableMap.of("batch_id", batchId));
        } catch (final Exception e) {
            logger.error("Failure inserting missing students", e);
            abortImports(batchId);
            throw e;
        }
    }

    @Override
    @Transactional
    public void updateDeletedStudents(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-students", "update-deleted")
                .build();

        try {
            repository.execute(sql, ImmutableMap.of("batch_id", batchId));
        } catch (final Exception e) {
            logger.error("Failure updating deleted students", e);
            abortImports(batchId);
            throw e;
        }
    }

    @Override
    public void triggerImport(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-students", "update-migration")
                .addNext("import-students", "assign-imported-students")
                .addNext("import-students", "clean-import-refs")
                .addNext("import-students", "clean-import-stage")
                .build();
        try {
            repository.execute(sql, ImmutableMap.of(
                    "batch_id", batchId,
                    "import_status", 1));
        } catch (final Exception e) {
            logger.error("Failure starting student import", e);
            abortImports(batchId);
            throw e;
        }
    }

    private void abortImports(final long batchId) {
        final SqlListBuilder sqlListBuilder = new SqlListBuilder(sqlConfiguration.getEntities());
        final List<String> sql = sqlListBuilder
                .addNext("import-students", "update-migration")
                .build();
        repository.execute(sql, ImmutableMap.of(
                "batch_id", batchId,
                "import_status", -1));
    }
}
