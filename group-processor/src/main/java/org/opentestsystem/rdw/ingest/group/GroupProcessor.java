package org.opentestsystem.rdw.ingest.group;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Processor;
import org.springframework.cloud.stream.messaging.Sink;
import org.springframework.integration.annotation.ServiceActivator;
import org.springframework.messaging.Message;

import org.opentestsystem.rdw.common.model.ImportException;
import org.opentestsystem.rdw.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.group.service.GroupMessageProcessor;
import org.opentestsystem.rdw.messaging.RdwMessageHeaderAccessor;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;

import static java.nio.charset.StandardCharsets.UTF_8;

@EnableBinding(Sink.class)
public class GroupProcessor {
    private static final Logger logger = LoggerFactory.getLogger(GroupProcessor.class);

    private final GroupMessageProcessor groupMessageProcessor;
    private final ImportRepository importRepository;

    @Autowired
    public GroupProcessor(final GroupMessageProcessor groupMessageProcessor,
                          final ImportRepository importRepository) {
        this.groupMessageProcessor = groupMessageProcessor;
        this.importRepository = importRepository;
    }

    @ServiceActivator(inputChannel = Processor.INPUT)
    public void process(final Message<?> message) {
        final RdwMessageHeaderAccessor accessor = RdwMessageHeaderAccessor.wrap(message);
        final Long importId = accessor.getImportId();

        // set tenant context from message
        final String tenantId = accessor.getTenantId();
        if (tenantId == null) {
            logger.error("No tenant id found in {} message header for import {}", accessor.getContent(), importId);
            // updating the import status might seem like a good idea here, something like:
            // importRepository.updateStatusAndMessageById(importId, ImportStatus.INVALID, "System error: no tenant id found in message header");
            // but that won't work since we don't have a tenant context
            return;
        }
        TenantContextHolder.setTenantId(tenantId);

        logger.debug("received {} import {} for tenant id {}", accessor.getContent(), importId, tenantId);

        try {
            // the payload will be the digest; yeah, we could probably look it up but it's handy ...
            final String digest = new String((byte[]) message.getPayload(), UTF_8);
            groupMessageProcessor.process(digest, importId);

            // in the happy path, pre-processing set a message describing the groups/schools found
            // so just set the status to PROCESSED leaving the message alone ...
            importRepository.updateStatusById(importId, ImportStatus.PROCESSED);
        } catch (final ImportException e) {
            logger.warn("failed with an unexpected import error: " + e.getMessage());
            importRepository.updateStatusAndMessageById(importId, e.getStatus(), e.getMessage());
        } catch (final Exception e) {
            logger.warn("failed with an unexpected error: " + e.getMessage());
            importRepository.updateStatusAndMessageById(importId, ImportStatus.BAD_DATA, e.getMessage());
        }
    }
}
