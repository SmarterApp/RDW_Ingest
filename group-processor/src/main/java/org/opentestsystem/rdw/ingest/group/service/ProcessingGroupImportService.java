package org.opentestsystem.rdw.ingest.group.service;

/**
 * Implementations of this interface are responsible for creating and importing student groups
 * while processing a group definition import.
 * NOTE that this service is designed to be iteratively by school followed by a final cleanup call
 *
 * The service is designed to be executed as an ordered flow to support transaction boundaries:
 * <ol>
 *     <li>{@link #createImports(long, int)}</li>
 *     <li>{@link #insertMissingGroups(long, int)}</li>
 *     <li>{@link #updateDeletedGroups(long, int)}</li>
 *     <li>{@link #updateModifiedGroups(long, int)}</li>
 *     <li>{@link #updateModifiedGroupUsers(long, int)}</li>
 *     <li>{@link #updateModifiedGroupStudents(long, int)}</li>
 *     <li>{@link #triggerImport(long, int)}</li>
 *     <li>After looping through schools: {@link #cleanupBatch(long)}</li>
 * </ol>
 */
public interface ProcessingGroupImportService {

    /**
     * Create and register an import for any groups that:
     * <ol>
     *     <li>do not currently exist in the system</li>
     *     <li>have a change in student membership</li>
     *     <li>have a change in authorized users</li>
     *     <li>have a change in subject</li>
     *     <li>have been deleted</li>
     * </ol>
     * In the interests of performance there will be one import per school.
     *
     * @param batchId The batch id
     */
    void createImports(long batchId, int schoolId);

    /**
     * Insert missing group records into the student_group table.
     *
     * @param batchId The batch id
     */
    void insertMissingGroups(long batchId, int schoolId);

    /**
     * Update existing, referenced deleted group records to mark
     * them as not deleted.
     *
     * @param batchId The batch id
     */
    void updateDeletedGroups(long batchId, int schoolId);

    /**
     * Update modified groups.
     *
     * @param batchId The batch id
     */
    void updateModifiedGroups(long batchId, int schoolId);

    /**
     * Update the authenticated users for ingested groups.
     *
     * @param batchId The batch id
     */
    void updateModifiedGroupUsers(long batchId, int schoolId);

    /**
     * Update the student membership for ingested groups.
     *
     * @param batchId The batch id
     */
    void updateModifiedGroupStudents(long batchId, int schoolId);

    /**
     * Trigger the created imports and clean up.
     *
     * @param batchId The batch id
     */
    void triggerImport(long batchId, int schoolId);

    /**
     * Clean up interim import records.
     *
     * @param batchId The batch id
     */
    void cleanupBatch(long batchId);
}
