package org.opentestsystem.rdw.ingest.group.service.impl;

import org.opentestsystem.rdw.ingest.common.model.GroupMessage;
import org.opentestsystem.rdw.ingest.common.model.ImportException;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.group.service.BatchingGroupImportService;
import org.opentestsystem.rdw.ingest.group.service.BatchingUserImportService;
import org.opentestsystem.rdw.ingest.group.service.GroupMessageProcessor;
import org.opentestsystem.rdw.ingest.group.service.ProcessingLoadService;
import org.opentestsystem.rdw.ingest.group.service.ProcessingReferenceService;
import org.opentestsystem.rdw.ingest.group.service.ProcessingStandardizationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class DefaultGroupMessageProcessor implements GroupMessageProcessor {
    private static final Logger logger = LoggerFactory.getLogger(DefaultGroupMessageProcessor.class);

    private final ProcessingStandardizationService standardizationService;
    private final ProcessingReferenceService referenceService;
    private final BatchingUserImportService userImportService;
    private final ProcessingLoadService loadService;
    private final BatchingGroupImportService groupImportService;

    @Autowired
    public DefaultGroupMessageProcessor(final ProcessingStandardizationService standardizationService,
                                        final ProcessingReferenceService referenceService,
                                        final BatchingUserImportService userImportService,
                                        final ProcessingLoadService loadService,
                                        final BatchingGroupImportService groupImportService) {
        this.standardizationService = standardizationService;
        this.referenceService = referenceService;
        this.userImportService = userImportService;
        this.loadService = loadService;
        this.groupImportService = groupImportService;
    }

    @Override
    public void process(final GroupMessage message) {
        final String jsonMessage = message.toJson();
        logger.debug("Received upload message: " + (jsonMessage.length() > 80 ? jsonMessage.substring(0, 80) + "..." : jsonMessage));

        final long batchId = message.getUploadId();
        try {
            loadService.loadBatch(message.getDigest(), batchId);
            standardizationService.standardizeBatch(batchId);
            referenceService.lookupBatchReferences(batchId);
            userImportService.processBatch(batchId);
            groupImportService.processBatch(batchId);
            logger.info("Processed group batch {}", batchId);
        } catch (final Exception e) {
            logger.warn("Problem processing batch: {}", batchId, e);
            throw new ImportException(ImportStatus.INVALID, "Problem processing batch " + batchId + ": " + e.getMessage());
        }
    }
}
