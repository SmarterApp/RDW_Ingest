package org.opentestsystem.rdw.ingest.tasking.status;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.tasking.repository.OrganizationRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ImportServiceClient;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ReplayLostImportsStatusIndicatorTest {

    private ImportServiceClient importServiceClient;
    private ReplayLostImportsStatusIndicator statusIndicator;

    @Before
    public void createStatusIndicator() {
        importServiceClient = mock(ImportServiceClient.class);

        statusIndicator = new ReplayLostImportsStatusIndicator(importServiceClient);
    }

    @Test
    public void levelShouldBeExternalDependencies() {
        assertThat(statusIndicator.doLevelCheck(4)).isFalse();
        assertThat(statusIndicator.doLevelCheck(5)).isTrue();
    }

    @Test
    public void itShouldReturnIdealStatus() {
        when(importServiceClient.getDiagnosticRating()).thenReturn(Rating.Ideal);

        final Status.Builder builder = Status.builder();
        statusIndicator.doStatusCheck(builder, 5);

        final Status status = builder.build();
        assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());

        for (final UnitStatus provider : (List<UnitStatus>) status.getDetails().get("providers")) {
            assertThat(provider.getStatusRating()).isEqualTo(Rating.Ideal.value());
        }
    }

    @Test
    public void itShouldReturnNonIdealStatus() {
        when(importServiceClient.getDiagnosticRating()).thenReturn(Rating.Warning);

        final Status.Builder builder = Status.builder();
        statusIndicator.doStatusCheck(builder, 5);

        final Status status = builder.build();
        assertThat(status.getStatusRating()).isEqualTo(Rating.Warning.value());

        final List<UnitStatus> providers = (List<UnitStatus>) status.getDetails().get("providers");
        assertThat(providers.get(0).getStatusRating()).isEqualTo(Rating.Warning.value());
    }

    @Test
    public void itShouldHandleProviderExceptions () {
        when(importServiceClient.getDiagnosticRating()).thenThrow(new RuntimeException("Khaaan!"));

        final Status.Builder builder = Status.builder();
        statusIndicator.doStatusCheck(builder, 5);

        final Status status = builder.build();
        assertThat(status.getStatusRating()).isEqualTo(Rating.Failed.value());

        final UnitStatus provider = ((List<UnitStatus>) status.getDetails().get("providers")).get(0);
        assertThat(provider.getStatusRating()).isEqualTo(Rating.Failed.value());
        assertThat(provider.getMessage()).contains("Khaaan!");
    }
}