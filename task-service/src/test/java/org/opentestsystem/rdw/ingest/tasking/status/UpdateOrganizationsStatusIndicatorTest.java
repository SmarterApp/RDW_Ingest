package org.opentestsystem.rdw.ingest.tasking.status;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.tasking.repository.OrganizationDataRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ImportServiceClient;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.task.ImportServiceClientPropertiesResolver;
import org.opentestsystem.rdw.multitenant.task.ImportServiceClientPropertiesRoot;
import org.opentestsystem.rdw.multitenant.task.ImportServiceClientPropertiesTenant;

import java.util.HashMap;
import java.util.List;

import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class UpdateOrganizationsStatusIndicatorTest {

    private OrganizationDataRepository organizationRepository;
    private ImportServiceClient importServiceClient;
    private UpdateOrganizationsStatusIndicator statusIndicator;

    @Before
    public void createStatusIndicator() {
        final TenantProperties tenantProperties = new TenantProperties();
        tenantProperties.setTenants(ImmutableMap.of(
                "CAX", Tenant.builder().id("CAX").key("CAX").name("California").build(),
                "NVX", Tenant.builder().id("NVX").key("NVX").name("Nevada").build(),
                "SB_S001", Tenant.builder().id("SB").key("SB_S001").name("Sandbox").sandbox(true).build()
        ));

        final HashMap<String, ImportServiceClientPropertiesTenant> configuredTenants = newHashMap();
        configuredTenants.put("NVX", new ImportServiceClientPropertiesTenant());

        final ImportServiceClientPropertiesRoot propertiesRoot = new ImportServiceClientPropertiesRoot();
        propertiesRoot.setTenants(configuredTenants);

        final ImportServiceClientPropertiesResolver propertiesResolver = mock(ImportServiceClientPropertiesResolver.class);
        when(propertiesResolver.getPropertiesRoot()).thenReturn(propertiesRoot);

        organizationRepository = mock(OrganizationDataRepository.class);
        importServiceClient = mock(ImportServiceClient.class);

        statusIndicator = new UpdateOrganizationsStatusIndicator(tenantProperties, propertiesResolver, organizationRepository, importServiceClient);
    }

    @Test
    public void levelShouldBeExternalDependencies() {
        assertThat(statusIndicator.doLevelCheck(4)).isFalse();
        assertThat(statusIndicator.doLevelCheck(5)).isTrue();
    }

    @Test
    public void itShouldReturnIdealStatus() {
        when(organizationRepository.isAvailable()).thenReturn(true);
        when(importServiceClient.getDiagnosticRating()).thenReturn(Rating.Ideal);

        final Status status = statusIndicator.status(5);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());
        assertThat(status.getDetails()).hasSize(1);

        for (final UnitStatus provider : (List<UnitStatus>) status.getDetails().get("providers for tenant NVX")) {
            assertThat(provider.getStatusRating()).isEqualTo(Rating.Ideal.value());
        }
    }

    @Test
    public void itShouldReturnNonIdealStatus() {
        when(organizationRepository.isAvailable()).thenReturn(false);
        when(importServiceClient.getDiagnosticRating()).thenReturn(Rating.Warning);

        final Status status = statusIndicator.status(5);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Failed.value());
        assertThat(status.getDetails()).hasSize(1);

        final List<UnitStatus> providers = (List<UnitStatus>) status.getDetails().get("providers for tenant NVX");
        assertThat(providers.get(0).getStatusRating()).isEqualTo(Rating.Failed.value());
        assertThat(providers.get(1).getStatusRating()).isEqualTo(Rating.Warning.value());
    }

    @Test
    public void itShouldHandleProviderExceptions () {
        when(organizationRepository.isAvailable()).thenReturn(true);
        when(importServiceClient.getDiagnosticRating()).thenThrow(new RuntimeException("Khaaan!"));

        final Status status = statusIndicator.status(5);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Failed.value());
        assertThat(status.getDetails()).hasSize(1);

        final UnitStatus provider = ((List<UnitStatus>) status.getDetails().get("providers for tenant NVX")).get(1);
        assertThat(provider.getStatusRating()).isEqualTo(Rating.Failed.value());
        assertThat(provider.getMessage()).contains("Khaaan!");
    }
}
