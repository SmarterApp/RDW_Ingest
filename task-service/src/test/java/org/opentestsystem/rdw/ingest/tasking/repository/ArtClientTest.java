package org.opentestsystem.rdw.ingest.tasking.repository;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestOperations;

import org.opentestsystem.rdw.multitenant.task.ArtClientProperties;

import static com.google.common.base.Charsets.UTF_8;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class ArtClientTest {

    @Mock
    private RestOperations restOperations;
    @Mock
    private ArtClientProperties properties;
    private ArtClient client;

    @Before
    public void setup() {
        client = spy(new ArtClient(properties));
        doReturn(restOperations).when(client).restOperations();
    }

    @Test
    public void itShouldBeAvailableIfArtStatusIsGood() {
        final byte[] payload = "{\"statusRating\":1}".getBytes(UTF_8);
        when(properties.getStatusUrl()).thenReturn("http://status/");
        when(restOperations.getForEntity(eq(properties.getStatusUrl()), eq(byte[].class)))
                .thenReturn(getResponse(payload));

        assertThat(client.isAvailable()).isTrue();
    }

    @Test
    public void itShouldNotBeAvailableIfArtStatusIsLessThanZero() {
        final byte[] payload = "{\"statusRating\":-1}".getBytes(UTF_8);
        when(properties.getStatusUrl()).thenReturn("http://status/");
        when(restOperations.getForEntity(eq(properties.getStatusUrl()), eq(byte[].class)))
                .thenReturn(getResponse(payload));

        assertThat(client.isAvailable()).isFalse();
    }

    @Test(expected = RestClientException.class)
    public void itShouldThrowIfResponseIsNotJson() {
        final byte[] payload = "{\"statusRating\":-1}".getBytes(UTF_8);
        when(properties.getStatusUrl()).thenReturn("http://status/");
        when(restOperations.getForEntity(eq(properties.getStatusUrl()), eq(byte[].class)))
                .thenReturn(ResponseEntity.ok()
                        .contentType(MediaType.TEXT_PLAIN)
                        .body(payload));

        assertThat(client.isAvailable()).isFalse();
    }

    @Test(expected = RestClientException.class)
    public void itShouldThrowIfResponseIsNotOK() {
        final byte[] payload = "{\"statusRating\":-1}".getBytes(UTF_8);
        when(properties.getStatusUrl()).thenReturn("http://status/");
        when(restOperations.getForEntity(eq(properties.getStatusUrl()), eq(byte[].class)))
                .thenReturn(ResponseEntity.badRequest()
                        .contentType(MediaType.TEXT_PLAIN)
                        .body(payload));

        assertThat(client.isAvailable()).isFalse();
    }

    @Test
    public void itShouldGetGroupsOfDistrictsPayload() {
        final byte[] payload = "group of districts".getBytes(UTF_8);
        when(properties.getGroupsOfDistrictsUrl()).thenReturn("http://group-of-districts/{state}");
        when(restOperations.getForEntity(eq("http://group-of-districts/CA"), eq(byte[].class)))
                .thenReturn(getResponse(payload));

        assertThat(client.getGroupsOfDistrictsPayload("CA")).isEqualTo(payload);
    }

    @Test
    public void itShouldGetDistrictsPayload() {
        final byte[] payload = "districts".getBytes(UTF_8);
        when(properties.getDistrictsUrl()).thenReturn("http://districts/{state}");
        when(restOperations.getForEntity(eq("http://districts/CA"), eq(byte[].class)))
                .thenReturn(getResponse(payload));

        assertThat(client.getDistrictsPayload("CA")).isEqualTo(payload);
    }

    @Test
    public void itShouldGetGroupsOfSchoolsPayload() {
        final byte[] payload = "groups of schools".getBytes(UTF_8);
        when(properties.getGroupsOfSchoolsUrl()).thenReturn("http://groups-of-schools/{state}");
        when(restOperations.getForEntity(eq("http://groups-of-schools/CA"), eq(byte[].class)))
                .thenReturn(getResponse(payload));

        assertThat(client.getGroupsOfSchoolsPayload("CA")).isEqualTo(payload);
    }

    @Test
    public void itShouldGetSchoolsPayload() {
        final byte[] payload = "schools".getBytes(UTF_8);
        when(properties.getSchoolsUrl()).thenReturn("http://schools/{state}");
        when(restOperations.getForEntity(eq("http://schools/CA"), eq(byte[].class)))
                .thenReturn(getResponse(payload));

        assertThat(client.getSchoolsPayload("CA")).isEqualTo(payload);
    }

    private ResponseEntity<byte[]> getResponse(final byte[] payload) {
        return ResponseEntity.ok()
                .contentType(MediaType.APPLICATION_JSON)
                .body(payload);
    }
}
