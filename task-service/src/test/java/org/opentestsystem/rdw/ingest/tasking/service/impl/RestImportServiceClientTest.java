package org.opentestsystem.rdw.ingest.tasking.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class RestImportServiceClientTest {

    private RestImportServiceClient orgClient;
    private RestImportServiceClient resubmitClient;
    private RestTemplate restTemplate;
    private final String orgImportsUrl = "http://imports";
    private final String examImportsUrl = "http://exams/imports";
    private final String statusUrl = "http://status";

    @Before
    public void createClient() {
        restTemplate = mock(RestTemplate.class);
        final ImportServiceClientProperties orgProperties = mock(ImportServiceClientProperties.class);
        final ImportServiceClientProperties examProperties = mock(ImportServiceClientProperties.class);
        when(orgProperties.getOrganizationsImportsUrl()).thenReturn(orgImportsUrl);
        when(examProperties.getExamsImportsUrl()).thenReturn(examImportsUrl);
        when(orgProperties.getStatusUrl()).thenReturn(statusUrl);
        when(examProperties.getStatusUrl()).thenReturn(statusUrl);

        orgClient = new RestImportServiceClient(restTemplate, orgProperties);
        resubmitClient = new RestImportServiceClient(restTemplate, examProperties);
    }

    @Test
    public void itShouldPostOrgPayload() {
        final byte[] payload = "payload".getBytes();
        final RdwImport rdwImport = RdwImport.builder().status(ImportStatus.BAD_DATA).build();
        when(restTemplate.postForObject(eq(orgImportsUrl), any(), any())).thenReturn(rdwImport);

        orgClient.postOrganizationPayload(payload);
        verify(restTemplate).postForObject(eq(orgImportsUrl), any(), any());
    }

    @Test
    public void itShouldPostToExamsResubmit() {
        final ResponseEntity<Long> response = new ResponseEntity<>(1L, HttpStatus.ACCEPTED);
        when(restTemplate.postForEntity(eq(examImportsUrl), any(), eq(Long.class))).thenReturn(response);

        resubmitClient.postExamsResubmitQuery();
        verify(restTemplate).postForEntity(eq(examImportsUrl), any(), eq(Long.class));
    }

    @Test
    public void itShouldGetStatus() {
        final UnitStatus status = UnitStatus.builder().rating(Rating.Degraded).build();
        when(restTemplate.getForObject(eq(statusUrl), any())).thenReturn(status);
        assertThat(orgClient.getDiagnosticRating()).isEqualTo(Rating.Degraded);
    }

}