package org.opentestsystem.rdw.ingest.tasking.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.common.model.ImportStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.springframework.web.client.RestTemplate;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class RestImportServiceClientTest {

    private RestImportServiceClient client;
    private RestTemplate restTemplate;
    private final String orgImportsUrl = "http://imports";
    private final String statusUrl = "http://status";

    @Before
    public void createClient() {
        restTemplate = mock(RestTemplate.class);
        final ImportServiceClientProperties properties = mock(ImportServiceClientProperties.class);
        when(properties.getOrganizationsImportsUrl()).thenReturn(orgImportsUrl);
        when(properties.getStatusUrl()).thenReturn(statusUrl);

        client = new RestImportServiceClient(restTemplate, properties);
    }

    @Test
    public void itShouldPostOrgPayload() {
        final byte[] payload = "payload".getBytes();
        final RdwImport rdwImport = RdwImport.builder().status(ImportStatus.BAD_DATA).build();
        when(restTemplate.postForObject(eq(orgImportsUrl), any(), any())).thenReturn(rdwImport);

        client.postOrganizationPayload(payload);
        verify(restTemplate).postForObject(eq(orgImportsUrl), any(), any());
    }

    @Test
    public void itShouldGetStatus() {
        final UnitStatus status = UnitStatus.builder().rating(Rating.Degraded).build();
        when(restTemplate.getForObject(eq(statusUrl), any())).thenReturn(status);
        assertThat(client.getDiagnosticRating()).isEqualTo(Rating.Degraded);
    }

}