package org.opentestsystem.rdw.ingest.tasking.repository;

import org.json.JSONException;
import org.json.JSONObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.tasking.UpdateOrganizationsConfiguration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * This test will run only if the oauth2 secret and password are provided at runtime:
 * <ul>
 * <li>task.update-organizations.art-client.oauth2.client-secret</li>
 * <li>task.update-organizations.art-client.oauth2.password</li>
 * </ul>
 * For example,<pre>
 * java -Dtask.update-organizations.art-client.oauth2.client-secret=MyClientSecret
 *      -Dtask.update-organizations.art-client.oauth2.password=MyPassword
 * </pre>
 */
@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Import(UpdateOrganizationsConfiguration.class)
@ActiveProfiles("organization")
public class ArtClientIT {
    private static final String State = "CA";
    private static final String SearchResults = "searchResults";

    @Autowired
    ArtClient artClient;

    @Test
    public void itShouldBeAvailable() {
        assertThat(artClient.isAvailable()).isTrue();
    }

    @Test
    public void itShouldGetGroupsOfDistrictsByPayload() throws JSONException {
        JSONObject actual = new JSONObject(new String(artClient.getGroupsOfDistrictsPayload(State)));

        assertThat(actual).isNotNull();
        assertThat(actual.getJSONArray(SearchResults).length()).isGreaterThan(0);
    }

    @Test
    public void itShouldGetDistrictsByPayload() throws JSONException {
        JSONObject actual = new JSONObject(new String(artClient.getDistrictsPayload(State)));

        assertThat(actual).isNotNull();
        assertThat(actual.getJSONArray(SearchResults).length()).isGreaterThan(0);
    }

    @Test
    public void itShouldGetGroupsOfSchoolsByPayload() throws JSONException {
        JSONObject actual = new JSONObject(new String(artClient.getGroupsOfSchoolsPayload(State)));

        assertThat(actual).isNotNull();
        assertThat(actual.getJSONArray(SearchResults).length()).isGreaterThan(0);
    }

    @Test
    public void itShouldGetSchoolsByPayload() throws JSONException {
        JSONObject actual = new JSONObject(new String(artClient.getSchoolsPayload(State)));

        assertThat(actual).isNotNull();
        assertThat(actual.getJSONArray(SearchResults).length()).isGreaterThan(0);
    }
}
