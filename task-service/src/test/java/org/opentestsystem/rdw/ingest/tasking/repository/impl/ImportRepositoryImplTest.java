package org.opentestsystem.rdw.ingest.tasking.repository.impl;

import org.junit.Test;
import org.opentestsystem.rdw.ingest.tasking.model.ReconciliationReport;
import org.opentestsystem.rdw.ingest.tasking.repository.ImportRepository;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ImportRepositoryImplTest {
    private RestTemplate restTemplate;
    private String urlSpy;

    @Test
    public void itShouldAllowForLeadingQuestionInQuery() {
        ImportRepository repository = getRepository();
        String query = "?status=PROCESSED";

        ReconciliationReport actual = repository.getReconciliation(query);

        assertThat(actual).isNotNull();
        assertThat(urlSpy).isEqualTo("null/exams/imports/reconciliation?status=PROCESSED");
    }

    @Test
    public void itShouldAccomodateWhenbQuestionIsNotInQuery() {
        ImportRepository repository = getRepository();
        String query = "status=PROCESSED";

        ReconciliationReport actual = repository.getReconciliation(query);

        assertThat(actual).isNotNull();
        assertThat(urlSpy).contains("exams/imports/reconciliation?status=PROCESSED");
    }

    @Test
    public void itShouldAllowForQueryToBeBlank() {
        ImportRepository repository = getRepository();
        ReconciliationReport actual = repository.getReconciliation("");

        assertThat(actual).isNotNull();
        assertThat(urlSpy).contains("exams/imports/reconciliation");
    }

    @Test
    public void itShouldAllowForQueryToBeNull() {
        ImportRepository repository = getRepository();
        ReconciliationReport actual = repository.getReconciliation(null);

        assertThat(actual).isNotNull();
        assertThat(urlSpy).contains("exams/imports/reconciliation");
    }

    @Test
    public void itShouldGetFileNameFromHeader() {
        String filename = "rdw-import_test.csv";
        ImportRepository repository = getRepository(filename);
        ReconciliationReport actual = repository.getReconciliation(null);

        assertThat(actual).isNotNull();
        assertThat(actual.getFilename()).isEqualTo(filename);
    }

    private ImportRepository getRepository() {
        return getRepository("rdw_import_2017-05-03.csv");
    }

    private ImportRepository getRepository(String filename) {
        restTemplate = mock(RestTemplate.class);
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();
        headers.add("Content-Disposition", "attachment; filename=\"" + filename + "\"");

        ResponseEntity<byte[]> response = new ResponseEntity<byte[]>(HttpStatus.ACCEPTED);
        when(restTemplate.exchange(isA(String.class), isA(HttpMethod.class), isA(HttpEntity.class), isA(Class.class))).thenAnswer(invocation -> {
                    urlSpy = (String) invocation.getArguments()[0];
                    return new ResponseEntity<Object>(headers, HttpStatus.ACCEPTED);
                }
        );

        return new ImportRepositoryImpl(restTemplate);
    }
}
