package org.opentestsystem.rdw.ingest.tasking.repository.impl;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.ingest.tasking.model.ReconciliationReport;
import org.opentestsystem.rdw.ingest.tasking.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.tasking.repository.ImportRepositoryProperties;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.isA;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ImportRepositoryImplTest {
    private RestTemplate restTemplate;
    private ArgumentCaptor<String> urlCaptor;
    private ImportRepository repository;

    @Before
    public void setup() {
        repository = getRepository();
    }

    @Test
    public void itShouldAccomodateWhenQuestionIsNotInQuery() {
        String query = "status=PROCESSED";

        ReconciliationReport actual = repository.getReconciliation(query);

        assertThat(actual).isNotNull();
        assertThat(urlCaptor.getValue()).contains("exams/imports/reconciliation?status=PROCESSED");
    }

    @Test
    public void itShouldAllowForQueryToBeBlank() {
        ReconciliationReport actual = repository.getReconciliation("");

        assertThat(actual).isNotNull();
        assertThat(urlCaptor.getValue()).contains("exams/imports/reconciliation");
    }

    @Test
    public void itShouldAllowForQueryToBeNull() {
        ReconciliationReport actual = repository.getReconciliation(null);

        assertThat(actual).isNotNull();
        assertThat(urlCaptor.getValue()).contains("exams/imports/reconciliation");
    }

    @Test
    public void itShouldSetHostAndScheme() {
        ImportRepositoryProperties properties = getProperties();
        properties.setHost("import-service-proxy:8761/import-service");
        properties.setScheme("https");

        repository = getRepository(properties);
        ReconciliationReport actual = repository.getReconciliation(null);


        assertThat(actual).isNotNull();
        assertThat(urlCaptor.getValue()).isEqualTo("https://import-service-proxy:8761/import-service/exams/imports/reconciliation");
    }

    @Test
    public void itShouldBuildFullUri() {
        ReconciliationReport actual = repository.getReconciliation("status=PROCESSED&creator=client@example.com");

        assertThat(actual).isNotNull();
        assertThat(urlCaptor.getValue()).isEqualTo("http://import-service:8829/exams/imports/reconciliation?status=PROCESSED&creator=client@example.com");
    }

    @Test
    public void itShouldGetFileNameFromHeader() {
        String filename = "rdw-import_test.csv";
        ImportRepository repository = getRepository(filename);
        ReconciliationReport actual = repository.getReconciliation(null);

        assertThat(actual).isNotNull();
        assertThat(actual.getFilename()).isEqualTo(filename);
    }

    private ImportRepositoryProperties getProperties() {
        ImportRepositoryProperties.Auth auth = new ImportRepositoryProperties.Auth();
        auth.setUsername("client@example.com");
        auth.setPassword("monkeyBananas");

        ImportRepositoryProperties properties = new ImportRepositoryProperties();
        properties.setHost("import-service:8829");
        properties.setScheme("http");
        properties.setAuth(auth);

        return properties;
    }

    private ImportRepository getRepository(ImportRepositoryProperties properties) {
        return getRepository("rdw_import_2017-05-03.csv", properties);
    }

    private ImportRepository getRepository(String filename) {
        return getRepository(filename, getProperties());
    }

    private ImportRepository getRepository() {
        return getRepository("rdw_import_2017-05-03.csv", getProperties());
    }

    private ImportRepository getRepository(String filename, ImportRepositoryProperties properties) {
        restTemplate = mock(RestTemplate.class);
        MultiValueMap<String, String> headers = new LinkedMultiValueMap<>();
        headers.add("Content-Disposition", "attachment; filename=\"" + filename + "\"");

        ResponseEntity<byte[]> response = new ResponseEntity<byte[]>(HttpStatus.ACCEPTED);

        urlCaptor = ArgumentCaptor.forClass(String.class);
        when(restTemplate
                .exchange(urlCaptor.capture(), isA(HttpMethod.class), isA(HttpEntity.class), isA(Class.class)))
                .thenReturn(new ResponseEntity<>(headers, HttpStatus.ACCEPTED));

        return new ImportRepositoryImpl(restTemplate, properties);
    }
}
