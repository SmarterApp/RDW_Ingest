package org.opentestsystem.rdw.ingest.tasking.status;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.tasking.repository.ReportRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ReportSender;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ReconciliationReportStatusIndicatorTest {

    private ReportRepository reportRepository;
    private ReportSender reportSender;
    private ReconciliationReportStatusIndicator statusIndicator;

    @Before
    public void createStatusIndicator() {
        reportRepository = mock(ReportRepository.class);
        reportSender = mock(ReportSender.class);

        statusIndicator = new ReconciliationReportStatusIndicator(reportRepository, newArrayList(reportSender));
    }

    @Test
    public void levelShouldBeExternalDependencies() {
        assertThat(statusIndicator.doLevelCheck(4)).isFalse();
        assertThat(statusIndicator.doLevelCheck(5)).isTrue();
    }

    @Test
    public void itShouldReturnIdealStatus() {
        when(reportRepository.isAvailable()).thenReturn(true);
        when(reportSender.isAvailable()).thenReturn(true);

        final Status.Builder builder = Status.builder();
        statusIndicator.doStatusCheck(builder, 5);

        final Status status = builder.build();
        assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());

        for (final UnitStatus provider : (List<UnitStatus>) status.getDetails().get("providers")) {
            assertThat(provider.getStatusRating()).isEqualTo(Rating.Ideal.value());
        }
    }

    @Test
    public void itShouldReturnNonIdealStatus() {
        when(reportRepository.isAvailable()).thenReturn(false);
        when(reportSender.isAvailable()).thenReturn(false);

        final Status.Builder builder = Status.builder();
        statusIndicator.doStatusCheck(builder, 5);

        final Status status = builder.build();
        assertThat(status.getStatusRating()).isEqualTo(Rating.Failed.value());

        for (final UnitStatus provider : (List<UnitStatus>) status.getDetails().get("providers")) {
            assertThat(provider.getStatusRating()).isEqualTo(Rating.Failed.value());
        }
    }
}