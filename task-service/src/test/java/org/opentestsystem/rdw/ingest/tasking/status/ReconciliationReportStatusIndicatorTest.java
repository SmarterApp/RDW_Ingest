package org.opentestsystem.rdw.ingest.tasking.status;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.tasking.repository.ReportRepository;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.task.SendReconciliationReportPropertiesRoot;
import org.opentestsystem.rdw.multitenant.task.SendReconciliationReportPropertiesTenant;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class ReconciliationReportStatusIndicatorTest {

    private ReportRepository reportRepository;
    private ReconciliationReportStatusIndicator statusIndicator;

    @Before
    public void createStatusIndicator() {
        final TenantProperties tenantProperties = new TenantProperties();
        tenantProperties.setTenants(ImmutableMap.of(
                "CAX", Tenant.builder().id("CAX").key("CAX").name("California").build(),
                "NVX", Tenant.builder().id("NVX").key("NVX").name("Nevada").build(),
                "SB_S001", Tenant.builder().id("SB").key("SB_S001").name("Sandbox").sandbox(true).build()
        ));

        final ArchivePropertiesTenant archivePropertiesTenant = new ArchivePropertiesTenant();
        archivePropertiesTenant.setUriRoot("file:///tmp/");

        final SendReconciliationReportPropertiesTenant propertiesTenant = new SendReconciliationReportPropertiesTenant();
        propertiesTenant.setLog(true);
        propertiesTenant.setQuery("status=BAD_DATA");
        propertiesTenant.setArchives(newArrayList(archivePropertiesTenant));

        final HashMap<String, SendReconciliationReportPropertiesTenant> configuredTenants = newHashMap();
        configuredTenants.put("CAX", propertiesTenant);

        final SendReconciliationReportPropertiesRoot reconciliationReportPropertiesRoot =
                new SendReconciliationReportPropertiesRoot();
        reconciliationReportPropertiesRoot.setTenants(configuredTenants);

        reportRepository = mock(ReportRepository.class);

        statusIndicator = new ReconciliationReportStatusIndicator(tenantProperties, reconciliationReportPropertiesRoot, reportRepository);
    }

    @Test
    public void levelShouldBeExternalDependencies() {
        assertThat(statusIndicator.doLevelCheck(4)).isFalse();
        assertThat(statusIndicator.doLevelCheck(5)).isTrue();
    }

    @Test
    public void itShouldReturnIdealStatus() {
        when(reportRepository.isAvailable()).thenReturn(true);

        final Status status = statusIndicator.status(5);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Ideal.value());
        assertThat(status.getDetails()).hasSize(1);

        for (final UnitStatus provider : (List<UnitStatus>) status.getDetails().get("providers for tenant CAX")) {
            assertThat(provider.getStatusRating()).isEqualTo(Rating.Ideal.value());
        }
    }

    @Test
    public void itShouldReturnNonIdealStatus() {
        when(reportRepository.isAvailable()).thenReturn(false);

        final Status status = statusIndicator.status(5);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Failed.value());

        // this test relies on the report repository being added first
        final UnitStatus repo = ((List<UnitStatus>) status.getDetails().get("providers for tenant CAX")).get(0);
        assertThat(repo.getStatusRating()).isEqualTo(Rating.Failed.value());
    }

    @Test
    public void itShouldHandleTenantException() {
        when(reportRepository.isAvailable()).thenThrow(new RuntimeException("dang"));

        final Status status = statusIndicator.status(5);
        assertThat(status.getStatusRating()).isEqualTo(Rating.Failed.value());
        assertThat(status.getDetails().get("error")).isEqualTo("dang");
    }
}
