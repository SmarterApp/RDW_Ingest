package org.opentestsystem.rdw.ingest.tasking;

import com.google.common.collect.ImmutableMap;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

import java.util.HashMap;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.tasking.service.ReconciliationService;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.task.SendReconciliationReportPropertiesRoot;
import org.opentestsystem.rdw.multitenant.task.SendReconciliationReportPropertiesTenant;

import static com.google.common.collect.Lists.newArrayList;
import static com.google.common.collect.Maps.newHashMap;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

public class ReconciliationReportTaskTest {

    private TenantProperties tenantProperties;
    private ReconciliationService reconciliationService;
    private SendReconciliationReportPropertiesRoot reconciliationReportPropertiesRoot;
    private ReconciliationReportTask task;

    @Before
    public void createTask() {
        tenantProperties = new TenantProperties();
        tenantProperties.setTenants(ImmutableMap.of(
                "CAX", Tenant.builder().id("CAX").key("CAX").name("California").build(),
                "NVX", Tenant.builder().id("NVX").key("NVX").name("Nevada").build(),
                "SB_S001", Tenant.builder().id("SB").key("SB_S001").name("Sandbox").sandbox(true).build()
        ));

        reconciliationService = mock(ReconciliationService.class);

        final ArchivePropertiesTenant archivePropertiesTenant = new ArchivePropertiesTenant();
        archivePropertiesTenant.setUriRoot("file:///tmp/");

        final SendReconciliationReportPropertiesTenant propertiesTenant = new SendReconciliationReportPropertiesTenant();
        propertiesTenant.setLog(true);
        propertiesTenant.setQuery("status=BAD_DATA");
        propertiesTenant.setArchives(newArrayList(archivePropertiesTenant));

        final HashMap<String, SendReconciliationReportPropertiesTenant> configuredTenants = newHashMap();
        configuredTenants.put("CAX", propertiesTenant);

        reconciliationReportPropertiesRoot = new SendReconciliationReportPropertiesRoot();
        reconciliationReportPropertiesRoot.setTenants(configuredTenants);

        task = new ReconciliationReportTask(tenantProperties, reconciliationService, reconciliationReportPropertiesRoot);
    }

    @Test
    public void itShouldDoReportForAllConfiguredTenants() {
        task.sendReconciliationReport();
        final ArgumentCaptor<RdwImportQuery> queryCaptor = ArgumentCaptor.forClass(RdwImportQuery.class);
        final ArgumentCaptor<Iterable> sendersCaptor = ArgumentCaptor.forClass(Iterable.class);
        verify(reconciliationService).sendReport(queryCaptor.capture(), sendersCaptor.capture());
        assertThat(queryCaptor.getValue().asParamString()).isEqualTo("status=BAD_DATA");
        assertThat(sendersCaptor.getValue()).hasSize(2);
    }

    @Test
    public void itShouldIgnoreUnknownTenant() {
        assertThat(ReconciliationReportTask.doReport(tenantProperties, reconciliationReportPropertiesRoot, reconciliationService, "HI"))
                .containsIgnoringCase("ignor").containsIgnoringCase("unknown tenant HI");
    }

    @Test
    public void itShouldIgnoreSandbox() {
        // note this uses the id, not the key
        assertThat(ReconciliationReportTask.doReport(tenantProperties, reconciliationReportPropertiesRoot, reconciliationService, "SB"))
                .containsIgnoringCase("ignor").containsIgnoringCase("sandbox SB");
    }

    @Test
    public void itShouldIgnoreTenantWithNoTaskProperties() {
        assertThat(ReconciliationReportTask.doReport(tenantProperties, reconciliationReportPropertiesRoot, reconciliationService, "NVX"))
                .containsIgnoringCase("ignor").containsIgnoringCase("tenant NVX");
    }
}
