package org.opentestsystem.rdw.ingest.tasking;

import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.tasking.ReconciliationReportConfiguration.ReconciliationReportTask;
import org.opentestsystem.rdw.ingest.tasking.service.ReconciliationService;
import org.opentestsystem.rdw.ingest.tasking.service.ReportSender;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static java.lang.Thread.sleep;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

public class ReconciliationReportTaskTest {

    @Test(expected = IllegalArgumentException.class)
    public void itShouldFastFailForBadQuery() {
        final ReconciliationService service = mock(ReconciliationService.class);
        final List<ReportSender> senders = newArrayList();
        final String query = "after=NotAThing";

        new ReconciliationReportTask("CA", service, senders, query);
    }

    @Test
    public void taskShouldEvaluateQueryEachTime() throws InterruptedException {
        final ReconciliationService service = mock(ReconciliationService.class);
        final List<ReportSender> senders = newArrayList();
        final String query = "after=-PT25H";

        final ReconciliationReportTask task = new ReconciliationReportTask("CA", service, senders, query);

        task.sendReconciliationReport();
        sleep(200);
        task.sendReconciliationReport();

        final ArgumentCaptor<RdwImportQuery> captor = ArgumentCaptor.forClass(RdwImportQuery.class);
        verify(service, times(2)).sendReport(captor.capture(), eq(senders));
        final Instant after1 = captor.getAllValues().get(0).getAfter();
        final Instant after2 = captor.getAllValues().get(1).getAfter();
        assertThat(after1).isNotEqualTo(after2);
    }
}
