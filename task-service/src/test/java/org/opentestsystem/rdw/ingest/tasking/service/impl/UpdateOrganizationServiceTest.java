package org.opentestsystem.rdw.ingest.tasking.service.impl;

import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.tasking.repository.OrganizationDataRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ImportServiceClient;
import org.opentestsystem.rdw.ingest.tasking.service.UpdateOrganizationsService;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class UpdateOrganizationServiceTest {

    private UpdateOrganizationsService service;
    private OrganizationDataRepository organizationRepository;
    private ImportServiceClient importServiceClient;

    @Before
    public void createService() {
        organizationRepository = mock(OrganizationDataRepository.class);
        importServiceClient = mock(ImportServiceClient.class);

        service = new DefaultUpdateOrganizationsService(organizationRepository, importServiceClient);
    }

    @Test
    public void itShouldDoUpdateUsingServices() {
        // it doesn't matter what the payloads are, just make sure they get called and used ...
        final String state = "CA";
        when(organizationRepository.getGroupsOfDistrictsPayload(state)).thenReturn("{}".getBytes(UTF_8));
        when(organizationRepository.getDistrictsPayload(state)).thenReturn("[ { \"fu\" } ]".getBytes(UTF_8));
        when(organizationRepository.getGroupsOfSchoolsPayload(state)).thenReturn("{}".getBytes(UTF_8));
        when(organizationRepository.getSchoolsPayload(state)).thenReturn("{ \"bar\" }".getBytes(UTF_8));

        service.doUpdate(state);

        verify(importServiceClient).postOrganizationPayload("{ \"groupsofdistricts\": {}, \"districts\": [ { \"fu\" } ], \"groupsofschools\": {}, \"schools\": { \"bar\" }}".getBytes(UTF_8));
    }
}
