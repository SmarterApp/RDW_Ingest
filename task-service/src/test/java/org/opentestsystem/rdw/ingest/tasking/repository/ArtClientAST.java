package org.opentestsystem.rdw.ingest.tasking.repository;

import org.json.JSONException;
import org.json.JSONObject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.ingest.common.model.District;
import org.opentestsystem.rdw.ingest.common.model.DistrictGroup;
import org.opentestsystem.rdw.ingest.common.model.School;
import org.opentestsystem.rdw.ingest.common.model.SchoolGroup;
import org.opentestsystem.rdw.ingest.common.util.DataElementErrorCollector;
import org.opentestsystem.rdw.ingest.common.util.ParserHelper;
import org.opentestsystem.rdw.ingest.processor.service.impl.JsonOrganizationParser;
import org.opentestsystem.rdw.ingest.tasking.UpdateOrganizationsConfiguration;
import org.opentestsystem.rdw.ingest.tasking.service.impl.DefaultUpdateOrganizationsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collection;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * This test requires the oauth2 secret and password to be provided at runtime:
 * <ul>
 * <li>task.update-organizations.art-client.oauth2.client-secret</li>
 * <li>task.update-organizations.art-client.oauth2.password</li>
 * </ul>
 * For example,<pre>
 * java -Dtask.update-organizations.art-client.oauth2.client-secret=MyClientSecret
 *      -Dtask.update-organizations.art-client.oauth2.password=MyPassword
 * </pre>
 * OR as an environment variable, <pre>
 *     export RDW_INGEST_ART_CLIENT_OAUTH2_CLIENT_SECRET=MyClientSecret
 *     export RDW_INGEST_ART_CLIENT_OAUTH2_PASSWORD=MyPassword
 * </pre>
 */
@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Import(UpdateOrganizationsConfiguration.class)
@ActiveProfiles("organization")
public class ArtClientAST {
    private static final String State = "CA";
    private static final String SearchResults = "searchResults";

    @Autowired
    ArtClient artClient;

    @Autowired
    DefaultUpdateOrganizationsService organizationsService;

    @Test
    public void itShouldBeAvailable() {
        assertThat(artClient.isAvailable()).isTrue();
    }

    @Test
    public void itShouldGetGroupsOfDistrictsByPayload() throws JSONException {
        final JSONObject actual = new JSONObject(new String(artClient.getGroupsOfDistrictsPayload(State)));

        assertThat(actual).isNotNull();
        assertThat(actual.getJSONArray(SearchResults).length()).isGreaterThan(0);
    }

    @Test
    public void itShouldGetDistrictsByPayload() throws JSONException {
        final JSONObject actual = new JSONObject(new String(artClient.getDistrictsPayload(State)));

        assertThat(actual).isNotNull();
        assertThat(actual.getJSONArray(SearchResults).length()).isGreaterThan(0);
    }

    @Test
    public void itShouldGetGroupsOfSchoolsByPayload() throws JSONException {
        final JSONObject actual = new JSONObject(new String(artClient.getGroupsOfSchoolsPayload(State)));

        assertThat(actual).isNotNull();
        assertThat(actual.getJSONArray(SearchResults).length()).isGreaterThan(0);
    }

    @Test
    public void itShouldGetSchoolsByPayload() throws JSONException {
        final JSONObject actual = new JSONObject(new String(artClient.getSchoolsPayload(State)));

        assertThat(actual).isNotNull();
        assertThat(actual.getJSONArray(SearchResults).length()).isGreaterThan(0);
    }

    @Test
    public void itShouldBeParseable() {
        final JsonOrganizationParser parser = new JsonOrganizationParser();
        final DataElementErrorCollector errorCollector = new DataElementErrorCollector();

        final School expectedSchoolWithDistrictGroup = School
                .builder()
                .naturalId("88800120012001")
                .name("Big Bay")
                .stateCode("CA")
                .externalId("88800120012001")
                .parent(District.builder()
                        .naturalId("88800120000000")
                        .name("Igen District")
                        .stateCode("CA")
                        .externalId("88800120000000")
                        .parent(DistrictGroup.builder()
                                .naturalId("8880001")
                                .name("Pern North")
                                .stateCode("CA")
                                .build()
                        )
                        .build()
                ).build();

        final School expectedSchoolWithSchoolGroup = School
                .builder()
                .naturalId("DS80001")
                .externalId("DS80001")
                .name("SubGroup1-1")
                .stateCode("CA")
                .parent(SchoolGroup
                        .builder()
                        .naturalId("GROUP1")
                        .name("Group 1")
                        .stateCode("CA")
                        .parent(District
                                .builder()
                                .name("District 2 - San Diego")
                                .naturalId("DISTRICT2")
                                .stateCode("CA")
                                .build())
                        .build())
                .build();

        // Under the hood, organization service will invoke all of the art client methods to get the payload.
        final Collection<School> actualSchools = parser.parse(organizationsService.getPayload("CA"), new ParserHelper(errorCollector));
        assertThat(errorCollector.isEmpty()).isTrue();

        assertThat(actualSchools).contains(expectedSchoolWithDistrictGroup);
        assertThat(actualSchools).contains(expectedSchoolWithSchoolGroup);
    }
}
