package org.opentestsystem.rdw.ingest.tasking.service.impl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.mail.MailException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessagePreparator;

import javax.mail.Address;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.internet.MimeMessage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class LoggingJavaMailSender implements JavaMailSender {
    private static final Logger logger = LoggerFactory.getLogger(LoggingJavaMailSender.class);
    private static final String MessagePrefix = "**** DEV ONLY Fake Mail Sender **** >> ";

    @Override
    public MimeMessage createMimeMessage() {
        log("Creating Mime Message...");
        return new MimeMessage(Session.getInstance(new Properties()));
    }

    @Override
    public MimeMessage createMimeMessage(InputStream contentStream) throws MailException {
        try {
            log("Creating Mime Message...");
            return new MimeMessage(Session.getInstance(new Properties()), contentStream);
        } catch (MessagingException e) {
            log("Error creating MIME message. ", e);
            return null;
        }
    }

    @Override
    public void send(MimeMessage mimeMessage) throws MailException {
        logMessage(mimeMessage);
    }

    @Override
    public void send(MimeMessage... mimeMessages) throws MailException {
        for (MimeMessage mimeMessage : mimeMessages) {
            logMessage(mimeMessage);
        }
    }

    @Override
    public void send(MimeMessagePreparator mimeMessagePreparator) throws MailException {
        throw new UnsupportedOperationException();
    }

    @Override
    public void send(MimeMessagePreparator... mimeMessagePreparators) throws MailException {
        throw new UnsupportedOperationException();
    }

    @Override
    public void send(SimpleMailMessage simpleMessage) throws MailException {
        throw new UnsupportedOperationException();
    }

    @Override
    public void send(SimpleMailMessage... simpleMessages) throws MailException {
        throw new UnsupportedOperationException();
    }

    private void logMessage(MimeMessage mimeMessage) {
        try {
            log("Message sending... ");
            log("To: " + getAddressToString(mimeMessage.getAllRecipients()));
            log("From: " + getAddressToString(mimeMessage.getFrom()));
            log("Subject: " + mimeMessage.getSubject());
            log("Content Type: " + mimeMessage.getContentType());
            log("Output stream: " + getOutput(mimeMessage));

            log("Message sent.");
        } catch (MessagingException | IOException e) {
            log("Error sending message.", e);
        }
    }

    private String getOutput(MimeMessage mimeMessage) throws IOException, MessagingException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        mimeMessage.writeTo(stream);
        return new String(stream.toByteArray(), "UTF-8");
    }

    private String getAddressToString(Address[] addresses) {
        String result = "";
        for (Address rec : addresses) {
            result += rec;
        }

        return result;
    }

    private void log(String info) {
        logger.info(MessagePrefix + info);
    }

    private void log(String error, Exception e) {
        logger.error(MessagePrefix + error, e);
    }
}
