package org.opentestsystem.rdw.ingest.tasking.repository.impl;

import org.opentestsystem.rdw.ingest.tasking.model.ReconciliationReport;
import org.opentestsystem.rdw.ingest.tasking.repository.ImportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.nio.charset.Charset;
import java.util.Base64;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Component
public class ImportRepositoryImpl implements ImportRepository {
    private static final Pattern filenameRegexPattern = Pattern.compile("filename=[\"'](.*)[\"']");
    private final RestTemplate restTemplate;

    @Value("${repository.import.host}")
    private String importHost;

    @Value("${repository.import.auth.username}")
    private String username;

    @Value("${repository.import.auth.password}")
    private String password;

    @Autowired
    public ImportRepositoryImpl(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    @Override
    public ReconciliationReport getReconciliation() {
        final ResponseEntity<byte[]> response = restTemplate.exchange(
                importHost + "/exams/imports/reconciliation?status=processed",
                HttpMethod.GET,
                new HttpEntity<>(createHeaders()),
                byte[].class);

        String contentDisposition = response.getHeaders().get("Content-Disposition").get(0);
        Matcher matcher = filenameRegexPattern.matcher(contentDisposition);
        String filename = matcher.find()
                ? matcher.group(1)
                : "reconciliation_report.csv";

        return new ReconciliationReport(filename, response.getBody());
    }

    private HttpHeaders createHeaders() {
        return new HttpHeaders() {
            {
                String auth = username + ":" + password;
                byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")));
                String authHeader = "Basic " + new String(encodedAuth);

                set("Authorization", authHeader);
            }
            { set("Accept", "text/csv");  }
            { set("Content-Type", "text/csv;charset=UTF-8"); }
        };
    }
}
