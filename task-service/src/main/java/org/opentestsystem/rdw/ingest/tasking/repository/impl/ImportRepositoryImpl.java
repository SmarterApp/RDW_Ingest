package org.opentestsystem.rdw.ingest.tasking.repository.impl;

import org.opentestsystem.rdw.ingest.tasking.model.ReconciliationReport;
import org.opentestsystem.rdw.ingest.tasking.repository.ImportRepository;
import org.opentestsystem.rdw.ingest.tasking.repository.ImportRepositoryProperties;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.nio.charset.Charset;
import java.util.Base64;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Component
public class ImportRepositoryImpl implements ImportRepository {
    private static final Pattern filenameRegexPattern = Pattern.compile("filename=[\"'](.*)[\"']");
    private static final String reconciliationUri = "/exams/imports/reconciliation";
    private final RestTemplate restTemplate;
    private final ImportRepositoryProperties properties;

    @Autowired
    public ImportRepositoryImpl(final RestTemplate restTemplate, final ImportRepositoryProperties properties) {
        this.restTemplate = restTemplate;
        this.properties = properties;
    }

    @Override
    public ReconciliationReport getReconciliation(final String query) {
        String uri = UriComponentsBuilder
                .newInstance()
                .scheme(properties.getScheme())
                .host(properties.getHost())
                .path(reconciliationUri)
                .query(query)
                .build()
                .toUriString();

        final ResponseEntity<byte[]> response = restTemplate.exchange(
                uri,
                HttpMethod.GET,
                new HttpEntity<>(createHeaders()),
                byte[].class);

        String contentDisposition = response.getHeaders().get("Content-Disposition").get(0);
        Matcher matcher = filenameRegexPattern.matcher(contentDisposition);
        String filename = matcher.find()
                ? matcher.group(1)
                : "reconciliation_report.csv";

        return new ReconciliationReport(filename, response.getBody());
    }

    private HttpHeaders createHeaders() {
        ImportRepositoryProperties.Auth authProperties = properties.getAuth();
        String auth = authProperties.getUsername() + ":" + authProperties.getPassword();
        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(Charset.forName("US-ASCII")));
        String authHeader = "Basic " + new String(encodedAuth);

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", authHeader);
        headers.set("Accept", "text/csv");
        headers.set("Content-Type", "text/csv;charset=UTF-8");

        return headers;
    }
}
