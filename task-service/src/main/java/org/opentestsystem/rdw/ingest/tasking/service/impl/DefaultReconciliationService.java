package org.opentestsystem.rdw.ingest.tasking.service.impl;

import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.tasking.model.ReconciliationReport;
import org.opentestsystem.rdw.ingest.tasking.repository.ReportRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ReconciliationService;
import org.opentestsystem.rdw.ingest.tasking.task.ReconciliationReportProperties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Component;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import static com.google.common.base.Preconditions.checkArgument;

@Component
public class DefaultReconciliationService implements ReconciliationService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultReconciliationService.class);
    private final ReportRepository reportRepository;
    private final JavaMailSender mailSender;

    @Autowired
    public DefaultReconciliationService(final ReportRepository reportRepository, final JavaMailSender mailSender) {
        this.reportRepository = reportRepository;
        this.mailSender = mailSender;
    }

    @Override
    public void sendReport(final ReconciliationReportProperties properties) {
        // because it is a configuration option (and not user input), assume query is set properly
        final RdwImportQuery query = RdwImportQuery.builder().params(properties.getQuery()).build();
        checkArgument(!query.isEmpty(), "Report query must not be empty");

        if (!anyImportActivity(query)) {
            logger.info("No import activity, skipping reconciliation report");
            return;
        }

        final ReconciliationReport report = reportRepository.getReconciliationReport(query);

        try {
            final MimeMessage message = mailSender.createMimeMessage();
            final MimeMessageHelper helper = new MimeMessageHelper(message, true);

            final ReconciliationReportProperties.Email email = properties.getEmail();

            helper.setTo(email.getTo());
            helper.setFrom(email.getFrom());
            helper.setSubject(email.getSubject());
            helper.setText(email.getMessage());

            helper.addAttachment(report.getFilename(), new ByteArrayResource(report.getData()));
            mailSender.send(message);
        } catch (final MessagingException e) {
            logger.error("Failed to send reconciliation report.", e);
            throw new RuntimeException(e);
        }
    }

    /**
     * Determine if there as been any import activity by querying for all import records
     * that match the query parameters while ignoring any status criterium.
     *
     * @param reportQuery query for generating report
     * @return true if any import records exist matching query while ignoring status
     */
    private boolean anyImportActivity(final RdwImportQuery reportQuery) {
        final RdwImportQuery query = reportQuery.copy().status((String) null).build();
        return reportRepository.countExamImports(query) > 0;
    }
}
