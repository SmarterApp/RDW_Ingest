package org.opentestsystem.rdw.ingest.tasking;

import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import org.opentestsystem.rdw.ingest.tasking.repository.ReportRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ReconciliationService;
import org.opentestsystem.rdw.ingest.tasking.service.impl.DefaultReconciliationService;
import org.opentestsystem.rdw.ingest.tasking.status.ReconciliationReportStatusIndicator;
import org.opentestsystem.rdw.ingest.tasking.web.ReconciliationReportEndpoint;
import org.opentestsystem.rdw.ingest.tasking.web.ReconciliationReportMvcEndpoint;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.task.SendReconciliationReportPropertiesRoot;

/**
 * Configuration and implementation for reconciliation report task.<br/>
 * The goal is to avoid creating the scheduled bean and any of its helpers if the system
 * is configured to not run the task. So there is a bit of deep knowledge in here.<br/>
 * To enable this task, the following property must be defined:<ul>
 *     <li>task.send-reconciliation-report.cron</li>
 * </ul>
 * Each tenant should configure their report properties to log and archive the report.
 * To properly disable this task, remove task.send-reconciliation-report.
 * <p>
 * The configured tasks are multi-tenant aware.
 * </p>
 * @see ReconciliationReportTask
 * @see ReconciliationReportStatusIndicator
 * @see ReconciliationReportEndpoint
 * @see ReconciliationReportMvcEndpoint
 */
@Configuration
@ConditionalOnProperty(prefix = "task.send-reconciliation-report", name = { "cron" })
public class ReconciliationReportConfiguration {

    @Bean
    public ReconciliationReportTask reconciliationReportTask(
            final TenantProperties tenantProperties,
            final ReconciliationService reconciliationService,
            final SendReconciliationReportPropertiesRoot reconciliationReportPropertiesRoot) {
        return new ReconciliationReportTask(tenantProperties, reconciliationService, reconciliationReportPropertiesRoot);
    }

    @Bean
    public ReconciliationService reconciliationService(final ReportRepository reportRepository) {
        return new DefaultReconciliationService(reportRepository);
    }

    @Bean
    @ConfigurationProperties("task-send-reconciliation-report")
    @RefreshScope
    public SendReconciliationReportPropertiesRoot sendReconciliationReportPropertiesRoot() {
        return new SendReconciliationReportPropertiesRoot();
    }

    @Bean
    public ReconciliationReportStatusIndicator reconciliationReportStatusIndicator(
            final TenantProperties tenantProperties,
            final SendReconciliationReportPropertiesRoot reconciliationReportPropertiesRoot,
            final ReportRepository reportRepository) {
        return new ReconciliationReportStatusIndicator(tenantProperties, reconciliationReportPropertiesRoot, reportRepository);
    }

    @Bean
    public ReconciliationReportMvcEndpoint reconciliationReportMvcEndpoint(final ReconciliationReportEndpoint delegate) {
        return new ReconciliationReportMvcEndpoint(delegate);
    }

    @Bean
    public ReconciliationReportEndpoint reconciliationReportEndpoint(
            final TenantProperties tenantProperties,
            final SendReconciliationReportPropertiesRoot reconciliationReportPropertiesRoot,
            final ReconciliationService reconciliationService) {
        return new ReconciliationReportEndpoint(tenantProperties, reconciliationReportPropertiesRoot, reconciliationService);
    }
}
