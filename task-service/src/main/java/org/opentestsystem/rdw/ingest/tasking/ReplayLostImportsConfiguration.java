package org.opentestsystem.rdw.ingest.tasking;

import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.tasking.repository.ArtClient;
import org.opentestsystem.rdw.ingest.tasking.repository.ArtClientProperties;
import org.opentestsystem.rdw.ingest.tasking.repository.OrganizationRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ImportServiceClient;
import org.opentestsystem.rdw.ingest.tasking.service.ReconciliationService;
import org.opentestsystem.rdw.ingest.tasking.service.ReplayLostImportsService;
import org.opentestsystem.rdw.ingest.tasking.service.ReportSender;
import org.opentestsystem.rdw.ingest.tasking.service.impl.DefaultReplayLostImportsService;
import org.opentestsystem.rdw.ingest.tasking.service.impl.OrganizationsImportServiceClientProperties;
import org.opentestsystem.rdw.ingest.tasking.service.impl.RestImportServiceClient;
import org.opentestsystem.rdw.ingest.tasking.service.impl.StubOAuth2RestTemplate;
import org.opentestsystem.rdw.ingest.tasking.status.UpdateOrganizationsStatusIndicator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.actuate.endpoint.AbstractEndpoint;
import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.cloud.endpoint.GenericPostableMvcEndpoint;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.web.client.RestTemplate;

import java.util.List;

import static com.google.common.base.Strings.isNullOrEmpty;

/**
 * Configuration and implementation of update-organizations task.<br/>
 * The goal is to avoid creating the scheduled bean and any of its helpers if the system
 * is configured to not run the task. So there is a bit of deep knowledge in here.<br/>
 * To enable this task, the following properties must be defined:<ul>
 *     <li>task.replay-lost-imports.cron</li>
 *     <li>task.replay-lost-imports.query</li>
 *     <li>task.replay-lost-imports.import-service-client.status-url</li>
 *     <li>task.replay-lost-imports.import-service-client.exams-imports-url</li>
 * </ul>
 * To properly disable this task, remove task.replay-lost-imports.
 */
@Configuration
@ConditionalOnProperty(prefix = "task.resubmit-lost-imports", name = { "cron", "query" })
public class ReplayLostImportsConfiguration {
    private static final Logger logger = LoggerFactory.getLogger(ReplayLostImportsConfiguration.class);

    /**
     * Bean for the main replay lost imports task.
     *
     * @param replayLostImportService service
     * @param query parameters for refinement of date range, limit, etc.
     * @return replay lost imports task
     */
    @Bean
    public ReplayLostImportsTask replayLostImportsTask(
            final ReplayLostImportsService replayLostImportService,
            @Value("${task.send-reconciliation-report.query}") final String query) {
        return new ReplayLostImportsTask(replayLostImportService, RdwImportQuery.builder().params(query).build());
    }

    @Bean
    public ReplayLostImportsService defaultReplayLostImportsService(final ImportServiceClient importServiceClient) {
        return new DefaultReplayLostImportsService(importServiceClient);
    }

    @Bean
    @ConditionalOnProperty(prefix = "task.update-organizations.art-client", name = "status-url")
    public OrganizationRepository artClient(final ArtClientProperties properties) {
        return new ArtClient(properties);
    }

    @Bean
    @ConditionalOnProperty(prefix = "task.replay-lost-imports.import-service-client", name = "status-url")
    public ImportServiceClient restImportServiceClient(final OrganizationsImportServiceClientProperties properties) {
        // iff stub auth is specified and oauth2 is not specified, use stub token
        final RestTemplate restTemplate = !isNullOrEmpty(properties.getStubAuth())
                && (properties.getOauth2() == null || isNullOrEmpty(properties.getOauth2().getAccessTokenUri())) ?
                new StubOAuth2RestTemplate(properties.getStubAuth()) :
                new OAuth2RestTemplate(properties.getOauth2());

        return new RestImportServiceClient(restTemplate, properties);
    }

    /**
     * Bean for indicator that adds task info to the status end-point.
     *
     * @param organizationRepository organization repo
     * @param importServiceClient import service client
     * @return update organizations task status indicator
     */
    @Bean
    public UpdateOrganizationsStatusIndicator updateOrganizationsStatusIndicator(
            final OrganizationRepository organizationRepository,
            final ImportServiceClient importServiceClient) {
        return new UpdateOrganizationsStatusIndicator(organizationRepository, importServiceClient);
    }

    /**
     * Bean for actuator end-point to manually trigger replay lost imports task.
     * It supports POST instead of GET, e.g.:<pre>
     * curl -X POST http://localhost:8008/replayLostImports
     * </pre>
     *
     * @param replayLostImportsService service
     * @param query for refinement of date range, limit, etc.
     * @return replay lost imports end-point
     */
    @Bean
    public MvcEndpoint replayLostImportsEndpoint(
            final ReplayLostImportsService replayLostImportsService,
            @Value("${task.update-organizations.state}") final String query) {
        return new GenericPostableMvcEndpoint(
                new ReplayLostImportsEndpoint(replayLostImportsService, query));
    }

    static class ReplayLostImportsTask {
        private final ReplayLostImportsService replayLostImportService;
        private final RdwImportQuery query;

        ReplayLostImportsTask(final ReplayLostImportsService replayLostImportService, final RdwImportQuery query) {
            this.replayLostImportService = replayLostImportService;
            this.query = query;
        }

        @Scheduled(cron = "${task.update-organizations.cron}")
        public void updateOrganizations() {
            logger.info("Scheduled task triggered: Replay Lost Imports (Exams)");
            replayLostImportService.replayExams(query);
            logger.debug("Scheduled task completed: Replay Lost Imports (Exams)");
        }
    }

    static class ReconciliationReportTask {
        private final ReconciliationService reconciliationService;
        private final List<ReportSender> senders;
        private final RdwImportQuery query;

        ReconciliationReportTask(final ReconciliationService reconciliationService,
                                 final List<ReportSender> senders,
                                 final RdwImportQuery query) {
            this.reconciliationService = reconciliationService;
            this.senders = senders;
            this.query = query;
        }

        @Scheduled(cron = "${task.send-reconciliation-report.cron}")
        public void sendReconciliationReport() {
            logger.info("Scheduled task triggered: Send Reconciliation Report");
            try {
                reconciliationService.sendReport(query, senders);
                logger.debug("Scheduled task completed: Send Reconciliation Report");
            } catch (final Exception e) {
                logger.warn("Error sending reconciliation report", e);
            }
        }
    }

    static class ReplayLostImportsEndpoint extends AbstractEndpoint<Boolean> {
        private final ReplayLostImportsService replayLostImportsService;
        private final String query;

        ReplayLostImportsEndpoint(final ReplayLostImportsService replayLostImportsService,
                                    final String query) {
            super("replayLostImports", true, true);
            this.replayLostImportsService = replayLostImportsService;
            this.query = query;
        }

        @Override
        public Boolean invoke() {
            logger.info("Manual task triggered: Update Organizations");
            replayLostImportsService.replayExams(RdwImportQuery.builder().params(query).build());
            return true;
        }
    }
}
