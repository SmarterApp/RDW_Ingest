package org.opentestsystem.rdw.ingest.tasking.status;

import org.opentestsystem.rdw.ingest.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.ingest.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.ingest.common.status.Rating;
import org.opentestsystem.rdw.ingest.common.status.Status;
import org.opentestsystem.rdw.ingest.common.status.StatusIndicator;
import org.opentestsystem.rdw.ingest.tasking.service.impl.LoggingJavaMailSender;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.stereotype.Component;

import javax.mail.MessagingException;

/**
 * A {@link StatusIndicator} for email status.
 * <p>
 * Verifies the spring mail cloud settings are configured correctly.
 * </p>
 */
@Component
public class MailSenderStatusIndicator extends AbstractStatusIndicator {
    private JavaMailSender javaMailSender;

    @Autowired
    public MailSenderStatusIndicator(final JavaMailSender javaMailSender) {
        this.javaMailSender = javaMailSender;
    }

    @Override
    public String name() {
        return "mail-sender";
    }

    @Override
    protected void doStatusCheck(Status.Builder builder, int level) {
        Status status = getMailStatus();
        builder.detail("mail-status", status).rating(Rating.valueOf(status.getStatusText()));
    }

    private Status getMailStatus() {
        if (javaMailSender instanceof LoggingJavaMailSender) {
            return warning("The mail sender has been configured to write to the logs.  This only OK in Development.");
        }

        JavaMailSenderImpl springMailSender = (JavaMailSenderImpl) javaMailSender;
        if (springMailSender == null) {
           return warning("Failed to load the Spring implementation of JavaMailSender");
        }

        try {
            springMailSender.testConnection();
            return connectionStatus(true, "Successfully connected to the configured SMTP host");
        } catch (MessagingException e) {
            return connectionStatus(false, "Failed to connect to the configured SMTP host: " + e.getMessage());
        }
    }

    private Status connectionStatus(Boolean isOk, String message) {
        return Status.builder()
                .detail(isOk ? "info" : "error", message)
                .rating(isOk ? Rating.Ideal : Rating.Failed)
                .build();
    }

    private Status warning(String message) {
        return Status
                .builder()
                .detail("warning", message)
                .rating(Rating.Warning)
                .build();
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return level >= DiagnosticLevel.ExternalDependencies.value();
    }
}
