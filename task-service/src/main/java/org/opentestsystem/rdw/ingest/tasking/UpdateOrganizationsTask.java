package org.opentestsystem.rdw.ingest.tasking;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;

import java.util.Set;
import org.opentestsystem.rdw.ingest.tasking.service.UpdateOrganizationsService;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.task.ImportServiceClientPropertiesResolver;

/**
 * Scheduled task to update organizations for all tenants that have it configured.
 */
public class UpdateOrganizationsTask {
    private static final Logger logger = LoggerFactory.getLogger(UpdateOrganizationsTask.class);

    private final TenantProperties tenantProperties;
    private final ImportServiceClientPropertiesResolver propertiesResolver;
    private final UpdateOrganizationsService updateOrganizationsService;

    public UpdateOrganizationsTask(final TenantProperties tenantProperties,
                                   final ImportServiceClientPropertiesResolver propertiesResolver,
                                   final UpdateOrganizationsService updateOrganizationsService) {
        this.tenantProperties = tenantProperties;
        this.propertiesResolver = propertiesResolver;
        this.updateOrganizationsService = updateOrganizationsService;

        // if no tenants are configured for this task, log a warning
        if (propertiesResolver.getPropertiesRoot().getTenants().isEmpty()) {
            logger.warn("UpdateOrganizations task enabled but there are no tenants are configured for it");
        }
    }

    @Scheduled(cron = "${task.update-organizations.cron}", zone = "GMT")
    public void updateOrganizations() {
        doUpdate(tenantProperties, propertiesResolver, updateOrganizationsService, null);
    }

    /**
     * Helper to do the update; used by task and end-point (to avoid code duplication).
     * <p>
     * NOTE: the propertiesResolver should be a tenant-aware configuration. It is used
     * to determine which tenants have this task configured. Since each tenant MUST
     * have different import service credentials the import service client properties
     * work well for this.
     * </p>
     *
     * @param tenantProperties all known tenants (and sandboxes)
     * @param propertiesResolver used to find tenants with this task configured
     * @param updateOrganizationsService service for doing the update
     * @param tenantId (optional) tenant id to restrict update to a single tenant
     * @return informational text
     */
    public static String doUpdate(final TenantProperties tenantProperties,
                                  final ImportServiceClientPropertiesResolver propertiesResolver,
                                  final UpdateOrganizationsService updateOrganizationsService,
                                  final String tenantId) {
        final Set<String> configuredTenants = propertiesResolver.getPropertiesRoot().getTenants().keySet();

        if (tenantId == null) {
            // do it for all of the tenants
            final StringBuilder builder = new StringBuilder("Task triggered: UpdateOrganizations");
            for (final Tenant tenant : tenantProperties.getTenants().values()) {
                if (tenant.isSandbox() || !configuredTenants.contains(tenant.getKey())) {
                    continue;
                }
                builder.append("\n").append(doUpdate(updateOrganizationsService, tenant));
            }
            return builder.toString();
        } else {
            final Tenant tenant = tenantProperties.findTenantById(tenantId).orElse(null);
            if (tenant == null) {
                return "Ignoring UpdateOrganizations request for unknown tenant " + tenantId;
            } else if (tenant.isSandbox()) {
                return "Ignoring UpdateOrganizations request for sandbox " + tenantId;
            } else if (!configuredTenants.contains(tenant.getKey())) {
                return "Ignoring UpdateOrganizations request because task is not configured for tenant " + tenantId;
            }
            return doUpdate(updateOrganizationsService, tenant);
        }
    }

    private static String doUpdate(final UpdateOrganizationsService updateOrganizationsService,
                                   final Tenant tenant) {
        TenantContextHolder.setTenantId(tenant.getId());
        try {
            updateOrganizationsService.doUpdate(tenant.getId());
            return "UpdateOrganizations succeeded for tenant " + tenant.getId();
        } catch (final Exception e) {
            logger.warn("Failed to update organizations for {}: {}", tenant.toString(), e.getMessage());
            return "Failed UpdateOrganizations for tenant " + tenant.getId();
        } finally {
            TenantContextHolder.clear();
        }
    }
}
