package org.opentestsystem.rdw.ingest.tasking;

import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.boot.bind.RelaxedPropertyResolver;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Scope;
import org.springframework.core.env.PropertyResolver;

import org.opentestsystem.rdw.archive.AbstractArchiveProperties;
import org.opentestsystem.rdw.archive.ArchiveProperties;
import org.opentestsystem.rdw.archive.ArchivePropertiesTenant;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.archive.LocalArchiveService;
import org.opentestsystem.rdw.archive.S3ArchiveService;

public class ArchiveServiceConfiguration {

    public interface ArchiveServiceFactory {
        /**
         * Create {@link ArchiveService} based on properties. The properties must contain
         * the archive root setting; other required properties depend on the root protocol:<ul>
         * <li>file - no other properties required</li>
         * <li>S3 - must specify region, access key, secret key</li>
         * </ul>
         * The prefix is used to qualify the properties.
         * <p>
         * Example local file configuration, prefix is local-archive:<pre>
         * local-archive.root=file:///tmp/
         * </pre>
         * Example S3 configuration, prefix is archive2:<pre>
         * archive2.root=s3://MyBucket
         * archive2.cloud.aws.region.auto=true
         * OR
         * archive2.cloud.aws.region.auto=false
         * archive2.cloud.aws.region.static=us-west-2
         * archive2.cloud.aws.credentials.accessKey=MyAccessKey
         * archive2.cloud.aws.credentials.secretKey=MySecretKey
         * </pre>
         *
         * @param propertyResolver property resolver
         * @param prefix           optional property prefix, e.g. "archive."; may be null
         * @return newly created archive service
         * @throws IllegalArgumentException if any invalid or missing properties
         */
        ArchiveService createArchiveService(PropertyResolver propertyResolver, String prefix);
    }

    public static class SimpleArchiveProperties extends AbstractArchiveProperties {

        @Override
        public String getUriRoot() {
            return null;
        }

        @Override
        public String getPathPrefix() {
            return null;
        }

        @Override
        public String getS3AccessKey() {
            return null;
        }

        @Override
        public String getS3SecretKey() {
            return null;
        }

        @Override
        public String getS3RegionStatic() {
            return null;
        }

        @Override
        public String getS3Sse() {
            return null;
        }
    }

    @Bean
    public ArchiveServiceFactory archiveServiceFactory() {
        return (propertyResolver, prefix) -> {
            //temporary backwards compatible shim
            final ArchivePropertiesTenant archivePropertiesTenant = new ArchivePropertiesTenant();

            // use a relaxed property resolver to support Spring-like tolerance for camelCase, kabob-case, etc.
            // (using RelaxedDataBinder with configuration pojo might be less fragile)
            final String pre = prefix == null ? "" : prefix.endsWith(".") ? prefix : (prefix + ".");
            final PropertyResolver resolver = new RelaxedPropertyResolver(propertyResolver, pre);
            final String root = resolver.getRequiredProperty("root");
            archivePropertiesTenant.setUriRoot(root);
            if (archivePropertiesTenant.isConfiguredFile()) {
                return localArchiveService(archivePropertiesTenant);
            }
            if (archivePropertiesTenant.isConfiguredS3()) {
                final PropertyResolver credentialsResolver = new RelaxedPropertyResolver(propertyResolver, pre + "cloud.aws.credentials.");
                archivePropertiesTenant.setS3AccessKey(credentialsResolver.getRequiredProperty("access-key"));
                archivePropertiesTenant.setS3SecretKey(credentialsResolver.getRequiredProperty("secret-key"));

                final PropertyResolver regionResolver = new RelaxedPropertyResolver(propertyResolver, pre + "cloud.aws.region.");
                archivePropertiesTenant.setS3RegionStatic(regionResolver.getRequiredProperty("static"));

                final String sse = new RelaxedPropertyResolver(propertyResolver, pre + "cloud.aws.").getProperty("sse");
                archivePropertiesTenant.setS3Sse(sse);

                return s3ArchiveService(archivePropertiesTenant);
            }
            throw new IllegalArgumentException("Invalid archive root " + root);
        };
    }

    @Bean
    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
    public S3ArchiveService s3ArchiveService(final ArchiveProperties archiveProperties) {
        return new S3ArchiveService(archiveProperties);
    }

    @Bean
    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
    public LocalArchiveService localArchiveService(final ArchiveProperties archiveProperties) {
        return new LocalArchiveService(archiveProperties);
    }
}
