package org.opentestsystem.rdw.ingest.tasking.task;

import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.opentestsystem.rdw.ingest.tasking.repository.ReportRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ReconciliationService;
import org.opentestsystem.rdw.ingest.tasking.service.ReportSender;
import org.opentestsystem.rdw.ingest.tasking.service.impl.DefaultReconciliationService;
import org.opentestsystem.rdw.ingest.tasking.service.impl.FtpReportSender;
import org.opentestsystem.rdw.ingest.tasking.service.impl.LoggingReportSender;
import org.opentestsystem.rdw.ingest.tasking.status.ReconciliationReportStatusIndicator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.scheduling.annotation.Scheduled;

/**
 * Configuration and implementation for reconciliation report task.<br/>
 * The goal is to avoid creating the scheduled bean and any of its helpers if the system
 * is configured to not run the task. So there is a bit of deep knowledge in here.<br/>
 * To enable this task, the following properties must be defined:<ul>
 *     <li>task.send-reconciliation-report.cron</li>
 *     <li>task.send-reconciliation-report.query</li>
 * </ul>
 * To enable FTP, the following properties must be defined:<ul>
 *     <li>task.send-reconciliation-report.ftp-sender.server</li>
 *     <li>task.send-reconciliation-report.ftp-sender.username</li>
 *     <li>task.send-reconciliation-report.ftp-sender.password</li>
 * </ul>
 * To properly disable this task, remove task.send-reconciliation-report.
 */
@Configuration
@ConditionalOnProperty(prefix = "task.send-reconciliation-report", name = { "cron", "query" })
public class ReconciliationReportConfiguration {

    @Bean
    public ReconciliationReportTask reconciliationReportTask(
            final ReconciliationService reconciliationService,
            final ReportSender reportSender,
            @Value("${task.send-reconciliation-report.query}") final String query) {
        return new ReconciliationReportTask(reconciliationService, reportSender, RdwImportQuery.builder().params(query).build());
    }

    @Bean
    public ReconciliationService reconciliationService(final ReportRepository reportRepository) {
        return new DefaultReconciliationService(reportRepository);
    }

    /**
     * There needs to be exactly one {@link ReportSender} depending on the configuration.
     * Instead of mucking about with @ConditionalXxx annotations, just get the properties
     * directly, and instantiate the appropriate sender.
     *
     * @param env environment
     * @return report sender
     */
    @Bean
    public ReportSender reportSender(final Environment env) {
        if (env.containsProperty("task.send-reconciliation-report.ftp-sender.server")) {
            return new FtpReportSender(
                    env.getRequiredProperty("task.send-reconciliation-report.ftp-sender.server"),
                    env.getRequiredProperty("task.send-reconciliation-report.ftp-sender.username"),
                    env.getRequiredProperty("task.send-reconciliation-report.ftp-sender.password")
            );
        } else {
            return new LoggingReportSender();
        }
    }

    @Bean
    public ReconciliationReportStatusIndicator reconciliationReportStatusIndicator(final ReportRepository reportRepository,
                                                                                   final ReportSender reportSender) {
        return new ReconciliationReportStatusIndicator(reportRepository, reportSender);
    }


    static class ReconciliationReportTask {
        private static final Logger logger = LoggerFactory.getLogger(ReconciliationReportTask.class);

        private final ReconciliationService reconciliationService;
        private final ReportSender sender;
        private final RdwImportQuery query;

        ReconciliationReportTask(final ReconciliationService reconciliationService,
                                 final ReportSender sender,
                                 final RdwImportQuery query) {
            this.reconciliationService = reconciliationService;
            this.sender = sender;
            this.query = query;
        }

        @Scheduled(cron = "${task.send-reconciliation-report.cron}")
        public void sendReconciliationReport() {
            logger.info("Scheduled task triggered: Send Reconciliation Report");
            try {
                reconciliationService.sendReport(query, sender);
                logger.debug("Scheduled task completed: Send Reconciliation Report");
            } catch (final Exception e) {
                logger.warn("Error sending reconciliation report", e);
            }
        }
    }
}
