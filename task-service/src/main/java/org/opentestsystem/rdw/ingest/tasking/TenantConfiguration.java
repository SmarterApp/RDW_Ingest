package org.opentestsystem.rdw.ingest.tasking;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;

/**
 * Configuration for tenant resolution
 */
@Configuration
public class TenantConfiguration {

    @Bean
    public TenantIdResolver tenantIdResolver() {
        return () -> Optional.ofNullable(TenantContextHolder.getTenantId());
    }

    @Bean
    @ConfigurationProperties("tenantProperties")
    @RefreshScope
    public TenantProperties tenantProperties() {
        return new TenantProperties();
    }

    @Bean
    public TenantKeyResolver tenantKeyResolver(final TenantProperties tenantProperties,
                                               final TenantIdResolver tenantIdResolver) {
        return new TenantKeyResolver(tenantProperties, tenantIdResolver);
    }


    /**
     * (Temporary) helper to guarantee a single tenant is configured
     *
     * @param tenantProperties tenant properties
     * @return the one configured tenant id
     * @throws IllegalStateException if not exactly one tenant configured
     */
    static String extractSingleTenantIdOrThrow(final TenantProperties tenantProperties) {
        final List<String> tenantIds = tenantProperties == null ? Collections.emptyList() :
                tenantProperties.getTenants().values().stream()
                        .filter(t -> !t.isSandbox()).map(Tenant::getId).collect(Collectors.toList());
        if (tenantIds.size() == 1) {
            return tenantIds.get(0);
        } else {
            throw new IllegalStateException("Expected exactly one tenant, found " + tenantIds.toString());
        }
    }

}
