package org.opentestsystem.rdw.ingest.tasking.service.impl;

import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.common.model.RdwImport;
import org.opentestsystem.rdw.ingest.tasking.service.ImportServiceClient;
import org.opentestsystem.rdw.ingest.tasking.task.UpdateOrganizationsConfiguration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpRequest;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.net.URI;

import static com.google.common.base.Strings.isNullOrEmpty;

/**
 * An {@link ImportServiceClient} that uses REST API.<br/>
 *
 * This is instantiated explicitly by {@link UpdateOrganizationsConfiguration} so it is not
 * annotated as an autowired service.
 */
public class RestImportServiceClient implements ImportServiceClient {
    private static final Logger logger = LoggerFactory.getLogger(RestImportServiceClient.class);

    private final ImportServiceClientProperties properties;
    private final RestTemplate restTemplate;

    public RestImportServiceClient(final ImportServiceClientProperties properties) {
        this.properties = properties;
        // iff stub auth is specified and oauth2 is not specified, use stub token
        // TODO - use @Bean to do this? cause this makes testing difficult
        restTemplate = !isNullOrEmpty(properties.getStubAuth())
                    && (properties.getOauth2() == null || isNullOrEmpty(properties.getOauth2().getAccessTokenUri())) ?
                new StubOAuth2RestTemplate(properties.getStubAuth()) :
                new OAuth2RestTemplate(properties.getOauth2());
    }

    @Override
    public void postOrganizationPayload(final byte[] payload) {
        final HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        final HttpEntity<byte[]> request = new HttpEntity<>(payload, headers);
        final RdwImport rdwImport = restTemplate.postForObject(properties.getOrganizationsImportsUrl(), request, RdwImport.class);
        if (rdwImport.getStatus().getValue() < 0) {
            throw new RestClientException("organization import not accepted, id: " + rdwImport.getId() + ", status: " + rdwImport.getStatus());
        }
        logger.info("posted organizations import: {}, status: {}", rdwImport.getId(), rdwImport.getStatus());
    }

    @Override
    public Rating getDiagnosticRating() {
        final UnitStatus status = restTemplate.getForObject(properties.getStatusUrl(), UnitStatus.class);
        return Rating.valueOf(status.getStatusText());
    }

    /**
     * A helper that injects the stub auth token into all requests.
     * <p>
     * This is very hard-coded right now, we could make it more flexible and compatible.
     * </p>
     */
    private static class StubOAuth2RestTemplate extends RestTemplate {
        private final String authHeader;

        StubOAuth2RestTemplate(final String token) {
            authHeader = "Bearer " + token;
        }

        @Override
        protected ClientHttpRequest createRequest(final URI url, final HttpMethod method) throws IOException {
            final ClientHttpRequest request = super.createRequest(url, method);
            final HttpHeaders headers = request.getHeaders();
            headers.set(HttpHeaders.AUTHORIZATION, authHeader);
            return request;
        }
    }
}
