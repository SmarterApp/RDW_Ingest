package org.opentestsystem.rdw.ingest.tasking;

import org.opentestsystem.rdw.ingest.tasking.repository.ArtClient;
import org.opentestsystem.rdw.ingest.tasking.repository.ArtClientProperties;
import org.opentestsystem.rdw.ingest.tasking.repository.OrganizationRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ImportServiceClient;
import org.opentestsystem.rdw.ingest.tasking.service.UpdateOrganizationsService;
import org.opentestsystem.rdw.ingest.tasking.service.impl.DefaultUpdateOrganizationsService;
import org.opentestsystem.rdw.ingest.tasking.service.impl.ImportServiceClientProperties;
import org.opentestsystem.rdw.ingest.tasking.service.impl.RestImportServiceClient;
import org.opentestsystem.rdw.ingest.tasking.status.UpdateOrganizationsStatusIndicator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.Scheduled;

/**
 * Configuration and implementation of update-organizations task.<br/>
 * The goal is to avoid creating the scheduled bean and any of its helpers if the system
 * is configured to not run the task. So there is a bit of deep knowledge in here.<br/>
 * To enable this task, the following properties must be defined:<ul>
 *     <li>task.update-organizations.cron</li>
 *     <li>task.update-organizations.state</li>
 *     <li>task.update-organizations.art-client.status-url</li>
 *     <li>task.update-organizations.import-service-client.status-url</li>
 * </ul>
 * To properly disable this task, remove task.update-organizations.
 */
@Configuration
@ConditionalOnProperty(prefix = "task.update-organizations", name = { "cron", "state" })
public class UpdateOrganizationsConfiguration {

    @Bean
    public UpdateOrganizationsTask updateOrganizationsTask(
            final UpdateOrganizationsService updateOrganizationsService,
            @Value("${task.update-organizations.state}") final String organizationState) {
        return new UpdateOrganizationsTask(updateOrganizationsService, organizationState);
    }

    @Bean
    public UpdateOrganizationsService defaultUpdateOrganizationsService(
            final OrganizationRepository organizationRepository,
            final ImportServiceClient importServiceClient) {
        return new DefaultUpdateOrganizationsService(organizationRepository, importServiceClient);
    }

    @Bean
    @ConditionalOnProperty(prefix = "task.update-organizations.art-client", name = "status-url")
    public OrganizationRepository artClient(final ArtClientProperties properties) {
        return new ArtClient(properties);
    }

    @Bean
    @ConditionalOnProperty(prefix = "task.update-organizations.import-service-client", name = "status-url")
    public ImportServiceClient restImportServiceClient(final ImportServiceClientProperties properties) {
        return new RestImportServiceClient(properties);
    }

    @Bean
    public UpdateOrganizationsStatusIndicator updateOrganizationsStatusIndicator(
            final OrganizationRepository organizationRepository,
            final ImportServiceClient importServiceClient) {
        return new UpdateOrganizationsStatusIndicator(organizationRepository, importServiceClient);
    }

    static class UpdateOrganizationsTask {
        private static final Logger logger = LoggerFactory.getLogger(UpdateOrganizationsTask.class);

        private final UpdateOrganizationsService updateOrganizationsService;
        private final String organizationState;

        UpdateOrganizationsTask(final UpdateOrganizationsService updateOrganizationsService, final String organizationState) {
            this.updateOrganizationsService = updateOrganizationsService;
            this.organizationState = organizationState;
        }

        @Scheduled(cron = "${task.update-organizations.cron}")
        public void updateOrganizations() {
            logger.info("Scheduled task triggered: Update Organizations");
            updateOrganizationsService.doUpdate(organizationState);
            logger.debug("Scheduled task completed: Update Organizations");
        }
    }
}
