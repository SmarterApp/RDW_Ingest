package org.opentestsystem.rdw.ingest.tasking;

import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import org.opentestsystem.rdw.ingest.tasking.repository.ArtClient;
import org.opentestsystem.rdw.ingest.tasking.repository.OrganizationDataRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ImportServiceClient;
import org.opentestsystem.rdw.ingest.tasking.service.UpdateOrganizationsService;
import org.opentestsystem.rdw.ingest.tasking.service.impl.DefaultUpdateOrganizationsService;
import org.opentestsystem.rdw.ingest.tasking.service.impl.RestImportServiceClient;
import org.opentestsystem.rdw.ingest.tasking.status.UpdateOrganizationsStatusIndicator;
import org.opentestsystem.rdw.ingest.tasking.web.UpdateOrganizationsEndpoint;
import org.opentestsystem.rdw.ingest.tasking.web.UpdateOrganizationsMvcEndpoint;
import org.opentestsystem.rdw.multitenant.TenantKeyResolver;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.task.ArtClientPropertiesResolver;
import org.opentestsystem.rdw.multitenant.task.ArtClientPropertiesRoot;
import org.opentestsystem.rdw.multitenant.task.ImportServiceClientPropertiesResolver;
import org.opentestsystem.rdw.multitenant.task.ImportServiceClientPropertiesRoot;

import static com.google.common.base.Strings.isNullOrEmpty;

/**
 * Configuration and implementation of update-organizations task.<br/>
 * The goal is to avoid creating the scheduled bean and any of its helpers if the system
 * is configured to not run the task. So there is a bit of deep knowledge in here.<br/>
 * To enable this task, the following properties must be defined:<ul>
 *     <li>task.update-organizations.cron</li>
 *     <li>task.update-organizations.art-client.status-url</li>
 *     <li>task.update-organizations.import-service-client.status-url</li>
 * </ul>
 * To properly disable this task, remove or comment out task.update-organizations.
 * <p>
 * The configured tasks are multi-tenant aware.
 * </p>
 */
@Configuration
@ConditionalOnProperty(prefix = "task.update-organizations", name = { "cron" })
public class UpdateOrganizationsConfiguration {

    /**
     * Bean for the main update organizations task.
     *
     * @param tenantProperties tenant properties, used to iterate through known tenants
     * @param propertiesResolver tenant-aware art client properties, used to find tenants with this task configured
     * @param updateOrganizationsService tenant-aware update service
     * @return update organizations task
     */
    @Bean
    public UpdateOrganizationsTask updateOrganizationsTask(
            final TenantProperties tenantProperties,
            final ImportServiceClientPropertiesResolver propertiesResolver,
            final UpdateOrganizationsService updateOrganizationsService) {
        return new UpdateOrganizationsTask(tenantProperties, propertiesResolver, updateOrganizationsService);
    }

    @Bean
    public UpdateOrganizationsService defaultUpdateOrganizationsService(
            final OrganizationDataRepository organizationRepository,
            final ImportServiceClient importServiceClient) {
        return new DefaultUpdateOrganizationsService(organizationRepository, importServiceClient);
    }

    @Bean
    public OrganizationDataRepository artClient(final ArtClientPropertiesResolver properties) {
        return new ArtClient(properties);
    }

    @Bean
    @ConfigurationProperties("task-update-organizations-art-client")
    @RefreshScope
    public ArtClientPropertiesRoot artClientPropertiesRoot() {
        return new ArtClientPropertiesRoot();
    }

    @Bean
    @RefreshScope
    public ArtClientPropertiesResolver artClientPropertiesResolver(
            final TenantKeyResolver tenantKeyResolver,
            final ArtClientPropertiesRoot artClientPropertiesRoot) {
        return new ArtClientPropertiesResolver(tenantKeyResolver, artClientPropertiesRoot);
    }

    @Bean
    @ConfigurationProperties("task-update-organizations-import-service-client")
    @RefreshScope
    public ImportServiceClientPropertiesRoot importServiceClientPropertiesRoot() {
        return new ImportServiceClientPropertiesRoot();
    }

    @Bean
    @RefreshScope
    public ImportServiceClientPropertiesResolver importServiceClientPropertiesResolver(
            final TenantKeyResolver tenantKeyResolver,
            final ImportServiceClientPropertiesRoot importServiceClientPropertiesRoot) {
        return new ImportServiceClientPropertiesResolver(tenantKeyResolver, importServiceClientPropertiesRoot);
    }

    @Bean
    public ImportServiceClient organizationsImportServiceClient(final ImportServiceClientPropertiesResolver properties) {
        // fast-fail on bad configuration - root config should have the imports URL set
        if (isNullOrEmpty(properties.getPropertiesRoot().getOrganizationsImportsUrl())) {
            throw new IllegalArgumentException("organizations-imports-url must be set for import service client");
        }

        return new RestImportServiceClient(properties);
    }

    @Bean
    public UpdateOrganizationsStatusIndicator updateOrganizationsStatusIndicator(
            final TenantProperties tenantProperties,
            final ImportServiceClientPropertiesResolver propertiesResolver,
            final OrganizationDataRepository organizationRepository,
            final ImportServiceClient importServiceClient) {
        return new UpdateOrganizationsStatusIndicator(tenantProperties, propertiesResolver, organizationRepository, importServiceClient);
    }

    @Bean
    public UpdateOrganizationsMvcEndpoint updateOrganizationsMvcEndpoint(final UpdateOrganizationsEndpoint delegate) {
        return new UpdateOrganizationsMvcEndpoint(delegate);
    }

    @Bean
    public UpdateOrganizationsEndpoint updateOrganizationsEndpoint(
            final TenantProperties tenantProperties,
            final ImportServiceClientPropertiesResolver propertiesResolver,
            final UpdateOrganizationsService updateOrganizationsService) {
        return new UpdateOrganizationsEndpoint(tenantProperties, propertiesResolver, updateOrganizationsService);
    }

}
