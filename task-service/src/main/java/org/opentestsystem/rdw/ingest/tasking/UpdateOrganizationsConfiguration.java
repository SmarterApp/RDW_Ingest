package org.opentestsystem.rdw.ingest.tasking;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.actuate.endpoint.AbstractEndpoint;
import org.springframework.boot.actuate.endpoint.mvc.MvcEndpoint;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.cloud.endpoint.GenericPostableMvcEndpoint;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.web.client.RestTemplate;

import org.opentestsystem.rdw.ingest.tasking.repository.ArtClient;
import org.opentestsystem.rdw.ingest.tasking.repository.ArtClientProperties;
import org.opentestsystem.rdw.ingest.tasking.repository.OrganizationDataRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ImportServiceClient;
import org.opentestsystem.rdw.ingest.tasking.service.UpdateOrganizationsService;
import org.opentestsystem.rdw.ingest.tasking.service.impl.DefaultUpdateOrganizationsService;
import org.opentestsystem.rdw.ingest.tasking.service.impl.ImportServiceClientProperties;
import org.opentestsystem.rdw.ingest.tasking.service.impl.RestImportServiceClient;
import org.opentestsystem.rdw.ingest.tasking.status.UpdateOrganizationsStatusIndicator;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import static com.google.common.base.Strings.isNullOrEmpty;

/**
 * Configuration and implementation of update-organizations task.<br/>
 * The goal is to avoid creating the scheduled bean and any of its helpers if the system
 * is configured to not run the task. So there is a bit of deep knowledge in here.<br/>
 * To enable this task, the following properties must be defined:<ul>
 *     <li>task.update-organizations.cron</li>
 *     <li>task.update-organizations.art-client.status-url</li>
 *     <li>task.update-organizations.import-service-client.status-url</li>
 * </ul>
 * To properly disable this task, remove or comment out task.update-organizations.
 * <p>
 * This is a hack to make this work iff there is exactly one tenant in the system.
 * </p>
 */
// TODO - will this always be configured?
// TODO - tenant-specific part (import credentials) is required so use that as trigger per tenant
@Configuration
@ConditionalOnProperty(prefix = "task.update-organizations", name = { "cron" })
@EnableConfigurationProperties(ArtClientProperties.class)
public class UpdateOrganizationsConfiguration {
    private static final Logger logger = LoggerFactory.getLogger(UpdateOrganizationsConfiguration.class);

    /**
     * Bean for the main update organizations task.
     *
     * @param tenantProperties tenant properties
     * @param updateOrganizationsService service
     * @return update organizations task
     */
    @Bean
    public UpdateOrganizationsTask updateOrganizationsTask(
            final TenantProperties tenantProperties,
            final UpdateOrganizationsService updateOrganizationsService) {

        final String tenantId = TenantConfiguration.extractSingleTenantIdOrThrow(tenantProperties);
        return new UpdateOrganizationsTask(tenantId, updateOrganizationsService);
    }

    @Bean
    public UpdateOrganizationsService defaultUpdateOrganizationsService(
            final OrganizationDataRepository organizationRepository,
            @Qualifier("organizationsImportServiceClient") final ImportServiceClient importServiceClient) {
        return new DefaultUpdateOrganizationsService(organizationRepository, importServiceClient);
    }

    @Bean
    public OrganizationDataRepository artClient(final ArtClientProperties properties,
                                                final OAuth2RestTemplate artClientRestTemplate) {
        return new ArtClient(properties, artClientRestTemplate);
    }

    @Bean
    public OAuth2RestTemplate artClientRestTemplate(final ArtClientProperties properties) {
        return new OAuth2RestTemplate(properties.getOauth2());
    }

    @Bean(name = "organizationsImportServiceClient")
    public ImportServiceClient organizationsImportServiceClient() {
        final ImportServiceClientProperties properties = organizationsImportServiceClientProperties();
        // fast-fail on bad configuration
        if (isNullOrEmpty(properties.getOrganizationsImportsUrl())) {
            throw new IllegalArgumentException("organizations-imports-url must be set for import service client");
        }

        // TODO - where is multi-tenancy going to come in for import client?
        // TODO   multiple import clients or single client with tenant-specific methods?
        final RestTemplate restTemplate = new OAuth2RestTemplate(properties.getOauth2());

        return new RestImportServiceClient(restTemplate, properties);
    }

    @Bean
    @ConfigurationProperties(prefix = "task.update-organizations.import-service-client")
    public ImportServiceClientProperties organizationsImportServiceClientProperties() {
        return new ImportServiceClientProperties();
    }

    /**
     * Bean for indicator that adds task info to the status end-point.
     *
     * @param organizationRepository organization repo
     * @param importServiceClient import service client
     * @return update organizations task status indicator
     */
    @Bean
    public UpdateOrganizationsStatusIndicator updateOrganizationsStatusIndicator(
            final OrganizationDataRepository organizationRepository,
            @Qualifier("organizationsImportServiceClient") final ImportServiceClient importServiceClient) {
        return new UpdateOrganizationsStatusIndicator(organizationRepository, importServiceClient);
    }

    /**
     * Bean for actuator end-point to manually trigger update organizations task.
     * It supports POST instead of GET, e.g.:<pre>
     * curl -X POST http://localhost:8008/updateOrganizations
     * </pre>
     *
     * @param tenantProperties tenant properties
     * @param updateOrganizationsService service
     * @return update organizations end-point
     */
    @Bean
    public MvcEndpoint updateOrganizationsEndpoint(
            final TenantProperties tenantProperties,
            final UpdateOrganizationsService updateOrganizationsService) {

        final String tenantId = TenantConfiguration.extractSingleTenantIdOrThrow(tenantProperties);
        return new GenericPostableMvcEndpoint(new UpdateOrganizationsEndpoint(tenantId, updateOrganizationsService));
    }

    static class UpdateOrganizationsTask {
        private final String tenantId;
        private final UpdateOrganizationsService updateOrganizationsService;

        UpdateOrganizationsTask(final String tenantId,
                                final UpdateOrganizationsService updateOrganizationsService) {
            this.tenantId = tenantId;
            this.updateOrganizationsService = updateOrganizationsService;
        }

        @Scheduled(cron = "${task.update-organizations.cron}", zone = "GMT")
        public void updateOrganizations() {
            // TODO - loop thru all tenants that have the task configured
            logger.info("Scheduled task triggered: Update Organizations for {}", tenantId);
            TenantContextHolder.setTenantId(tenantId);
            updateOrganizationsService.doUpdate(tenantId);
            logger.debug("Scheduled task completed: Update Organizations");
        }
    }

    static class UpdateOrganizationsEndpoint extends AbstractEndpoint<Boolean> {
        private final String tenantId;
        private final UpdateOrganizationsService updateOrganizationsService;

        UpdateOrganizationsEndpoint(final String tenantId,
                                    final UpdateOrganizationsService updateOrganizationsService) {
            super("updateOrganizations", true, true);
            this.tenantId = tenantId;
            this.updateOrganizationsService = updateOrganizationsService;
        }

        @Override
        public Boolean invoke() {
            logger.info("Manual task triggered: Update Organizations for {}", tenantId);
            TenantContextHolder.setTenantId(tenantId);
            updateOrganizationsService.doUpdate(tenantId);
            return true;
        }
    }
}
