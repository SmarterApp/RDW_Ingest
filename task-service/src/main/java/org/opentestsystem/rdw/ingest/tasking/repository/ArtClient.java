package org.opentestsystem.rdw.ingest.tasking.repository;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.opentestsystem.rdw.ingest.tasking.UpdateOrganizationsConfiguration;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.client.OAuth2RestOperations;
import org.springframework.security.oauth2.client.OAuth2RestTemplate;
import org.springframework.web.client.RestClientException;

import java.io.IOException;

/**
 * ART client providing access to organization data.<br/>
 *
 * This is instantiated explicitly by {@link UpdateOrganizationsConfiguration} so it is not
 * annotated as an autowired service.
 */
public class ArtClient implements OrganizationRepository {

    private static final String StatePlaceholderRegex = "\\{state}";

    private final OAuth2RestOperations restTemplate;
    private final ArtClientProperties properties;

    public ArtClient(final ArtClientProperties properties) {
        this.properties = properties;
        this.restTemplate = new OAuth2RestTemplate(properties.getOauth2());
    }

    @Override
    public byte[] getGroupsOfDistrictsPayload(final String state) {
        return getPayload(properties.getGroupsOfDistrictsUrl(), state);
    }

    @Override
    public byte[] getDistrictsPayload(final String state) {
        return getPayload(properties.getDistrictsUrl(), state);
    }

    @Override
    public byte[] getGroupsOfSchoolsPayload(final String state) {
        return getPayload(properties.getGroupsOfSchoolsUrl(), state);
    }

    @Override
    public byte[] getSchoolsPayload(final String state) {
        return getPayload(properties.getSchoolsUrl(), state);
    }

    @Override
    public boolean isAvailable() {
        // It would be more elegant to marshal the response to a status, i.e.:
        //   final UnitStatus status = restTemplate.getForObject(properties.getStatusUrl(), UnitStatus.class);
        //   return status.getStatusRating() > 0;
        // Problem is, the format of the dateTime in the payload is weird, "Tue May 23 23:26:12 UTC 2017"
        // and i don't want to spend time jacking in a custom deserializer. So, treat it as generic json ...
        try {
            final JsonNode root = new ObjectMapper().readTree(getPayload(properties.getStatusUrl()));
            final int rating = root.path("statusRating").asInt();
            return rating > 0;
        } catch (final IOException e) {
            return false;
        }
    }

    /**
     * Helper that substitutes the state placeholder in the configured URL,
     * then fetches the payload using the resulting URL.
     *
     * @param url URL with {state} placeholder
     * @param state state value, e.g. "CA"
     * @return payload from URL
     * @throws RestClientException if unexpected response
     */
    private byte[] getPayload(final String url, final String state) {
        return getPayload(url.replaceAll(StatePlaceholderRegex, state));
    }

    /**
     * Helper to get payload from URL as byte[], throwing exceptions if return code
     * or content type is not valid.
     *
     * @param url URL of payload end-point
     * @return payload
     * @throws RestClientException if unexpected response
     */
    private byte[] getPayload(final String url) {
        final ResponseEntity<byte[]> result = restTemplate.getForEntity(url, byte[].class);
        if (!result.getStatusCode().is2xxSuccessful()) {
            throw new RestClientException("Unexpected response status from ART:" + result.getStatusCode());
        }
        if (!result.getHeaders().getContentType().isCompatibleWith(MediaType.APPLICATION_JSON)) {
            throw new RestClientException("Unexpected response type from ART:" + result.getHeaders().getContentType());
        }
        return result.getBody();
    }
}
