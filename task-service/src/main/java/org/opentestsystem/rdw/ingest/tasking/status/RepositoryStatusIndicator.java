package org.opentestsystem.rdw.ingest.tasking.status;

import org.opentestsystem.rdw.ingest.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.ingest.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.ingest.common.status.Rating;
import org.opentestsystem.rdw.ingest.common.status.Status;
import org.opentestsystem.rdw.ingest.common.status.StatusIndicator;
import org.opentestsystem.rdw.ingest.tasking.repository.ReportRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * A {@link StatusIndicator} for repository status.
 * <p>
 * Verifies that the used repositories are available.
 * </p>
 */
@Component
public class RepositoryStatusIndicator extends AbstractStatusIndicator {
    private final ReportRepository reportRepository;

    @Autowired
    public RepositoryStatusIndicator(final ReportRepository reportRepository) {
        this.reportRepository = reportRepository;
    }

    @Override
    public String name() {
        return "repository";
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        final Status status = getStatus();
        builder.detail("repository-operations", status).rating(Rating.valueOf(status.getStatusText()));
    }

    private Status getStatus() {
        return reportRepository.isAvailable()
                ? status(true, "Successfully connected to configured report repository")
                : status(false, "Unable to connect to configured report repository");
    }

    private Status status(final boolean isOk, final String message) {
        return Status.builder()
                .detail(isOk ? "info" : "error", message)
                .rating(isOk ? Rating.Ideal : Rating.Failed)
                .build();
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ExternalDependencies.isLessThanOrEqualTo(level);
    }
}
