package org.opentestsystem.rdw.ingest.tasking.status;

import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.tasking.UpdateOrganizationsConfiguration;
import org.opentestsystem.rdw.ingest.tasking.repository.OrganizationDataRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ImportServiceClient;

import java.util.ArrayList;

import static com.google.common.collect.Lists.newArrayList;

/**
 * {@link StatusIndicator} that provides status on providers used by the update-organizations task:<ul>
 *     <li>OrganizationDataRepository</li>
 *     <li>ImportServiceClient</li>
 * </ul>
 * This is instantiated explicitly by {@link UpdateOrganizationsConfiguration} so it is not
 * annotated as an autowired component.
 */
public class UpdateOrganizationsStatusIndicator extends AbstractStatusIndicator {

    private final OrganizationDataRepository organizationRepository;
    private final ImportServiceClient importServiceClient;

    public UpdateOrganizationsStatusIndicator(final OrganizationDataRepository organizationRepository,
                                              final ImportServiceClient importServiceClient) {
        this.organizationRepository = organizationRepository;
        this.importServiceClient = importServiceClient;
    }

    @Override
    public String name() {
        return "update-organizations-task";
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ExternalDependencies.isLessThanOrEqualTo(level);
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        final ArrayList<UnitStatus> unitStatuses = newArrayList(
                getOrganizationRepositoryStatus(),
                getImportServiceStatus());
        builder.detail("providers", unitStatuses);
        builder.worstRating(unitStatuses);
    }

    private UnitStatus getOrganizationRepositoryStatus() {
        final UnitStatus.Builder builder = UnitStatus.builder().unit("organization-repository");
        try {
            builder.rating(organizationRepository.isAvailable() ? Rating.Ideal : Rating.Failed);
        } catch (final Exception e) {
            builder.rating(Rating.Failed).message(e.getMessage());
        }
        return builder.build();
    }

    private UnitStatus getImportServiceStatus() {
        final UnitStatus.Builder builder = UnitStatus.builder().unit("import-service");
        try {
            builder.rating(importServiceClient.getDiagnosticRating());
        } catch (final Exception e) {
            builder.rating(Rating.Failed).message(e.getMessage());
        }
        return builder.build();
    }
}
