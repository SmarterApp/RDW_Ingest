package org.opentestsystem.rdw.ingest.tasking.status;

import java.util.ArrayList;
import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.tasking.UpdateOrganizationsConfiguration;
import org.opentestsystem.rdw.ingest.tasking.repository.OrganizationDataRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ImportServiceClient;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.task.ImportServiceClientPropertiesResolver;

import static com.google.common.collect.Lists.newArrayList;

/**
 * {@link StatusIndicator} that provides status on providers used by the update-organizations task:<ul>
 *     <li>OrganizationDataRepository</li>
 *     <li>ImportServiceClient</li>
 * </ul>
 * This is instantiated explicitly by {@link UpdateOrganizationsConfiguration} so it is not
 * annotated as an autowired component.
 */
public class UpdateOrganizationsStatusIndicator extends AbstractStatusIndicator {

    private final TenantProperties tenantProperties;
    private final ImportServiceClientPropertiesResolver propertiesResolver;
    private final OrganizationDataRepository organizationRepository;
    private final ImportServiceClient importServiceClient;

    /**
     * @param tenantProperties tenant properties to get full list of tenants
     * @param propertiesResolver used to find tenants for which this task is enabled
     * @param organizationRepository organization repo
     * @param importServiceClient import service client
     */
    public UpdateOrganizationsStatusIndicator(final TenantProperties tenantProperties,
                                              final ImportServiceClientPropertiesResolver propertiesResolver,
                                              final OrganizationDataRepository organizationRepository,
                                              final ImportServiceClient importServiceClient) {
        this.tenantProperties = tenantProperties;
        this.propertiesResolver = propertiesResolver;
        this.organizationRepository = organizationRepository;
        this.importServiceClient = importServiceClient;
    }

    @Override
    public String name() {
        return "update-organizations-task";
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ExternalDependencies.isLessThanOrEqualTo(level);
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        // status check for all tenants that are configured for this task
        for (final Tenant tenant : tenantProperties.getTenants().values()) {
            if (tenant.isSandbox()
             || !propertiesResolver.getPropertiesRoot().getTenants().containsKey(tenant.getKey())) {
                continue;
            }
            TenantContextHolder.setTenantId(tenant.getId());
            try {
                final ArrayList<UnitStatus> unitStatuses = newArrayList(
                        getOrganizationRepositoryStatus(),
                        getImportServiceStatus());
                builder.detail("providers for tenant " + tenant.getId(), unitStatuses);
                builder.worstRating(unitStatuses);
            } catch (final Exception e) {
                // we don't want one tenant to interfere with the others so we have to catch this
                // but we should probably mark the builder status as failed overall
                builder.rating(Rating.Failed);
                builder.detail("error", e.getMessage());
            } finally {
                TenantContextHolder.clear();
            }
        }
    }

    private UnitStatus getOrganizationRepositoryStatus() {
        final UnitStatus.Builder builder = UnitStatus.builder().unit("organization-repository");
        try {
            builder.rating(organizationRepository.isAvailable() ? Rating.Ideal : Rating.Failed);
        } catch (final Exception e) {
            builder.rating(Rating.Failed).message(e.getMessage());
        }
        return builder.build();
    }

    private UnitStatus getImportServiceStatus() {
        final UnitStatus.Builder builder = UnitStatus.builder().unit("import-service");
        try {
            builder.rating(importServiceClient.getDiagnosticRating());
        } catch (final Exception e) {
            builder.rating(Rating.Failed).message(e.getMessage());
        }
        return builder.build();
    }
}
