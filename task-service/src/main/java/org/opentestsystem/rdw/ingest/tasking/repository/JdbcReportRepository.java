package org.opentestsystem.rdw.ingest.tasking.repository;

import org.opentestsystem.rdw.ingest.common.model.RdwImportQuery;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.supercsv.io.AbstractCsvWriter;
import org.supercsv.io.CsvResultSetWriter;
import org.supercsv.prefs.CsvPreference;

import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A JDBC {@link ReportRepository}
 */
@Repository
class JdbcReportRepository implements ReportRepository {
    private static final Logger logger = LoggerFactory.getLogger(JdbcReportRepository.class);

    private final NamedParameterJdbcTemplate jdbcTemplate;

    @Value("${sql.import.exams}")
    private String sqlImportExams;

    @Value("${sql.import.status}")
    private String sqlImportStatus;

    @Value("${sql.import.exists}")
    private String sqlImportExists;

    @Autowired
    public JdbcReportRepository(final NamedParameterJdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public void writeReconciliationReport(final RdwImportQuery query, final OutputStream os) {
        try (final ReconciliationCsvWriter writer = new ReconciliationCsvWriter(new OutputStreamWriter(os), CsvPreference.EXCEL_PREFERENCE)) {
            writer.writeHeader(ReconciliationCsvWriter.Headers);
            final MapSqlParameterSource parameterSource = mapQueryToSqlParameterSource(query);
            try {
                jdbcTemplate.query(sqlImportExams, parameterSource, writer);
            } catch (final EmptyResultDataAccessException ignored) {
            }
        } catch (final IOException e) {
            logger.warn("Error creating reconciliation report {}", e.getMessage());
            throw new RuntimeException(e);
        }
    }

    @Override
    public boolean exists(final RdwImportQuery query) {
        return jdbcTemplate.queryForObject(sqlImportExists, mapQueryToSqlParameterSource(query), Boolean.class);
    }

    @Override
    public boolean isAvailable() {
        try {
            jdbcTemplate.query(sqlImportStatus, (ResultSetExtractor<Void>) rs -> null);
        } catch (final EmptyResultDataAccessException ignored) {
        } catch (final Exception e) {
            return false;
        }
        return true;
    }

    private MapSqlParameterSource mapQueryToSqlParameterSource(final RdwImportQuery query) {
        return new MapSqlParameterSource()
                .addValue("batch", query.getBatch())
                .addValue("creator", query.getCreator())
                .addValue("before", query.getBefore() == null ? null : Timestamp.from(query.getBefore()))
                .addValue("after", query.getAfter() == null ? null : Timestamp.from(query.getAfter()));
    }

    /**
     * Helper that writes query result rows to reconciliation report CSV.
     * Note that {@link CsvResultSetWriter} doesn't work for us because it processes the entire
     * result set at once and it sticks in headers every time.
     */
    private static class ReconciliationCsvWriter extends AbstractCsvWriter implements RowCallbackHandler {
        static final String[] Headers = new String[]{
            "student_id", "asmt_guid", "school_year", "opp_id", "batch", "import_id", "status", "result", "message" };

        ReconciliationCsvWriter(final Writer writer, final CsvPreference preference) {
            super(writer, preference);
        }

        @Override
        public void processRow(final ResultSet rs) throws SQLException {
            try {
                super.incrementRowAndLineNo();
                super.writeRow(newArrayList(
                        rs.getString("ssid"),
                        rs.getString("natural_id"),
                        rs.getInt("school_year"),
                        rs.getString("oppId"),
                        rs.getString("batch"),
                        rs.getLong("id"),
                        rs.getInt("status"),
                        formatResult(rs.getString("result")),
                        removeControlChars(rs.getString("message"))
                ));
            } catch (final IOException e) {
                logger.warn("Error writing results {} to reconciliation report {}", rs, e.getMessage());
            }
        }

        private static String removeControlChars(String message) {
            if (message == null) {
                return null;
            }
            return message.replaceAll("\\p{Cc}", " ");
        }

        private String formatResult(String result) {
            switch (result) {
                case "NEW":
                    return "New exam imported";
                case "UPDATE":
                    return "Existing exam updated";
                case "NO_UPDATE":
                    return "Existing exam NOT updated";
                case "REPLACED":
                    return "Superseded by another update";
                default:
                    return "Error: " + result;
            }
        }
    }
}
