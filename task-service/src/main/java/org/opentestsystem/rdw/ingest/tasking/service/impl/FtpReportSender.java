package org.opentestsystem.rdw.ingest.tasking.service.impl;

import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.opentestsystem.rdw.ingest.tasking.service.ReportSender;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.InputStream;

/**
 * A ReportSender that uses FtpClient
 */
public class FtpReportSender implements ReportSender {
    private static final Logger logger = LoggerFactory.getLogger(FtpReportSender.class);

    private final FTPClient ftpClient;
    private final String server;
    private final String username;
    private final String password;

    public FtpReportSender(final String server,
                           final String username,
                           final String password) {
        this.server = server;
        this.username = username;
        this.password = password;

        ftpClient = new FTPClient();
    }

    @Override
    public void sendReport(final InputStream is, final String filename) {
        try {
            ftpClient.connect(server);
            if (!ftpClient.login(username, password)) {
                throw new IOException("login to " + server + " failed for username " + username);
            }
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
            ftpClient.storeFile(filename, is);
            ftpClient.logout();
        } catch (final IOException e) {
            logger.warn("Error sending report", e);
        }
    }

    @Override
    public boolean isAvailable() {
        try {
            ftpClient.connect(server);
            if (!ftpClient.login(username, password)) {
                throw new IOException("login to " + server + " failed for username " + username);
            }
            ftpClient.logout();
            return true;
        } catch (final IOException e) {
            logger.warn("Error checking connection", e);
            return false;
        }
    }
}
