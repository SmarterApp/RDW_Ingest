package org.opentestsystem.rdw.ingest.tasking.status;

import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.tasking.repository.ReportRepository;
import org.opentestsystem.rdw.ingest.tasking.service.impl.LoggingJavaMailSender;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.stereotype.Component;

import javax.mail.MessagingException;
import java.util.ArrayList;

import static com.google.common.collect.Lists.newArrayList;

/**
 * {@link StatusIndicator} that provides status on providers used by the reconciliation-report task:<ul>
 *     <li>MailSender</li>
 *     <li>ReportRepository</li>
 * </ul>
 */
@Component
public class ReconciliationReportStatusIndicator extends AbstractStatusIndicator {

    private final JavaMailSender javaMailSender;
    private final ReportRepository reportRepository;

    @Autowired
    public ReconciliationReportStatusIndicator(final JavaMailSender javaMailSender,
                                               final ReportRepository reportRepository) {
        this.javaMailSender = javaMailSender;
        this.reportRepository = reportRepository;
    }

    @Override
    public String name() {
        return "reconciliation-report-task";
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ExternalDependencies.isLessThanOrEqualTo(level);
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        final ArrayList<UnitStatus> unitStatuses = newArrayList(
                getMailSenderStatus(),
                getReportRepositoryStatus());
        builder.detail("providers", unitStatuses);
        builder.worstRating(unitStatuses);
    }

    private UnitStatus getMailSenderStatus() {
        final UnitStatus.Builder builder = UnitStatus.builder().unit("mail-sender");

        if (javaMailSender instanceof JavaMailSenderImpl) {
            try {
                ((JavaMailSenderImpl) javaMailSender).testConnection();
                builder.rating(Rating.Ideal);
            } catch (final MessagingException e) {
                builder.rating(Rating.Failed)
                        .message("Failed to connect to the configured SMTP host: " + e.getMessage());
            }

        } else if (javaMailSender instanceof LoggingJavaMailSender) {
            builder.rating(Rating.Warning)
                    .message("The mail sender has been configured to write to the logs. This is only OK in Development.");
        } else {
            builder.rating(Rating.Failed)
                    .message("Failed to load the Spring implementation of JavaMailSender");
        }

        return builder.build();
    }

    private UnitStatus getReportRepositoryStatus() {
        final UnitStatus.Builder builder = UnitStatus.builder().unit("report-repository");
        try {
            builder.rating(reportRepository.isAvailable() ? Rating.Ideal : Rating.Failed);
        } catch (final Exception e) {
            builder.rating(Rating.Failed).message(e.getMessage());
        }
        return builder.build();
    }
}
