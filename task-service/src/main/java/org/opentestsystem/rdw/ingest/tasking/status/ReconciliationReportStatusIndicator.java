package org.opentestsystem.rdw.ingest.tasking.status;

import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.tasking.repository.ReportRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ReportSender;

import java.util.ArrayList;

import static com.google.common.collect.Lists.newArrayList;

/**
 * {@link StatusIndicator} that provides status on providers used by the reconciliation-report task:<ul>
 *     <li>MailSender</li>
 *     <li>ReportRepository</li>
 * </ul>
 */
public class ReconciliationReportStatusIndicator extends AbstractStatusIndicator {

    private final ReportRepository reportRepository;
    private final ReportSender reportSender;

    public ReconciliationReportStatusIndicator(final ReportRepository reportRepository,
                                               final ReportSender reportSender) {
        this.reportRepository = reportRepository;
        this.reportSender = reportSender;
    }

    @Override
    public String name() {
        return "reconciliation-report-task";
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ExternalDependencies.isLessThanOrEqualTo(level);
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        final ArrayList<UnitStatus> unitStatuses = newArrayList(
                getMailSenderStatus(),
                getReportRepositoryStatus());
        builder.detail("providers", unitStatuses);
        builder.worstRating(unitStatuses);
    }

    private UnitStatus getMailSenderStatus() {
        return UnitStatus.builder().unit("report-sender")
                .rating(reportSender.isAvailable() ? Rating.Ideal : Rating.Failed)
                .build();
    }

    private UnitStatus getReportRepositoryStatus() {
        return UnitStatus.builder().unit("report-repository")
                .rating(reportRepository.isAvailable() ? Rating.Ideal : Rating.Failed)
                .build();
    }
}
