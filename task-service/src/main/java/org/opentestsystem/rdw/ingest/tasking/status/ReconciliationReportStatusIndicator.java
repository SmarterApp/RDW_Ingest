package org.opentestsystem.rdw.ingest.tasking.status;

import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Rating;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.common.status.StatusIndicator;
import org.opentestsystem.rdw.common.status.UnitStatus;
import org.opentestsystem.rdw.ingest.tasking.ReconciliationReportTask;
import org.opentestsystem.rdw.ingest.tasking.repository.ReportRepository;
import org.opentestsystem.rdw.ingest.tasking.service.ReportSender;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.multitenant.task.SendReconciliationReportPropertiesResolver;
import org.opentestsystem.rdw.multitenant.task.SendReconciliationReportPropertiesRoot;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * {@link StatusIndicator} that provides status on providers used by the reconciliation-report task:<ul>
 * <li>ReportSender</li>
 * <li>ReportRepository</li>
 * </ul>
 */
public class ReconciliationReportStatusIndicator extends AbstractStatusIndicator {

    private final TenantProperties tenantProperties;
    private final SendReconciliationReportPropertiesResolver reconciliationReportPropertiesResolver;
    private final ReportRepository reportRepository;

    public ReconciliationReportStatusIndicator(final TenantProperties tenantProperties,
                                               final SendReconciliationReportPropertiesResolver reconciliationReportPropertiesResolver,
                                               final ReportRepository reportRepository) {
        this.tenantProperties = tenantProperties;
        this.reconciliationReportPropertiesResolver = reconciliationReportPropertiesResolver;
        this.reportRepository = reportRepository;
    }

    @Override
    public String name() {
        return "reconciliation-report-task" ;
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ExternalDependencies.isLessThanOrEqualTo(level);
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        // status check for all tenants that are configured for this task
        for (final Tenant tenant : tenantProperties.getTenants().values()) {
            final SendReconciliationReportPropertiesRoot propertiesRoot =
                    reconciliationReportPropertiesResolver.getPropertiesRoot();
            if (tenant.isSandbox() || !propertiesRoot.getTenants().containsKey(tenant.getKey())) {
                continue;
            }
            try {
                final List<UnitStatus> unitStatuses = newArrayList();
                unitStatuses.add(getReportRepositoryStatus());
                for (final ReportSender reportSender : ReconciliationReportTask.propertiesToReportSenders(reconciliationReportPropertiesResolver, tenant)) {
                    unitStatuses.add(getReportSenderStatus(reportSender));
                }
                builder.detail("providers for tenant " + tenant.getId(), unitStatuses);
                builder.worstRating(unitStatuses);
            } catch (final Exception e) {
                // we don't want one tenant to interfere with the others so we have to catch this
                // but we should probably mark the builder status as failed overall
                builder.rating(Rating.Failed);
                builder.detail("error", e.getMessage());
            }
        }
    }

    private UnitStatus getReportSenderStatus(final ReportSender reportSender) {
        return UnitStatus.builder().unit("report-sender " + reportSender.toString())
                .rating(reportSender.isAvailable() ? Rating.Ideal : Rating.Failed)
                .build();
    }

    private UnitStatus getReportRepositoryStatus() {
        return UnitStatus.builder().unit("report-repository")
                .rating(reportRepository.isAvailable() ? Rating.Ideal : Rating.Failed)
                .build();
    }
}
