package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.junit.Test;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.upsertSubjectsStepName;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class UpsertSubjectsStepRST extends MigrateStepRST {

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            // the same script for staging is done twice intentionally to load duplicate data
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource"))
    })
    @Test
    public void itShouldUpdateAndInsert() {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject", 0, "id IN (-2, -3)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject", 1, "id = -1"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", 0, "subject_id in (-2)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", 1, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", -1, "subject_id = -3 and asmt_type_id = 3"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", 1, "subject_id = -3 and asmt_type_id = 1"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", -1, "subject_id = -3 and asmt_type_id = 2 and performance_level_count = 3"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", 1, "subject_id = -3 and asmt_type_id = 2 and performance_level_count = 8"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_score", 0, "subject_id in(-2)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_score", -1, "subject_id = -3 and id in (-60)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_score", 0, "subject_id = -3 and id in (-15)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_score", 1, "subject_id = -3 and id in (-16)"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "target", 4, "id in (-1, -2, -3, -4, -68, -69)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "target", 1, "id in (-67)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "target", -1, "id in (-60)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "target", 0, "id in (-5, -6, -7, -8 -9)"));

        // run the step first time
        JobExecution jobExecution = launchStep(upsertSubjectsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        jobExecution = launchStep(upsertSubjectsStepName);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
