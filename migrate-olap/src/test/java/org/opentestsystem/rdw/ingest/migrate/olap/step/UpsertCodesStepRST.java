package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.junit.Test;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.codes;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.upsertCodesStepName;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class UpsertCodesStepRST extends MigrateStepRST {

    @SqlGroup({
            // insert codes into the staging tables
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingCodesSetup.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDataSource"))
    })
    @Test
    public void itShouldDoNothingIfBatchDoesNotHaveCodeImportContent() {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codes) {
            switch(table) {
                case "school_year":
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 0, "year IN (1999, 1998)"));
                    break;
                case "grade":
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 0, "id IN (108, 109)"));
                    break;
                default:
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 0, "id IN (-98, -99)"));
                    break;
            }
        }
        getStepExecutionContext().put(ExecutionParams.migrate, Migrate.builder().migrateCodes(false).build());

        launchStep(upsertCodesStepName);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            // insert codes into the staging tables
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingCodesSetup.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDataSource"))
    })
    @Test
    public void itShouldInsert() {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codes) {
            switch(table) {
                case "school_year":
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 2, "year IN (1999, 1998)"));
                    break;
                case "grade":
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "grade", 2, "id IN (108, 109)"));
                    break;
                default:
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 2, "id IN (-98, -99)"));
                    break;
            }
        }
        getStepExecutionContext().put(ExecutionParams.migrate, Migrate.builder().migrateCodes(true).build());

        // run the step first time
        launchStep(upsertCodesStepName);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        launchStep(upsertCodesStepName);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingCodesSetup.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapCodesPreload.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDataSource"))
    })
    @Test
    public void itShouldUpdateAndInsert() {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codes) {
            switch(table) {
                case "school_year":
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 1, "year IN (1999, 1998)"));
                    break;
                case "target":
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 1, "id IN (-98, -99)"));
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, -1, "natural_id = 'before' AND id = -11"));
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 1, "natural_id = 'NBT|E-3' AND id = -11"));
                    break;
                case "grade":
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 1, "id IN (108, 109)"));
                    break;
                default:
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 1, "id IN (-98, -99)"));
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, -1, "code LIKE 'bef%'"));
                    break;
            }
        }

        getStepExecutionContext().put(ExecutionParams.migrate, Migrate.builder().migrateCodes(true).build());

        // run the step first time
        launchStep(upsertCodesStepName);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        launchStep(upsertCodesStepName);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            //loads all code tables with one row each with id = -98
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingCodesForDeleteSetup.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            //loads all code tables with one row each with id = -99
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapCodesPreload.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDataSource"))
    })
    @Test
    public void itShouldInsertButNotDeleteCodes() {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codes) {
            switch(table) {
                case "school_year":
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 1, "year IN (1999, 1998)"));
                    break;
                case "grade":
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 1, "id IN (108, 109)"));
                    break;
                default:
                    // it should add a new row and do not delete the existing one
                    tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 1, "id IN (-98, -99)"));
                    break;
            }
        }

        getStepExecutionContext().put(ExecutionParams.migrate, Migrate.builder().migrateCodes(true).build());

        // run the step first time
        launchStep(upsertCodesStepName);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        launchStep(upsertCodesStepName);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
