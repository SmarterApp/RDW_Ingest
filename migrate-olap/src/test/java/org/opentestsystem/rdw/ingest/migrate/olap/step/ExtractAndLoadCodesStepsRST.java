package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.junit.Test;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.MigrateStatus;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.codes;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.extractCodesStep;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.loadCodesToStagingStep;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SqlGroup({
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),

        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDataSource"))
})
public class ExtractAndLoadCodesStepsRST extends ExtractStepRST {

    @Test
    public void itShouldNotCopyCodesIfBatchDoesNotHaveCodeImportContent() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codes) {
            if ("school_year".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_school_year", 0, "year IN (1999, 1998)"));
            } else if ("grade".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_grade", 0, "id IN (108, 109)"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_" + table, 0, "id IN (-98, -99)"));
            }
        }
        getStepExecutionContext().put(ExecutionParams.migrate, mock(Migrate.class));

        launchStep(extractCodesStep);
        for (final String table : codes) {
            assertThat(archiveService.exists(location + "/" + table + ".part_00000")).isFalse();
        }

        launchStep(loadCodesToStagingStep);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldCopyCodesRegardlessOfFirstAndLastAt() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codes) {
            if ("school_year".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_school_year", 2, "year IN (1999, 1998)"));
            } else if ("grade".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_grade", 2, "id IN (108, 109)"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_" + table, 2, "id IN (-98, -99)"));
            }
        }

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder()
                        .id(1L)
                        .jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(Instant.MIN)
                        .lastAt(Instant.MIN)
                        .migrateCodes(true)
                        .build());

        launchStep(extractCodesStep);
        for (final String table : codes) {
            if ("school_year".equals(table)) {
                assertThat(archiveService.exists(location + "/year" + ".part_00000")).isTrue();
            } else {
                assertThat(archiveService.exists(location + "/" + table + ".part_00000")).isTrue();
            }
        }

        launchStep(loadCodesToStagingStep);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldFailWithNoMigrateBatch() {
        final JobExecution jobExecution = launchStep(extractCodesStep, ExitStatus.FAILED);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
        assertThat(jobExecution.getExitStatus().getExitDescription()).contains("Exception");
        // Getting the next step returns failed status.
        assertThat(jobExecution.getStepExecutions().iterator().next().getStatus()).isEqualTo(BatchStatus.FAILED);
    }
}
