package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.ingest.migrate.olap.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.MigrateStatus;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.io.File;
import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.codes;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.extractCodesStep;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.loadCodesToStagingStep;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SqlGroup({
        @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),

        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
        @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource"))
})
public class ExtractAndLoadCodesStepsIT extends SpringBatchStepIT {

    @Autowired
    private ArchiveService archiveService;

    @Value("${migrate.aws.location}")
    private String location;

    @Autowired
    private NamedParameterJdbcTemplate reportingJdbcTemplate;

    private String testFileName;

    @Before
    public void setUp() {
        testFileName = location + File.separator + "test";
        cleanUp();

        //these steps assume that the extract location is created by previous steps and is clean
        if (!archiveService.exists(location)) archiveService.writeResource(testFileName, "olap-migrate".getBytes(), null);
    }

    @After
    public void cleanUp() {
        for (final String table : codes) {
            if (archiveService.exists(location + "/" + table + ".part_00000")) archiveService.delete(location);
        }
        if (archiveService.exists(testFileName)) archiveService.delete(testFileName);
    }

    @Test
    public void itShouldNotCopyCodesIfBatchDoesNotHaveCodeImportContent() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codes) {
            tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate.getJdbcOperations(), "staging_" + table, 0, "id IN (-98, -99)"));
        }
        getStepExecutionContext().put(ExecutionParams.migrate, mock(Migrate.class));

        JobExecution jobExecution = launchStep(extractCodesStep);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);

        assertThat(archiveService.exists(location)).isFalse();

        jobExecution = launchStep(loadCodesToStagingStep);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldCopyCodesRegardlessOfFirstAndLastAt() {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codes) {
            tableTestCounts.add(new TableTestCountHelper(reportingJdbcTemplate.getJdbcOperations(), "staging_" + table, 2, "id IN (-98, -99)"));
        }
        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder()
                        .id(1L)
                        .jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(Instant.MIN)
                        .lastAt(Instant.MIN)
                        .migrateCodes(true)
                        .build());

        JobExecution jobExecution = launchStep(extractCodesStep);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);

        for (final String table : codes) {
            assertThat(archiveService.exists(location + "/" + table + ".part_00000")).isTrue();
        }

        jobExecution = launchStep(loadCodesToStagingStep);
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);

        verifyTableCountsAfterTest(tableTestCounts);
    }

    @Test
    public void itShouldFailWithNoMigrateBatch() {
        final JobExecution jobExecution = launchStep(extractCodesStep);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
        assertThat(jobExecution.getExitStatus().getExitDescription()).contains("Exception");
        // Getting the next step returns failed status.
        assertThat(jobExecution.getStepExecutions().iterator().next().getStatus()).isEqualTo(BatchStatus.FAILED);
    }
}
