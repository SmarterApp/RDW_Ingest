package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.junit.Ignore;
import org.junit.Test;
import org.opentestsystem.rdw.ingest.migrate.olap.SpringBatchStepIT;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.codes;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.stepTruncateStageName;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.warehouseEntities;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;


@Ignore
public class TruncateStageStepIT extends SpringBatchStepIT {

    @Autowired
    private NamedParameterJdbcTemplate reportingJdbcTemplate;

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingCodesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:ReportingAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "reportingDatasource"))
    })
    @Test
    public void itShouldDeleteData() {
        for (final String table : codes) {
            assertThat(reportingJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_" + table, Integer.class)).isGreaterThan(0);
        }
        for (final String table : warehouseEntities) {
            assertThat(reportingJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_" + table, Integer.class)).isGreaterThan(0);
        }
        getStepExecutionContext().put(ExecutionParams.migrate, mock(Migrate.class));

        // run the step first time
        JobExecution jobExecution = launchStep(stepTruncateStageName + "Before");
        assertThat(jobExecution.getExitStatus()).isEqualTo(ExitStatus.COMPLETED);

        for (final String table : codes) {
            assertThat(reportingJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_" + table, Integer.class)).isZero();
        }
        for (final String table : warehouseEntities) {
            assertThat(reportingJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_" + table, Integer.class)).isZero();
        }
    }
}
