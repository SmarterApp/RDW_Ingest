package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.junit.Test;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.deleteEntitiesStepName;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class DeleteEntitiesStepRST extends MigrateStepRST {

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            // the same script for staging is done twice intentionally to load duplicate data
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),

            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesForDeleteSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource"))
    })
    @Test
    public void itShouldDeleteButNotInsertEntities() {

        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "school", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "school", 0, "id IN (-1)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "school", 0, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "district", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "district", 0, "id IN (-1)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "district", 0, "id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "asmt", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "asmt", 0, "id IN (-98)"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "student", -1, "id in (-89)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "student", 0, "id in (-88, -87, -86)"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "fact_student_exam", -1, "id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "fact_student_exam", 0, "id in (-87)"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "student_ethnicity", -1, "ethnicity_id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "student_ethnicity", 0, "ethnicity_id IN (-98)"));

        getStepExecutionContext().put("batch", mock(Migrate.class));

        // run the step first time
        launchStep(deleteEntitiesStepName);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        launchStep(deleteEntitiesStepName);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
