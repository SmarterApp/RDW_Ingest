package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.junit.Before;
import org.opentestsystem.rdw.ingest.migrate.olap.SpringBatchIT;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.test.MetaDataInstanceFactory;

import static org.assertj.core.api.Assertions.assertThat;

abstract class SpringBatchStepIT extends SpringBatchIT {

    private StepExecution stepExecution;

    @Before
    public void createStepExecution() {
        stepExecution = MetaDataInstanceFactory.createStepExecution();
    }

    /**
     * Launch the specified step and assert the exit status is COMPLETED
     *
     * @param stepName step name
     * @return the job execution
     * @see SpringBatchStepIT#launchStep(String, ExitStatus)
     */
    protected JobExecution launchStep(final String stepName) {
        return launchStep(stepName, ExitStatus.COMPLETED);
    }

    /**
     * Launch the specified step and assert the exit status.
     * Note that only the exit status code is checked, the description is ignored.
     *
     * @param stepName step name
     * @param expectedExitStatus expected exit status
     * @return the job execution
     */
    protected JobExecution launchStep(final String stepName, final ExitStatus expectedExitStatus) {
        final JobExecution jobExecution = getJobLauncherTestUtils().launchStep(stepName, getStepExecutionContext());
        assertThat(jobExecution.getExitStatus().getExitCode()).isEqualTo(expectedExitStatus.getExitCode());
        return jobExecution;
    }

    protected ExecutionContext getStepExecutionContext() {
        return stepExecution.getExecutionContext();
    }
}
