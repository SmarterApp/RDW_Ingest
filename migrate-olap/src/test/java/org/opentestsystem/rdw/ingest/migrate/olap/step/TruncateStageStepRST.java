package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.junit.Test;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.codes;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.stepTruncateStageName;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.warehouseEntities;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class TruncateStageStepRST extends MigrateStepRST {

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingCodesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, config = @SqlConfig(dataSource = "olapDatasource"), statements = {
                    "INSERT INTO staging_state_embargo (aggregate, migrate_id) VALUES (0, -10)",
                    "INSERT INTO staging_district_embargo (district_id, aggregate, migrate_id) VALUES (-99, 0, -99)"
            }),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource"))
    })
    @Test
    public void itShouldDeleteData() {
        for (final String table : codes) {
            assertThat(olapJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_" + table, Integer.class)).isGreaterThan(0);
        }
        for (final String table : warehouseEntities) {
            assertThat(olapJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_" + table, Integer.class)).isGreaterThan(0);
        }
        assertThat(olapJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_district_embargo", Integer.class)).isGreaterThan(0);
        assertThat(olapJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_state_embargo", Integer.class)).isGreaterThan(0);
        getStepExecutionContext().put(ExecutionParams.migrate, mock(Migrate.class));

        // run the step first time
        launchStep(stepTruncateStageName + "Before");

        for (final String table : codes) {
            assertThat(olapJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_" + table, Integer.class)).isZero();
        }
        for (final String table : warehouseEntities) {
            assertThat(olapJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_" + table, Integer.class)).isZero();
        }
        assertThat(olapJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_district_embargo", Integer.class)).isZero();
        assertThat(olapJdbcTemplate.getJdbcOperations().queryForObject("SELECT COUNT(0) FROM staging_state_embargo", Integer.class)).isZero();
    }
}
