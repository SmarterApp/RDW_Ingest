package org.opentestsystem.rdw.ingest.migrate.olap.step;


import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.beans.factory.annotation.Value;

import java.io.File;

import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class CleanupLandingLocationTest {

    @Value("${migrate.aws.location}")
    private String location;

    private ArchiveService archiveService;
    private CleanupLandingLocation cleanupLandingLocation;
    private ChunkContext chunkContext;

    @Before
    public void setUp() {
        chunkContext = mock(ChunkContext.class);
        final StepContext stepContext = mock(StepContext.class);
        final StepExecution stepExecution = mock(StepExecution.class);
        final JobExecution jobExecution = mock(JobExecution.class);
        final ExecutionContext executionContext = mock(ExecutionContext.class);
        when(chunkContext.getStepContext()).thenReturn(stepContext);
        when(stepContext.getStepExecution()).thenReturn(stepExecution);
        when(stepExecution.getJobExecution()).thenReturn(jobExecution);
        when(jobExecution.getExecutionContext()).thenReturn(executionContext);
        when(executionContext.get(ExecutionParams.migrate)).thenReturn(Migrate.builder().id(79L).jobId(97).build());

        archiveService = mock(ArchiveService.class);
        cleanupLandingLocation = new CleanupLandingLocation(archiveService);
    }

    @Test
    public void itShouldDeleteLocationAndWriteFileWithBatchId() throws Exception {

        cleanupLandingLocation.execute(mock(StepContribution.class), chunkContext);

        verify(archiveService).delete(location);
        verify(archiveService).writeResource(location + File.separator + 79, "olap-migrate".getBytes(), null);
    }

    @Test
    public void itShouldHandleExceptionWhenLocationDoesNotExist() throws Exception {
        doThrow(new IllegalArgumentException("test")).when(archiveService).delete(location);

        cleanupLandingLocation.execute(mock(StepContribution.class), chunkContext);

        verify(archiveService).delete(location);
        verify(archiveService).writeResource(location + File.separator + 79, "olap-migrate".getBytes(), null);
    }

    @Test(expected = RuntimeException.class)
    public void itShouldNotHandleAnyOtherS3Exceptions() throws Exception {
        doThrow(new RuntimeException("test")).when(archiveService).delete(location);

        cleanupLandingLocation.execute(mock(StepContribution.class), chunkContext);
    }
}