package org.opentestsystem.rdw.ingest.migrate.olap;

import com.google.common.collect.ImmutableMap;
import org.junit.After;
import org.junit.Test;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig;
import org.opentestsystem.rdw.migrate.common.MigrateJobParameters;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.List;
import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.batch.core.ExitStatus.COMPLETED;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

@SuppressWarnings({"SqlNoDataSourceInspection", "SqlResolve"})
@ActiveProfiles("redshift")
public class MigrateOlapReportingJobRST extends SpringBatchIT {

    @Autowired
    private ArchiveService archiveService;

    @Value("${migrate.aws.location}")
    private String location;

    @Autowired
    private NamedParameterJdbcTemplate olapJdbcTemplate;

    private final Instant firstAt = Instant.parse("2017-07-18T19:05:34.965Z");
    private final Instant lastAt = Instant.parse("2017-07-18T20:14:34.000Z");

    @After
    public void cleanUp() {
        try {
            archiveService.delete(location);
        } catch (final IllegalArgumentException ignore) {
            //location does not exists
        }
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesForDeleteSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapCodesPreload.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, statements = {"DELETE FROM migrate"}, config = @SqlConfig(dataSource = "migrateDatasource"))
    })
    @Test
    public void itShouldUpsertAndDeleteCodesIfBatchHasImportContentWithCodes() throws Exception {
        // collect counts of rows in each reporting code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : OlapReportingMigrateStepsConfig.codes) {
            if ("school_year".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, -1, "year IN (1999)"));
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 1, "year IN (1998)"));
            } else if ("grade".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "grade", -1, "id IN (109)"));
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "grade", 1, "id IN (108)"));

            } else {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, -1, "id IN (-99)"));
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 1, "id IN (-98)"));
            }
        }

        final JobExecution jobExecution = getJobLauncherTestUtils().launchJob(new MigrateJobParameters(firstAt, lastAt, true, false, 10));

        assertThat(jobExecution.getExitStatus()).isEqualTo(COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, statements = {"DELETE FROM migrate"}, config = @SqlConfig(dataSource = "migrateDatasource"))
    })
    @Test
    public void itShouldUpsertAndDeleteEntities() throws Exception {
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "school", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "school", 1, "id IN (-98) and migrate_id is not null"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "asmt", -1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "asmt", 2, "id IN (-98, -97) and migrate_id is not null"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "asmt_target", -2, "asmt_id = -99"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "asmt_target", 5, "asmt_id = -311"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "asmt_target", 1, "asmt_id = -311 and include_in_report = 0"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "student", -1, "id in (-89) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "student", 3, "id in (-88, -87, -86)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "student_ethnicity", 3, "student_id in (-89, -88, -87, -86)"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam", -1, "id in (-88) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam", 0, "id in (-84, -83, -58, -15, -17, -11, -10 )"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam", 1, "id in (-16, -12)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam", 2, "id in (-87, -85)"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam", 1, "id in (-85) and elas_id = -99"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam", 1, "id in (-87) and elas_id = 1"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_claim_score", -3, "exam_id in (-88) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_claim_score", 0, "exam_id in (-82)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_claim_score", 2, "exam_id in (-87, -85)"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_target_score", 8, "exam_id in (-311) and migrate_id is not null"));
        // for Math subject, only target's of claim 1 are migrated
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_target_score", 1, "exam_id = -209"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_target_score", -2, "exam_id in (-88)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_target_score", 0, "exam_id in (-82, -100)"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "iab_exam", -1, "id in (-68) and migrate_id is not null"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "iab_exam", 1, "id in (-88, -87, -85, -15, -16, -17, -12, -11, -10 )"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "iab_exam", 2, "id in (-83, -84)"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_longitudinal", -1, "id = -268 and scale_score = 2145"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_longitudinal",  1, "id = -268 and scale_score = 2135"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_longitudinal",  1, "id = -209"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_longitudinal",  0, "id = -199"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "exam_longitudinal",  -1, "id = -200"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject", 0, "id IN (-2, -3)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject", 1, "id = -1"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", 0, "subject_id in (-2)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", 1, "subject_id = -1"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", -1, "subject_id = -3 and asmt_type_id = 3"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", 1, "subject_id = -3 and asmt_type_id = 1"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", -1, "subject_id = -3 and asmt_type_id = 2 and performance_level_count = 3"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_asmt_type", 1, "subject_id = -3 and asmt_type_id = 2 and performance_level_count = 8"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_score", 0, "subject_id in(-2)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_score", -1, "subject_id = -3 and id in (-60)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_score", 0, "subject_id = -3 and id in (-15)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "subject_score", 1, "subject_id = -3 and id in (-16)"));

        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "target", 3, "id in ( -2, -3, -4, -68, -69)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "target", 1, "id in (-67)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "target", -1, "id in (-60)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "target", 0, "id in (-1, -5, -6, -7, -8 -9)"));

        // date range matches ImportContentSetup.sql
        final JobExecution jobExecution = getJobLauncherTestUtils().launchJob(new MigrateJobParameters(firstAt, lastAt, false, true, 10));

        assertThat(jobExecution.getExitStatus()).isEqualTo(COMPLETED);
        verifyTableCountsAfterTest(tableTestCounts);

        verifyExamFactMigration();
    }

    /**
     * Verify an exemplar Exam was properly, fully migrated.
     * See WarehouseEntitiesSetup.sql for expected values
     */
    private void verifyExamFactMigration() {
        final Map<String, Object> icaFacts = olapJdbcTemplate.queryForMap(
                "SELECT * FROM exam WHERE id = :id",
                ImmutableMap.of("id", -87));

        assertThat(icaFacts.get("school_id")).isEqualTo(-1);
        assertThat(icaFacts.get("student_id")).isEqualTo(-11L);
        assertThat(icaFacts.get("asmt_id")).isEqualTo(-11);
        assertThat(icaFacts.get("grade_id")).isEqualTo(108);
        assertThat(icaFacts.get("school_year")).isEqualTo(1998);
        assertThat(icaFacts.get("iep")).isEqualTo(1);
        assertThat(icaFacts.get("lep")).isEqualTo(1);
        assertThat(icaFacts.get("section504")).isEqualTo(0);
        assertThat(icaFacts.get("economic_disadvantage")).isEqualTo(0);
        assertThat(icaFacts.get("migrant_status")).isEqualTo(1);
        assertThat(icaFacts.get("elas_id")).isEqualTo(1);
        assertThat(icaFacts.get("completeness_id")).isEqualTo(1);
        assertThat(icaFacts.get("administration_condition_id")).isEqualTo(1);
        assertThat(icaFacts.get("language_id")).isEqualTo(0);
        assertThat(icaFacts.get("military_connected_id")).isEqualTo(1);
        assertThat(icaFacts.get("scale_score")).isEqualTo(2106.0);
        assertThat(icaFacts.get("performance_level")).isEqualTo(1);
        assertThat(((Timestamp) icaFacts.get("completed_at")).toInstant()).isEqualTo(Instant.parse("2016-08-14T19:06:07.966Z"));
        assertThat((long) icaFacts.get("migrate_id")).isGreaterThan(0);
        assertThat(icaFacts.get("update_import_id")).isEqualTo(-88L);
        assertThat(((Timestamp) icaFacts.get("updated")).toInstant()).isEqualTo(Instant.parse("2017-07-18T19:06:07.966Z"));
    }
}
