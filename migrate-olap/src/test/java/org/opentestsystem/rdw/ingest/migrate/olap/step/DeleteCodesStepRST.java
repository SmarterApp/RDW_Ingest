package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.junit.Test;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.mockito.Mockito.mock;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.codes;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.deleteCodesStepName;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class DeleteCodesStepRST extends MigrateStepRST {

    @SqlGroup({
            //loads all code tables in `staging`; one row in each table with id = -98
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:StagingCodesForDeleteSetup.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            //loads all code tables in `reporting`;one row in each table with id = -99
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapCodesPreload.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDataSource"))
    })
    @Test
    public void itShouldDeleteButNotUpsertCodes() {
        // collect counts of rows in each `reporting` code table before the step
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codes) {
            if ("school_year".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "school_year", 0, "year IN (1998)"));
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "school_year", -1, "year IN (1999)"));
            } else if ("grade".equals(table)) {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "grade", 0, "id IN (108)"));
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "grade", -1, "id IN (109)"));
            } else {
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 0, "id IN (-98)"));
                tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, -1, "id IN (-99)"));
            }
        }

        getStepExecutionContext().put(ExecutionParams.migrate, Migrate.builder().migrateCodes(true).build());

        // run the step first time
        launchStep(deleteCodesStepName);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        launchStep(deleteCodesStepName);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            //loads all code tables with one row each with id = -99
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapCodesPreload.sql"}, config = @SqlConfig(dataSource = "olapDataSource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDataSource"))
    })
    @Test
    public void itShouldDoNothingIfBatchDoesNotHaveImportContentWithCodes() {
        // collect counts of rows in each `reporting` code table before the step
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        for (final String table : codes) {
            tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), table, 0, "1=1"));
        }
        getStepExecutionContext().put(ExecutionParams.migrate, mock(Migrate.class));

        // run the step first time
        launchStep(deleteCodesStepName);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
