package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.MigrateStatus;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.io.File;
import java.time.Instant;
import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.extractEntitiesStep;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.loadEntitiesToStagingStep;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.warehouseEntities;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;

public class ExtractAndLoadEntitiesStepRST extends MigrateStepRST {
    private final Instant firstAt = Instant.parse("2017-07-18T19:05:34.965Z");
    private final Instant lastAt = Instant.parse("2017-07-18T20:14:34.000Z");

    @Autowired
    private ArchiveService archiveService;

    @Value("${migrate.aws.location}")
    private String location;

    private String testFileName;

    @Before
    public void setUp() {
        testFileName = location + File.separator + "test";
        cleanUp();

        //these steps assume that the extract location is created by previous steps and is clean
        if (!archiveService.exists(location)) archiveService.writeResource(testFileName, "olap-migrate".getBytes(), null);
    }

    @After
    public void cleanUp() {
        for (final String table : warehouseEntities) {
            if (archiveService.exists(location + "/" + table + ".part_00000")) archiveService.delete(location);
        }
        if (archiveService.exists(testFileName)) archiveService.delete(testFileName);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldCopy() throws Exception {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        // exam with id -88 is deleted
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_exam", 3, "id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_exam_claim_score", 2, "exam_id in (-87, -85)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_exam_claim_score", 0, "exam_id in (-88, -86)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_student", 3, "id in (-89, -88, -87, -33, -11)"));
        //note:this shows that duplicate values are copied
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_student", 2, "id in (-86)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_student_ethnicity", 2, "student_id in (-89, -88, -87, -33, -11)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_student_ethnicity", 4, "student_id in (-86)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_school", 1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_district", 0, "id IN (-99)"));
        // Not deleted school is copied along with district.
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_school", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_district", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_asmt", 2, "id IN (-99, -98, -11)"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(firstAt)
                        .lastAt(lastAt)
                        .migrateCodes(false)
                        .build());

        launchStep(extractEntitiesStep);

        for (final String table : warehouseEntities) {
            assertThat(archiveService.exists(location + "/" + table + ".part_00000")).isTrue();
        }

        launchStep(loadEntitiesToStagingStep);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldNotCopyIfNoImports() throws Exception {
        // Collect counts of rows in each staging table before the step call and the expected change.
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_exam", 0, "id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_exam_claim_score", 0, "exam_id in (-88, -87, -86, -85)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_student", 0, "id in (-89, -88, -87, -86, -33, -11)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_student_ethnicity", 0, "student_id in (-89, -88, -87, -86, -33, -11)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_school", 0, "id IN (-99, -98)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_district", 0, "id IN (-99, -98)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_asmt", 0, "id IN (-99, -98, -11)"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(Instant.parse("2017-07-18T20:16:34.966Z"))
                        .lastAt(Instant.parse("2017-07-18T20:16:34.966Z"))
                        .migrateCodes(false)
                        .build());

        launchStep(extractEntitiesStep);

        //note that empty files are still generated
        for (final String table : warehouseEntities) {
            assertThat(archiveService.exists(location + "/" + table + ".part_00000")).isTrue();
        }

        launchStep(loadEntitiesToStagingStep);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, statements = {"INSERT INTO school (id, district_id, name, natural_id, deleted, import_id, update_import_id, created, updated) " +
                    "VALUES (-97, -99, 'Sample School -97', 'natural_id-97', 0, -2, -2, '2017-07-18 20:13:34.000000', '2017-07-18 20:13:34.000000')"}, config = @SqlConfig(dataSource = "warehouseDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, statements = {"DELETE FROM school WHERE id IN (-97)"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldCopyDistrictIfOneSchoolDeleted() {
        // Collect counts of rows in each staging code table before the step call
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        // Deleted school is copied, and so is district because school -97.
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_school", 1, "id IN (-99)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_district", 1, "id IN (-99)"));
        // Not deleted school is copied along with district.
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_school", 1, "id IN (-98)"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_district", 1, "id IN (-98)"));
        // Extra school
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "staging_school", 1, "id IN (-97)"));

        getStepExecutionContext().put(ExecutionParams.migrate,
                Migrate.builder().id(1L).jobId(1)
                        .status(MigrateStatus.STARTED)
                        .firstAt(firstAt)
                        .lastAt(lastAt)
                        .migrateCodes(true)
                        .build());

        launchStep(extractEntitiesStep);

        launchStep(loadEntitiesToStagingStep);
        verifyTableCountsAfterTest(tableTestCounts);
    }

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseImportSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseCodesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseCodesTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:WarehouseImportTeardown.sql"}, config = @SqlConfig(dataSource = "warehouseDatasource"))
    })
    @Test
    public void itShouldFailWithNoMigrateBatch() throws Exception {
        final JobExecution jobExecution = launchStep(extractEntitiesStep, ExitStatus.FAILED);
        assertThat(jobExecution.getStatus()).isEqualTo(BatchStatus.FAILED);
        assertThat(jobExecution.getExitStatus().getExitDescription()).contains("Exception");
        // Getting the next step returns failed status.
        assertThat(jobExecution.getStepExecutions().iterator().next().getStatus()).isEqualTo(BatchStatus.FAILED);
    }
}
