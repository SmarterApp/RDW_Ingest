package org.opentestsystem.rdw.ingest.migrate.olap;

import com.google.common.collect.ImmutableMap;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration;
import org.springframework.cloud.autoconfigure.RefreshAutoConfiguration;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

import org.opentestsystem.rdw.ingest.migrate.olap.repository.DataSourceConfiguration;
import org.opentestsystem.rdw.migrate.common.SimpleMigrateLifecycle;
import org.opentestsystem.rdw.migrate.common.TenantAwareMigrateLifecycle;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantProperties;
import org.opentestsystem.rdw.utils.YamlPropertiesConfigurator;

/**
 * This configures an application context that has just enough to test spring batch.
 */
@Configuration
@ComponentScan({"org.opentestsystem.rdw.ingest.migrate.olap.step", "org.opentestsystem.rdw.ingest.migrate.olap.repository.impl"})
@Import({
        ConfigurationPropertiesAutoConfiguration.class,
        RefreshAutoConfiguration.class,     // needed because of @RefreshScope for datasource properties
        YamlPropertiesConfigurator.class,
        MigrateOlapReportingConfiguration.class,
        MigrateOlapReportingToWarehouseSqlConfiguration.class,
        DataSourceConfiguration.class,
        ArchiveServiceConfiguration.class
})
@EnableBatchProcessing
@RefreshScope
class TestAppConfig {

    /**
     * This is needed because of MigrateEndpoint being in the application context.
     */
    @Bean
    public TenantAwareMigrateLifecycle simpleMigrateLifecycle() {
        return new SimpleMigrateLifecycle();
    }

    @Bean
    public TenantProperties tenantProperties() {
        final TenantProperties tenantProperties = new TenantProperties();
        tenantProperties.setTenants(ImmutableMap.of(
                "CA", Tenant.builder().id("CA").key("CA").name("California").build(),
                "NV", Tenant.builder().id("NV").key("NV").name("Nevada").build()
        ));
        return tenantProperties;
    }

}
