package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.junit.Test;
import org.opentestsystem.rdw.migrate.common.ExecutionParams;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.TableTestCountHelper;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import org.springframework.test.context.jdbc.SqlGroup;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig.deriveActiveAsmtStep;
import static org.opentestsystem.rdw.migrate.common.TableTestCountHelper.verifyTableCountsAfterTest;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.AFTER_TEST_METHOD;
import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD;


public class DeriveActiveAsmtStepRST extends MigrateStepRST {

    @SqlGroup({
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapAllCodesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            // the same script for staging is done twice intentionally to load duplicate data
            @Sql(executionPhase = BEFORE_TEST_METHOD, scripts = {"classpath:OlapEntitiesSetup.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),

            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingEntitiesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource")),
            @Sql(executionPhase = AFTER_TEST_METHOD, scripts = {"classpath:OlapAndStagingCodesTeardown.sql"}, config = @SqlConfig(dataSource = "olapDatasource"))
    })
    @Test
    public void itShouldDeriveActiveAsmt() {
        // collect counts of rows in each `reporting` code table before the step
        final List<TableTestCountHelper> tableTestCounts = newArrayList();
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "asmt_active_year", -1, "school_year = 1995"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "asmt_active_year", 1, "school_year = 1999 AND asmt_id = -11"));
        tableTestCounts.add(new TableTestCountHelper(olapJdbcTemplate.getJdbcOperations(), "asmt_active_year", 1, "school_year = 1999 AND asmt_id = -99"));

        getStepExecutionContext().put(ExecutionParams.migrate, Migrate.builder().migrateCodes(false).build());

        // run the step first time
        launchStep(deriveActiveAsmtStep);
        verifyTableCountsAfterTest(tableTestCounts);

        //repeat to verify that it is idempotent
        launchStep(deriveActiveAsmtStep);
        verifyTableCountsAfterTest(tableTestCounts);
    }
}
