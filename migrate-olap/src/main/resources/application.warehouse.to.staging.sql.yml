sql:
  warehouseToStage:
  # ------------ Truncate ------------------------------------------------------------------
    truncateStageList:
      - delete from staging_administration_condition
      - delete from staging_completeness
      - delete from staging_elas
      - delete from staging_ethnicity
      - delete from staging_gender
      - delete from staging_grade
      - delete from staging_school_year
      - delete from staging_subject
      - delete from staging_subject_claim_score
      - delete from staging_subject_asmt_type
      - delete from staging_target
      - delete from staging_school
      - delete from staging_district
      - delete from staging_district_group
      - delete from staging_school_group
      - delete from staging_district_embargo
      - delete from staging_state_embargo
      - delete from staging_student
      - delete from staging_student_ethnicity
      - delete from staging_asmt
      - delete from staging_asmt_target
      - delete from staging_asmt_target_exclusion
      - delete from staging_exam
      - delete from staging_exam_claim_score
      - delete from staging_exam_target_score

    entities:
        # ------------ administration_condition  -------------------------------------------------------------------
        administration_condition:
          sql:
            warehouseRead: >-
              SELECT
                id,
                code
              FROM administration_condition
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/administration_condition'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_administration_condition (id, code)
                FROM '${archive.root}/${migrate.aws.location}/administration_condition.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ completeness  -------------------------------------------------------------------
        completeness:
          sql:
            warehouseRead: >-
              SELECT
                id,
                code
              FROM completeness
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/completeness'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_completeness (id, code)
                FROM '${archive.root}/${migrate.aws.location}/completeness.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ elas  -------------------------------------------------------------------
        elas:
          sql:
            warehouseRead: >-
              SELECT
                id,
                code
              FROM elas
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/elas'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_elas (id, code)
                FROM '${archive.root}/${migrate.aws.location}/elas.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ ethnicity  -------------------------------------------------------------------
        ethnicity:
          sql:
            warehouseRead: >-
              SELECT
                id,
                code
              FROM ethnicity
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/ethnicity'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_ethnicity (id, code)
                FROM '${archive.root}/${migrate.aws.location}/ethnicity.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ gender  -------------------------------------------------------------------
        gender:
          sql:
            warehouseRead: >-
              SELECT
                id,
                code
              FROM gender
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/gender'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_gender (id, code)
                FROM '${archive.root}/${migrate.aws.location}/gender.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ grade  -------------------------------------------------------------
        grade:
          sql:
            warehouseRead: >-
              SELECT
                id,
                code,
                sequence
              FROM grade
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/grade'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_grade (id, code, sequence)
                FROM '${archive.root}/${migrate.aws.location}/grade.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ school_year  -------------------------------------------------------------------
        school_year:
          sql:
            warehouseRead: >-
              SELECT
                year
              FROM school_year
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/year'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_school_year (year)
                FROM '${archive.root}/${migrate.aws.location}/year.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ subject  -------------------------------------------------------------------
        #  a subject entity once created cannot be updated or deleted, only its slaved entities could be modified
        subject:
          sql:
            warehouseRead: >-
              SELECT
                id,
                code,
                updated,
                update_import_id,
                ? as migrate_id
              FROM subject ws
                WHERE ws.created > ? AND ws.created <= ?
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/subject'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_subject(
                id,
                code,
                updated,
                update_import_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/subject.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

        subject_update:
          sql:
            warehouseRead: >-
              SELECT
                id,
                code,
                updated,
                update_import_id,
                ? as migrate_id
              FROM subject ws
              WHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/subject_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_subject(
                id,
                code,
                updated,
                update_import_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/subject_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ target  -------------------------------------------------------------------
        # For Smarter Balanced Math, only the Concepts and Procedures targets are included
        target:
          sql:
            warehouseRead: >-
              SELECT
                wt.id,
                ws.id,
                wt.natural_id,
                wc.code,
                ? as migrate_id
              FROM target wt
                JOIN claim wc ON wc.id = wt.claim_id
                JOIN subject ws ON ws.id = wc.subject_id
              WHERE ( ws.code <> 'Math' OR wc.code='1' ) AND  ws.created > ? AND ws.created <= ?
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/target'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_target (id, subject_id, natural_id, claim_code, migrate_id)
                FROM '${archive.root}/${migrate.aws.location}/target.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        target_update:
          sql:
            warehouseRead: >-
              SELECT
                wt.id,
                ws.id,
                wt.natural_id,
                wc.code,
                ? as migrate_id
              FROM target wt
                JOIN claim wc ON wc.id = wt.claim_id
                JOIN subject ws ON ws.id = wc.subject_id
              WHERE ( ws.code <> 'Math' OR wc.code='1' ) AND ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/target_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_target (id, subject_id, natural_id, claim_code, migrate_id)
                FROM '${archive.root}/${migrate.aws.location}/target_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ subject asmt type  ---------------------------------------------------------------------------------------
        subject_asmt_type:
          sql:
            warehouseRead: >-
              SELECT
                wsat.asmt_type_id,
                wsat.subject_id,
                wsat.performance_level_count,
                wsat.performance_level_standard_cutoff,
                wsat.claim_score_performance_level_count,
                ? as migrate_id
              FROM subject_asmt_type wsat
                JOIN subject ws ON ws.id = wsat.subject_id
              WHERE ws.created > ? AND ws.created <= ?
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/subject_asmt_type'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_subject_asmt_type (asmt_type_id, subject_id, performance_level_count, performance_level_standard_cutoff, claim_score_performance_level_count, migrate_id)
                FROM '${archive.root}/${migrate.aws.location}/subject_asmt_type.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        subject_asmt_type_update:
          sql:
            warehouseRead: >-
              SELECT
                wsat.asmt_type_id,
                wsat.subject_id,
                wsat.performance_level_count,
                wsat.performance_level_standard_cutoff,
                wsat.claim_score_performance_level_count,
                ? as migrate_id
              FROM subject_asmt_type wsat
                JOIN subject ws ON ws.id = wsat.subject_id
              WHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/subject_asmt_type_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_subject_asmt_type (asmt_type_id, subject_id, performance_level_count, performance_level_standard_cutoff, claim_score_performance_level_count, migrate_id)
                FROM '${archive.root}/${migrate.aws.location}/subject_asmt_type_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ subject claim score  ---------------------------------------------------------------------------------------
        subject_claim_score:
          sql:
            warehouseRead: >-
              SELECT
                wscs.id,
                wscs.subject_id,
                wscs.asmt_type_id,
                wscs.code,
                ? as migrate_id
              FROM subject_claim_score wscs
                JOIN subject ws ON ws.id = wscs.subject_id
              WHERE ws.created > ? AND ws.created <= ?
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/subject_claim_score'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_subject_claim_score (id, subject_id, asmt_type_id, code, migrate_id)
                FROM '${archive.root}/${migrate.aws.location}/subject_claim_score.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        subject_claim_score_update:
          sql:
            warehouseRead: >-
              SELECT
                wscs.id,
                wscs.subject_id,
                wscs.asmt_type_id,
                wscs.code,
                ? as migrate_id
              FROM subject_claim_score wscs
                JOIN subject ws ON ws.id = wscs.subject_id
              WHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/subject_claim_score_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_subject_claim_score (id, subject_id, asmt_type_id, code, migrate_id)
                FROM '${archive.root}/${migrate.aws.location}/subject_claim_score_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ student  -------------------------------------------------------------------
        student:
          sql:
            warehouseRead: >-
              SELECT
                id,
                gender_id,
                deleted,
                updated,
                update_import_id,
                ? as migrate_id
              FROM student ws
                WHERE ws.created > ? AND ws.created <= ?
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/student'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_student(
                id,
                gender_id,
                deleted,
                updated,
                update_import_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/student.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

        student_update:
          sql:
            warehouseRead: >-
              SELECT
                id,
                gender_id,
                deleted,
                updated,
                update_import_id,
                ? as migrate_id
              FROM student ws
              WHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/student_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_student(
                id,
                gender_id,
                deleted,
                updated,
                update_import_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/student_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ student_ethnicity  -------------------------------------------------------------------
        student_ethnicity:
          sql:
            warehouseRead: >-
              SELECT
                ethnicity_id,
                student_id,
                ? as migrate_id
              FROM student_ethnicity
                JOIN student ws ON ws.id = student_ethnicity.student_id
              WHERE ws.created > ? AND ws.created <= ? AND ws.deleted = 0
                INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/student_ethnicity'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_student_ethnicity(
                ethnicity_id,
                student_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/student_ethnicity.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        student_ethnicity_update:
          sql:
            warehouseRead: >-
              SELECT
                ethnicity_id,
                student_id,
                ? as migrate_id
              FROM student_ethnicity
                JOIN student ws ON ws.id = student_ethnicity.student_id
              WHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created AND ws.deleted = 0
                INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/student_ethnicity_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_student_ethnicity (
                ethnicity_id,
                student_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/student_ethnicity_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

  # ------------ asmt  -------------------------------------------------------------------
        asmt:
          sql:
            warehouseRead: >-
              SELECT
                wa.id,
                wa.grade_id,
                wa.type_id,
                wa.school_year,
                wa.subject_id,
                wa.name,
                wa.label,
                round(was.cut_point_1) AS cut_point_1,
                round(was.cut_point_2) AS cut_point_2,
                round(was.cut_point_3) AS cut_point_3,
                round(was.cut_point_4) AS cut_point_4,
                round(was.cut_point_5) AS cut_point_5,
                round(was.min_score) AS min_score,
                round(was.max_score) AS max_score,
                wa.deleted,
                wa.updated,
                wa.update_import_id,
                ? as migrate_id
              FROM asmt wa JOIN asmt_score was ON wa.id = was.asmt_id
              WHERE wa.created > ? AND wa.created <= ?
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/asmt'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_asmt(
                id,
                grade_id,
                type_id,
                school_year,
                subject_id,
                name,
                label,
                cut_point_1,
                cut_point_2,
                cut_point_3,
                cut_point_4,
                cut_point_5,
                min_score,
                max_score,
                deleted,
                updated,
                update_import_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/asmt.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

        asmt_update:
          sql:
            warehouseRead: >-
              SELECT
                wa.id,
                wa.grade_id,
                wa.type_id,
                wa.school_year,
                wa.subject_id,
                wa.name,
                wa.label,
                round(was.cut_point_1) AS cut_point_1,
                round(was.cut_point_2) AS cut_point_2,
                round(was.cut_point_3) AS cut_point_3,
                round(was.cut_point_4) AS cut_point_4,
                round(was.cut_point_5) AS cut_point_5,
                round(was.min_score) AS min_score,
                round(was.max_score) AS max_score,
                wa.deleted,
                wa.updated,
                wa.update_import_id,
                ? as migrate_id
              FROM asmt wa JOIN asmt_score was ON wa.id = was.asmt_id
              WHERE wa.updated > ? AND wa.updated <= ? AND wa.updated <> wa.created
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/asmt_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_asmt(
                id,
                grade_id,
                type_id,
                school_year,
                subject_id,
                name,
                label,
                cut_point_1,
                cut_point_2,
                cut_point_3,
                cut_point_4,
                cut_point_5,
                min_score,
                max_score,
                deleted,
                updated,
                update_import_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/asmt_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

    # ------------ asmt_target_exclusion  -------------------------------------------------------------------
    # Only Summative target scores are included
    # For Smarter Balanced Math, only the Concepts and Procedures targets are included
        asmt_target_exclusion:
          sql:
            warehouseRead: >-
              SELECT
                wats.asmt_id,
                wats.target_id,
                ? as migrate_id
              FROM asmt_target_exclusion wats
                JOIN asmt wa ON wa.id = wats.asmt_id
                JOIN target wt ON wt.id = wats.target_id
                JOIN claim wc ON wc.id = wt.claim_id
                JOIN subject ws ON ws.id = wc.subject_id
              WHERE wa.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND
                 wa.created > ? AND wa.created <= ? AND wa.deleted = 0
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/exclusion_asmt_target'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_asmt_target_exclusion(
                asmt_id,
                target_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/exclusion_asmt_target.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

        asmt_target_exclusion_update:
          sql:
            warehouseRead: >-
              SELECT
                wats.asmt_id,
                wats.target_id,
                ? as migrate_id
              FROM asmt_target_exclusion wats
                 JOIN asmt wa ON wa.id = wats.asmt_id
                  JOIN target wt ON wt.id = wats.target_id
                  JOIN claim wc ON wc.id = wt.claim_id
                  JOIN subject ws ON ws.id = wc.subject_id
                WHERE wa.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND
                      wa.updated > ? AND wa.updated <= ? AND wa.updated <> wa.created AND wa.deleted = 0
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/exclusion_asmt_target_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_asmt_target_exclusion(
                asmt_id,
                target_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/exclusion_asmt_target_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

        # ------------ asmt_target  -------------------------------------------------------------------
        # Only Summative target scores are included
        # For Smarter Balanced Math, only the Concepts and Procedures targets are included
        #
        # Note: while target data are 'slaves' of the subject master entity, in this case we are concerned only about targets in the context
        # of the assessment package and therefore making it dependant on it.
        asmt_target:
          sql:
            warehouseRead: >-
              SELECT DISTINCT
                wi.asmt_id,
                wi.target_id,
                ? as migrate_id
              FROM item wi JOIN asmt wa ON wa.id = wi.asmt_id
                  JOIN target wt ON wt.id = wi.target_id
                  JOIN claim wc ON wc.id = wt.claim_id
                  JOIN subject ws ON ws.id = wc.subject_id
                WHERE wa.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND
                      wa.created > ? AND wa.created <= ? AND wa.deleted = 0
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/asmt_target'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_asmt_target(
                asmt_id,
                target_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/asmt_target.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

        asmt_target_update:
          sql:
            warehouseRead: >-
              SELECT DISTINCT
                wi.asmt_id,
                wi.target_id,
                ? as migrate_id
              FROM item wi JOIN asmt wa ON wa.id = wi.asmt_id
                JOIN target wt ON wt.id = wi.target_id
                JOIN claim wc ON wc.id = wt.claim_id
                JOIN subject ws ON ws.id = wc.subject_id
                WHERE wa.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND
                  wa.updated > ? AND wa.updated <= ? AND wa.updated <> wa.created AND wa.deleted = 0
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/asmt_target_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_asmt_target(
                asmt_id,
                target_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/asmt_target_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

  # ------------ school  -------------------------------------------------------------------
        school:
          sql:
            warehouseRead: >-
              SELECT
                id,
                district_id,
                name,
                natural_id,
                external_id,
                school_group_id,
                district_group_id,
                deleted,
                updated,
                update_import_id,
                ? as migrate_id
              FROM school ws
              WHERE ws.created > ? AND ws.created <= ?
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/school'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_school(
                id,
                district_id,
                name,
                natural_id,
                external_id,
                school_group_id,
                district_group_id,
                deleted,
                updated,
                update_import_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/school.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

        school_update:
          sql:
            warehouseRead: >-
              SELECT
                id,
                district_id,
                name,
                natural_id,
                external_id,
                school_group_id,
                district_group_id,
                deleted,
                updated,
                update_import_id,
                ? as migrate_id
              FROM school ws
              WHERE ws.updated > ? AND ws.updated <= ? AND ws.updated <> ws.created
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/school_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_school(
                id,
                district_id,
                name,
                natural_id,
                external_id,
                school_group_id,
                district_group_id,
                deleted,
                updated,
                update_import_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/school_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

  # ------------ district  -------------------------------------------------------------------
        district:
          sql:
            warehouseRead: >-
              SELECT
                id,
                name,
                natural_id,
                external_id,
                ? as migrate_id
              FROM district wd
              WHERE EXISTS( SELECT id FROM school  WHERE created > ? AND created <= ? AND deleted = 0 AND district_id = wd.id)
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/district'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_district(
                id,
                name,
                natural_id,
                external_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/district.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        district_update:
          sql:
            warehouseRead: >-
              SELECT
                id,
                name,
                natural_id,
                external_id,
                ? as migrate_id
              FROM district wd
              WHERE EXISTS( SELECT id FROM school WHERE updated > ? AND updated <= ? AND updated <> created AND deleted = 0 AND district_id = wd.id)
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/district_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                             LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_district(
                id,
                name,
                natural_id,
                external_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/district_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

 # ------------ district_group  -------------------------------------------------------------------
        district_group:
          sql:
            warehouseRead: >-
              SELECT
                id,
                name,
                natural_id,
                external_id,
                ? as migrate_id
              FROM district_group wdg
                WHERE EXISTS( SELECT id FROM school  WHERE created > ? AND created <= ? AND deleted = 0 AND district_group_id = wdg.id)
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/dstrgroup'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_district_group(
                id,
                name,
                natural_id,
                external_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/dstrgroup.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        district_group_update:
          sql:
            warehouseRead: >-
              SELECT
                id,
                name,
                natural_id,
                external_id,
                ? as migrate_id
              FROM district_group wdg
               WHERE EXISTS( SELECT id FROM school WHERE updated > ? AND updated <= ? AND updated <> created AND deleted = 0 AND district_group_id = wdg.id)
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/dstrgroup_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_district_group(
                id,
                name,
                natural_id,
                external_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/dstrgroup_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

 # ------------ school_group  -------------------------------------------------------------------
        school_group:
          sql:
            warehouseRead: >-
              SELECT
                id,
                name,
                natural_id,
                external_id,
                ? as migrate_id
              FROM school_group wsg
               WHERE EXISTS( SELECT id FROM school  WHERE created > ? AND created <= ? AND deleted = 0 AND school_group_id = wsg.id)
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/schgroup'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_school_group(
                id,
                name,
                natural_id,
                external_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/schgroup.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        school_group_update:
          sql:
            warehouseRead: >-
              SELECT
                id,
                name,
                natural_id,
                external_id,
                ? as migrate_id
              FROM school_group wdg
               WHERE EXISTS( SELECT id FROM school WHERE updated > ? AND updated <= ? AND updated <> created AND deleted = 0 AND school_group_id = wdg.id)
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/schgroup_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_school_group(
                id,
                name,
                natural_id,
                external_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/schgroup_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

 # ------------ exam  -------------------------------------------------------------------
        exam:
          sql:
            warehouseRead: >-
              SELECT
                id,
                student_id,
                grade_id,
                school_id,
                iep,
                lep,
                section504,
                economic_disadvantage,
                migrant_status,
                type_id,
                school_year,
                asmt_id,
                elas_id,
                completeness_id,
                administration_condition_id,
                scale_score,
                performance_level,
                completed_at,
                deleted,
                updated,
                update_import_id,
               ? as migrate_id
              FROM exam we
                WHERE we.created > ? AND we.created <= ? AND we.scale_score IS NOT NULL AND we.scale_score_std_err IS NOT NULL AND we.performance_level IS NOT NULL
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/exam'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_exam(
                id,
                student_id,
                grade_id,
                school_id,
                iep,
                lep,
                section504,
                economic_disadvantage,
                migrant_status,
                type_id,
                school_year,
                asmt_id,
                elas_id,
                completeness_id,
                administration_condition_id,
                scale_score,
                performance_level,
                completed_at,
                deleted,
                updated,
                update_import_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/exam.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

        exam_update:
          sql:
            warehouseRead: >-
              SELECT
                id,
                student_id,
                grade_id,
                school_id,
                iep,
                lep,
                section504,
                economic_disadvantage,
                migrant_status,
                type_id,
                school_year,
                asmt_id,
                elas_id,
                completeness_id,
                administration_condition_id,
                scale_score,
                performance_level,
                completed_at,
                deleted,
                updated,
                update_import_id,
               ? as migrate_id
              FROM exam we
              WHERE we.updated > ? AND we.updated <= ? AND we.updated <> we.created AND we.scale_score IS NOT NULL AND we.scale_score_std_err IS NOT NULL AND we.performance_level IS NOT NULL
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/exam_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_exam(
                id,
                student_id,
                grade_id,
                school_id,
                iep,
                lep,
                section504,
                economic_disadvantage,
                migrant_status,
                type_id,
                school_year,
                asmt_id,
                elas_id,
                completeness_id,
                administration_condition_id,
                scale_score,
                performance_level,
                completed_at,
                deleted,
                updated,
                update_import_id,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/exam_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              TIMEFORMAT 'auto'
              DELIMITER ','
              COMPUPDATE OFF

 # ------------ exam_claim_score  -------------------------------------------------------------------
        exam_claim_score:
          sql:
            warehouseRead: >-
              SELECT
                ecs.id,
                ecs.exam_id,
                ecs.subject_claim_score_id,
                ecs.category,
                ? as migrate_id
              FROM exam_claim_score ecs
                JOIN exam we ON we.id = ecs.exam_id
               WHERE we.created > ? AND we.deleted = 0 AND we.created <= ?
                AND we.scale_score IS NOT NULL AND we.scale_score_std_err IS NOT NULL AND we.performance_level IS NOT NULL
                AND ecs.category IS NOT NULL
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/exam_claim_score'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_exam_claim_score(
                id,
                exam_id,
                subject_claim_score_id,
                category,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/exam_claim_score.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        exam_claim_score_update:
          sql:
            warehouseRead: >-
              SELECT
                ecs.id,
                ecs.exam_id,
                ecs.subject_claim_score_id,
                ecs.category,
                ? as migrate_id
              FROM exam_claim_score ecs
                JOIN exam we ON we.id = ecs.exam_id
              WHERE we.updated > ? AND we.deleted = 0 AND we.updated <= ? AND we.updated <> we.created
                AND we.scale_score IS NOT NULL AND we.scale_score_std_err IS NOT NULL AND we.performance_level IS NOT NULL
                AND ecs.category IS NOT NULL
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/exam_claim_score_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_exam_claim_score(
                id,
                exam_id,
                subject_claim_score_id,
                category,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/exam_claim_score_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

 # ------------ exam_target_score  -------------------------------------------------------------------
       # Only Summative target scores are included
       # For Smarter Balanced Math, only the Concepts and Procedures targets are included
        exam_target_score:
          sql:
            warehouseRead: >-
              SELECT
                wets.id,
                wets.exam_id,
                wets.target_id,
                wets.student_relative_residual_score,
                wets.standard_met_relative_residual_score,
                ? as migrate_id
              FROM exam_target_score wets
                JOIN exam we ON wets.exam_id = we.id
                JOIN target wt ON wt.id = wets.target_id
                JOIN claim wc ON wc.id = wt.claim_id
                JOIN subject ws ON ws.id = wc.subject_id
              WHERE we.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND
                  we.created > ? AND we.deleted = 0 AND we.created <= ? AND
                  we.scale_score IS NOT NULL AND we.scale_score_std_err IS NOT NULL AND we.performance_level IS NOT NULL AND
                  wets.standard_met_relative_residual_score IS NOT NULL AND wets.student_relative_residual_score IS NOT NULL
                INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/exam_target_score'
                FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_exam_target_score(
                id,
                exam_id,
                target_id,
                student_relative_residual_score,
                standard_met_relative_residual_score,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/exam_target_score.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

        exam_target_score_update:
          sql:
            warehouseRead: >-
              SELECT
                wets.id,
                wets.exam_id,
                wets.target_id,
                wets.student_relative_residual_score,
                wets.standard_met_relative_residual_score,
                ? as migrate_id
              FROM exam_target_score wets
                JOIN exam we ON wets.exam_id = we.id
                JOIN target wt ON wt.id = wets.target_id
                JOIN claim wc ON wc.id = wt.claim_id
                JOIN subject ws ON ws.id = wc.subject_id
              WHERE we.type_id = 3 AND ( ws.code <> 'Math' OR wc.code='1' ) AND
                we.updated > ? AND we.deleted = 0 AND we.updated <= ? AND we.updated <> we.created AND
                we.scale_score IS NOT NULL AND we.scale_score_std_err IS NOT NULL AND we.performance_level IS NOT NULL AND
                wets.standard_met_relative_residual_score IS NOT NULL AND wets.student_relative_residual_score IS NOT NULL
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/exam_target_score_update'
              FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
              LINES TERMINATED BY '\n'

            stagingInsert: >-
              COPY staging_exam_target_score(
                id,
                exam_id,
                target_id,
                student_relative_residual_score,
                standard_met_relative_residual_score,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/exam_target_score_update.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

# ------------ district_embargo  -------------------------------------------------------------------
        district_embargo:
          sql:
            warehouseRead:
              SELECT
                e.district_id,
                e.aggregate,
                ? as migrate_id
              FROM (${sql.embargo}) e
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/embargo'
                FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                LINES TERMINATED BY '\n'

            stagingInsert:
              COPY staging_district_embargo (
                district_id,
                aggregate,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/embargo.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF

# ------------ district_embargo  -------------------------------------------------------------------
        state_embargo:
          sql:
            warehouseRead:
              SELECT
                IF(aggregate = 0, 0, 1) AS aggregate,
                ? as migrate_id
              FROM state_embargo
              WHERE school_year = ${reporting.school-year}
              INTO OUTFILE S3 '${archive.root}/${migrate.aws.location}/state_embargo'
                FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
                LINES TERMINATED BY '\n'

            stagingInsert:
              COPY staging_state_embargo (
                aggregate,
                migrate_id)
              FROM '${archive.root}/${migrate.aws.location}/state_embargo.part_00000'
              CREDENTIALS 'aws_iam_role=${migrate.aws.redshift.role}'
              FORMAT AS CSV
              DELIMITER ','
              COMPUPDATE OFF
