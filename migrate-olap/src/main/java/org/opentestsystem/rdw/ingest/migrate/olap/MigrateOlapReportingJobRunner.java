package org.opentestsystem.rdw.ingest.migrate.olap;

import org.opentestsystem.rdw.migrate.common.MigrateJobRunner;
import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;
import org.opentestsystem.rdw.migrate.common.repository.WarehouseImportRepository;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Import;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;

/**
 * Scheduled execution of the {@link MigrateOlapReportingConfiguration#jobBuilderFactory}'s job.
 * It skips job execution while paused or disabled. It is paused using Spring's Lifecycle
 * start/stop (which can be set using the pause/resume actuator end-points). It is disabled
 * if there are any unresolved migrations in the database. An unresolved migration is any
 * that has a status of FAILED or STARTED. To enable, any such migrate records should be set
 * to ABANDONED with a message.
 */
@EnableScheduling
@Component
@Import({MigrateOlapReportingConfiguration.class})
class MigrateOlapReportingJobRunner extends MigrateJobRunner {
    @Autowired
    public MigrateOlapReportingJobRunner(final MigrateRepository migrateRepository,
                                         final WarehouseImportRepository importRepository,
                                         final JobLauncher jobLauncher,
                                         final Job job,
                                         @Value("${migrate.olap-batch.size}") final int batchSize) {
        super(migrateRepository, importRepository, jobLauncher, job, batchSize, false);
    }

    @PostConstruct
    @Scheduled(cron = "${migrate.olap-batch.run-cron}", zone = "GMT")
    @Override
    public void run(){
        super.run();
    }
}