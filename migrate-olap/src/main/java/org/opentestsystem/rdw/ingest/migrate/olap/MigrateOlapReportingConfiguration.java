package org.opentestsystem.rdw.ingest.migrate.olap;

import org.opentestsystem.rdw.ingest.migrate.olap.step.CleanupLandingLocation;
import org.opentestsystem.rdw.ingest.migrate.olap.step.OlapReportingMigrateStepsConfig;
import org.opentestsystem.rdw.migrate.common.MigrateJobExecutionListener;
import org.opentestsystem.rdw.migrate.common.MigrateJobProcessor;
import org.opentestsystem.rdw.migrate.common.TenantAwareMigrateJobHandler;
import org.opentestsystem.rdw.migrate.common.repository.MigrateRepository;
import org.opentestsystem.rdw.migrate.common.repository.WarehouseImportRepository;
import org.opentestsystem.rdw.multitenant.TenantIdResolver;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.autoconfigure.RefreshAutoConfiguration;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

/**
 * MigrateReportingConfiguration.
 * Spring Batch configuration for the migrate to reporting {@link Job}.
 */
@Configuration
@EnableBatchProcessing
@Import({OlapReportingMigrateStepsConfig.class,
        RefreshAutoConfiguration.class})
@EnableBinding(MigrateJobProcessor.class)
@RefreshScope
public class MigrateOlapReportingConfiguration {
    private static final Logger logger = LoggerFactory.getLogger(MigrateOlapReportingConfiguration.class);

    final JobBuilderFactory jobBuilderFactory;
    private final StepBuilderFactory stepBuilderFactory;

    @Autowired
    public MigrateOlapReportingConfiguration(final JobBuilderFactory jobBuilderFactory,
                                             final StepBuilderFactory stepBuilderFactory) {

        this.jobBuilderFactory = jobBuilderFactory;
        this.stepBuilderFactory = stepBuilderFactory;
    }

    @Bean
    public JobExecutionListener listener(final MigrateRepository migrateRepository,
                                         final TenantIdResolver tenantIdResolver) {
        return new MigrateJobExecutionListener(migrateRepository, tenantIdResolver);
    }

    @Bean
    public Job migrateReportingJob(final JobExecutionListener listener,
                                   final Step cleanupLandingLocationStep,
                                   final Step truncateBeforeStageStep,
                                   final Step extractCodesStep,
                                   final Step extractEmbargoStep,
                                   final Step extractEntitiesStep,
                                   final Step loadCodesToStagingStep,
                                   final Step loadEmbargoToStagingStep,
                                   final Step loadEntitiesToStagingStep,
                                   final Step upsertCodesStep,
                                   final Step upsertSubjectsStep,
                                   final Step upsertOrganizationsStep,
                                   final Step updateEmbargoStep,
                                   final Step upsertAsmtsStep,
                                   final Step upsertFactsStep,
                                   final Step deleteEntitiesStep,
                                   final Step deleteCodesStep,
                                   final Step upsertStudentsStep,
                                   final Step deriveActiveAsmtStep,
                                   final Step truncateAfterStageStep,
                                   final Step finalizeStep) {
        try {

            return jobBuilderFactory.get("Migrate OLAP Reporting Job")
                    .preventRestart()
                    .listener(listener)
                    .start(cleanupLandingLocationStep)
                    .next(truncateBeforeStageStep)
                    .next(extractCodesStep)
                    .next(extractEmbargoStep)
                    .next(extractEntitiesStep)
                    .next(loadCodesToStagingStep)
                    .next(loadEmbargoToStagingStep)
                    .next(loadEntitiesToStagingStep)
                    .next(upsertCodesStep)
                    .next(deleteEntitiesStep)
                    .next(upsertSubjectsStep)
                    .next(upsertOrganizationsStep)
                    .next(updateEmbargoStep)
                    .next(upsertAsmtsStep)
                    .next(upsertStudentsStep)
                    .next(upsertFactsStep)
                    .next(deleteCodesStep)
                    .next(deriveActiveAsmtStep)
                    .next(truncateAfterStageStep)
                    .next(finalizeStep)
                    .build();
        } catch (final Exception e) {
            logger.error("Failed to create migrate reporting job bean", e);
            return null;
        }
    }

    @Bean
    public TenantAwareMigrateJobHandler tenantAwareMigrateJobHandler(
            final MigrateRepository migrateRepository,
            final WarehouseImportRepository importRepository,
            final TenantIdResolver tenantIdResolver,
            final JobLauncher jobLauncher,
            final Job job,
            @Value("${migrate.olap-batch.size}") final int batchSize,
            final MigrateJobProcessor migrateJobProcessor) {

        return new TenantAwareMigrateJobHandler(
                migrateRepository,
                importRepository,
                tenantIdResolver,
                jobLauncher,
                job,
                batchSize,
                migrateJobProcessor);
    }

    @Bean
    public Step cleanupLandingLocationStep(final CleanupLandingLocation cleanupLandingLocation) {
        return stepBuilderFactory.get("cleanupLandingZone")
                .tasklet(cleanupLandingLocation).build();
    }
}
