package org.opentestsystem.rdw.ingest.migrate.olap.step;

import org.opentestsystem.rdw.ingest.migrate.olap.repository.SqlListExecutionWithMigrateRepository;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.step.StepTasklet;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;


/**
 * A step for executing {@link SqlListExecutionWithMigrateRepository#execute(Iterable, Long)} if {@link Migrate#isMigrateEmbargo()} is true.
 */
public class SqlListEmbargoWithParamExecutionStep extends StepTasklet {
    private final SqlListExecutionWithMigrateRepository repository;
    private final Iterable<String> sqls;

    /**
     * Constructor
     *
     * @param repository the repository
     * @param sqls       the sqls to be executed by this step
     */
    SqlListEmbargoWithParamExecutionStep(final SqlListExecutionWithMigrateRepository repository,
                                         final Iterable<String> sqls) {
        this.sqls = sqls;
        this.repository = repository;
    }

    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {
        final Migrate migrate = getJobBatch(chunkContext);
        if (migrate.isMigrateEmbargo()) {
            repository.execute(sqls, migrate.getId());
        }
        return RepeatStatus.FINISHED;
    }
}