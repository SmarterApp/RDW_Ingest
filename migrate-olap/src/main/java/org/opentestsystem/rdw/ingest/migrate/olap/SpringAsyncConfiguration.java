package org.opentestsystem.rdw.ingest.migrate.olap;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.SimpleAsyncTaskExecutor;
import org.springframework.scheduling.annotation.EnableAsync;

import java.util.ArrayDeque;
import java.util.Queue;
import java.util.concurrent.Executor;

/**
 * Configuration defining custom Executors to use with Spring's @Async annotation.
 */
@Configuration
@EnableAsync
public class SpringAsyncConfiguration {

    /**
     * SerialExecutor based on the implementation described in the {@link Executor} API docs.
     *
     * @return an Executor that will enforce that one job finishes before the next can begin
     */
    @Bean(name = "serialExecutor")
    public Executor serialExecutor() {
        return new SerialExecutor(new SimpleAsyncTaskExecutor());
    }

    // Serial Executor adapted from java.util.Executor java docs.
    private static class SerialExecutor implements Executor {
        final Queue<Runnable> tasks = new ArrayDeque<>();
        final Executor executor;
        Runnable active;

        SerialExecutor(Executor executor) {
            this.executor = executor;
        }

        public synchronized void execute(final Runnable r) {
            tasks.offer(() -> {
                try {
                    r.run();
                } finally {
                    scheduleNext();
                }
            });

            if (active == null) {
                scheduleNext();
            }
        }

        private synchronized void scheduleNext() {
            if ((active = tasks.poll()) != null) {
                executor.execute(active);
            }
        }
    }
}