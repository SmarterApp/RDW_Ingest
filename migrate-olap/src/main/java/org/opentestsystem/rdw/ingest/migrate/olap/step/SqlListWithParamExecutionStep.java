package org.opentestsystem.rdw.ingest.migrate.olap.step;

import com.google.common.annotations.VisibleForTesting;
import org.opentestsystem.rdw.ingest.migrate.olap.repository.SqlListExecutionWithMigrateRepository;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.step.StepTasklet;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

import static com.google.common.collect.Lists.newArrayList;

/**
 * A generic step for executing {@link SqlListWithParamExecutionStep#sqls} in the given order
 */
class SqlListWithParamExecutionStep extends StepTasklet {
    private final SqlListExecutionWithMigrateRepository repository;
    private final Iterable<String> sqls;

    /**
     * Constructor
     *
     * @param repository the repository
     * @param sqls       the sqls to be executed by this step
     */
    public SqlListWithParamExecutionStep(final SqlListExecutionWithMigrateRepository repository,
                                         final Iterable<String> sqls) {
        this.sqls = sqls;
        this.repository = repository;
    }

    @Override
    public RepeatStatus execute(final StepContribution contribution, final ChunkContext chunkContext) throws Exception {
        final Migrate migrate = getJobBatch(chunkContext);
        repository.execute(sqls, migrate);
        return RepeatStatus.FINISHED;
    }

    @VisibleForTesting
    Iterable<String> getSqls() {
        return newArrayList(sqls);
    }
}
