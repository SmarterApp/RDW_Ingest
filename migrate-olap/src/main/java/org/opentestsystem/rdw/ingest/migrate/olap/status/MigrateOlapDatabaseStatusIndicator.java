package org.opentestsystem.rdw.ingest.migrate.olap.status;

import com.google.common.collect.ImmutableMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Component;

import java.sql.Timestamp;
import java.time.Instant;
import java.util.List;
import org.opentestsystem.rdw.common.status.AbstractStatusIndicator;
import org.opentestsystem.rdw.common.status.DiagnosticLevel;
import org.opentestsystem.rdw.common.status.Status;
import org.opentestsystem.rdw.multitenant.Tenant;
import org.opentestsystem.rdw.multitenant.TenantContextHolder;
import org.opentestsystem.rdw.multitenant.TenantProperties;

import static com.google.common.collect.Lists.newArrayList;

/**
 * An {@link AbstractStatusIndicator} for the OLAP database status.
 * <p>
 * Slightly different than web diagnostic spec this adds "databaseOperations",
 * each being a Status with "type" (READ/WRITE), and "responseTime".
 * </p>
 */
@Component
public class MigrateOlapDatabaseStatusIndicator extends AbstractStatusIndicator {

    private final NamedParameterJdbcTemplate olapJdbcTemplate;
    private final TenantProperties tenantProperties;

    @Autowired
    public MigrateOlapDatabaseStatusIndicator(
            @Qualifier("olapJdbcTemplate") final NamedParameterJdbcTemplate olapJdbcTemplate,
            final TenantProperties tenantProperties) {
        this.olapJdbcTemplate = olapJdbcTemplate;
        this.tenantProperties = tenantProperties;
    }

    @Override
    public String name() {
        return "OLAP-database";
    }

    @Override
    protected boolean doLevelCheck(final int level) {
        return DiagnosticLevel.ReadDatabase.isLessThanOrEqualTo(level);
    }

    @Override
    protected void doStatusCheck(final Status.Builder builder, final int level) {
        for (final Tenant tenant : tenantProperties.getTenants().values()) {
            TenantContextHolder.setTenantId(tenant.getId());

            final List<Status> ops = doOlapStatusCheck(level);
            builder.detail("databaseOperations - " + tenant.getId(), ops);
            builder.worstRating(ops);

            TenantContextHolder.clear();
        }
    }

    private List<Status> doOlapStatusCheck(final int level) {
        final List<Status> ops = newArrayList();

        if (DiagnosticLevel.ReadDatabase.isLessThanOrEqualTo(level)) {
            final Status.Builder builder = Status.builder().detail("type", "READ");
            responseTime(builder, 10000, () ->
                    olapJdbcTemplate.queryForList("SELECT * FROM status_indicator", ImmutableMap.of()));
            ops.add(builder.build());
        }

        if (DiagnosticLevel.WriteDatabase.isLessThanOrEqualTo(level)) {
            final Status.Builder builder = Status.builder().detail("type", "WRITE");
            responseTime(builder, 10000, () ->
                    olapJdbcTemplate.update("UPDATE status_indicator SET updated = :now WHERE id = :id",
                            ImmutableMap.of("now", Timestamp.from(Instant.now()), "id", 1)));
            ops.add(builder.build());
        }

        return ops;
    }
}
