package org.opentestsystem.rdw.ingest.migrate.olap.repository.impl;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.PreparedStatement;
import java.sql.Timestamp;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.ingest.migrate.olap.repository.SqlListExecutionWithMigrateRepository;
import org.opentestsystem.rdw.migrate.common.Migrate;
import org.opentestsystem.rdw.migrate.common.config.ReportingSystemProperties;

/**
 * Jdbc implementation of {@link SqlListExecutionWithMigrateRepository} on the warehouse datamart
 * that is aware of the migrate location placeholder.
 */
@Repository
class JdbcWarehouseSqlListExecutionRepository extends JdbcSqlListPlaceholderExecutionRepository implements SqlListExecutionWithMigrateRepository {

    private final ReportingSystemProperties reportingSystemProperties;

    /**
     * Constructor
     *
     * @param jdbcTemplate   the warehouse jdbc template
     * @param archiveService used to determine where to put temporary migrate files
     */
    public JdbcWarehouseSqlListExecutionRepository(
            @Qualifier("warehouseJdbcTemplate") final NamedParameterJdbcTemplate jdbcTemplate,
            final ArchiveService archiveService,
            final ReportingSystemProperties reportingSystemProperties) {
        super(jdbcTemplate, archiveService);
        this.reportingSystemProperties = reportingSystemProperties;
    }

    @Override
    @Transactional
    public void execute(final Iterable<String> sqls, final Migrate migrate) {
        for (final String sql : checkSql(sqls)) {
            getJdbcTemplate().execute(sql,
                    new MapSqlParameterSource()
                            .addValue("system_school_year", reportingSystemProperties.getSchoolYear())
                            .addValue("migrate_id", migrate.getId())
                            .addValue("first_at", Timestamp.from(migrate.getFirstAt()))
                            .addValue("last_at", Timestamp.from(migrate.getLastAt())),
                    PreparedStatement::execute);
        }
    }

    @Override
    @Transactional
    public void execute(final Iterable<String> sqls, final Long migrateId) {
        for (final String sql : checkSql(sqls)) {
            getJdbcTemplate().execute(sql,
                    new MapSqlParameterSource()
                            .addValue("system_school_year", reportingSystemProperties.getSchoolYear())
                            .addValue("migrate_id", migrateId),
                    PreparedStatement::execute);
        }
    }
}
