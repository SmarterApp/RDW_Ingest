package org.opentestsystem.rdw.ingest.migrate.olap.repository.impl;

import org.opentestsystem.rdw.migrate.common.configuration.ReportingSystemProperties;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Timestamp;

import org.opentestsystem.rdw.archive.ArchiveService;
import org.opentestsystem.rdw.ingest.migrate.olap.repository.SqlListExecutionWithMigrateRepository;
import org.opentestsystem.rdw.migrate.common.Migrate;

/**
 * Jdbc implementation of {@link SqlListExecutionWithMigrateRepository} on the warehouse datamart
 * that is aware of the migrate location placeholder.
 */
@Repository
class JdbcWarehouseSqlListExecutionRepository extends JdbcSqlListPlaceholderExecutionRepository implements SqlListExecutionWithMigrateRepository {

    private final ReportingSystemProperties reportingSystemProperties;

    /**
     * Constructor
     *
     * @param jdbcTemplate   the warehouse jdbc template
     * @param archiveService used to determine where to put temporary migrate files
     */
    public JdbcWarehouseSqlListExecutionRepository(
            @Qualifier("warehouseJdbcTemplate") final NamedParameterJdbcTemplate jdbcTemplate,
            final ArchiveService archiveService,
            @Qualifier("reportingSystemPropertiesResolver") final ReportingSystemProperties reportingSystemProperties) {
        super(jdbcTemplate, archiveService);
        this.reportingSystemProperties = reportingSystemProperties;
    }

    @Override
    @Transactional
    public void execute(final Iterable<String> sqls, final Migrate migrate) {
        for (final String sql : checkSql(sqls)) {
            getJdbcTemplate().execute(
                    sql,
                    new MapSqlParameterSource("system_school_year", reportingSystemProperties.getSchoolYear()),
                    (PreparedStatementCallback<Boolean>) ps -> {
                        ps.setLong(1, migrate.getId());
                        ps.setTimestamp(2, Timestamp.from(migrate.getFirstAt()));
                        ps.setTimestamp(3, Timestamp.from(migrate.getLastAt()));
                        return ps.execute();
                    });
        }
    }

    @Override
    @Transactional
    public void execute(final Iterable<String> sqls, final Long migrateId) {
        for (final String sql : checkSql(sqls)) {
            getJdbcTemplate().execute(
                    sql,
                    new MapSqlParameterSource("system_school_year", reportingSystemProperties.getSchoolYear()),
                    (PreparedStatementCallback<Boolean>) ps -> {
                        ps.setLong(1, migrateId);
                        return ps.execute();
                    });
        }
    }
}
