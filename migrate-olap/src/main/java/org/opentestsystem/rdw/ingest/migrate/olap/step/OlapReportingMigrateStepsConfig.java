package org.opentestsystem.rdw.ingest.migrate.olap.step;

import com.google.common.collect.Lists;
import org.opentestsystem.rdw.ingest.migrate.olap.MigrateOlapReportingToWarehouseSqlConfiguration;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;
import org.opentestsystem.rdw.ingest.common.repository.SqlListExecutionRepository;
import org.opentestsystem.rdw.ingest.common.util.SqlListBuilder;
import org.opentestsystem.rdw.ingest.migrate.olap.repository.SqlListExecutionWithMigrateRepository;
import org.opentestsystem.rdw.migrate.common.config.MigrateStagingToReportingSqlConfiguration;
import org.opentestsystem.rdw.migrate.common.config.MigrateWarehouseToStagingSqlConfiguration;
import org.opentestsystem.rdw.migrate.common.step.SqlListCodesExecutionStep;
import org.opentestsystem.rdw.migrate.common.step.SqlListExecutionStep;

import static com.google.common.collect.Lists.newArrayList;

/**
 * Configuration for batch steps responsible for moving the data from S3 to OLAP reporting.
 * <p>
 * Any SQL execution against statements from warehouseToStagingSqlConfiguration has to deal
 * with the $[migrateLocationPlaceholder] substitution.
 * </p>
 */
@Configuration
public class OlapReportingMigrateStepsConfig {
    private final StepBuilderFactory stepBuilderFactory;

    private final SqlListExecutionWithMigrateRepository warehouseSqlListExecutionRepository;
    private final SqlListExecutionRepository reportingSqlListPlaceholderExecutionRepository;
    private final SqlListExecutionRepository reportingSqlListExecutionRepository;

    private final MigrateStagingToReportingSqlConfiguration stagingToReportingSqlConfiguration;
    private final MigrateWarehouseToStagingSqlConfiguration warehouseToStagingSqlConfiguration;
    private final MigrateOlapReportingToWarehouseSqlConfiguration olapReportingToWarehouseSqlConfiguration;

    static final String stepTruncateStageName = "stepTruncateStage";
    static final String extractEntitiesStep = "extractEntitiesStep";
    static final String extractCodesStep = "extractCodesStep";
    static final String extractEmbargoStep = "extractEmbargoStep";
    static final String loadCodesToStagingStep = "loadCodesToStagingStep";
    static final String loadEmbargoToStagingStep = "loadEmbargoToStagingStep";
    static final String loadEntitiesToStagingStep = "loadEntitiesToStagingStep";
    static final String deriveActiveAsmtStep = "deriveActiveAsmtStep";

    static final String deleteCodesStepName = "deleteCodesStep";
    static final String upsertCodesStepName = "upsertCodesStep";
    static final String deleteEntitiesStepName = "deleteEntitiesStep";
    static final String upsertStudentsStepName = "upsertStudentsStep";
    static final String upsertSubjectsStepName = "upsertSubjectsStep";
    static final String upsertOrganizationsStepName = "upsertOrganizationsStep";
    static final String upsertAsmtsStepName = "upsertAsmtsStep";
    static final String upsertFactsStepName = "upsertFactsStep";
    static final String updateEmbargoStepName = "updateEmbargoStep";

    static final String extractExamCountStepName = "extractExamCountStep";
    static final String stageExamCountStepName = "stageExamCountStep";
    static final String copyExamCountStepName = "copyExamCountStep";

    static final String finalizeStepName = "finalize";

    public static final List<String> codes = newArrayList("administration_condition", "completeness",
            "elas", "ethnicity", "gender", "grade", "language", "military_connected", "school_year");

    static final List<String> warehouseEntities = newArrayList(
            "subject", "target", "subject_score", "subject_asmt_type", "subject_asmt_scoring",
            "asmt", "asmt_target_exclusion", "asmt_target",
            "district_group", "school_group", "school", "district",
            "student", "student_ethnicity",
            "exam", "exam_score", "exam_target_score");

    @Autowired
    public OlapReportingMigrateStepsConfig(final StepBuilderFactory stepBuilderFactory,
                                           final MigrateWarehouseToStagingSqlConfiguration warehouseToStagingSqlConfiguration,
                                           final MigrateStagingToReportingSqlConfiguration stagingToReportingSqlConfiguration,
                                           final MigrateOlapReportingToWarehouseSqlConfiguration olapReportingToWarehouseSqlConfiguration,
                                           @Qualifier("jdbcOlapSqlListExecutionRepository") final SqlListExecutionRepository reportingSqlListExecutionRepository,
                                           @Qualifier("jdbcOlapSqlListPlaceholderExecutionRepository") final SqlListExecutionRepository reportingSqlListPlaceholderExecutionRepository,
                                           final SqlListExecutionWithMigrateRepository warehouseSqlListExecutionRepository) {
        this.stepBuilderFactory = stepBuilderFactory;
        this.stagingToReportingSqlConfiguration = stagingToReportingSqlConfiguration;
        this.warehouseToStagingSqlConfiguration = warehouseToStagingSqlConfiguration;
        this.olapReportingToWarehouseSqlConfiguration = olapReportingToWarehouseSqlConfiguration;
        this.reportingSqlListPlaceholderExecutionRepository = reportingSqlListPlaceholderExecutionRepository;
        this.reportingSqlListExecutionRepository = reportingSqlListExecutionRepository;
        this.warehouseSqlListExecutionRepository = warehouseSqlListExecutionRepository;
    }

    @Bean
    public Step deleteEntitiesStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToReportingSqlConfiguration.getEntities());
        sqlsBuilder
                .addNext("exam_alt_score", "delete")
                .addNext("exam_claim_score", "delete")
                .addNext("exam_target_score", "delete")
                .addNext("exam", "delete")
                .addNext("iab_exam", "delete")
                .addNext("exam_longitudinal", "delete")
                .addNext("asmt_target", "delete")
                .addNext("asmt", "delete")
                .addNext("school", "delete")
                .addNext("district", "delete")
                .addNext("school_group", "delete")
                .addNext("district_group", "delete")
                .addNext("student_ethnicity", "delete")
                .addNext("student", "delete");

        return stepBuilderFactory.get(deleteEntitiesStepName)
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step upsertSubjectsStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToReportingSqlConfiguration.getEntities());
        sqlsBuilder
                .addNext("subject", "update")
                .addNext("subject", "insert")
                .addNext("target", "deleteAsPartOfParentUpdate")
                .addNext("target", "insert")
                .addNext("subject_score", "deleteAsPartOfParentUpdate")
                .addNext("subject_score", "insert")
                .addNext("subject_asmt_type", "deleteAsPartOfParentUpdate")
                .addNext("subject_asmt_type", "update")
                .addNext("subject_asmt_type", "insert");

        return stepBuilderFactory.get(upsertSubjectsStepName)
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step upsertStudentsStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToReportingSqlConfiguration.getEntities());
        sqlsBuilder
                .addNext("student", "update")
                .addNext("student", "insert")
                .addNext("student_ethnicity", "insert")
                .addNext("student_ethnicity", "deleteAsPartOfParentUpdate");

        return stepBuilderFactory.get(upsertStudentsStepName)
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step upsertOrganizationsStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToReportingSqlConfiguration.getEntities());
        sqlsBuilder.addNext("district_group", "update")
                .addNext("district_group", "insert")
                .addNext("district", "update")
                .addNext("district", "insert")
                .addNext("school_group", "update")
                .addNext("school_group", "insert")
                .addNext("school", "update")
                .addNext("school", "insert");

        return stepBuilderFactory.get(upsertOrganizationsStepName)
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step upsertAsmtsStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToReportingSqlConfiguration.getEntities());
        sqlsBuilder.addNext("asmt", "update")
                .addNext("asmt", "insert")
                .addNext("asmt_target", "deleteAsPartOfParentUpdate")
                .addNext("asmt_target", "insert")
                .addNext("asmt_target", "insertIncluded");

        return stepBuilderFactory.get(upsertAsmtsStepName)
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step upsertFactsStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToReportingSqlConfiguration.getEntities());
        sqlsBuilder
                .addNext("exam", "updateStagingLatestExam")
                .addNext("exam", "update")
                .addNext("exam", "insert")
                .addNext("iab_exam", "update")
                .addNext("iab_exam", "insert")
                .addNext("exam_alt_score", "deleteAsPartOfParentUpdate")
                .addNext("exam_alt_score", "insert")
                .addNext("exam_claim_score", "deleteAsPartOfParentUpdate")
                .addNext("exam_claim_score", "insert")
                .addNext("exam_target_score", "deleteAsPartOfParentUpdate")
                .addNext("exam_target_score", "insert")
                .addNext("exam_longitudinal", "resetStagingLatestExam")
                .addNext("exam_longitudinal", "updateStagingExamWithAsmtData")
                .addNext("exam_longitudinal", "updateStagingLatestExam")
                .addNext("exam_longitudinal", "update")
                .addNext("exam_longitudinal", "insert");

        return stepBuilderFactory.get(upsertFactsStepName)
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step deriveActiveAsmtStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToReportingSqlConfiguration.getEntities())
                .addNext("asmt_active_year", "delete")
                .addNext("asmt_active_year", "insert");

        return stepBuilderFactory.get(deriveActiveAsmtStep)
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step truncateBeforeStageStep() {
        return stepBuilderFactory.get(stepTruncateStageName + "Before")
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        warehouseToStagingSqlConfiguration.getTruncateStageList())).build();
    }

    @Bean
    public Step truncateAfterStageStep() {
        return stepBuilderFactory.get(stepTruncateStageName + "After")
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        warehouseToStagingSqlConfiguration.getTruncateStageList())).build();
    }

    @Bean
    public Step extractExamCountStep() {
        final List<String> sql = newArrayList();
        sql.addAll(olapReportingToWarehouseSqlConfiguration.getExtract());
        return stepBuilderFactory.get(extractExamCountStepName)
            .tasklet(new SqlListExecutionStep(reportingSqlListPlaceholderExecutionRepository, sql))
            .build();
    }

    @Bean
    public Step stageExamCountStep() {
        final List<String> sql = newArrayList();
        sql.addAll(olapReportingToWarehouseSqlConfiguration.getStage());
        return stepBuilderFactory.get(stageExamCountStepName)
            .tasklet(new SqlListExecutionStep(warehouseSqlListExecutionRepository, sql))
            .build();
    }

    @Bean
    public Step copyExamCountStep() {
        final List<String> sql = newArrayList();
        sql.addAll(olapReportingToWarehouseSqlConfiguration.getCopy());
        return stepBuilderFactory.get(copyExamCountStepName)
            .tasklet(new SqlListExecutionStep(warehouseSqlListExecutionRepository, sql))
            .build();
    }

    @Bean
    public Step finalizeStep() {
        return stepBuilderFactory.get(finalizeStepName)
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        stagingToReportingSqlConfiguration.getFinalizeList())).build();
    }

    @Bean
    public Step upsertCodesStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToReportingSqlConfiguration.getEntities());
        for (final String entity : codes) {
            sqlsBuilder.addNext(entity, "update").addNext(entity, "insert");
        }
        return stepBuilderFactory.get(upsertCodesStepName)
                .tasklet(new SqlListCodesExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step deleteCodesStep() {
        //delete has to be in the reverse order from the insert
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToReportingSqlConfiguration.getEntities());
        for (final String entity : Lists.reverse(codes)) {
            sqlsBuilder.addNext(entity, "delete");
        }
        return stepBuilderFactory.get(deleteCodesStepName)
                .tasklet(new SqlListCodesExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step extractCodesStep() {
        final List<String> sql = newArrayList();

        for (final String entity : codes) {
            sql.add(warehouseToStagingSqlConfiguration.getEntities().get(entity).getSql().get("warehouseRead"));
        }
        return stepBuilderFactory.get(extractCodesStep)
                .tasklet(new SqlListCodesExecutionStep(warehouseSqlListExecutionRepository, sql))
                .build();
    }

    @Bean
    public Step extractEmbargoStep() {
        final List<String> sql = newArrayList();
        sql.add(warehouseToStagingSqlConfiguration.getEntities().get("district_embargo").getSql().get("warehouseRead"));
        return stepBuilderFactory.get(extractEmbargoStep)
                .tasklet(new SqlListEmbargoWithParamExecutionStep(warehouseSqlListExecutionRepository, sql))
                .build();
    }

    @Bean
    public Step loadEmbargoToStagingStep() {
        final List<String> sql = newArrayList();
        sql.add(warehouseToStagingSqlConfiguration.getEntities().get("district_embargo").getSql().get("stagingInsert"));
        return stepBuilderFactory.get(loadEmbargoToStagingStep)
                .tasklet(new SqlListEmbargoExecutionStep(reportingSqlListPlaceholderExecutionRepository, sql))
                .build();
    }

    @Bean
    public Step updateEmbargoStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToReportingSqlConfiguration.getEntities());
        sqlsBuilder.addNext("district_embargo", "update")
                   .addNext("district_embargo", "insert");

        return stepBuilderFactory.get(updateEmbargoStepName)
                .tasklet(new SqlListEmbargoExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step loadCodesToStagingStep() {
        final List<String> sql = newArrayList();

        for (final String entity : codes) {
            sql.add(warehouseToStagingSqlConfiguration.getEntities().get(entity).getSql().get("stagingInsert"));
        }
        return stepBuilderFactory.get(loadCodesToStagingStep)
                .tasklet(new SqlListCodesExecutionStep(reportingSqlListPlaceholderExecutionRepository, sql))
                .build();
    }

    @Bean
    public Step extractEntitiesStep() {
        final List<String> sql = newArrayList();

        for (final String entity : warehouseEntities) {
            sql.add(warehouseToStagingSqlConfiguration.getEntities().get(entity).getSql().get("warehouseRead"));
            sql.add(warehouseToStagingSqlConfiguration.getEntities().get(entity + "_update").getSql().get("warehouseRead"));
        }
        return stepBuilderFactory.get(extractEntitiesStep)
                .tasklet(new SqlListWithParamExecutionStep(warehouseSqlListExecutionRepository, sql))
                .build();
    }

    @Bean
    public Step loadEntitiesToStagingStep() {
        final List<String> sql = newArrayList();

        for (final String entity : warehouseEntities) {
            sql.add(warehouseToStagingSqlConfiguration.getEntities().get(entity).getSql().get("stagingInsert"));
            sql.add(warehouseToStagingSqlConfiguration.getEntities().get(entity + "_update").getSql().get("stagingInsert"));
        }
        return stepBuilderFactory.get(loadEntitiesToStagingStep)
                .tasklet(new SqlListExecutionStep(reportingSqlListPlaceholderExecutionRepository, sql))
                .build();
    }
}
