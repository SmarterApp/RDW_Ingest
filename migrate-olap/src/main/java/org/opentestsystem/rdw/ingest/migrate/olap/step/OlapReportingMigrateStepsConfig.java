package org.opentestsystem.rdw.ingest.migrate.olap.step;

import com.google.common.collect.Lists;
import org.opentestsystem.rdw.ingest.common.repository.SqlListExecutionRepository;
import org.opentestsystem.rdw.ingest.common.util.SqlListBuilder;
import org.opentestsystem.rdw.ingest.migrate.olap.repository.SqlListExecutionWithMigrateRepository;
import org.opentestsystem.rdw.migrate.common.config.MigrateStagingToWarehouseSqlConfiguration;
import org.opentestsystem.rdw.migrate.common.config.MigrateWarehouseToStagingSqlConfiguration;
import org.opentestsystem.rdw.migrate.common.step.SqlListCodesExecutionStep;
import org.opentestsystem.rdw.migrate.common.step.SqlListExecutionStep;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

import static com.google.common.collect.Lists.newArrayList;

/**
 * Configuration for batch steps responsible for moving the data from S3 to OLAP reporting
 */
@Configuration
public class OlapReportingMigrateStepsConfig {
    private final StepBuilderFactory stepBuilderFactory;

    private final SqlListExecutionWithMigrateRepository warehouseCopyRepository;
    private final SqlListExecutionRepository warehouseSqlListExecutionRepository;
    private final SqlListExecutionRepository reportingSqlListExecutionRepository;

    private final MigrateStagingToWarehouseSqlConfiguration stagingToWarehouseSqlConfiguration;
    private final MigrateWarehouseToStagingSqlConfiguration warehouseToStagingSqlConfiguration;

    static final String stepTruncateStageName = "stepTruncateStage";
    static final String extractEntitiesStep = "extractEntitiesStep";
    static final String extractCodesStep = "extractCodesStep";
    static final String loadToStagingStep = "loadToStagingStep";

    public static final String deleteCodesStepName = "deleteCodesStepName";
    public static final String upsertCodesStepName = "upsertCodesStepName";
    public static final String deleteEntitiesStepName = "deleteEntitiesStep";
    public static final String upsertStudentsAndGroupsStepName = "upsertStudentsAndGroupsStep";

    // Code entities, in the order to be staged due to the dependencies noted below
    static final List<String> codes = newArrayList("administration_condition", "completeness", "ethnicity", "gender", "grade");

    static final List<String> entities = newArrayList("student", "student_ethnicity");


    @Autowired
    public OlapReportingMigrateStepsConfig(final StepBuilderFactory stepBuilderFactory,
                                           final MigrateWarehouseToStagingSqlConfiguration warehouseToStagingSqlConfiguration,
                                           final MigrateStagingToWarehouseSqlConfiguration stagingToWarehouseSqlConfiguration,
                                           @Qualifier("jdbcOlapSqlListExecutionRepository") final SqlListExecutionRepository reportingSqlListExecutionRepository,
                                           @Qualifier("jdbcWarehouseSqlListExecutionRepository") final SqlListExecutionRepository warehouseSqlListExecutionRepository,
                                           final SqlListExecutionWithMigrateRepository warehouseCopyRepository) {
        this.stepBuilderFactory = stepBuilderFactory;
        this.stagingToWarehouseSqlConfiguration = stagingToWarehouseSqlConfiguration;
        this.warehouseToStagingSqlConfiguration = warehouseToStagingSqlConfiguration;
        this.reportingSqlListExecutionRepository = reportingSqlListExecutionRepository;
        this.warehouseSqlListExecutionRepository = warehouseSqlListExecutionRepository;
        this.warehouseCopyRepository = warehouseCopyRepository;
    }

    @Bean
    public Step deleteEntitiesStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        for (final String entity : Lists.reverse(entities)) {
            sqlsBuilder.addNext(entity, "delete");
        }
        return stepBuilderFactory.get(deleteEntitiesStepName)
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step upsertStudentsAndGroupsStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        sqlsBuilder
                .addNext("student", "update")
                .addNext("student", "insert");

        return stepBuilderFactory.get(upsertStudentsAndGroupsStepName)
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step truncateBeforeStageStep() {
        return stepBuilderFactory.get(stepTruncateStageName + "Before")
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        warehouseToStagingSqlConfiguration.getTruncateStageList())).build();
    }

    @Bean
    public Step truncateAfterStageStep() {
        return stepBuilderFactory.get(stepTruncateStageName + "After")
                .tasklet(new SqlListExecutionStep(
                        reportingSqlListExecutionRepository,
                        warehouseToStagingSqlConfiguration.getTruncateStageList())).build();
    }

    @Bean
    public Step upsertCodesStep() {
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        for (final String entity : codes) {
            sqlsBuilder.addNext(entity, "update").addNext(entity, "insert");
        }
        return stepBuilderFactory.get(upsertCodesStepName)
                .tasklet(new SqlListCodesExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step deleteCodesStep() {
        //delete has to be in the reverse order from the insert
        final SqlListBuilder sqlsBuilder = new SqlListBuilder(stagingToWarehouseSqlConfiguration.getEntities());
        for (final String entity : Lists.reverse(codes)) {
            sqlsBuilder.addNext(entity, "delete");
        }
        return stepBuilderFactory.get(deleteCodesStepName)
                .tasklet(new SqlListCodesExecutionStep(
                        reportingSqlListExecutionRepository,
                        sqlsBuilder.build())).build();
    }

    @Bean
    public Step extractCodesStep() {
        final List<String> sql = newArrayList();

        for (final String entity : codes) {
            sql.add(warehouseToStagingSqlConfiguration.getEntities().get(entity).getSql().get("warehouseRead"));
        }
        return stepBuilderFactory.get(extractCodesStep)
                .tasklet(new SqlListExecutionStep(warehouseSqlListExecutionRepository, sql))
                .build();
    }

    @Bean
    public Step extractEntitiesStep() {
        final List<String> sql = newArrayList();

        for (final String entity : entities) {
            sql.add(warehouseToStagingSqlConfiguration.getEntities().get(entity).getSql().get("warehouseRead"));
            sql.add(warehouseToStagingSqlConfiguration.getEntities().get(entity + "_update").getSql().get("warehouseRead"));
        }
        return stepBuilderFactory.get(extractEntitiesStep)
                .tasklet(new SqlListWithParamExecutionStep(warehouseCopyRepository, sql))
                .build();
    }

    @Bean
    public Step loadToStagingStep() {
        final List<String> sql = newArrayList();

        for (final String entity : codes) {
            sql.add(warehouseToStagingSqlConfiguration.getEntities().get(entity).getSql().get("stagingInsert"));
        }
        for (final String entity : entities) {
            sql.add(warehouseToStagingSqlConfiguration.getEntities().get(entity).getSql().get("stagingInsert"));
        }
        return stepBuilderFactory.get(loadToStagingStep)
                .tasklet(new SqlListExecutionStep(reportingSqlListExecutionRepository, sql))
                .build();
    }
}
